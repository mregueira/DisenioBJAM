
COMECA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001667c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003228  08016810  08016810  00026810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019a38  08019a38  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08019a38  08019a38  00029a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019a40  08019a40  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019a40  08019a40  00029a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019a44  08019a44  00029a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08019a48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008ee4  20000220  08019c68  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009104  08019c68  00039104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049af9  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007adb  00000000  00000000  00079d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028a8  00000000  00000000  00081828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d48  00000000  00000000  000840d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000301ad  00000000  00000000  00086e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004473d  00000000  00000000  000b6fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e59b0  00000000  00000000  000fb702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e10b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c30c  00000000  00000000  001e1108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080167f4 	.word	0x080167f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	080167f4 	.word	0x080167f4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <getCaliperNumberGivenClockPin>:
static GPIO_TypeDef * CAL_DATA_PORT_MAPPING[NUMBER_OF_CALIPERS] = {GPIOE, GPIOB, GPIOA, GPIOE};
static uint16_t CAL_DATA_PIN_MAPPING[NUMBER_OF_CALIPERS] = {GPIO_PIN_11, GPIO_PIN_1, GPIO_PIN_0, GPIO_PIN_4};

static uint16_t CAL_CLK_MAPPING[NUMBER_OF_CALIPERS] = {CAL1_CLK_Pin, CAL2_CLK_Pin, CAL3_CLK_Pin, CAL4_CLK_Pin};

int getCaliperNumberGivenClockPin(uint16_t CLK_Pin){
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
	int i;
	for(i=0; i<NUMBER_OF_CALIPERS; i++) { if(CAL_CLK_MAPPING[i] == CLK_Pin){ break; } }
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	e009      	b.n	8000f84 <getCaliperNumberGivenClockPin+0x24>
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <getCaliperNumberGivenClockPin+0x3c>)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d006      	beq.n	8000f8c <getCaliperNumberGivenClockPin+0x2c>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3301      	adds	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	ddf2      	ble.n	8000f70 <getCaliperNumberGivenClockPin+0x10>
 8000f8a:	e000      	b.n	8000f8e <getCaliperNumberGivenClockPin+0x2e>
 8000f8c:	bf00      	nop
	return i;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	20000018 	.word	0x20000018

08000fa0 <getCaliperData>:

bool getCaliperData(caliper_number curr_caliper){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(CAL_DATA_PORT_MAPPING[curr_caliper],CAL_DATA_PIN_MAPPING[curr_caliper]);
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <getCaliperData+0x38>)
 8000fae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4909      	ldr	r1, [pc, #36]	; (8000fdc <getCaliperData+0x3c>)
 8000fb6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	f005 f909 	bl	80061d4 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	bf14      	ite	ne
 8000fc8:	2301      	movne	r3, #1
 8000fca:	2300      	moveq	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000010 	.word	0x20000010

08000fe0 <processBit>:

void processBit(caliper_number curr_caliper){
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	if(digimatic[curr_caliper].bit.index == 0){digimatic[curr_caliper].frame.data = 0;}
 8000fea:	79fa      	ldrb	r2, [r7, #7]
 8000fec:	492a      	ldr	r1, [pc, #168]	; (8001098 <processBit+0xb8>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	440b      	add	r3, r1
 8000ff8:	330e      	adds	r3, #14
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d109      	bne.n	8001014 <processBit+0x34>
 8001000:	79fa      	ldrb	r2, [r7, #7]
 8001002:	4925      	ldr	r1, [pc, #148]	; (8001098 <processBit+0xb8>)
 8001004:	4613      	mov	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	4413      	add	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	440b      	add	r3, r1
 800100e:	3311      	adds	r3, #17
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]

	uint8_t read_bit = getCaliperData(curr_caliper);
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ffc2 	bl	8000fa0 <getCaliperData>
 800101c:	4603      	mov	r3, r0
 800101e:	73fb      	strb	r3, [r7, #15]

	digimatic[curr_caliper].frame.data |= read_bit << digimatic[curr_caliper].bit.index;
 8001020:	79fa      	ldrb	r2, [r7, #7]
 8001022:	491d      	ldr	r1, [pc, #116]	; (8001098 <processBit+0xb8>)
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4413      	add	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	440b      	add	r3, r1
 800102e:	3311      	adds	r3, #17
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b259      	sxtb	r1, r3
 8001034:	7bf8      	ldrb	r0, [r7, #15]
 8001036:	79fa      	ldrb	r2, [r7, #7]
 8001038:	4c17      	ldr	r4, [pc, #92]	; (8001098 <processBit+0xb8>)
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4413      	add	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4423      	add	r3, r4
 8001044:	330e      	adds	r3, #14
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	fa00 f303 	lsl.w	r3, r0, r3
 800104c:	b25b      	sxtb	r3, r3
 800104e:	430b      	orrs	r3, r1
 8001050:	b25b      	sxtb	r3, r3
 8001052:	79fa      	ldrb	r2, [r7, #7]
 8001054:	b2d8      	uxtb	r0, r3
 8001056:	4910      	ldr	r1, [pc, #64]	; (8001098 <processBit+0xb8>)
 8001058:	4613      	mov	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4413      	add	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	440b      	add	r3, r1
 8001062:	3311      	adds	r3, #17
 8001064:	4602      	mov	r2, r0
 8001066:	701a      	strb	r2, [r3, #0]

	digimatic[curr_caliper].bit.index++;
 8001068:	79fa      	ldrb	r2, [r7, #7]
 800106a:	490b      	ldr	r1, [pc, #44]	; (8001098 <processBit+0xb8>)
 800106c:	4613      	mov	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4413      	add	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	440b      	add	r3, r1
 8001076:	330e      	adds	r3, #14
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	b2d8      	uxtb	r0, r3
 800107e:	4906      	ldr	r1, [pc, #24]	; (8001098 <processBit+0xb8>)
 8001080:	4613      	mov	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4413      	add	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	440b      	add	r3, r1
 800108a:	330e      	adds	r3, #14
 800108c:	4602      	mov	r2, r0
 800108e:	701a      	strb	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bd90      	pop	{r4, r7, pc}
 8001098:	2000023c 	.word	0x2000023c

0800109c <onRisingEdgeOfReqSignal>:


void onRisingEdgeOfReqSignal(caliper_number curr_caliper){
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	digimatic[curr_caliper].caliper_state = START;
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	4906      	ldr	r1, [pc, #24]	; (80010c4 <onRisingEdgeOfReqSignal+0x28>)
 80010aa:	4613      	mov	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	440b      	add	r3, r1
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	2000023c 	.word	0x2000023c

080010c8 <onRisingEdgeOfClockSignal>:


void onRisingEdgeOfClockSignal(caliper_number curr_caliper, void (*onFinishedGettingFramesFor)(caliper_number)){
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
	if(digimatic[curr_caliper].caliper_state != IDLE && digimatic[curr_caliper].caliper_state != FINISHED){
 80010d4:	79fa      	ldrb	r2, [r7, #7]
 80010d6:	4953      	ldr	r1, [pc, #332]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 80010d8:	4613      	mov	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4413      	add	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	440b      	add	r3, r1
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8099 	beq.w	800121c <onRisingEdgeOfClockSignal+0x154>
 80010ea:	79fa      	ldrb	r2, [r7, #7]
 80010ec:	494d      	ldr	r1, [pc, #308]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 80010ee:	4613      	mov	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	4413      	add	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	440b      	add	r3, r1
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	f000 808e 	beq.w	800121c <onRisingEdgeOfClockSignal+0x154>
		digimatic[curr_caliper].caliper_state = GETTING_FRAMES; // this doesn't change unless its last frame (implemented below)
 8001100:	79fa      	ldrb	r2, [r7, #7]
 8001102:	4948      	ldr	r1, [pc, #288]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 8001104:	4613      	mov	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	440b      	add	r3, r1
 800110e:	2202      	movs	r2, #2
 8001110:	701a      	strb	r2, [r3, #0]
		if(digimatic[curr_caliper].frame.index == 0){
 8001112:	79fa      	ldrb	r2, [r7, #7]
 8001114:	4943      	ldr	r1, [pc, #268]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4413      	add	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	440b      	add	r3, r1
 8001120:	3310      	adds	r3, #16
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10c      	bne.n	8001142 <onRisingEdgeOfClockSignal+0x7a>
			memset(&digimatic[curr_caliper].frames, 0, NUMBER_OF_FRAMES*sizeof(digimatic[curr_caliper].frames[0]));
 8001128:	79fa      	ldrb	r2, [r7, #7]
 800112a:	4613      	mov	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4413      	add	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4a3c      	ldr	r2, [pc, #240]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 8001134:	4413      	add	r3, r2
 8001136:	3301      	adds	r3, #1
 8001138:	220d      	movs	r2, #13
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f011 fc2d 	bl	801299c <memset>
		}

		processBit(curr_caliper);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff4b 	bl	8000fe0 <processBit>

		if(digimatic[curr_caliper].bit.index == BITS_PER_FRAME){ // tengo un frame guardado en digimatic.frame.data
 800114a:	79fa      	ldrb	r2, [r7, #7]
 800114c:	4935      	ldr	r1, [pc, #212]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	440b      	add	r3, r1
 8001158:	330e      	adds	r3, #14
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d13b      	bne.n	80011d8 <onRisingEdgeOfClockSignal+0x110>
			digimatic[curr_caliper].frames[digimatic[curr_caliper].frame.index] = digimatic[curr_caliper].frame.data; // lo guardo en el array
 8001160:	79f9      	ldrb	r1, [r7, #7]
 8001162:	79fa      	ldrb	r2, [r7, #7]
 8001164:	79f8      	ldrb	r0, [r7, #7]
 8001166:	4c2f      	ldr	r4, [pc, #188]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 8001168:	4603      	mov	r3, r0
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4403      	add	r3, r0
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4423      	add	r3, r4
 8001172:	3310      	adds	r3, #16
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461c      	mov	r4, r3
 8001178:	482a      	ldr	r0, [pc, #168]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 800117a:	460b      	mov	r3, r1
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	440b      	add	r3, r1
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4403      	add	r3, r0
 8001184:	3311      	adds	r3, #17
 8001186:	7818      	ldrb	r0, [r3, #0]
 8001188:	4926      	ldr	r1, [pc, #152]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 800118a:	4613      	mov	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4413      	add	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	440b      	add	r3, r1
 8001194:	4423      	add	r3, r4
 8001196:	3301      	adds	r3, #1
 8001198:	4602      	mov	r2, r0
 800119a:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].frame.index++; // avanzo en array
 800119c:	79fa      	ldrb	r2, [r7, #7]
 800119e:	4921      	ldr	r1, [pc, #132]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 80011a0:	4613      	mov	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4413      	add	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	440b      	add	r3, r1
 80011aa:	3310      	adds	r3, #16
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2d8      	uxtb	r0, r3
 80011b2:	491c      	ldr	r1, [pc, #112]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4413      	add	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	440b      	add	r3, r1
 80011be:	3310      	adds	r3, #16
 80011c0:	4602      	mov	r2, r0
 80011c2:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].bit.index = 0; // reinicio el index de bit
 80011c4:	79fa      	ldrb	r2, [r7, #7]
 80011c6:	4917      	ldr	r1, [pc, #92]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 80011c8:	4613      	mov	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	440b      	add	r3, r1
 80011d2:	330e      	adds	r3, #14
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
		}

		if(digimatic[curr_caliper].frame.index == NUMBER_OF_FRAMES){
 80011d8:	79fa      	ldrb	r2, [r7, #7]
 80011da:	4912      	ldr	r1, [pc, #72]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 80011dc:	4613      	mov	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	440b      	add	r3, r1
 80011e6:	3310      	adds	r3, #16
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b0d      	cmp	r3, #13
 80011ec:	d116      	bne.n	800121c <onRisingEdgeOfClockSignal+0x154>
			digimatic[curr_caliper].frame.index = 0;
 80011ee:	79fa      	ldrb	r2, [r7, #7]
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 80011f2:	4613      	mov	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4413      	add	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	440b      	add	r3, r1
 80011fc:	3310      	adds	r3, #16
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].caliper_state = FINISHED;
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	4907      	ldr	r1, [pc, #28]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	440b      	add	r3, r1
 8001210:	2203      	movs	r2, #3
 8001212:	701a      	strb	r2, [r3, #0]
			onFinishedGettingFramesFor(curr_caliper);
 8001214:	79fa      	ldrb	r2, [r7, #7]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	4610      	mov	r0, r2
 800121a:	4798      	blx	r3
		}
	}
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}
 8001224:	2000023c 	.word	0x2000023c

08001228 <digimaticGetMeasureFrames>:

digimatic_frame_t* digimaticGetMeasureFrames(caliper_number curr_caliper){
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	if(digimatic[curr_caliper].caliper_state == FINISHED){
 8001232:	79fa      	ldrb	r2, [r7, #7]
 8001234:	4910      	ldr	r1, [pc, #64]	; (8001278 <digimaticGetMeasureFrames+0x50>)
 8001236:	4613      	mov	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4413      	add	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	440b      	add	r3, r1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d111      	bne.n	800126a <digimaticGetMeasureFrames+0x42>
		digimatic[curr_caliper].caliper_state = IDLE;
 8001246:	79fa      	ldrb	r2, [r7, #7]
 8001248:	490b      	ldr	r1, [pc, #44]	; (8001278 <digimaticGetMeasureFrames+0x50>)
 800124a:	4613      	mov	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4413      	add	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	440b      	add	r3, r1
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
		return &digimatic[curr_caliper].frames[0];
 8001258:	79fa      	ldrb	r2, [r7, #7]
 800125a:	4613      	mov	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4413      	add	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <digimaticGetMeasureFrames+0x50>)
 8001264:	4413      	add	r3, r2
 8001266:	3301      	adds	r3, #1
 8001268:	e000      	b.n	800126c <digimaticGetMeasureFrames+0x44>
	}else{
		return NULL;
 800126a:	2300      	movs	r3, #0
	}
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	2000023c 	.word	0x2000023c
 800127c:	00000000 	.word	0x00000000

08001280 <digimaticMeasure>:


digimatic_measure_t digimaticMeasure(digimatic_frame_t* digimaticFrame){
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
//  ignore all 'F'
    digimaticFrame+= 4;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3304      	adds	r3, #4
 800128e:	603b      	str	r3, [r7, #0]
//  get sign
    float sign = (*digimaticFrame) == 8? -1: 1;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b08      	cmp	r3, #8
 8001296:	d101      	bne.n	800129c <digimaticMeasure+0x1c>
 8001298:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <digimaticMeasure+0x120>)
 800129a:	e001      	b.n	80012a0 <digimaticMeasure+0x20>
 800129c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012a0:	61fb      	str	r3, [r7, #28]
//  advance pointer and get digits;
    digimaticFrame++;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	603b      	str	r3, [r7, #0]
    int digits_left = 6;
 80012a8:	2306      	movs	r3, #6
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
    float number = 0;
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
    while(digits_left){
 80012b2:	e032      	b.n	800131a <digimaticMeasure+0x9a>
        number += pow(10,digits_left)*(*digimaticFrame);
 80012b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012b6:	f7ff f945 	bl	8000544 <__aeabi_i2d>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	ec43 2b11 	vmov	d1, r2, r3
 80012c2:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8001398 <digimaticMeasure+0x118>
 80012c6:	f014 fadf 	bl	8015888 <pow>
 80012ca:	ec55 4b10 	vmov	r4, r5, d0
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f936 	bl	8000544 <__aeabi_i2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4620      	mov	r0, r4
 80012de:	4629      	mov	r1, r5
 80012e0:	f7ff f99a 	bl	8000618 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4614      	mov	r4, r2
 80012ea:	461d      	mov	r5, r3
 80012ec:	6a38      	ldr	r0, [r7, #32]
 80012ee:	f7ff f93b 	bl	8000568 <__aeabi_f2d>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4620      	mov	r0, r4
 80012f8:	4629      	mov	r1, r5
 80012fa:	f7fe ffd7 	bl	80002ac <__adddf3>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fc5f 	bl	8000bc8 <__aeabi_d2f>
 800130a:	4603      	mov	r3, r0
 800130c:	623b      	str	r3, [r7, #32]
        digits_left--;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	3b01      	subs	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
        digimaticFrame++;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	603b      	str	r3, [r7, #0]
    while(digits_left){
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1c9      	bne.n	80012b4 <digimaticMeasure+0x34>
    }
    // digimaticFrame is now on d12
    float decimal_point = pow(10,(*digimaticFrame));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f8fd 	bl	8000524 <__aeabi_ui2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	ec43 2b11 	vmov	d1, r2, r3
 8001332:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8001398 <digimaticMeasure+0x118>
 8001336:	f014 faa7 	bl	8015888 <pow>
 800133a:	ec53 2b10 	vmov	r2, r3, d0
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fc41 	bl	8000bc8 <__aeabi_d2f>
 8001346:	4603      	mov	r3, r0
 8001348:	61bb      	str	r3, [r7, #24]
    digimaticFrame++;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	603b      	str	r3, [r7, #0]
    int unit = (*digimaticFrame);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	617b      	str	r3, [r7, #20]
    digimatic_measure_t measure;
    measure.number = sign*number/decimal_point;
 8001356:	ed97 7a07 	vldr	s14, [r7, #28]
 800135a:	edd7 7a08 	vldr	s15, [r7, #32]
 800135e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001362:	ed97 7a06 	vldr	s14, [r7, #24]
 8001366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136a:	edc7 7a03 	vstr	s15, [r7, #12]
    measure.unit = unit;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2b00      	cmp	r3, #0
 8001372:	bf14      	ite	ne
 8001374:	2301      	movne	r3, #1
 8001376:	2300      	moveq	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	743b      	strb	r3, [r7, #16]

    return measure;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	461a      	mov	r2, r3
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001388:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bdb0      	pop	{r4, r5, r7, pc}
 8001394:	f3af 8000 	nop.w
 8001398:	00000000 	.word	0x00000000
 800139c:	40240000 	.word	0x40240000
 80013a0:	bf800000 	.word	0xbf800000

080013a4 <validCaliperMeasure>:

bool validCaliperMeasure(digimatic_frame_t* digimaticFrame){
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
//  check all 'F' = 15
	for(int i = 0; i<4; i++){
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e00b      	b.n	80013ca <validCaliperMeasure+0x26>
		if((*digimaticFrame != 15)){
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	d001      	beq.n	80013be <validCaliperMeasure+0x1a>
			return false;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e038      	b.n	8001430 <validCaliperMeasure+0x8c>
		}
		digimaticFrame++;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3301      	adds	r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
	for(int i = 0; i<4; i++){
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3301      	adds	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	ddf0      	ble.n	80013b2 <validCaliperMeasure+0xe>
	}
// check sign
	if((*digimaticFrame) != 0 || (*digimaticFrame) != 8){
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d103      	bne.n	80013e0 <validCaliperMeasure+0x3c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d001      	beq.n	80013e4 <validCaliperMeasure+0x40>
		return false;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e025      	b.n	8001430 <validCaliperMeasure+0x8c>
	}

	digimaticFrame++;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3301      	adds	r3, #1
 80013e8:	607b      	str	r3, [r7, #4]
// check digits between 0 and 9
	for(int i = 0; i<6; i++){
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	e00b      	b.n	8001408 <validCaliperMeasure+0x64>
		if((*digimaticFrame) > 9 || (*digimaticFrame < 0)){
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b09      	cmp	r3, #9
 80013f6:	d901      	bls.n	80013fc <validCaliperMeasure+0x58>
			return false;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e019      	b.n	8001430 <validCaliperMeasure+0x8c>
		}
		digimaticFrame++;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3301      	adds	r3, #1
 8001400:	607b      	str	r3, [r7, #4]
	for(int i = 0; i<6; i++){
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3301      	adds	r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b05      	cmp	r3, #5
 800140c:	ddf0      	ble.n	80013f0 <validCaliperMeasure+0x4c>
	}
// check decimal point between 0 and 5
	if((*digimaticFrame) < 0 || (*digimaticFrame) > 5){
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b05      	cmp	r3, #5
 8001414:	d901      	bls.n	800141a <validCaliperMeasure+0x76>
		return false;
 8001416:	2300      	movs	r3, #0
 8001418:	e00a      	b.n	8001430 <validCaliperMeasure+0x8c>
	}

// check unit
	if((*digimaticFrame) != 0 || (*digimaticFrame) != 1){
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d103      	bne.n	800142a <validCaliperMeasure+0x86>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d001      	beq.n	800142e <validCaliperMeasure+0x8a>
		return false;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <validCaliperMeasure+0x8c>
	}

	return true;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <json_hexadecimal_digit>:
                         bytes). */
  size_t error;
};

json_weak int json_hexadecimal_digit(const char c);
int json_hexadecimal_digit(const char c) {
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  if ('0' <= c && c <= '9') {
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b2f      	cmp	r3, #47	; 0x2f
 800144a:	d905      	bls.n	8001458 <json_hexadecimal_digit+0x1c>
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b39      	cmp	r3, #57	; 0x39
 8001450:	d802      	bhi.n	8001458 <json_hexadecimal_digit+0x1c>
    return c - '0';
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	3b30      	subs	r3, #48	; 0x30
 8001456:	e013      	b.n	8001480 <json_hexadecimal_digit+0x44>
  }
  if ('a' <= c && c <= 'f') {
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b60      	cmp	r3, #96	; 0x60
 800145c:	d905      	bls.n	800146a <json_hexadecimal_digit+0x2e>
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b66      	cmp	r3, #102	; 0x66
 8001462:	d802      	bhi.n	800146a <json_hexadecimal_digit+0x2e>
    return c - 'a' + 10;
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	3b57      	subs	r3, #87	; 0x57
 8001468:	e00a      	b.n	8001480 <json_hexadecimal_digit+0x44>
  }
  if ('A' <= c && c <= 'F') {
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b40      	cmp	r3, #64	; 0x40
 800146e:	d905      	bls.n	800147c <json_hexadecimal_digit+0x40>
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b46      	cmp	r3, #70	; 0x46
 8001474:	d802      	bhi.n	800147c <json_hexadecimal_digit+0x40>
    return c - 'A' + 10;
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	3b37      	subs	r3, #55	; 0x37
 800147a:	e001      	b.n	8001480 <json_hexadecimal_digit+0x44>
  }
  return -1;
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <json_hexadecimal_value>:

json_weak int json_hexadecimal_value(const char *c, const unsigned long size,
                                     unsigned long *result);
int json_hexadecimal_value(const char *c, const unsigned long size,
                           unsigned long *result) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  const char *p;
  int digit;

  if (size > sizeof(unsigned long) * 2) {
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b08      	cmp	r3, #8
 800149c:	d901      	bls.n	80014a2 <json_hexadecimal_value+0x16>
    return 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	e02a      	b.n	80014f8 <json_hexadecimal_value+0x6c>
  }

  *result = 0;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
  for (p = c; (unsigned long)(p - c) < size; ++p) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e01c      	b.n	80014e8 <json_hexadecimal_value+0x5c>
    *result <<= 4;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	011a      	lsls	r2, r3, #4
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	601a      	str	r2, [r3, #0]
    digit = json_hexadecimal_digit(*p);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ffbd 	bl	800143c <json_hexadecimal_digit>
 80014c2:	6138      	str	r0, [r7, #16]
    if (digit < 0 || digit > 15) {
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db02      	blt.n	80014d0 <json_hexadecimal_value+0x44>
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	dd01      	ble.n	80014d4 <json_hexadecimal_value+0x48>
      return 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e011      	b.n	80014f8 <json_hexadecimal_value+0x6c>
    }
    *result |= (unsigned char)digit;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	601a      	str	r2, [r3, #0]
  for (p = c; (unsigned long)(p - c) < size; ++p) {
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d8db      	bhi.n	80014ae <json_hexadecimal_value+0x22>
  }
  return 1;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <json_skip_whitespace>:

json_weak int json_skip_whitespace(struct json_parse_state_s *state);
int json_skip_whitespace(struct json_parse_state_s *state) {
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  size_t offset = state->offset;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	617b      	str	r3, [r7, #20]
  const size_t size = state->size;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	613b      	str	r3, [r7, #16]
  const char *const src = state->src;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]

  /* the only valid whitespace according to ECMA-404 is ' ', '\n', '\r' and
   * '\t'. */
  switch (src[offset]) {
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	3b09      	subs	r3, #9
 8001524:	2b17      	cmp	r3, #23
 8001526:	bf8c      	ite	hi
 8001528:	2201      	movhi	r2, #1
 800152a:	2200      	movls	r2, #0
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	2a00      	cmp	r2, #0
 8001530:	d10a      	bne.n	8001548 <json_skip_whitespace+0x48>
 8001532:	2201      	movs	r2, #1
 8001534:	409a      	lsls	r2, r3
 8001536:	4b34      	ldr	r3, [pc, #208]	; (8001608 <json_skip_whitespace+0x108>)
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf14      	ite	ne
 800153e:	2301      	movne	r3, #1
 8001540:	2300      	moveq	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <json_skip_whitespace+0x4c>
  default:
    return 0;
 8001548:	2300      	movs	r3, #0
 800154a:	e057      	b.n	80015fc <json_skip_whitespace+0xfc>
  case ' ':
  case '\r':
  case '\t':
  case '\n':
    break;
 800154c:	bf00      	nop
 800154e:	e000      	b.n	8001552 <json_skip_whitespace+0x52>
  }

  do {
 8001550:	bf00      	nop
    switch (src[offset]) {
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	4413      	add	r3, r2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	3b09      	subs	r3, #9
 800155c:	2b17      	cmp	r3, #23
 800155e:	d833      	bhi.n	80015c8 <json_skip_whitespace+0xc8>
 8001560:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <json_skip_whitespace+0x68>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	080015e5 	.word	0x080015e5
 800156c:	080015d3 	.word	0x080015d3
 8001570:	080015c9 	.word	0x080015c9
 8001574:	080015c9 	.word	0x080015c9
 8001578:	080015e5 	.word	0x080015e5
 800157c:	080015c9 	.word	0x080015c9
 8001580:	080015c9 	.word	0x080015c9
 8001584:	080015c9 	.word	0x080015c9
 8001588:	080015c9 	.word	0x080015c9
 800158c:	080015c9 	.word	0x080015c9
 8001590:	080015c9 	.word	0x080015c9
 8001594:	080015c9 	.word	0x080015c9
 8001598:	080015c9 	.word	0x080015c9
 800159c:	080015c9 	.word	0x080015c9
 80015a0:	080015c9 	.word	0x080015c9
 80015a4:	080015c9 	.word	0x080015c9
 80015a8:	080015c9 	.word	0x080015c9
 80015ac:	080015c9 	.word	0x080015c9
 80015b0:	080015c9 	.word	0x080015c9
 80015b4:	080015c9 	.word	0x080015c9
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	080015c9 	.word	0x080015c9
 80015c0:	080015c9 	.word	0x080015c9
 80015c4:	080015e5 	.word	0x080015e5
    default:
      /* Update offset. */
      state->offset = offset;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	609a      	str	r2, [r3, #8]
      return 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e014      	b.n	80015fc <json_skip_whitespace+0xfc>
    case ' ':
    case '\r':
    case '\t':
      break;
    case '\n':
      state->line_no++;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	621a      	str	r2, [r3, #32]
      state->line_offset = offset;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24
      break;
 80015e2:	e000      	b.n	80015e6 <json_skip_whitespace+0xe6>
      break;
 80015e4:	bf00      	nop
    }

    offset++;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
  } while (offset < size);
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d3ad      	bcc.n	8001550 <json_skip_whitespace+0x50>

  /* Update offset. */
  state->offset = offset;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	609a      	str	r2, [r3, #8]
  return 1;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	00800013 	.word	0x00800013

0800160c <json_skip_c_style_comments>:

json_weak int json_skip_c_style_comments(struct json_parse_state_s *state);
int json_skip_c_style_comments(struct json_parse_state_s *state) {
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* do we have a comment?. */
  if ('/' == state->src[state->offset]) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b2f      	cmp	r3, #47	; 0x2f
 8001622:	d17d      	bne.n	8001720 <json_skip_c_style_comments+0x114>
    /* skip '/'. */
    state->offset++;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	609a      	str	r2, [r3, #8]

    if ('/' == state->src[state->offset]) {
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	4413      	add	r3, r2
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b2f      	cmp	r3, #47	; 0x2f
 800163c:	d12b      	bne.n	8001696 <json_skip_c_style_comments+0x8a>
      /* we had a comment of the form //. */

      /* skip second '/'. */
      state->offset++;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	609a      	str	r2, [r3, #8]

      while (state->offset < state->size) {
 8001648:	e01d      	b.n	8001686 <json_skip_c_style_comments+0x7a>
        switch (state->src[state->offset]) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b0a      	cmp	r3, #10
 8001658:	d005      	beq.n	8001666 <json_skip_c_style_comments+0x5a>
        default:
          /* skip the character in the comment. */
          state->offset++;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	609a      	str	r2, [r3, #8]
          break;
 8001664:	e00f      	b.n	8001686 <json_skip_c_style_comments+0x7a>
        case '\n':
          /* if we have a newline, our comment has ended! Skip the newline. */
          state->offset++;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	609a      	str	r2, [r3, #8]

          /* we entered a newline, so move our line info forward. */
          state->line_no++;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	621a      	str	r2, [r3, #32]
          state->line_offset = state->offset;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	625a      	str	r2, [r3, #36]	; 0x24
          return 1;
 8001682:	2301      	movs	r3, #1
 8001684:	e04d      	b.n	8001722 <json_skip_c_style_comments+0x116>
      while (state->offset < state->size) {
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	429a      	cmp	r2, r3
 8001690:	d3db      	bcc.n	800164a <json_skip_c_style_comments+0x3e>
        }
      }

      /* we reached the end of the JSON file! */
      return 1;
 8001692:	2301      	movs	r3, #1
 8001694:	e045      	b.n	8001722 <json_skip_c_style_comments+0x116>
    } else if ('*' == state->src[state->offset]) {
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b2a      	cmp	r3, #42	; 0x2a
 80016a4:	d13c      	bne.n	8001720 <json_skip_c_style_comments+0x114>
      /* we had a comment in the C-style long form. */

      /* skip '*'. */
      state->offset++;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	609a      	str	r2, [r3, #8]

      while (state->offset + 1 < state->size) {
 80016b0:	e02d      	b.n	800170e <json_skip_c_style_comments+0x102>
        if (('*' == state->src[state->offset]) &&
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	4413      	add	r3, r2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b2a      	cmp	r3, #42	; 0x2a
 80016c0:	d10f      	bne.n	80016e2 <json_skip_c_style_comments+0xd6>
            ('/' == state->src[state->offset + 1])) {
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	3301      	adds	r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	781b      	ldrb	r3, [r3, #0]
        if (('*' == state->src[state->offset]) &&
 80016d0:	2b2f      	cmp	r3, #47	; 0x2f
 80016d2:	d106      	bne.n	80016e2 <json_skip_c_style_comments+0xd6>
          /* we reached the end of our comment! */
          state->offset += 2;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	1c9a      	adds	r2, r3, #2
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	609a      	str	r2, [r3, #8]
          return 1;
 80016de:	2301      	movs	r3, #1
 80016e0:	e01f      	b.n	8001722 <json_skip_c_style_comments+0x116>
        } else if ('\n' == state->src[state->offset]) {
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4413      	add	r3, r2
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b0a      	cmp	r3, #10
 80016f0:	d108      	bne.n	8001704 <json_skip_c_style_comments+0xf8>
          /* we entered a newline, so move our line info forward. */
          state->line_no++;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	621a      	str	r2, [r3, #32]
          state->line_offset = state->offset;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* skip character within comment. */
        state->offset++;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	609a      	str	r2, [r3, #8]
      while (state->offset + 1 < state->size) {
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	429a      	cmp	r2, r3
 800171a:	d3ca      	bcc.n	80016b2 <json_skip_c_style_comments+0xa6>
      }

      /* Comment wasn't ended correctly which is a failure. */
      return 1;
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <json_skip_c_style_comments+0x116>
    }
  }

  /* we didn't have any comment, which is ok too! */
  return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <json_skip_all_skippables>:

json_weak int json_skip_all_skippables(struct json_parse_state_s *state);
int json_skip_all_skippables(struct json_parse_state_s *state) {
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  /* skip all whitespace and other skippables until there are none left. note
   * that the previous version suffered from read past errors should. the
   * stream end on json_skip_c_style_comments eg. '{"a" ' with comments flag.
   */

  int did_consume = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  const size_t size = state->size;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	60bb      	str	r3, [r7, #8]

  if (json_parse_flags_allow_c_style_comments & state->flags_bitset) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 0320 	and.w	r3, r3, #32
 8001748:	2b00      	cmp	r3, #0
 800174a:	d022      	beq.n	8001792 <json_skip_all_skippables+0x64>
    do {
      if (state->offset == size) {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	429a      	cmp	r2, r3
 8001754:	d104      	bne.n	8001760 <json_skip_all_skippables+0x32>
        state->error = json_parse_error_premature_end_of_buffer;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2207      	movs	r2, #7
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 800175c:	2301      	movs	r3, #1
 800175e:	e034      	b.n	80017ca <json_skip_all_skippables+0x9c>
      }

      did_consume = json_skip_whitespace(state);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fecd 	bl	8001500 <json_skip_whitespace>
 8001766:	60f8      	str	r0, [r7, #12]

      /* This should really be checked on access, not in front of every call.
       */
      if (state->offset == size) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	429a      	cmp	r2, r3
 8001770:	d104      	bne.n	800177c <json_skip_all_skippables+0x4e>
        state->error = json_parse_error_premature_end_of_buffer;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2207      	movs	r2, #7
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001778:	2301      	movs	r3, #1
 800177a:	e026      	b.n	80017ca <json_skip_all_skippables+0x9c>
      }

      did_consume |= json_skip_c_style_comments(state);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff45 	bl	800160c <json_skip_c_style_comments>
 8001782:	4602      	mov	r2, r0
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
    } while (0 != did_consume);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1dd      	bne.n	800174c <json_skip_all_skippables+0x1e>
 8001790:	e010      	b.n	80017b4 <json_skip_all_skippables+0x86>
  } else {
    do {
      if (state->offset == size) {
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	429a      	cmp	r2, r3
 800179a:	d104      	bne.n	80017a6 <json_skip_all_skippables+0x78>
        state->error = json_parse_error_premature_end_of_buffer;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2207      	movs	r2, #7
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e011      	b.n	80017ca <json_skip_all_skippables+0x9c>
      }

      did_consume = json_skip_whitespace(state);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff feaa 	bl	8001500 <json_skip_whitespace>
 80017ac:	60f8      	str	r0, [r7, #12]
    } while (0 != did_consume);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1ee      	bne.n	8001792 <json_skip_all_skippables+0x64>
  }

  if (state->offset == size) {
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d104      	bne.n	80017c8 <json_skip_all_skippables+0x9a>
    state->error = json_parse_error_premature_end_of_buffer;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2207      	movs	r2, #7
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
    return 1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <json_skip_all_skippables+0x9c>
  }

  return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <json_get_string_size>:
json_weak int json_get_value_size(struct json_parse_state_s *state,
                                  int is_global_object);

json_weak int json_get_string_size(struct json_parse_state_s *state,
                                   size_t is_key);
int json_get_string_size(struct json_parse_state_s *state, size_t is_key) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  size_t offset = state->offset;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  const size_t size = state->size;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	623b      	str	r3, [r7, #32]
  size_t data_size = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  const char *const src = state->src;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	61fb      	str	r3, [r7, #28]
  const int is_single_quote = '\'' == src[offset];
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f8:	4413      	add	r3, r2
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b27      	cmp	r3, #39	; 0x27
 80017fe:	bf0c      	ite	eq
 8001800:	2301      	moveq	r3, #1
 8001802:	2300      	movne	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	61bb      	str	r3, [r7, #24]
  const char quote_to_use = is_single_quote ? '\'' : '"';
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <json_get_string_size+0x3e>
 800180e:	2327      	movs	r3, #39	; 0x27
 8001810:	e000      	b.n	8001814 <json_get_string_size+0x40>
 8001812:	2322      	movs	r3, #34	; 0x22
 8001814:	75fb      	strb	r3, [r7, #23]
  const size_t flags_bitset = state->flags_bitset;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	613b      	str	r3, [r7, #16]
  unsigned long codepoint;
  unsigned long high_surrogate = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24

  if ((json_parse_flags_allow_location_information & flags_bitset) != 0 &&
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <json_get_string_size+0x6a>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <json_get_string_size+0x6a>
      is_key != 0) {
    state->dom_size += sizeof(struct json_string_ex_s);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f103 0214 	add.w	r2, r3, #20
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
 800183c:	e005      	b.n	800184a <json_get_string_size+0x76>
  } else {
    state->dom_size += sizeof(struct json_string_s);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f103 0208 	add.w	r2, r3, #8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	619a      	str	r2, [r3, #24]
  }

  if ('"' != src[offset]) {
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	4413      	add	r3, r2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b22      	cmp	r3, #34	; 0x22
 8001854:	d00f      	beq.n	8001876 <json_get_string_size+0xa2>
    /* if we are allowed single quoted strings check for that too. */
    if (!((json_parse_flags_allow_single_quoted_strings & flags_bitset) &&
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <json_get_string_size+0x92>
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d107      	bne.n	8001876 <json_get_string_size+0xa2>
          is_single_quote)) {
      state->error = json_parse_error_expected_opening_quote;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2203      	movs	r2, #3
 800186a:	629a      	str	r2, [r3, #40]	; 0x28
      state->offset = offset;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001870:	609a      	str	r2, [r3, #8]
      return 1;
 8001872:	2301      	movs	r3, #1
 8001874:	e151      	b.n	8001b1a <json_get_string_size+0x346>
    }
  }

  /* skip leading '"' or '\''. */
  offset++;
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	3301      	adds	r3, #1
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c

  while ((offset < size) && (quote_to_use != src[offset])) {
 800187c:	e122      	b.n	8001ac4 <json_get_string_size+0x2f0>
    /* add space for the character. */
    data_size++;
 800187e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001880:	3301      	adds	r3, #1
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28

    switch (src[offset]) {
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <json_get_string_size+0xc0>
 8001890:	2b09      	cmp	r3, #9
 8001892:	d107      	bne.n	80018a4 <json_get_string_size+0xd0>
    default:
      break;
    case '\0':
    case '\t':
      state->error = json_parse_error_invalid_string;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2208      	movs	r2, #8
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
      state->offset = offset;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189e:	609a      	str	r2, [r3, #8]
      return 1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e13a      	b.n	8001b1a <json_get_string_size+0x346>
      break;
 80018a4:	bf00      	nop
    }

    if ('\\' == src[offset]) {
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018aa:	4413      	add	r3, r2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b5c      	cmp	r3, #92	; 0x5c
 80018b0:	f040 80e8 	bne.w	8001a84 <json_get_string_size+0x2b0>
      /* skip reverse solidus character. */
      offset++;
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	3301      	adds	r3, #1
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (offset == size) {
 80018ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d107      	bne.n	80018d2 <json_get_string_size+0xfe>
        state->error = json_parse_error_premature_end_of_buffer;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2207      	movs	r2, #7
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018cc:	609a      	str	r2, [r3, #8]
        return 1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e123      	b.n	8001b1a <json_get_string_size+0x346>
      }

      switch (src[offset]) {
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d6:	4413      	add	r3, r2
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b75      	cmp	r3, #117	; 0x75
 80018dc:	dc40      	bgt.n	8001960 <json_get_string_size+0x18c>
 80018de:	2b5c      	cmp	r3, #92	; 0x5c
 80018e0:	da04      	bge.n	80018ec <json_get_string_size+0x118>
 80018e2:	2b22      	cmp	r3, #34	; 0x22
 80018e4:	d044      	beq.n	8001970 <json_get_string_size+0x19c>
 80018e6:	2b2f      	cmp	r3, #47	; 0x2f
 80018e8:	d042      	beq.n	8001970 <json_get_string_size+0x19c>
 80018ea:	e039      	b.n	8001960 <json_get_string_size+0x18c>
 80018ec:	3b5c      	subs	r3, #92	; 0x5c
 80018ee:	2b19      	cmp	r3, #25
 80018f0:	d836      	bhi.n	8001960 <json_get_string_size+0x18c>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <json_get_string_size+0x124>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	08001971 	.word	0x08001971
 80018fc:	08001961 	.word	0x08001961
 8001900:	08001961 	.word	0x08001961
 8001904:	08001961 	.word	0x08001961
 8001908:	08001961 	.word	0x08001961
 800190c:	08001961 	.word	0x08001961
 8001910:	08001971 	.word	0x08001971
 8001914:	08001961 	.word	0x08001961
 8001918:	08001961 	.word	0x08001961
 800191c:	08001961 	.word	0x08001961
 8001920:	08001971 	.word	0x08001971
 8001924:	08001961 	.word	0x08001961
 8001928:	08001961 	.word	0x08001961
 800192c:	08001961 	.word	0x08001961
 8001930:	08001961 	.word	0x08001961
 8001934:	08001961 	.word	0x08001961
 8001938:	08001961 	.word	0x08001961
 800193c:	08001961 	.word	0x08001961
 8001940:	08001971 	.word	0x08001971
 8001944:	08001961 	.word	0x08001961
 8001948:	08001961 	.word	0x08001961
 800194c:	08001961 	.word	0x08001961
 8001950:	08001971 	.word	0x08001971
 8001954:	08001961 	.word	0x08001961
 8001958:	08001971 	.word	0x08001971
 800195c:	08001979 	.word	0x08001979
      default:
        state->error = json_parse_error_invalid_string_escape_sequence;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2204      	movs	r2, #4
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800196a:	609a      	str	r2, [r3, #8]
        return 1;
 800196c:	2301      	movs	r3, #1
 800196e:	e0d4      	b.n	8001b1a <json_get_string_size+0x346>
      case 'f':
      case 'n':
      case 'r':
      case 't':
        /* all valid characters! */
        offset++;
 8001970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001972:	3301      	adds	r3, #1
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001976:	e0a5      	b.n	8001ac4 <json_get_string_size+0x2f0>
      case 'u':
        if (!(offset + 5 < size)) {
 8001978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197a:	3305      	adds	r3, #5
 800197c:	6a3a      	ldr	r2, [r7, #32]
 800197e:	429a      	cmp	r2, r3
 8001980:	d807      	bhi.n	8001992 <json_get_string_size+0x1be>
          /* invalid escaped unicode sequence! */
          state->error = json_parse_error_invalid_string_escape_sequence;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2204      	movs	r2, #4
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
          state->offset = offset;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198c:	609a      	str	r2, [r3, #8]
          return 1;
 800198e:	2301      	movs	r3, #1
 8001990:	e0c3      	b.n	8001b1a <json_get_string_size+0x346>
        }

        codepoint = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
        if (!json_hexadecimal_value(&src[offset + 1], 4, &codepoint)) {
 8001996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001998:	3301      	adds	r3, #1
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	4413      	add	r3, r2
 800199e:	f107 020c 	add.w	r2, r7, #12
 80019a2:	2104      	movs	r1, #4
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fd71 	bl	800148c <json_hexadecimal_value>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d107      	bne.n	80019c0 <json_get_string_size+0x1ec>
          /* escaped unicode sequences must contain 4 hexadecimal digits! */
          state->error = json_parse_error_invalid_string_escape_sequence;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2204      	movs	r2, #4
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
          state->offset = offset;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ba:	609a      	str	r2, [r3, #8]
          return 1;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0ac      	b.n	8001b1a <json_get_string_size+0x346>
         * Note: the high and low surrogate halves used by UTF-16 (U+D800
         * through U+DFFF) and code points not encodable by UTF-16 (those after
         * U+10FFFF) are not legal Unicode values, and their UTF-8 encoding must
         * be treated as an invalid byte sequence. */

        if (high_surrogate != 0) {
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d015      	beq.n	80019f2 <json_get_string_size+0x21e>
          /* we previously read the high half of the \uxxxx\uxxxx pair, so now
           * we expect the low half. */
          if (codepoint >= 0xdc00 &&
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80019cc:	d309      	bcc.n	80019e2 <json_get_string_size+0x20e>
              codepoint <= 0xdfff) { /* low surrogate range. */
 80019ce:	68fb      	ldr	r3, [r7, #12]
          if (codepoint >= 0xdc00 &&
 80019d0:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80019d4:	d205      	bcs.n	80019e2 <json_get_string_size+0x20e>
            data_size += 3;
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	3303      	adds	r3, #3
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
            high_surrogate = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	e04b      	b.n	8001a7a <json_get_string_size+0x2a6>
          } else {
            state->error = json_parse_error_invalid_string_escape_sequence;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2204      	movs	r2, #4
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
            state->offset = offset;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ec:	609a      	str	r2, [r3, #8]
            return 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e093      	b.n	8001b1a <json_get_string_size+0x346>
          }
        } else if (codepoint <= 0x7f) {
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b7f      	cmp	r3, #127	; 0x7f
 80019f6:	d940      	bls.n	8001a7a <json_get_string_size+0x2a6>
          data_size += 0;
        } else if (codepoint <= 0x7ff) {
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019fe:	d203      	bcs.n	8001a08 <json_get_string_size+0x234>
          data_size += 1;
 8001a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a02:	3301      	adds	r3, #1
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a06:	e038      	b.n	8001a7a <json_get_string_size+0x2a6>
        } else if (codepoint >= 0xd800 &&
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001a0e:	d321      	bcc.n	8001a54 <json_get_string_size+0x280>
                   codepoint <= 0xdbff) { /* high surrogate range. */
 8001a10:	68fb      	ldr	r3, [r7, #12]
        } else if (codepoint >= 0xd800 &&
 8001a12:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001a16:	d21d      	bcs.n	8001a54 <json_get_string_size+0x280>
          /* The codepoint is the first half of a "utf-16 surrogate pair". so we
           * need the other half for it to be valid: \uHHHH\uLLLL. */
          if (offset + 11 > size || '\\' != src[offset + 5] ||
 8001a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1a:	330b      	adds	r3, #11
 8001a1c:	6a3a      	ldr	r2, [r7, #32]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d30d      	bcc.n	8001a3e <json_get_string_size+0x26a>
 8001a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a24:	3305      	adds	r3, #5
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	4413      	add	r3, r2
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b5c      	cmp	r3, #92	; 0x5c
 8001a2e:	d106      	bne.n	8001a3e <json_get_string_size+0x26a>
              'u' != src[offset + 6]) {
 8001a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a32:	3306      	adds	r3, #6
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	4413      	add	r3, r2
 8001a38:	781b      	ldrb	r3, [r3, #0]
          if (offset + 11 > size || '\\' != src[offset + 5] ||
 8001a3a:	2b75      	cmp	r3, #117	; 0x75
 8001a3c:	d007      	beq.n	8001a4e <json_get_string_size+0x27a>
            state->error = json_parse_error_invalid_string_escape_sequence;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2204      	movs	r2, #4
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
            state->offset = offset;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a48:	609a      	str	r2, [r3, #8]
            return 1;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e065      	b.n	8001b1a <json_get_string_size+0x346>
          }
          high_surrogate = codepoint;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
 8001a52:	e012      	b.n	8001a7a <json_get_string_size+0x2a6>
        } else if (codepoint >= 0xd800 &&
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001a5a:	d30b      	bcc.n	8001a74 <json_get_string_size+0x2a0>
                   codepoint <= 0xdfff) { /* low surrogate range. */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
        } else if (codepoint >= 0xd800 &&
 8001a5e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001a62:	d207      	bcs.n	8001a74 <json_get_string_size+0x2a0>
          /* we did not read the other half before. */
          state->error = json_parse_error_invalid_string_escape_sequence;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2204      	movs	r2, #4
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
          state->offset = offset;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a6e:	609a      	str	r2, [r3, #8]
          return 1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e052      	b.n	8001b1a <json_get_string_size+0x346>
        } else {
          data_size += 2;
 8001a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a76:	3302      	adds	r3, #2
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        /* escaped codepoints after 0xffff are supported in json through utf-16
         * surrogate pairs: \uD83D\uDD25 for U+1F525. */

        offset += 5;
 8001a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7c:	3305      	adds	r3, #5
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001a80:	bf00      	nop
 8001a82:	e01f      	b.n	8001ac4 <json_get_string_size+0x2f0>
      }
    } else if (('\r' == src[offset]) || ('\n' == src[offset])) {
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	4413      	add	r3, r2
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b0d      	cmp	r3, #13
 8001a8e:	d005      	beq.n	8001a9c <json_get_string_size+0x2c8>
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b0a      	cmp	r3, #10
 8001a9a:	d110      	bne.n	8001abe <json_get_string_size+0x2ea>
      if (!(json_parse_flags_allow_multi_line_strings & flags_bitset)) {
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d107      	bne.n	8001ab6 <json_get_string_size+0x2e2>
        /* invalid escaped unicode sequence! */
        state->error = json_parse_error_invalid_string_escape_sequence;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab0:	609a      	str	r2, [r3, #8]
        return 1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e031      	b.n	8001b1a <json_get_string_size+0x346>
      }

      offset++;
 8001ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab8:	3301      	adds	r3, #1
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001abc:	e002      	b.n	8001ac4 <json_get_string_size+0x2f0>
    } else {
      /* skip character (valid part of sequence). */
      offset++;
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while ((offset < size) && (quote_to_use != src[offset])) {
 8001ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d207      	bcs.n	8001adc <json_get_string_size+0x308>
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	7dfa      	ldrb	r2, [r7, #23]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	f47f aed1 	bne.w	800187e <json_get_string_size+0xaa>
    }
  }

  /* If the offset is equal to the size, we had a non-terminated string! */
  if (offset == size) {
 8001adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d108      	bne.n	8001af6 <json_get_string_size+0x322>
    state->error = json_parse_error_premature_end_of_buffer;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
    state->offset = offset - 1;
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	1e5a      	subs	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	609a      	str	r2, [r3, #8]
    return 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e011      	b.n	8001b1a <json_get_string_size+0x346>
  }

  /* skip trailing '"' or '\''. */
  offset++;
 8001af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af8:	3301      	adds	r3, #1
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* add enough space to store the string. */
  state->data_size += data_size;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69da      	ldr	r2, [r3, #28]
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b02:	441a      	add	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	61da      	str	r2, [r3, #28]

  /* one more byte for null terminator ending the string! */
  state->data_size++;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	61da      	str	r2, [r3, #28]

  /* update offset. */
  state->offset = offset;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b16:	609a      	str	r2, [r3, #8]

  return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3730      	adds	r7, #48	; 0x30
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop

08001b24 <is_valid_unquoted_key_char>:

json_weak int is_valid_unquoted_key_char(const char c);
int is_valid_unquoted_key_char(const char c) {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  return (('0' <= c && c <= '9') || ('a' <= c && c <= 'z') ||
          ('A' <= c && c <= 'Z') || ('_' == c));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b2f      	cmp	r3, #47	; 0x2f
 8001b32:	d902      	bls.n	8001b3a <is_valid_unquoted_key_char+0x16>
  return (('0' <= c && c <= '9') || ('a' <= c && c <= 'z') ||
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	2b39      	cmp	r3, #57	; 0x39
 8001b38:	d90e      	bls.n	8001b58 <is_valid_unquoted_key_char+0x34>
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b60      	cmp	r3, #96	; 0x60
 8001b3e:	d902      	bls.n	8001b46 <is_valid_unquoted_key_char+0x22>
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	2b7a      	cmp	r3, #122	; 0x7a
 8001b44:	d908      	bls.n	8001b58 <is_valid_unquoted_key_char+0x34>
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	2b40      	cmp	r3, #64	; 0x40
 8001b4a:	d902      	bls.n	8001b52 <is_valid_unquoted_key_char+0x2e>
          ('A' <= c && c <= 'Z') || ('_' == c));
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	2b5a      	cmp	r3, #90	; 0x5a
 8001b50:	d902      	bls.n	8001b58 <is_valid_unquoted_key_char+0x34>
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b5f      	cmp	r3, #95	; 0x5f
 8001b56:	d101      	bne.n	8001b5c <is_valid_unquoted_key_char+0x38>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <is_valid_unquoted_key_char+0x3a>
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <json_get_key_size>:

json_weak int json_get_key_size(struct json_parse_state_s *state);
int json_get_key_size(struct json_parse_state_s *state) {
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b088      	sub	sp, #32
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	617b      	str	r3, [r7, #20]

  if (json_parse_flags_allow_unquoted_keys & flags_bitset) {
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d059      	beq.n	8001c36 <json_get_key_size+0xcc>
    size_t offset = state->offset;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61fb      	str	r3, [r7, #28]
    const size_t size = state->size;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	613b      	str	r3, [r7, #16]
    const char *const src = state->src;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	60fb      	str	r3, [r7, #12]
    size_t data_size = state->data_size;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	61bb      	str	r3, [r7, #24]

    /* if we are allowing unquoted keys, first grok for a quote... */
    if ('"' == src[offset]) {
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b22      	cmp	r3, #34	; 0x22
 8001ba4:	d105      	bne.n	8001bb2 <json_get_key_size+0x48>
      /* ... if we got a comma, just parse the key as a string as normal. */
      return json_get_string_size(state, 1);
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fe13 	bl	80017d4 <json_get_string_size>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	e046      	b.n	8001c40 <json_get_key_size+0xd6>
    } else if ((json_parse_flags_allow_single_quoted_strings & flags_bitset) &&
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d011      	beq.n	8001be0 <json_get_key_size+0x76>
               ('\'' == src[offset])) {
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
    } else if ((json_parse_flags_allow_single_quoted_strings & flags_bitset) &&
 8001bc4:	2b27      	cmp	r3, #39	; 0x27
 8001bc6:	d10b      	bne.n	8001be0 <json_get_key_size+0x76>
      /* ... if we got a comma, just parse the key as a string as normal. */
      return json_get_string_size(state, 1);
 8001bc8:	2101      	movs	r1, #1
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fe02 	bl	80017d4 <json_get_string_size>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	e035      	b.n	8001c40 <json_get_key_size+0xd6>
    } else {
      while ((offset < size) && is_valid_unquoted_key_char(src[offset])) {
        offset++;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
        data_size++;
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	61bb      	str	r3, [r7, #24]
      while ((offset < size) && is_valid_unquoted_key_char(src[offset])) {
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d209      	bcs.n	8001bfc <json_get_key_size+0x92>
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	4413      	add	r3, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff97 	bl	8001b24 <is_valid_unquoted_key_char>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1eb      	bne.n	8001bd4 <json_get_key_size+0x6a>
      }

      /* one more byte for null terminator ending the string! */
      data_size++;
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	61bb      	str	r3, [r7, #24]

      if (json_parse_flags_allow_location_information & flags_bitset) {
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <json_get_key_size+0xb0>
        state->dom_size += sizeof(struct json_string_ex_s);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f103 0214 	add.w	r2, r3, #20
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	619a      	str	r2, [r3, #24]
 8001c18:	e005      	b.n	8001c26 <json_get_key_size+0xbc>
      } else {
        state->dom_size += sizeof(struct json_string_s);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f103 0208 	add.w	r2, r3, #8
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	619a      	str	r2, [r3, #24]
      }

      /* update offset. */
      state->offset = offset;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	609a      	str	r2, [r3, #8]

      /* update data_size. */
      state->data_size = data_size;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	61da      	str	r2, [r3, #28]

      return 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e004      	b.n	8001c40 <json_get_key_size+0xd6>
    }
  } else {
    /* we are only allowed to have quoted keys, so just parse a string! */
    return json_get_string_size(state, 1);
 8001c36:	2101      	movs	r1, #1
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff fdcb 	bl	80017d4 <json_get_string_size>
 8001c3e:	4603      	mov	r3, r0
  }
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <json_get_object_size>:

json_weak int json_get_object_size(struct json_parse_state_s *state,
                                   int is_global_object);
int json_get_object_size(struct json_parse_state_s *state,
                         int is_global_object) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  const size_t flags_bitset = state->flags_bitset;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	61bb      	str	r3, [r7, #24]
  const char *const src = state->src;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	617b      	str	r3, [r7, #20]
  const size_t size = state->size;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	613b      	str	r3, [r7, #16]
  size_t elements = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  int allow_comma = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
  int found_closing_brace = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]

  if (is_global_object) {
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00f      	beq.n	8001c96 <json_get_object_size+0x4e>
    /* if we found an opening '{' of an object, we actually have a normal JSON
     * object at the root of the DOM... */
    if (!json_skip_all_skippables(state) && '{' == state->src[state->offset]) {
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fd59 	bl	800172e <json_skip_all_skippables>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <json_get_object_size+0x4e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b7b      	cmp	r3, #123	; 0x7b
 8001c90:	d101      	bne.n	8001c96 <json_get_object_size+0x4e>
      /* . and we don't actually have a global object after all! */
      is_global_object = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
    }
  }

  if (!is_global_object) {
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d110      	bne.n	8001cbe <json_get_object_size+0x76>
    if ('{' != src[state->offset]) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b7b      	cmp	r3, #123	; 0x7b
 8001ca8:	d004      	beq.n	8001cb4 <json_get_object_size+0x6c>
      state->error = json_parse_error_unknown;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	220b      	movs	r2, #11
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0e5      	b.n	8001e80 <json_get_object_size+0x238>
    }

    /* skip leading '{'. */
    state->offset++;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
  }

  state->dom_size += sizeof(struct json_object_s);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f103 0208 	add.w	r2, r3, #8
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	619a      	str	r2, [r3, #24]

  if ((state->offset == size) && !is_global_object) {
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d107      	bne.n	8001ce4 <json_get_object_size+0x9c>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d104      	bne.n	8001ce4 <json_get_object_size+0x9c>
    state->error = json_parse_error_premature_end_of_buffer;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2207      	movs	r2, #7
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
    return 1;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0cd      	b.n	8001e80 <json_get_object_size+0x238>
  }

  do {
    if (!is_global_object) {
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d119      	bne.n	8001d1e <json_get_object_size+0xd6>
      if (json_skip_all_skippables(state)) {
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fd1f 	bl	800172e <json_skip_all_skippables>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <json_get_object_size+0xb8>
        state->error = json_parse_error_premature_end_of_buffer;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0bf      	b.n	8001e80 <json_get_object_size+0x238>
      }

      if ('}' == src[state->offset]) {
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b7d      	cmp	r3, #125	; 0x7d
 8001d0c:	d10e      	bne.n	8001d2c <json_get_object_size+0xe4>
        /* skip trailing '}'. */
        state->offset++;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	609a      	str	r2, [r3, #8]

        found_closing_brace = 1;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]

        /* finished the object! */
        break;
 8001d1c:	e095      	b.n	8001e4a <json_get_object_size+0x202>
      }
    } else {
      /* we don't require brackets, so that means the object ends when the input
       * stream ends! */
      if (json_skip_all_skippables(state)) {
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff fd05 	bl	800172e <json_skip_all_skippables>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 808e 	bne.w	8001e48 <json_get_object_size+0x200>
        break;
      }
    }

    /* if we parsed at least once element previously, grok for a comma. */
    if (allow_comma) {
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d02b      	beq.n	8001d8a <json_get_object_size+0x142>
      if (',' == src[state->offset]) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4413      	add	r3, r2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b2c      	cmp	r3, #44	; 0x2c
 8001d3e:	d107      	bne.n	8001d50 <json_get_object_size+0x108>
        /* skip comma. */
        state->offset++;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	609a      	str	r2, [r3, #8]
        allow_comma = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	e00c      	b.n	8001d6a <json_get_object_size+0x122>
      } else if (json_parse_flags_allow_no_commas & flags_bitset) {
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <json_get_object_size+0x118>
        /* we don't require a comma, and we didn't find one, which is ok! */
        allow_comma = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
 8001d5e:	e004      	b.n	8001d6a <json_get_object_size+0x122>
      } else {
        /* otherwise we are required to have a comma, and we found none. */
        state->error = json_parse_error_expected_comma_or_closing_bracket;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e08a      	b.n	8001e80 <json_get_object_size+0x238>
      }

      if (json_parse_flags_allow_trailing_comma & flags_bitset) {
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d161      	bne.n	8001e38 <json_get_object_size+0x1f0>
        continue;
      } else {
        if (json_skip_all_skippables(state)) {
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff fcda 	bl	800172e <json_skip_all_skippables>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <json_get_object_size+0x142>
          state->error = json_parse_error_premature_end_of_buffer;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2207      	movs	r2, #7
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28
          return 1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e07a      	b.n	8001e80 <json_get_object_size+0x238>
        }
      }
    }

    if (json_get_key_size(state)) {
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff feed 	bl	8001b6a <json_get_key_size>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <json_get_object_size+0x158>
      /* key parsing failed! */
      state->error = json_parse_error_invalid_string;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2208      	movs	r2, #8
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e06f      	b.n	8001e80 <json_get_object_size+0x238>
    }

    if (json_skip_all_skippables(state)) {
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fcc4 	bl	800172e <json_skip_all_skippables>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d004      	beq.n	8001db6 <json_get_object_size+0x16e>
      state->error = json_parse_error_premature_end_of_buffer;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2207      	movs	r2, #7
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e064      	b.n	8001e80 <json_get_object_size+0x238>
    }

    if (json_parse_flags_allow_equals_in_object & flags_bitset) {
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d010      	beq.n	8001de2 <json_get_object_size+0x19a>
      const char current = src[state->offset];
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	73fb      	strb	r3, [r7, #15]
      if ((':' != current) && ('=' != current)) {
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b3a      	cmp	r3, #58	; 0x3a
 8001dd0:	d013      	beq.n	8001dfa <json_get_object_size+0x1b2>
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b3d      	cmp	r3, #61	; 0x3d
 8001dd6:	d010      	beq.n	8001dfa <json_get_object_size+0x1b2>
        state->error = json_parse_error_expected_colon;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e04e      	b.n	8001e80 <json_get_object_size+0x238>
      }
    } else {
      if (':' != src[state->offset]) {
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b3a      	cmp	r3, #58	; 0x3a
 8001dee:	d004      	beq.n	8001dfa <json_get_object_size+0x1b2>
        state->error = json_parse_error_expected_colon;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e042      	b.n	8001e80 <json_get_object_size+0x238>
      }
    }

    /* skip colon. */
    state->offset++;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	609a      	str	r2, [r3, #8]

    if (json_skip_all_skippables(state)) {
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff fc92 	bl	800172e <json_skip_all_skippables>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <json_get_object_size+0x1d2>
      state->error = json_parse_error_premature_end_of_buffer;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2207      	movs	r2, #7
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e032      	b.n	8001e80 <json_get_object_size+0x238>
    }

    if (json_get_value_size(state, /* is_global_object = */ 0)) {
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fb43 	bl	80024a8 <json_get_value_size>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <json_get_object_size+0x1e4>
      /* value parsing failed! */
      return 1;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e029      	b.n	8001e80 <json_get_object_size+0x238>
    }

    /* successfully parsed a name/value pair! */
    elements++;
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	3301      	adds	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    allow_comma = 1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	623b      	str	r3, [r7, #32]
 8001e36:	e000      	b.n	8001e3a <json_get_object_size+0x1f2>
        continue;
 8001e38:	bf00      	nop
  } while (state->offset < size);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	f63f af4f 	bhi.w	8001ce4 <json_get_object_size+0x9c>
 8001e46:	e000      	b.n	8001e4a <json_get_object_size+0x202>
        break;
 8001e48:	bf00      	nop

  if ((state->offset == size) && !is_global_object && !found_closing_brace) {
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d10a      	bne.n	8001e6a <json_get_object_size+0x222>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d107      	bne.n	8001e6a <json_get_object_size+0x222>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <json_get_object_size+0x222>
    state->error = json_parse_error_premature_end_of_buffer;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2207      	movs	r2, #7
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28
    return 1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00a      	b.n	8001e80 <json_get_object_size+0x238>
  }

  state->dom_size += sizeof(struct json_object_element_s) * elements;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6999      	ldr	r1, [r3, #24]
 8001e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	18ca      	adds	r2, r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	619a      	str	r2, [r3, #24]

  return 0;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <json_get_array_size>:

json_weak int json_get_array_size(struct json_parse_state_s *state);
int json_get_array_size(struct json_parse_state_s *state) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	617b      	str	r3, [r7, #20]
  size_t elements = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  int allow_comma = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
  const char *const src = state->src;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	613b      	str	r3, [r7, #16]
  const size_t size = state->size;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]

  if ('[' != src[state->offset]) {
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b5b      	cmp	r3, #91	; 0x5b
 8001eb6:	d004      	beq.n	8001ec2 <json_get_array_size+0x3a>
    /* expected array to begin with leading '['. */
    state->error = json_parse_error_unknown;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	220b      	movs	r2, #11
 8001ebc:	629a      	str	r2, [r3, #40]	; 0x28
    return 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e071      	b.n	8001fa6 <json_get_array_size+0x11e>
  }

  /* skip leading '['. */
  state->offset++;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	609a      	str	r2, [r3, #8]

  state->dom_size += sizeof(struct json_array_s);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f103 0208 	add.w	r2, r3, #8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	619a      	str	r2, [r3, #24]

  while (state->offset < size) {
 8001ed8:	e05c      	b.n	8001f94 <json_get_array_size+0x10c>
    if (json_skip_all_skippables(state)) {
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff fc27 	bl	800172e <json_skip_all_skippables>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <json_get_array_size+0x68>
      state->error = json_parse_error_premature_end_of_buffer;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2207      	movs	r2, #7
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e05a      	b.n	8001fa6 <json_get_array_size+0x11e>
    }

    if (']' == src[state->offset]) {
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b5d      	cmp	r3, #93	; 0x5d
 8001efc:	d10d      	bne.n	8001f1a <json_get_array_size+0x92>
      /* skip trailing ']'. */
      state->offset++;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	609a      	str	r2, [r3, #8]

      state->dom_size += sizeof(struct json_array_element_s) * elements;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699a      	ldr	r2, [r3, #24]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	441a      	add	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	619a      	str	r2, [r3, #24]

      /* finished the object! */
      return 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e045      	b.n	8001fa6 <json_get_array_size+0x11e>
    }

    /* if we parsed at least once element previously, grok for a comma. */
    if (allow_comma) {
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d02b      	beq.n	8001f78 <json_get_array_size+0xf0>
      if (',' == src[state->offset]) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b2c      	cmp	r3, #44	; 0x2c
 8001f2c:	d107      	bne.n	8001f3e <json_get_array_size+0xb6>
        /* skip comma. */
        state->offset++;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	609a      	str	r2, [r3, #8]
        allow_comma = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	e009      	b.n	8001f52 <json_get_array_size+0xca>
      } else if (!(json_parse_flags_allow_no_commas & flags_bitset)) {
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d104      	bne.n	8001f52 <json_get_array_size+0xca>
        state->error = json_parse_error_expected_comma_or_closing_bracket;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e029      	b.n	8001fa6 <json_get_array_size+0x11e>
      }

      if (json_parse_flags_allow_trailing_comma & flags_bitset) {
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <json_get_array_size+0xda>
        allow_comma = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
        continue;
 8001f60:	e018      	b.n	8001f94 <json_get_array_size+0x10c>
      } else {
        if (json_skip_all_skippables(state)) {
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fbe3 	bl	800172e <json_skip_all_skippables>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d004      	beq.n	8001f78 <json_get_array_size+0xf0>
          state->error = json_parse_error_premature_end_of_buffer;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2207      	movs	r2, #7
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28
          return 1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e016      	b.n	8001fa6 <json_get_array_size+0x11e>
        }
      }
    }

    if (json_get_value_size(state, /* is_global_object = */ 0)) {
 8001f78:	2100      	movs	r1, #0
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fa94 	bl	80024a8 <json_get_value_size>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <json_get_array_size+0x102>
      /* value parsing failed! */
      return 1;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00d      	b.n	8001fa6 <json_get_array_size+0x11e>
    }

    /* successfully parsed an array element! */
    elements++;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	61fb      	str	r3, [r7, #28]
    allow_comma = 1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	61bb      	str	r3, [r7, #24]
  while (state->offset < size) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d89d      	bhi.n	8001eda <json_get_array_size+0x52>
  }

  /* we consumed the entire input before finding the closing ']' of the array!
   */
  state->error = json_parse_error_premature_end_of_buffer;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
  return 1;
 8001fa4:	2301      	movs	r3, #1
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <json_get_number_size>:

json_weak int json_get_number_size(struct json_parse_state_s *state);
int json_get_number_size(struct json_parse_state_s *state) {
 8001fb0:	b480      	push	{r7}
 8001fb2:	b095      	sub	sp, #84	; 0x54
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t offset = state->offset;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  const size_t size = state->size;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  int had_leading_digits = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	64bb      	str	r3, [r7, #72]	; 0x48
  const char *const src = state->src;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24

  state->dom_size += sizeof(struct json_number_s);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f103 0208 	add.w	r2, r3, #8
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]

  if ((json_parse_flags_allow_hexadecimal_numbers & flags_bitset) &&
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d04a      	beq.n	8002080 <json_get_number_size+0xd0>
      (offset + 1 < size) && ('0' == src[offset]) &&
 8001fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fec:	3301      	adds	r3, #1
  if ((json_parse_flags_allow_hexadecimal_numbers & flags_bitset) &&
 8001fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d945      	bls.n	8002080 <json_get_number_size+0xd0>
      (offset + 1 < size) && ('0' == src[offset]) &&
 8001ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff8:	4413      	add	r3, r2
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b30      	cmp	r3, #48	; 0x30
 8001ffe:	d13f      	bne.n	8002080 <json_get_number_size+0xd0>
      (('x' == src[offset + 1]) || ('X' == src[offset + 1]))) {
 8002000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002002:	3301      	adds	r3, #1
 8002004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002006:	4413      	add	r3, r2
 8002008:	781b      	ldrb	r3, [r3, #0]
      (offset + 1 < size) && ('0' == src[offset]) &&
 800200a:	2b78      	cmp	r3, #120	; 0x78
 800200c:	d006      	beq.n	800201c <json_get_number_size+0x6c>
      (('x' == src[offset + 1]) || ('X' == src[offset + 1]))) {
 800200e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002010:	3301      	adds	r3, #1
 8002012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002014:	4413      	add	r3, r2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b58      	cmp	r3, #88	; 0x58
 800201a:	d131      	bne.n	8002080 <json_get_number_size+0xd0>
    /* skip the leading 0x that identifies a hexadecimal number. */
    offset += 2;
 800201c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800201e:	3302      	adds	r3, #2
 8002020:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* consume hexadecimal digits. */
    while ((offset < size) && (('0' <= src[offset] && src[offset] <= '9') ||
 8002022:	e002      	b.n	800202a <json_get_number_size+0x7a>
                               ('a' <= src[offset] && src[offset] <= 'f') ||
                               ('A' <= src[offset] && src[offset] <= 'F'))) {
      offset++;
 8002024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002026:	3301      	adds	r3, #1
 8002028:	64fb      	str	r3, [r7, #76]	; 0x4c
    while ((offset < size) && (('0' <= src[offset] && src[offset] <= '9') ||
 800202a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202e:	429a      	cmp	r2, r3
 8002030:	f080 81a3 	bcs.w	800237a <json_get_number_size+0x3ca>
 8002034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002038:	4413      	add	r3, r2
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b2f      	cmp	r3, #47	; 0x2f
 800203e:	d905      	bls.n	800204c <json_get_number_size+0x9c>
 8002040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002044:	4413      	add	r3, r2
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b39      	cmp	r3, #57	; 0x39
 800204a:	d9eb      	bls.n	8002024 <json_get_number_size+0x74>
                               ('a' <= src[offset] && src[offset] <= 'f') ||
 800204c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002050:	4413      	add	r3, r2
 8002052:	781b      	ldrb	r3, [r3, #0]
    while ((offset < size) && (('0' <= src[offset] && src[offset] <= '9') ||
 8002054:	2b60      	cmp	r3, #96	; 0x60
 8002056:	d905      	bls.n	8002064 <json_get_number_size+0xb4>
                               ('a' <= src[offset] && src[offset] <= 'f') ||
 8002058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800205c:	4413      	add	r3, r2
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b66      	cmp	r3, #102	; 0x66
 8002062:	d9df      	bls.n	8002024 <json_get_number_size+0x74>
                               ('A' <= src[offset] && src[offset] <= 'F'))) {
 8002064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002068:	4413      	add	r3, r2
 800206a:	781b      	ldrb	r3, [r3, #0]
                               ('a' <= src[offset] && src[offset] <= 'f') ||
 800206c:	2b40      	cmp	r3, #64	; 0x40
 800206e:	f240 8184 	bls.w	800237a <json_get_number_size+0x3ca>
                               ('A' <= src[offset] && src[offset] <= 'F'))) {
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b46      	cmp	r3, #70	; 0x46
 800207c:	d9d2      	bls.n	8002024 <json_get_number_size+0x74>
  if ((json_parse_flags_allow_hexadecimal_numbers & flags_bitset) &&
 800207e:	e17c      	b.n	800237a <json_get_number_size+0x3ca>
    }
  } else {
    int found_sign = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	647b      	str	r3, [r7, #68]	; 0x44
    int inf_or_nan = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	643b      	str	r3, [r7, #64]	; 0x40

    if ((offset < size) &&
 8002088:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	429a      	cmp	r2, r3
 800208e:	d215      	bcs.n	80020bc <json_get_number_size+0x10c>
        (('-' == src[offset]) ||
 8002090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002094:	4413      	add	r3, r2
 8002096:	781b      	ldrb	r3, [r3, #0]
    if ((offset < size) &&
 8002098:	2b2d      	cmp	r3, #45	; 0x2d
 800209a:	d00a      	beq.n	80020b2 <json_get_number_size+0x102>
         ((json_parse_flags_allow_leading_plus_sign & flags_bitset) &&
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (('-' == src[offset]) ||
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <json_get_number_size+0x10c>
          ('+' == src[offset])))) {
 80020a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020aa:	4413      	add	r3, r2
 80020ac:	781b      	ldrb	r3, [r3, #0]
         ((json_parse_flags_allow_leading_plus_sign & flags_bitset) &&
 80020ae:	2b2b      	cmp	r3, #43	; 0x2b
 80020b0:	d104      	bne.n	80020bc <json_get_number_size+0x10c>
      /* skip valid leading '-' or '+'. */
      offset++;
 80020b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b4:	3301      	adds	r3, #1
 80020b6:	64fb      	str	r3, [r7, #76]	; 0x4c

      found_sign = 1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (json_parse_flags_allow_inf_and_nan & flags_bitset) {
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d061      	beq.n	800218a <json_get_number_size+0x1da>
      const char inf[9] = "Infinity";
 80020c6:	4a78      	ldr	r2, [pc, #480]	; (80022a8 <json_get_number_size+0x2f8>)
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ce:	c303      	stmia	r3!, {r0, r1}
 80020d0:	701a      	strb	r2, [r3, #0]
      const size_t inf_strlen = sizeof(inf) - 1;
 80020d2:	2308      	movs	r3, #8
 80020d4:	623b      	str	r3, [r7, #32]
      const char nan[4] = "NaN";
 80020d6:	4b75      	ldr	r3, [pc, #468]	; (80022ac <json_get_number_size+0x2fc>)
 80020d8:	60fb      	str	r3, [r7, #12]
      const size_t nan_strlen = sizeof(nan) - 1;
 80020da:	2303      	movs	r3, #3
 80020dc:	61fb      	str	r3, [r7, #28]

      if (offset + inf_strlen < size) {
 80020de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	4413      	add	r3, r2
 80020e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d924      	bls.n	8002134 <json_get_number_size+0x184>
        int found = 1;
 80020ea:	2301      	movs	r3, #1
 80020ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        size_t i;
        for (i = 0; i < inf_strlen; i++) {
 80020ee:	2300      	movs	r3, #0
 80020f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80020f2:	e012      	b.n	800211a <json_get_number_size+0x16a>
          if (inf[i] != src[offset + i]) {
 80020f4:	f107 0210 	add.w	r2, r7, #16
 80020f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fa:	4413      	add	r3, r2
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002102:	440b      	add	r3, r1
 8002104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002106:	440b      	add	r3, r1
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d002      	beq.n	8002114 <json_get_number_size+0x164>
            found = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
 8002112:	e006      	b.n	8002122 <json_get_number_size+0x172>
        for (i = 0; i < inf_strlen; i++) {
 8002114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002116:	3301      	adds	r3, #1
 8002118:	63bb      	str	r3, [r7, #56]	; 0x38
 800211a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	429a      	cmp	r2, r3
 8002120:	d3e8      	bcc.n	80020f4 <json_get_number_size+0x144>
          }
        }

        if (found) {
 8002122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <json_get_number_size+0x184>
          /* We found our special 'Infinity' keyword! */
          offset += inf_strlen;
 8002128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	4413      	add	r3, r2
 800212e:	64fb      	str	r3, [r7, #76]	; 0x4c

          inf_or_nan = 1;
 8002130:	2301      	movs	r3, #1
 8002132:	643b      	str	r3, [r7, #64]	; 0x40
        }
      }

      if (offset + nan_strlen < size) {
 8002134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	4413      	add	r3, r2
 800213a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800213c:	429a      	cmp	r2, r3
 800213e:	d924      	bls.n	800218a <json_get_number_size+0x1da>
        int found = 1;
 8002140:	2301      	movs	r3, #1
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
        size_t i;
        for (i = 0; i < nan_strlen; i++) {
 8002144:	2300      	movs	r3, #0
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
 8002148:	e012      	b.n	8002170 <json_get_number_size+0x1c0>
          if (nan[i] != src[offset + i]) {
 800214a:	f107 020c 	add.w	r2, r7, #12
 800214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002150:	4413      	add	r3, r2
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002158:	440b      	add	r3, r1
 800215a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215c:	440b      	add	r3, r1
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d002      	beq.n	800216a <json_get_number_size+0x1ba>
            found = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8002168:	e006      	b.n	8002178 <json_get_number_size+0x1c8>
        for (i = 0; i < nan_strlen; i++) {
 800216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216c:	3301      	adds	r3, #1
 800216e:	633b      	str	r3, [r7, #48]	; 0x30
 8002170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	429a      	cmp	r2, r3
 8002176:	d3e8      	bcc.n	800214a <json_get_number_size+0x19a>
          }
        }

        if (found) {
 8002178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <json_get_number_size+0x1da>
          /* We found our special 'NaN' keyword! */
          offset += nan_strlen;
 800217e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	64fb      	str	r3, [r7, #76]	; 0x4c

          inf_or_nan = 1;
 8002186:	2301      	movs	r3, #1
 8002188:	643b      	str	r3, [r7, #64]	; 0x40
        }
      }
    }

    if (found_sign && !inf_or_nan && (offset < size) &&
 800218a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800218c:	2b00      	cmp	r3, #0
 800218e:	d025      	beq.n	80021dc <json_get_number_size+0x22c>
 8002190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d122      	bne.n	80021dc <json_get_number_size+0x22c>
 8002196:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219a:	429a      	cmp	r2, r3
 800219c:	d21e      	bcs.n	80021dc <json_get_number_size+0x22c>
        !('0' <= src[offset] && src[offset] <= '9')) {
 800219e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021a2:	4413      	add	r3, r2
 80021a4:	781b      	ldrb	r3, [r3, #0]
    if (found_sign && !inf_or_nan && (offset < size) &&
 80021a6:	2b2f      	cmp	r3, #47	; 0x2f
 80021a8:	d905      	bls.n	80021b6 <json_get_number_size+0x206>
        !('0' <= src[offset] && src[offset] <= '9')) {
 80021aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ae:	4413      	add	r3, r2
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b39      	cmp	r3, #57	; 0x39
 80021b4:	d912      	bls.n	80021dc <json_get_number_size+0x22c>
      /* check if we are allowing leading '.'. */
      if (!(json_parse_flags_allow_leading_or_trailing_decimal_point &
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <json_get_number_size+0x21c>
            flags_bitset) ||
          ('.' != src[offset])) {
 80021c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021c4:	4413      	add	r3, r2
 80021c6:	781b      	ldrb	r3, [r3, #0]
            flags_bitset) ||
 80021c8:	2b2e      	cmp	r3, #46	; 0x2e
 80021ca:	d007      	beq.n	80021dc <json_get_number_size+0x22c>
        /* a leading '-' must be immediately followed by any digit! */
        state->error = json_parse_error_invalid_number_format;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2205      	movs	r2, #5
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021d6:	609a      	str	r2, [r3, #8]
        return 1;
 80021d8:	2301      	movs	r3, #1
 80021da:	e15f      	b.n	800249c <json_get_number_size+0x4ec>
      }
    }

    if ((offset < size) && ('0' == src[offset])) {
 80021dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d227      	bcs.n	8002234 <json_get_number_size+0x284>
 80021e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e8:	4413      	add	r3, r2
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b30      	cmp	r3, #48	; 0x30
 80021ee:	d121      	bne.n	8002234 <json_get_number_size+0x284>
      /* skip valid '0'. */
      offset++;
 80021f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f2:	3301      	adds	r3, #1
 80021f4:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* we need to record whether we had any leading digits for checks later.
       */
      had_leading_digits = 1;
 80021f6:	2301      	movs	r3, #1
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48

      if ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
 80021fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	429a      	cmp	r2, r3
 8002200:	d218      	bcs.n	8002234 <json_get_number_size+0x284>
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002206:	4413      	add	r3, r2
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b2f      	cmp	r3, #47	; 0x2f
 800220c:	d912      	bls.n	8002234 <json_get_number_size+0x284>
 800220e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002212:	4413      	add	r3, r2
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b39      	cmp	r3, #57	; 0x39
 8002218:	d80c      	bhi.n	8002234 <json_get_number_size+0x284>
        /* a leading '0' must not be immediately followed by any digit! */
        state->error = json_parse_error_invalid_number_format;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2205      	movs	r2, #5
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002224:	609a      	str	r2, [r3, #8]
        return 1;
 8002226:	2301      	movs	r3, #1
 8002228:	e138      	b.n	800249c <json_get_number_size+0x4ec>
      }
    }

    /* the main digits of our number next. */
    while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
      offset++;
 800222a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800222c:	3301      	adds	r3, #1
 800222e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* we need to record whether we had any leading digits for checks later.
       */
      had_leading_digits = 1;
 8002230:	2301      	movs	r3, #1
 8002232:	64bb      	str	r3, [r7, #72]	; 0x48
    while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
 8002234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	429a      	cmp	r2, r3
 800223a:	d20b      	bcs.n	8002254 <json_get_number_size+0x2a4>
 800223c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002240:	4413      	add	r3, r2
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b2f      	cmp	r3, #47	; 0x2f
 8002246:	d905      	bls.n	8002254 <json_get_number_size+0x2a4>
 8002248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800224c:	4413      	add	r3, r2
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b39      	cmp	r3, #57	; 0x39
 8002252:	d9ea      	bls.n	800222a <json_get_number_size+0x27a>
    }

    if ((offset < size) && ('.' == src[offset])) {
 8002254:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	429a      	cmp	r2, r3
 800225a:	d23c      	bcs.n	80022d6 <json_get_number_size+0x326>
 800225c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002260:	4413      	add	r3, r2
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b2e      	cmp	r3, #46	; 0x2e
 8002266:	d136      	bne.n	80022d6 <json_get_number_size+0x326>
      offset++;
 8002268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800226a:	3301      	adds	r3, #1
 800226c:	64fb      	str	r3, [r7, #76]	; 0x4c

      if (!('0' <= src[offset] && src[offset] <= '9')) {
 800226e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b2f      	cmp	r3, #47	; 0x2f
 8002278:	d905      	bls.n	8002286 <json_get_number_size+0x2d6>
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800227e:	4413      	add	r3, r2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b39      	cmp	r3, #57	; 0x39
 8002284:	d917      	bls.n	80022b6 <json_get_number_size+0x306>
        if (!(json_parse_flags_allow_leading_or_trailing_decimal_point &
 8002286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <json_get_number_size+0x2e6>
              flags_bitset) ||
 8002290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10f      	bne.n	80022b6 <json_get_number_size+0x306>
            !had_leading_digits) {
          /* a decimal point must be followed by at least one digit. */
          state->error = json_parse_error_invalid_number_format;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2205      	movs	r2, #5
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
          state->offset = offset;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022a0:	609a      	str	r2, [r3, #8]
          return 1;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0fa      	b.n	800249c <json_get_number_size+0x4ec>
 80022a6:	bf00      	nop
 80022a8:	08016810 	.word	0x08016810
 80022ac:	004e614e 	.word	0x004e614e
        }
      }

      /* a decimal point can be followed by more digits of course! */
      while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
        offset++;
 80022b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b2:	3301      	adds	r3, #1
 80022b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
 80022b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d20b      	bcs.n	80022d6 <json_get_number_size+0x326>
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b2f      	cmp	r3, #47	; 0x2f
 80022c8:	d905      	bls.n	80022d6 <json_get_number_size+0x326>
 80022ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b39      	cmp	r3, #57	; 0x39
 80022d4:	d9ec      	bls.n	80022b0 <json_get_number_size+0x300>
      }
    }

    if ((offset < size) && ('e' == src[offset] || 'E' == src[offset])) {
 80022d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	429a      	cmp	r2, r3
 80022dc:	d24e      	bcs.n	800237c <json_get_number_size+0x3cc>
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e2:	4413      	add	r3, r2
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b65      	cmp	r3, #101	; 0x65
 80022e8:	d005      	beq.n	80022f6 <json_get_number_size+0x346>
 80022ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b45      	cmp	r3, #69	; 0x45
 80022f4:	d142      	bne.n	800237c <json_get_number_size+0x3cc>
      /* our number has an exponent! Skip 'e' or 'E'. */
      offset++;
 80022f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f8:	3301      	adds	r3, #1
 80022fa:	64fb      	str	r3, [r7, #76]	; 0x4c

      if ((offset < size) && ('-' == src[offset] || '+' == src[offset])) {
 80022fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	429a      	cmp	r2, r3
 8002302:	d20e      	bcs.n	8002322 <json_get_number_size+0x372>
 8002304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002308:	4413      	add	r3, r2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b2d      	cmp	r3, #45	; 0x2d
 800230e:	d005      	beq.n	800231c <json_get_number_size+0x36c>
 8002310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002314:	4413      	add	r3, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b2b      	cmp	r3, #43	; 0x2b
 800231a:	d102      	bne.n	8002322 <json_get_number_size+0x372>
        /* skip optional '-' or '+'. */
        offset++;
 800231c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800231e:	3301      	adds	r3, #1
 8002320:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      if ((offset < size) && !('0' <= src[offset] && src[offset] <= '9')) {
 8002322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	429a      	cmp	r2, r3
 8002328:	d213      	bcs.n	8002352 <json_get_number_size+0x3a2>
 800232a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b2f      	cmp	r3, #47	; 0x2f
 8002334:	d905      	bls.n	8002342 <json_get_number_size+0x392>
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b39      	cmp	r3, #57	; 0x39
 8002340:	d907      	bls.n	8002352 <json_get_number_size+0x3a2>
        /* an exponent must have at least one digit! */
        state->error = json_parse_error_invalid_number_format;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2205      	movs	r2, #5
 8002346:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800234c:	609a      	str	r2, [r3, #8]
        return 1;
 800234e:	2301      	movs	r3, #1
 8002350:	e0a4      	b.n	800249c <json_get_number_size+0x4ec>
      }

      /* consume exponent digits. */
      do {
        offset++;
 8002352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002354:	3301      	adds	r3, #1
 8002356:	64fb      	str	r3, [r7, #76]	; 0x4c
      } while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9'));
 8002358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	429a      	cmp	r2, r3
 800235e:	d20d      	bcs.n	800237c <json_get_number_size+0x3cc>
 8002360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002364:	4413      	add	r3, r2
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b2f      	cmp	r3, #47	; 0x2f
 800236a:	d907      	bls.n	800237c <json_get_number_size+0x3cc>
 800236c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002370:	4413      	add	r3, r2
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b39      	cmp	r3, #57	; 0x39
 8002376:	d9ec      	bls.n	8002352 <json_get_number_size+0x3a2>
 8002378:	e000      	b.n	800237c <json_get_number_size+0x3cc>
  if ((json_parse_flags_allow_hexadecimal_numbers & flags_bitset) &&
 800237a:	bf00      	nop
    }
  }

  if (offset < size) {
 800237c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002380:	429a      	cmp	r2, r3
 8002382:	d274      	bcs.n	800246e <json_get_number_size+0x4be>
    switch (src[offset]) {
 8002384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002388:	4413      	add	r3, r2
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b7d      	cmp	r3, #125	; 0x7d
 800238e:	d070      	beq.n	8002472 <json_get_number_size+0x4c2>
 8002390:	2b7d      	cmp	r3, #125	; 0x7d
 8002392:	dc64      	bgt.n	800245e <json_get_number_size+0x4ae>
 8002394:	2b5d      	cmp	r3, #93	; 0x5d
 8002396:	d06c      	beq.n	8002472 <json_get_number_size+0x4c2>
 8002398:	2b5d      	cmp	r3, #93	; 0x5d
 800239a:	dc60      	bgt.n	800245e <json_get_number_size+0x4ae>
 800239c:	2b2c      	cmp	r3, #44	; 0x2c
 800239e:	dc4f      	bgt.n	8002440 <json_get_number_size+0x490>
 80023a0:	2b09      	cmp	r3, #9
 80023a2:	db5c      	blt.n	800245e <json_get_number_size+0x4ae>
 80023a4:	3b09      	subs	r3, #9
 80023a6:	2b23      	cmp	r3, #35	; 0x23
 80023a8:	d859      	bhi.n	800245e <json_get_number_size+0x4ae>
 80023aa:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <json_get_number_size+0x400>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	08002473 	.word	0x08002473
 80023b4:	08002473 	.word	0x08002473
 80023b8:	0800245f 	.word	0x0800245f
 80023bc:	0800245f 	.word	0x0800245f
 80023c0:	08002473 	.word	0x08002473
 80023c4:	0800245f 	.word	0x0800245f
 80023c8:	0800245f 	.word	0x0800245f
 80023cc:	0800245f 	.word	0x0800245f
 80023d0:	0800245f 	.word	0x0800245f
 80023d4:	0800245f 	.word	0x0800245f
 80023d8:	0800245f 	.word	0x0800245f
 80023dc:	0800245f 	.word	0x0800245f
 80023e0:	0800245f 	.word	0x0800245f
 80023e4:	0800245f 	.word	0x0800245f
 80023e8:	0800245f 	.word	0x0800245f
 80023ec:	0800245f 	.word	0x0800245f
 80023f0:	0800245f 	.word	0x0800245f
 80023f4:	0800245f 	.word	0x0800245f
 80023f8:	0800245f 	.word	0x0800245f
 80023fc:	0800245f 	.word	0x0800245f
 8002400:	0800245f 	.word	0x0800245f
 8002404:	0800245f 	.word	0x0800245f
 8002408:	0800245f 	.word	0x0800245f
 800240c:	08002473 	.word	0x08002473
 8002410:	0800245f 	.word	0x0800245f
 8002414:	0800245f 	.word	0x0800245f
 8002418:	0800245f 	.word	0x0800245f
 800241c:	0800245f 	.word	0x0800245f
 8002420:	0800245f 	.word	0x0800245f
 8002424:	0800245f 	.word	0x0800245f
 8002428:	0800245f 	.word	0x0800245f
 800242c:	0800245f 	.word	0x0800245f
 8002430:	0800245f 	.word	0x0800245f
 8002434:	0800245f 	.word	0x0800245f
 8002438:	0800245f 	.word	0x0800245f
 800243c:	08002473 	.word	0x08002473
 8002440:	2b3d      	cmp	r3, #61	; 0x3d
 8002442:	d10c      	bne.n	800245e <json_get_number_size+0x4ae>
    case ',':
    case ']':
      /* all of the above are ok. */
      break;
    case '=':
      if (json_parse_flags_allow_equals_in_object & flags_bitset) {
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d113      	bne.n	8002476 <json_get_number_size+0x4c6>
        break;
      }

      state->error = json_parse_error_invalid_number_format;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2205      	movs	r2, #5
 8002452:	629a      	str	r2, [r3, #40]	; 0x28
      state->offset = offset;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002458:	609a      	str	r2, [r3, #8]
      return 1;
 800245a:	2301      	movs	r3, #1
 800245c:	e01e      	b.n	800249c <json_get_number_size+0x4ec>
    default:
      state->error = json_parse_error_invalid_number_format;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2205      	movs	r2, #5
 8002462:	629a      	str	r2, [r3, #40]	; 0x28
      state->offset = offset;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002468:	609a      	str	r2, [r3, #8]
      return 1;
 800246a:	2301      	movs	r3, #1
 800246c:	e016      	b.n	800249c <json_get_number_size+0x4ec>
    }
  }
 800246e:	bf00      	nop
 8002470:	e002      	b.n	8002478 <json_get_number_size+0x4c8>
      break;
 8002472:	bf00      	nop
 8002474:	e000      	b.n	8002478 <json_get_number_size+0x4c8>
        break;
 8002476:	bf00      	nop

  state->data_size += offset - state->offset;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002482:	1acb      	subs	r3, r1, r3
 8002484:	441a      	add	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	61da      	str	r2, [r3, #28]

  /* one more byte for null terminator ending the number string! */
  state->data_size++;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	61da      	str	r2, [r3, #28]

  /* update offset. */
  state->offset = offset;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002498:	609a      	str	r2, [r3, #8]

  return 0;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3754      	adds	r7, #84	; 0x54
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <json_get_value_size>:

json_weak int json_get_value_size(struct json_parse_state_s *state,
                                  int is_global_object);
int json_get_value_size(struct json_parse_state_s *state,
                        int is_global_object) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  const size_t flags_bitset = state->flags_bitset;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	617b      	str	r3, [r7, #20]
  const char *const src = state->src;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	613b      	str	r3, [r7, #16]
  size_t offset;
  const size_t size = state->size;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	60fb      	str	r3, [r7, #12]

  if (json_parse_flags_allow_location_information & flags_bitset) {
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <json_get_value_size+0x34>
    state->dom_size += sizeof(struct json_value_ex_s);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f103 0214 	add.w	r2, r3, #20
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	619a      	str	r2, [r3, #24]
 80024da:	e005      	b.n	80024e8 <json_get_value_size+0x40>
  } else {
    state->dom_size += sizeof(struct json_value_s);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f103 0208 	add.w	r2, r3, #8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	619a      	str	r2, [r3, #24]
  }

  if (is_global_object) {
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <json_get_value_size+0x52>
    return json_get_object_size(state, /* is_global_object = */ 1);
 80024ee:	2101      	movs	r1, #1
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff fba9 	bl	8001c48 <json_get_object_size>
 80024f6:	4603      	mov	r3, r0
 80024f8:	e1c6      	b.n	8002888 <json_get_value_size+0x3e0>
  } else {
    if (json_skip_all_skippables(state)) {
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff f917 	bl	800172e <json_skip_all_skippables>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <json_get_value_size+0x68>
      state->error = json_parse_error_premature_end_of_buffer;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2207      	movs	r2, #7
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 800250c:	2301      	movs	r3, #1
 800250e:	e1bb      	b.n	8002888 <json_get_value_size+0x3e0>
    }

    /* can cache offset now. */
    offset = state->offset;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	60bb      	str	r3, [r7, #8]

    switch (src[offset]) {
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b5b      	cmp	r3, #91	; 0x5b
 8002520:	dc7e      	bgt.n	8002620 <json_get_value_size+0x178>
 8002522:	2b22      	cmp	r3, #34	; 0x22
 8002524:	f2c0 80c3 	blt.w	80026ae <json_get_value_size+0x206>
 8002528:	3b22      	subs	r3, #34	; 0x22
 800252a:	2b39      	cmp	r3, #57	; 0x39
 800252c:	f200 80bf 	bhi.w	80026ae <json_get_value_size+0x206>
 8002530:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <json_get_value_size+0x90>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	08002627 	.word	0x08002627
 800253c:	080026af 	.word	0x080026af
 8002540:	080026af 	.word	0x080026af
 8002544:	080026af 	.word	0x080026af
 8002548:	080026af 	.word	0x080026af
 800254c:	08002633 	.word	0x08002633
 8002550:	080026af 	.word	0x080026af
 8002554:	080026af 	.word	0x080026af
 8002558:	080026af 	.word	0x080026af
 800255c:	08002673 	.word	0x08002673
 8002560:	080026af 	.word	0x080026af
 8002564:	08002669 	.word	0x08002669
 8002568:	08002691 	.word	0x08002691
 800256c:	080026af 	.word	0x080026af
 8002570:	08002669 	.word	0x08002669
 8002574:	08002669 	.word	0x08002669
 8002578:	08002669 	.word	0x08002669
 800257c:	08002669 	.word	0x08002669
 8002580:	08002669 	.word	0x08002669
 8002584:	08002669 	.word	0x08002669
 8002588:	08002669 	.word	0x08002669
 800258c:	08002669 	.word	0x08002669
 8002590:	08002669 	.word	0x08002669
 8002594:	08002669 	.word	0x08002669
 8002598:	080026af 	.word	0x080026af
 800259c:	080026af 	.word	0x080026af
 80025a0:	080026af 	.word	0x080026af
 80025a4:	080026af 	.word	0x080026af
 80025a8:	080026af 	.word	0x080026af
 80025ac:	080026af 	.word	0x080026af
 80025b0:	080026af 	.word	0x080026af
 80025b4:	080026af 	.word	0x080026af
 80025b8:	080026af 	.word	0x080026af
 80025bc:	080026af 	.word	0x080026af
 80025c0:	080026af 	.word	0x080026af
 80025c4:	080026af 	.word	0x080026af
 80025c8:	080026af 	.word	0x080026af
 80025cc:	080026af 	.word	0x080026af
 80025d0:	080026af 	.word	0x080026af
 80025d4:	080026af 	.word	0x080026af
 80025d8:	080026af 	.word	0x080026af
 80025dc:	080026af 	.word	0x080026af
 80025e0:	080026af 	.word	0x080026af
 80025e4:	080026af 	.word	0x080026af
 80025e8:	080026af 	.word	0x080026af
 80025ec:	080026af 	.word	0x080026af
 80025f0:	080026af 	.word	0x080026af
 80025f4:	080026af 	.word	0x080026af
 80025f8:	080026af 	.word	0x080026af
 80025fc:	080026af 	.word	0x080026af
 8002600:	080026af 	.word	0x080026af
 8002604:	080026af 	.word	0x080026af
 8002608:	080026af 	.word	0x080026af
 800260c:	080026af 	.word	0x080026af
 8002610:	080026af 	.word	0x080026af
 8002614:	080026af 	.word	0x080026af
 8002618:	080026af 	.word	0x080026af
 800261c:	0800265f 	.word	0x0800265f
 8002620:	2b7b      	cmp	r3, #123	; 0x7b
 8002622:	d016      	beq.n	8002652 <json_get_value_size+0x1aa>
 8002624:	e043      	b.n	80026ae <json_get_value_size+0x206>
    case '"':
      return json_get_string_size(state, 0);
 8002626:	2100      	movs	r1, #0
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff f8d3 	bl	80017d4 <json_get_string_size>
 800262e:	4603      	mov	r3, r0
 8002630:	e12a      	b.n	8002888 <json_get_value_size+0x3e0>
    case '\'':
      if (json_parse_flags_allow_single_quoted_strings & flags_bitset) {
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <json_get_value_size+0x1a0>
        return json_get_string_size(state, 0);
 800263c:	2100      	movs	r1, #0
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff f8c8 	bl	80017d4 <json_get_string_size>
 8002644:	4603      	mov	r3, r0
 8002646:	e11f      	b.n	8002888 <json_get_value_size+0x3e0>
      } else {
        /* invalid value! */
        state->error = json_parse_error_invalid_value;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2206      	movs	r2, #6
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 800264e:	2301      	movs	r3, #1
 8002650:	e11a      	b.n	8002888 <json_get_value_size+0x3e0>
      }
    case '{':
      return json_get_object_size(state, /* is_global_object = */ 0);
 8002652:	2100      	movs	r1, #0
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff faf7 	bl	8001c48 <json_get_object_size>
 800265a:	4603      	mov	r3, r0
 800265c:	e114      	b.n	8002888 <json_get_value_size+0x3e0>
    case '[':
      return json_get_array_size(state);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fc12 	bl	8001e88 <json_get_array_size>
 8002664:	4603      	mov	r3, r0
 8002666:	e10f      	b.n	8002888 <json_get_value_size+0x3e0>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      return json_get_number_size(state);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff fca1 	bl	8001fb0 <json_get_number_size>
 800266e:	4603      	mov	r3, r0
 8002670:	e10a      	b.n	8002888 <json_get_value_size+0x3e0>
    case '+':
      if (json_parse_flags_allow_leading_plus_sign & flags_bitset) {
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d004      	beq.n	8002686 <json_get_value_size+0x1de>
        return json_get_number_size(state);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fc97 	bl	8001fb0 <json_get_number_size>
 8002682:	4603      	mov	r3, r0
 8002684:	e100      	b.n	8002888 <json_get_value_size+0x3e0>
      } else {
        /* invalid value! */
        state->error = json_parse_error_invalid_number_format;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2205      	movs	r2, #5
 800268a:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 800268c:	2301      	movs	r3, #1
 800268e:	e0fb      	b.n	8002888 <json_get_value_size+0x3e0>
      }
    case '.':
      if (json_parse_flags_allow_leading_or_trailing_decimal_point &
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <json_get_value_size+0x1fc>
          flags_bitset) {
        return json_get_number_size(state);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff fc88 	bl	8001fb0 <json_get_number_size>
 80026a0:	4603      	mov	r3, r0
 80026a2:	e0f1      	b.n	8002888 <json_get_value_size+0x3e0>
      } else {
        /* invalid value! */
        state->error = json_parse_error_invalid_number_format;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2205      	movs	r2, #5
 80026a8:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0ec      	b.n	8002888 <json_get_value_size+0x3e0>
      }
    default:
      if ((offset + 4) <= size && 't' == src[offset + 0] &&
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3304      	adds	r3, #4
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d321      	bcc.n	80026fc <json_get_value_size+0x254>
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b74      	cmp	r3, #116	; 0x74
 80026c2:	d11b      	bne.n	80026fc <json_get_value_size+0x254>
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3301      	adds	r3, #1
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
      if ((offset + 4) <= size && 't' == src[offset + 0] &&
 80026ce:	2b72      	cmp	r3, #114	; 0x72
 80026d0:	d114      	bne.n	80026fc <json_get_value_size+0x254>
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3302      	adds	r3, #2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b75      	cmp	r3, #117	; 0x75
 80026de:	d10d      	bne.n	80026fc <json_get_value_size+0x254>
          'e' == src[offset + 3]) {
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	3303      	adds	r3, #3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	781b      	ldrb	r3, [r3, #0]
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 80026ea:	2b65      	cmp	r3, #101	; 0x65
 80026ec:	d106      	bne.n	80026fc <json_get_value_size+0x254>
        state->offset += 4;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	1d1a      	adds	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	609a      	str	r2, [r3, #8]
        return 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e0c5      	b.n	8002888 <json_get_value_size+0x3e0>
      } else if ((offset + 5) <= size && 'f' == src[offset + 0] &&
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	3305      	adds	r3, #5
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	429a      	cmp	r2, r3
 8002704:	d328      	bcc.n	8002758 <json_get_value_size+0x2b0>
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4413      	add	r3, r2
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b66      	cmp	r3, #102	; 0x66
 8002710:	d122      	bne.n	8002758 <json_get_value_size+0x2b0>
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	3301      	adds	r3, #1
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4413      	add	r3, r2
 800271a:	781b      	ldrb	r3, [r3, #0]
      } else if ((offset + 5) <= size && 'f' == src[offset + 0] &&
 800271c:	2b61      	cmp	r3, #97	; 0x61
 800271e:	d11b      	bne.n	8002758 <json_get_value_size+0x2b0>
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	3302      	adds	r3, #2
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b6c      	cmp	r3, #108	; 0x6c
 800272c:	d114      	bne.n	8002758 <json_get_value_size+0x2b0>
                 's' == src[offset + 3] && 'e' == src[offset + 4]) {
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3303      	adds	r3, #3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	781b      	ldrb	r3, [r3, #0]
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8002738:	2b73      	cmp	r3, #115	; 0x73
 800273a:	d10d      	bne.n	8002758 <json_get_value_size+0x2b0>
                 's' == src[offset + 3] && 'e' == src[offset + 4]) {
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3304      	adds	r3, #4
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b65      	cmp	r3, #101	; 0x65
 8002748:	d106      	bne.n	8002758 <json_get_value_size+0x2b0>
        state->offset += 5;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	1d5a      	adds	r2, r3, #5
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	609a      	str	r2, [r3, #8]
        return 0;
 8002754:	2300      	movs	r3, #0
 8002756:	e097      	b.n	8002888 <json_get_value_size+0x3e0>
      } else if ((offset + 4) <= size && 'n' == state->src[offset + 0] &&
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	3304      	adds	r3, #4
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	429a      	cmp	r2, r3
 8002760:	d325      	bcc.n	80027ae <json_get_value_size+0x306>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4413      	add	r3, r2
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b6e      	cmp	r3, #110	; 0x6e
 800276e:	d11e      	bne.n	80027ae <json_get_value_size+0x306>
                 'u' == state->src[offset + 1] &&
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	3301      	adds	r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	781b      	ldrb	r3, [r3, #0]
      } else if ((offset + 4) <= size && 'n' == state->src[offset + 0] &&
 800277c:	2b75      	cmp	r3, #117	; 0x75
 800277e:	d116      	bne.n	80027ae <json_get_value_size+0x306>
                 'l' == state->src[offset + 2] &&
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	3302      	adds	r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	781b      	ldrb	r3, [r3, #0]
                 'u' == state->src[offset + 1] &&
 800278c:	2b6c      	cmp	r3, #108	; 0x6c
 800278e:	d10e      	bne.n	80027ae <json_get_value_size+0x306>
                 'l' == state->src[offset + 3]) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	3303      	adds	r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	781b      	ldrb	r3, [r3, #0]
                 'l' == state->src[offset + 2] &&
 800279c:	2b6c      	cmp	r3, #108	; 0x6c
 800279e:	d106      	bne.n	80027ae <json_get_value_size+0x306>
        state->offset += 4;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	1d1a      	adds	r2, r3, #4
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	609a      	str	r2, [r3, #8]
        return 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e06c      	b.n	8002888 <json_get_value_size+0x3e0>
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01d      	beq.n	80027f4 <json_get_value_size+0x34c>
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	3303      	adds	r3, #3
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d318      	bcc.n	80027f4 <json_get_value_size+0x34c>
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4413      	add	r3, r2
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b4e      	cmp	r3, #78	; 0x4e
 80027cc:	d112      	bne.n	80027f4 <json_get_value_size+0x34c>
                 'a' == src[offset + 1] && 'N' == src[offset + 2]) {
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	3301      	adds	r3, #1
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	781b      	ldrb	r3, [r3, #0]
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 80027d8:	2b61      	cmp	r3, #97	; 0x61
 80027da:	d10b      	bne.n	80027f4 <json_get_value_size+0x34c>
                 'a' == src[offset + 1] && 'N' == src[offset + 2]) {
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3302      	adds	r3, #2
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4413      	add	r3, r2
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b4e      	cmp	r3, #78	; 0x4e
 80027e8:	d104      	bne.n	80027f4 <json_get_value_size+0x34c>
        return json_get_number_size(state);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fbe0 	bl	8001fb0 <json_get_number_size>
 80027f0:	4603      	mov	r3, r0
 80027f2:	e049      	b.n	8002888 <json_get_value_size+0x3e0>
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d040      	beq.n	8002880 <json_get_value_size+0x3d8>
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	3308      	adds	r3, #8
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	429a      	cmp	r2, r3
 8002806:	d33b      	bcc.n	8002880 <json_get_value_size+0x3d8>
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4413      	add	r3, r2
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b49      	cmp	r3, #73	; 0x49
 8002812:	d135      	bne.n	8002880 <json_get_value_size+0x3d8>
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3301      	adds	r3, #1
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	781b      	ldrb	r3, [r3, #0]
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 800281e:	2b6e      	cmp	r3, #110	; 0x6e
 8002820:	d12e      	bne.n	8002880 <json_get_value_size+0x3d8>
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3302      	adds	r3, #2
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4413      	add	r3, r2
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b66      	cmp	r3, #102	; 0x66
 800282e:	d127      	bne.n	8002880 <json_get_value_size+0x3d8>
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	3303      	adds	r3, #3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4413      	add	r3, r2
 8002838:	781b      	ldrb	r3, [r3, #0]
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 800283a:	2b69      	cmp	r3, #105	; 0x69
 800283c:	d120      	bne.n	8002880 <json_get_value_size+0x3d8>
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3304      	adds	r3, #4
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b6e      	cmp	r3, #110	; 0x6e
 800284a:	d119      	bne.n	8002880 <json_get_value_size+0x3d8>
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	3305      	adds	r3, #5
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	781b      	ldrb	r3, [r3, #0]
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 8002856:	2b69      	cmp	r3, #105	; 0x69
 8002858:	d112      	bne.n	8002880 <json_get_value_size+0x3d8>
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	3306      	adds	r3, #6
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b74      	cmp	r3, #116	; 0x74
 8002866:	d10b      	bne.n	8002880 <json_get_value_size+0x3d8>
                 'y' == src[offset + 7]) {
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	3307      	adds	r3, #7
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	781b      	ldrb	r3, [r3, #0]
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 8002872:	2b79      	cmp	r3, #121	; 0x79
 8002874:	d104      	bne.n	8002880 <json_get_value_size+0x3d8>
        return json_get_number_size(state);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff fb9a 	bl	8001fb0 <json_get_number_size>
 800287c:	4603      	mov	r3, r0
 800287e:	e003      	b.n	8002888 <json_get_value_size+0x3e0>
      }

      /* invalid value! */
      state->error = json_parse_error_invalid_value;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2206      	movs	r2, #6
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8002886:	2301      	movs	r3, #1
    }
  }
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <json_parse_string>:
                                struct json_value_s *value);

json_weak void json_parse_string(struct json_parse_state_s *state,
                                 struct json_string_s *string);
void json_parse_string(struct json_parse_state_s *state,
                       struct json_string_s *string) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  size_t offset = state->offset;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
  size_t bytes_written = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	623b      	str	r3, [r7, #32]
  const char *const src = state->src;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	61bb      	str	r3, [r7, #24]
  const char quote_to_use = '\'' == src[offset] ? '\'' : '"';
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	4413      	add	r3, r2
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b27      	cmp	r3, #39	; 0x27
 80028b4:	d101      	bne.n	80028ba <json_parse_string+0x2a>
 80028b6:	2327      	movs	r3, #39	; 0x27
 80028b8:	e000      	b.n	80028bc <json_parse_string+0x2c>
 80028ba:	2322      	movs	r3, #34	; 0x22
 80028bc:	75fb      	strb	r3, [r7, #23]
  char *data = state->data;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	613b      	str	r3, [r7, #16]
  unsigned long high_surrogate = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
  unsigned long codepoint;

  string->string = data;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	601a      	str	r2, [r3, #0]

  /* skip leading '"' or '\''. */
  offset++;
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	3301      	adds	r3, #1
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24

  while (quote_to_use != src[offset]) {
 80028d4:	e18f      	b.n	8002bf6 <json_parse_string+0x366>
    if ('\\' == src[offset]) {
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	4413      	add	r3, r2
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b5c      	cmp	r3, #92	; 0x5c
 80028e0:	f040 817d 	bne.w	8002bde <json_parse_string+0x34e>
      /* skip the reverse solidus. */
      offset++;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	3301      	adds	r3, #1
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24

      switch (src[offset++]) {
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	627a      	str	r2, [r7, #36]	; 0x24
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4413      	add	r3, r2
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b75      	cmp	r3, #117	; 0x75
 80028f8:	f300 819c 	bgt.w	8002c34 <json_parse_string+0x3a4>
 80028fc:	2b5c      	cmp	r3, #92	; 0x5c
 80028fe:	da12      	bge.n	8002926 <json_parse_string+0x96>
 8002900:	2b2f      	cmp	r3, #47	; 0x2f
 8002902:	f000 811a 	beq.w	8002b3a <json_parse_string+0x2aa>
 8002906:	2b2f      	cmp	r3, #47	; 0x2f
 8002908:	f300 8194 	bgt.w	8002c34 <json_parse_string+0x3a4>
 800290c:	2b22      	cmp	r3, #34	; 0x22
 800290e:	f000 8104 	beq.w	8002b1a <json_parse_string+0x28a>
 8002912:	2b22      	cmp	r3, #34	; 0x22
 8002914:	f300 818e 	bgt.w	8002c34 <json_parse_string+0x3a4>
 8002918:	2b0a      	cmp	r3, #10
 800291a:	f000 8156 	beq.w	8002bca <json_parse_string+0x33a>
 800291e:	2b0d      	cmp	r3, #13
 8002920:	f000 813b 	beq.w	8002b9a <json_parse_string+0x30a>
      default:
        return; /* we cannot ever reach here. */
 8002924:	e186      	b.n	8002c34 <json_parse_string+0x3a4>
 8002926:	3b5c      	subs	r3, #92	; 0x5c
 8002928:	2b19      	cmp	r3, #25
 800292a:	f200 8183 	bhi.w	8002c34 <json_parse_string+0x3a4>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <json_parse_string+0xa4>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002b2b 	.word	0x08002b2b
 8002938:	08002c35 	.word	0x08002c35
 800293c:	08002c35 	.word	0x08002c35
 8002940:	08002c35 	.word	0x08002c35
 8002944:	08002c35 	.word	0x08002c35
 8002948:	08002c35 	.word	0x08002c35
 800294c:	08002b4b 	.word	0x08002b4b
 8002950:	08002c35 	.word	0x08002c35
 8002954:	08002c35 	.word	0x08002c35
 8002958:	08002c35 	.word	0x08002c35
 800295c:	08002b5b 	.word	0x08002b5b
 8002960:	08002c35 	.word	0x08002c35
 8002964:	08002c35 	.word	0x08002c35
 8002968:	08002c35 	.word	0x08002c35
 800296c:	08002c35 	.word	0x08002c35
 8002970:	08002c35 	.word	0x08002c35
 8002974:	08002c35 	.word	0x08002c35
 8002978:	08002c35 	.word	0x08002c35
 800297c:	08002b6b 	.word	0x08002b6b
 8002980:	08002c35 	.word	0x08002c35
 8002984:	08002c35 	.word	0x08002c35
 8002988:	08002c35 	.word	0x08002c35
 800298c:	08002b7b 	.word	0x08002b7b
 8002990:	08002c35 	.word	0x08002c35
 8002994:	08002b8b 	.word	0x08002b8b
 8002998:	0800299d 	.word	0x0800299d
      case 'u': {
        codepoint = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
        if (!json_hexadecimal_value(&src[offset], 4, &codepoint)) {
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	4413      	add	r3, r2
 80029a6:	f107 0208 	add.w	r2, r7, #8
 80029aa:	2104      	movs	r1, #4
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fd6d 	bl	800148c <json_hexadecimal_value>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 813f 	beq.w	8002c38 <json_parse_string+0x3a8>
          return; /* this shouldn't happen as the value was already validated.
                   */
        }

        offset += 4;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	3304      	adds	r3, #4
 80029be:	627b      	str	r3, [r7, #36]	; 0x24

        if (codepoint <= 0x7fu) {
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b7f      	cmp	r3, #127	; 0x7f
 80029c4:	d808      	bhi.n	80029d8 <json_parse_string+0x148>
          data[bytes_written++] = (char)codepoint; /* 0xxxxxxx. */
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	623a      	str	r2, [r7, #32]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4413      	add	r3, r2
 80029d2:	b2ca      	uxtb	r2, r1
 80029d4:	701a      	strb	r2, [r3, #0]
          data[bytes_written++] =
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
          data[bytes_written++] =
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
        }
      } break;
 80029d6:	e10e      	b.n	8002bf6 <json_parse_string+0x366>
        } else if (codepoint <= 0x7ffu) {
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029de:	d21a      	bcs.n	8002a16 <json_parse_string+0x186>
              (char)(0xc0u | (codepoint >> 6)); /* 110xxxxx. */
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	099b      	lsrs	r3, r3, #6
 80029e4:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	1c59      	adds	r1, r3, #1
 80029ea:	6239      	str	r1, [r7, #32]
 80029ec:	6939      	ldr	r1, [r7, #16]
 80029ee:	440b      	add	r3, r1
              (char)(0xc0u | (codepoint >> 6)); /* 110xxxxx. */
 80029f0:	f062 023f 	orn	r2, r2, #63	; 0x3f
 80029f4:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 80029f6:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a00:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	1c59      	adds	r1, r3, #1
 8002a06:	6239      	str	r1, [r7, #32]
 8002a08:	6939      	ldr	r1, [r7, #16]
 8002a0a:	440b      	add	r3, r1
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8002a0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a10:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002a12:	701a      	strb	r2, [r3, #0]
      } break;
 8002a14:	e0ef      	b.n	8002bf6 <json_parse_string+0x366>
        } else if (codepoint >= 0xd800 &&
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8002a1c:	d306      	bcc.n	8002a2c <json_parse_string+0x19c>
                   codepoint <= 0xdbff) { /* high surrogate. */
 8002a1e:	68bb      	ldr	r3, [r7, #8]
        } else if (codepoint >= 0xd800 &&
 8002a20:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8002a24:	d202      	bcs.n	8002a2c <json_parse_string+0x19c>
          high_surrogate = codepoint;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	61fb      	str	r3, [r7, #28]
          continue; /* we need the low half to form a complete codepoint. */
 8002a2a:	e0e4      	b.n	8002bf6 <json_parse_string+0x366>
        } else if (codepoint >= 0xdc00 &&
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8002a32:	d348      	bcc.n	8002ac6 <json_parse_string+0x236>
                   codepoint <= 0xdfff) { /* low surrogate. */
 8002a34:	68bb      	ldr	r3, [r7, #8]
        } else if (codepoint >= 0xdc00 &&
 8002a36:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8002a3a:	d244      	bcs.n	8002ac6 <json_parse_string+0x236>
          const unsigned long surrogate_offset =
 8002a3c:	4b80      	ldr	r3, [pc, #512]	; (8002c40 <json_parse_string+0x3b0>)
 8002a3e:	60fb      	str	r3, [r7, #12]
          codepoint = (high_surrogate << 10) + codepoint + surrogate_offset;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	029a      	lsls	r2, r3, #10
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	441a      	add	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	60bb      	str	r3, [r7, #8]
          high_surrogate = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
              (char)(0xF0u | (codepoint >> 18)); /* 11110xxx. */
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	0c9b      	lsrs	r3, r3, #18
 8002a56:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	1c59      	adds	r1, r3, #1
 8002a5c:	6239      	str	r1, [r7, #32]
 8002a5e:	6939      	ldr	r1, [r7, #16]
 8002a60:	440b      	add	r3, r1
              (char)(0xF0u | (codepoint >> 18)); /* 11110xxx. */
 8002a62:	f062 020f 	orn	r2, r2, #15
 8002a66:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002a68:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | ((codepoint >> 12) & 0x3fu)); /* 10xxxxxx. */
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	0b1b      	lsrs	r3, r3, #12
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a74:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	1c59      	adds	r1, r3, #1
 8002a7a:	6239      	str	r1, [r7, #32]
 8002a7c:	6939      	ldr	r1, [r7, #16]
 8002a7e:	440b      	add	r3, r1
              (char)(0x80u | ((codepoint >> 12) & 0x3fu)); /* 10xxxxxx. */
 8002a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a84:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002a86:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	099b      	lsrs	r3, r3, #6
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a92:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	1c59      	adds	r1, r3, #1
 8002a98:	6239      	str	r1, [r7, #32]
 8002a9a:	6939      	ldr	r1, [r7, #16]
 8002a9c:	440b      	add	r3, r1
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
 8002a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002aa2:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002aa4:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aae:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	1c59      	adds	r1, r3, #1
 8002ab4:	6239      	str	r1, [r7, #32]
 8002ab6:	6939      	ldr	r1, [r7, #16]
 8002ab8:	440b      	add	r3, r1
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8002aba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002abe:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002ac0:	701a      	strb	r2, [r3, #0]
                   codepoint <= 0xdfff) { /* low surrogate. */
 8002ac2:	bf00      	nop
      } break;
 8002ac4:	e097      	b.n	8002bf6 <json_parse_string+0x366>
              (char)(0xe0u | (codepoint >> 12)); /* 1110xxxx. */
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	0b1b      	lsrs	r3, r3, #12
 8002aca:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	1c59      	adds	r1, r3, #1
 8002ad0:	6239      	str	r1, [r7, #32]
 8002ad2:	6939      	ldr	r1, [r7, #16]
 8002ad4:	440b      	add	r3, r1
              (char)(0xe0u | (codepoint >> 12)); /* 1110xxxx. */
 8002ad6:	f062 021f 	orn	r2, r2, #31
 8002ada:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002adc:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	099b      	lsrs	r3, r3, #6
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae8:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	1c59      	adds	r1, r3, #1
 8002aee:	6239      	str	r1, [r7, #32]
 8002af0:	6939      	ldr	r1, [r7, #16]
 8002af2:	440b      	add	r3, r1
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
 8002af4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002af8:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002afa:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b04:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	1c59      	adds	r1, r3, #1
 8002b0a:	6239      	str	r1, [r7, #32]
 8002b0c:	6939      	ldr	r1, [r7, #16]
 8002b0e:	440b      	add	r3, r1
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8002b10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b14:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002b16:	701a      	strb	r2, [r3, #0]
      } break;
 8002b18:	e06d      	b.n	8002bf6 <json_parse_string+0x366>
      case '"':
        data[bytes_written++] = '"';
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	623a      	str	r2, [r7, #32]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	2222      	movs	r2, #34	; 0x22
 8002b26:	701a      	strb	r2, [r3, #0]
        break;
 8002b28:	e065      	b.n	8002bf6 <json_parse_string+0x366>
      case '\\':
        data[bytes_written++] = '\\';
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	623a      	str	r2, [r7, #32]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	225c      	movs	r2, #92	; 0x5c
 8002b36:	701a      	strb	r2, [r3, #0]
        break;
 8002b38:	e05d      	b.n	8002bf6 <json_parse_string+0x366>
      case '/':
        data[bytes_written++] = '/';
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	623a      	str	r2, [r7, #32]
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	222f      	movs	r2, #47	; 0x2f
 8002b46:	701a      	strb	r2, [r3, #0]
        break;
 8002b48:	e055      	b.n	8002bf6 <json_parse_string+0x366>
      case 'b':
        data[bytes_written++] = '\b';
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	623a      	str	r2, [r7, #32]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	2208      	movs	r2, #8
 8002b56:	701a      	strb	r2, [r3, #0]
        break;
 8002b58:	e04d      	b.n	8002bf6 <json_parse_string+0x366>
      case 'f':
        data[bytes_written++] = '\f';
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	623a      	str	r2, [r7, #32]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4413      	add	r3, r2
 8002b64:	220c      	movs	r2, #12
 8002b66:	701a      	strb	r2, [r3, #0]
        break;
 8002b68:	e045      	b.n	8002bf6 <json_parse_string+0x366>
      case 'n':
        data[bytes_written++] = '\n';
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	623a      	str	r2, [r7, #32]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	220a      	movs	r2, #10
 8002b76:	701a      	strb	r2, [r3, #0]
        break;
 8002b78:	e03d      	b.n	8002bf6 <json_parse_string+0x366>
      case 'r':
        data[bytes_written++] = '\r';
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	623a      	str	r2, [r7, #32]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	220d      	movs	r2, #13
 8002b86:	701a      	strb	r2, [r3, #0]
        break;
 8002b88:	e035      	b.n	8002bf6 <json_parse_string+0x366>
      case 't':
        data[bytes_written++] = '\t';
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	623a      	str	r2, [r7, #32]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	2209      	movs	r2, #9
 8002b96:	701a      	strb	r2, [r3, #0]
        break;
 8002b98:	e02d      	b.n	8002bf6 <json_parse_string+0x366>
      case '\r':
        data[bytes_written++] = '\r';
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	623a      	str	r2, [r7, #32]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	220d      	movs	r2, #13
 8002ba6:	701a      	strb	r2, [r3, #0]

        /* check if we have a "\r\n" sequence. */
        if ('\n' == src[offset]) {
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	4413      	add	r3, r2
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b0a      	cmp	r3, #10
 8002bb2:	d112      	bne.n	8002bda <json_parse_string+0x34a>
          data[bytes_written++] = '\n';
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	623a      	str	r2, [r7, #32]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	220a      	movs	r2, #10
 8002bc0:	701a      	strb	r2, [r3, #0]
          offset++;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
        }

        break;
 8002bc8:	e007      	b.n	8002bda <json_parse_string+0x34a>
      case '\n':
        data[bytes_written++] = '\n';
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	623a      	str	r2, [r7, #32]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	220a      	movs	r2, #10
 8002bd6:	701a      	strb	r2, [r3, #0]
        break;
 8002bd8:	e00d      	b.n	8002bf6 <json_parse_string+0x366>
        break;
 8002bda:	bf00      	nop
 8002bdc:	e00b      	b.n	8002bf6 <json_parse_string+0x366>
      }
    } else {
      /* copy the character. */
      data[bytes_written++] = src[offset++];
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	627a      	str	r2, [r7, #36]	; 0x24
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	441a      	add	r2, r3
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	1c59      	adds	r1, r3, #1
 8002bec:	6239      	str	r1, [r7, #32]
 8002bee:	6939      	ldr	r1, [r7, #16]
 8002bf0:	440b      	add	r3, r1
 8002bf2:	7812      	ldrb	r2, [r2, #0]
 8002bf4:	701a      	strb	r2, [r3, #0]
  while (quote_to_use != src[offset]) {
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	4413      	add	r3, r2
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	7dfa      	ldrb	r2, [r7, #23]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f47f ae68 	bne.w	80028d6 <json_parse_string+0x46>
    }
  }

  /* skip trailing '"' or '\''. */
  offset++;
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	3301      	adds	r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* record the size of the string. */
  string->string_size = bytes_written;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6a3a      	ldr	r2, [r7, #32]
 8002c10:	605a      	str	r2, [r3, #4]

  /* add null terminator to string. */
  data[bytes_written++] = '\0';
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	623a      	str	r2, [r7, #32]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]

  /* move data along. */
  state->data += bytes_written;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	441a      	add	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	611a      	str	r2, [r3, #16]

  /* update offset. */
  state->offset = offset;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c30:	609a      	str	r2, [r3, #8]
 8002c32:	e002      	b.n	8002c3a <json_parse_string+0x3aa>
        return; /* we cannot ever reach here. */
 8002c34:	bf00      	nop
 8002c36:	e000      	b.n	8002c3a <json_parse_string+0x3aa>
          return; /* this shouldn't happen as the value was already validated.
 8002c38:	bf00      	nop
}
 8002c3a:	3728      	adds	r7, #40	; 0x28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	fca02400 	.word	0xfca02400

08002c44 <json_parse_key>:

json_weak void json_parse_key(struct json_parse_state_s *state,
                              struct json_string_s *string);
void json_parse_key(struct json_parse_state_s *state,
                    struct json_string_s *string) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  if (json_parse_flags_allow_unquoted_keys & state->flags_bitset) {
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d04a      	beq.n	8002cf0 <json_parse_key+0xac>
    const char *const src = state->src;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60fb      	str	r3, [r7, #12]
    char *const data = state->data;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	60bb      	str	r3, [r7, #8]
    size_t offset = state->offset;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	617b      	str	r3, [r7, #20]

    /* if we are allowing unquoted keys, check for quoted anyway... */
    if (('"' == src[offset]) || ('\'' == src[offset])) {
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	4413      	add	r3, r2
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b22      	cmp	r3, #34	; 0x22
 8002c76:	d005      	beq.n	8002c84 <json_parse_key+0x40>
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b27      	cmp	r3, #39	; 0x27
 8002c82:	d104      	bne.n	8002c8e <json_parse_key+0x4a>
      /* ... if we got a quote, just parse the key as a string as normal. */
      json_parse_string(state, string);
 8002c84:	6839      	ldr	r1, [r7, #0]
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fe02 	bl	8002890 <json_parse_string>
    }
  } else {
    /* we are only allowed to have quoted keys, so just parse a string! */
    json_parse_string(state, string);
  }
}
 8002c8c:	e034      	b.n	8002cf8 <json_parse_key+0xb4>
      size_t size = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
      string->string = state->data;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	601a      	str	r2, [r3, #0]
      while (is_valid_unquoted_key_char(src[offset])) {
 8002c9a:	e00b      	b.n	8002cb4 <json_parse_key+0x70>
        data[size++] = src[offset++];
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	617a      	str	r2, [r7, #20]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	441a      	add	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1c59      	adds	r1, r3, #1
 8002caa:	6139      	str	r1, [r7, #16]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	440b      	add	r3, r1
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	701a      	strb	r2, [r3, #0]
      while (is_valid_unquoted_key_char(src[offset])) {
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	4413      	add	r3, r2
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe ff31 	bl	8001b24 <is_valid_unquoted_key_char>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e9      	bne.n	8002c9c <json_parse_key+0x58>
      data[size] = '\0';
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
      string->string_size = size++;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	613a      	str	r2, [r7, #16]
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	6053      	str	r3, [r2, #4]
      state->data += size;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	441a      	add	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	611a      	str	r2, [r3, #16]
      state->offset = offset;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	609a      	str	r2, [r3, #8]
}
 8002cee:	e003      	b.n	8002cf8 <json_parse_key+0xb4>
    json_parse_string(state, string);
 8002cf0:	6839      	ldr	r1, [r7, #0]
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fdcc 	bl	8002890 <json_parse_string>
}
 8002cf8:	bf00      	nop
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <json_parse_object>:

json_weak void json_parse_object(struct json_parse_state_s *state,
                                 int is_global_object,
                                 struct json_object_s *object);
void json_parse_object(struct json_parse_state_s *state, int is_global_object,
                       struct json_object_s *object) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b090      	sub	sp, #64	; 0x40
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
  const size_t size = state->size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
  const char *const src = state->src;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	623b      	str	r3, [r7, #32]
  size_t elements = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	63fb      	str	r3, [r7, #60]	; 0x3c
  int allow_comma = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	63bb      	str	r3, [r7, #56]	; 0x38
  struct json_object_element_s *previous = json_null;
 8002d26:	2300      	movs	r3, #0
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34

  if (is_global_object) {
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <json_parse_object+0x42>
    /* if we skipped some whitespace, and then found an opening '{' of an. */
    /* object, we actually have a normal JSON object at the root of the DOM...
     */
    if ('{' == src[state->offset]) {
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	6a3a      	ldr	r2, [r7, #32]
 8002d36:	4413      	add	r3, r2
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b7b      	cmp	r3, #123	; 0x7b
 8002d3c:	d101      	bne.n	8002d42 <json_parse_object+0x42>
      /* . and we don't actually have a global object after all! */
      is_global_object = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
    }
  }

  if (!is_global_object) {
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <json_parse_object+0x52>
    /* skip leading '{'. */
    state->offset++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	609a      	str	r2, [r3, #8]
  }

  (void)json_skip_all_skippables(state);
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7fe fceb 	bl	800172e <json_skip_all_skippables>

  /* reset elements. */
  elements = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c

  while (state->offset < size) {
 8002d5c:	e0b7      	b.n	8002ece <json_parse_object+0x1ce>
    struct json_object_element_s *element = json_null;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
    struct json_string_s *string = json_null;
 8002d62:	2300      	movs	r3, #0
 8002d64:	633b      	str	r3, [r7, #48]	; 0x30
    struct json_value_s *value = json_null;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (!is_global_object) {
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10f      	bne.n	8002d90 <json_parse_object+0x90>
      (void)json_skip_all_skippables(state);
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7fe fcdc 	bl	800172e <json_skip_all_skippables>

      if ('}' == src[state->offset]) {
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	6a3a      	ldr	r2, [r7, #32]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b7d      	cmp	r3, #125	; 0x7d
 8002d82:	d10c      	bne.n	8002d9e <json_parse_object+0x9e>
        /* skip trailing '}'. */
        state->offset++;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	609a      	str	r2, [r3, #8]

        /* finished the object! */
        break;
 8002d8e:	e0a6      	b.n	8002ede <json_parse_object+0x1de>
      }
    } else {
      if (json_skip_all_skippables(state)) {
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7fe fccc 	bl	800172e <json_skip_all_skippables>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f040 809f 	bne.w	8002edc <json_parse_object+0x1dc>
        break;
      }
    }

    /* if we parsed at least one element previously, grok for a comma. */
    if (allow_comma) {
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00e      	beq.n	8002dc2 <json_parse_object+0xc2>
      if (',' == src[state->offset]) {
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	6a3a      	ldr	r2, [r7, #32]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b2c      	cmp	r3, #44	; 0x2c
 8002db0:	d107      	bne.n	8002dc2 <json_parse_object+0xc2>
        /* skip comma. */
        state->offset++;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]
        allow_comma = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	63bb      	str	r3, [r7, #56]	; 0x38
        continue;
 8002dc0:	e085      	b.n	8002ece <json_parse_object+0x1ce>
      }
    }

    element = (struct json_object_element_s *)state->dom;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	61fb      	str	r3, [r7, #28]

    state->dom += sizeof(struct json_object_element_s);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	f103 020c 	add.w	r2, r3, #12
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	615a      	str	r2, [r3, #20]

    if (json_null == previous) {
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <json_parse_object+0xe2>
      /* this is our first element, so record it in our object. */
      object->start = element;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e002      	b.n	8002de8 <json_parse_object+0xe8>
    } else {
      previous->next = element;
 8002de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	609a      	str	r2, [r3, #8]
    }

    previous = element;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34

    if (json_parse_flags_allow_location_information & flags_bitset) {
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01a      	beq.n	8002e2c <json_parse_object+0x12c>
      struct json_string_ex_s *string_ex =
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	61bb      	str	r3, [r7, #24]
          (struct json_string_ex_s *)state->dom;
      state->dom += sizeof(struct json_string_ex_s);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f103 0214 	add.w	r2, r3, #20
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	615a      	str	r2, [r3, #20]

      string_ex->offset = state->offset;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	609a      	str	r2, [r3, #8]
      string_ex->line_no = state->line_no;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a1a      	ldr	r2, [r3, #32]
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	60da      	str	r2, [r3, #12]
      string_ex->row_no = state->offset - state->line_offset;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1ad2      	subs	r2, r2, r3
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	611a      	str	r2, [r3, #16]

      string = &(string_ex->string);
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
 8002e2a:	e008      	b.n	8002e3e <json_parse_object+0x13e>
    } else {
      string = (struct json_string_s *)state->dom;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	633b      	str	r3, [r7, #48]	; 0x30
      state->dom += sizeof(struct json_string_s);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f103 0208 	add.w	r2, r3, #8
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	615a      	str	r2, [r3, #20]
    }

    element->name = string;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e42:	601a      	str	r2, [r3, #0]

    (void)json_parse_key(state, string);
 8002e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff fefc 	bl	8002c44 <json_parse_key>

    (void)json_skip_all_skippables(state);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7fe fc6e 	bl	800172e <json_skip_all_skippables>

    /* skip colon or equals. */
    state->offset++;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	609a      	str	r2, [r3, #8]

    (void)json_skip_all_skippables(state);
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7fe fc66 	bl	800172e <json_skip_all_skippables>

    if (json_parse_flags_allow_location_information & flags_bitset) {
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01a      	beq.n	8002ea2 <json_parse_object+0x1a2>
      struct json_value_ex_s *value_ex = (struct json_value_ex_s *)state->dom;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	617b      	str	r3, [r7, #20]
      state->dom += sizeof(struct json_value_ex_s);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f103 0214 	add.w	r2, r3, #20
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	615a      	str	r2, [r3, #20]

      value_ex->offset = state->offset;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	609a      	str	r2, [r3, #8]
      value_ex->line_no = state->line_no;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a1a      	ldr	r2, [r3, #32]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	60da      	str	r2, [r3, #12]
      value_ex->row_no = state->offset - state->line_offset;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	1ad2      	subs	r2, r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	611a      	str	r2, [r3, #16]

      value = &(value_ex->value);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea0:	e008      	b.n	8002eb4 <json_parse_object+0x1b4>
    } else {
      value = (struct json_value_s *)state->dom;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
      state->dom += sizeof(struct json_value_s);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f103 0208 	add.w	r2, r3, #8
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	615a      	str	r2, [r3, #20]
    }

    element->value = value;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb8:	605a      	str	r2, [r3, #4]

    json_parse_value(state, /* is_global_object = */ 0, value);
 8002eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fa06 	bl	80032d0 <json_parse_value>

    /* successfully parsed a name/value pair! */
    elements++;
 8002ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
    allow_comma = 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  while (state->offset < size) {
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	f63f af42 	bhi.w	8002d5e <json_parse_object+0x5e>
 8002eda:	e000      	b.n	8002ede <json_parse_object+0x1de>
        break;
 8002edc:	bf00      	nop
  }

  /* if we had at least one element, end the linked list. */
  if (previous) {
 8002ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <json_parse_object+0x1ea>
    previous->next = json_null;
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  }

  if (0 == elements) {
 8002eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <json_parse_object+0x1f6>
    object->start = json_null;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  object->length = elements;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002efa:	605a      	str	r2, [r3, #4]
}
 8002efc:	bf00      	nop
 8002efe:	3740      	adds	r7, #64	; 0x40
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <json_parse_array>:

json_weak void json_parse_array(struct json_parse_state_s *state,
                                struct json_array_s *array);
void json_parse_array(struct json_parse_state_s *state,
                      struct json_array_s *array) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  const char *const src = state->src;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	617b      	str	r3, [r7, #20]
  const size_t size = state->size;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	613b      	str	r3, [r7, #16]
  size_t elements = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
  int allow_comma = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	623b      	str	r3, [r7, #32]
  struct json_array_element_s *previous = json_null;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]

  /* skip leading '['. */
  state->offset++;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	609a      	str	r2, [r3, #8]

  (void)json_skip_all_skippables(state);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fe fbfc 	bl	800172e <json_skip_all_skippables>

  /* reset elements. */
  elements = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24

  do {
    struct json_array_element_s *element = json_null;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
    struct json_value_s *value = json_null;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]

    (void)json_skip_all_skippables(state);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe fbf3 	bl	800172e <json_skip_all_skippables>

    if (']' == src[state->offset]) {
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b5d      	cmp	r3, #93	; 0x5d
 8002f54:	d105      	bne.n	8002f62 <json_parse_array+0x5e>
      /* skip trailing ']'. */
      state->offset++;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	609a      	str	r2, [r3, #8]

      /* finished the array! */
      break;
 8002f60:	e062      	b.n	8003028 <json_parse_array+0x124>
    }

    /* if we parsed at least one element previously, grok for a comma. */
    if (allow_comma) {
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <json_parse_array+0x82>
      if (',' == src[state->offset]) {
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4413      	add	r3, r2
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b2c      	cmp	r3, #44	; 0x2c
 8002f74:	d107      	bne.n	8002f86 <json_parse_array+0x82>
        /* skip comma. */
        state->offset++;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
        allow_comma = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	623b      	str	r3, [r7, #32]
        continue;
 8002f84:	e04b      	b.n	800301e <json_parse_array+0x11a>
      }
    }

    element = (struct json_array_element_s *)state->dom;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	60fb      	str	r3, [r7, #12]

    state->dom += sizeof(struct json_array_element_s);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f103 0208 	add.w	r2, r3, #8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	615a      	str	r2, [r3, #20]

    if (json_null == previous) {
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d103      	bne.n	8002fa6 <json_parse_array+0xa2>
      /* this is our first element, so record it in our array. */
      array->start = element;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e002      	b.n	8002fac <json_parse_array+0xa8>
    } else {
      previous->next = element;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	605a      	str	r2, [r3, #4]
    }

    previous = element;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	61fb      	str	r3, [r7, #28]

    if (json_parse_flags_allow_location_information & state->flags_bitset) {
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01a      	beq.n	8002ff2 <json_parse_array+0xee>
      struct json_value_ex_s *value_ex = (struct json_value_ex_s *)state->dom;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	60bb      	str	r3, [r7, #8]
      state->dom += sizeof(struct json_value_ex_s);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f103 0214 	add.w	r2, r3, #20
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	615a      	str	r2, [r3, #20]

      value_ex->offset = state->offset;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	609a      	str	r2, [r3, #8]
      value_ex->line_no = state->line_no;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1a      	ldr	r2, [r3, #32]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
      value_ex->row_no = state->offset - state->line_offset;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	1ad2      	subs	r2, r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	611a      	str	r2, [r3, #16]

      value = &(value_ex->value);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	e008      	b.n	8003004 <json_parse_array+0x100>
    } else {
      value = (struct json_value_s *)state->dom;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	61bb      	str	r3, [r7, #24]
      state->dom += sizeof(struct json_value_s);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f103 0208 	add.w	r2, r3, #8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	615a      	str	r2, [r3, #20]
    }

    element->value = value;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	601a      	str	r2, [r3, #0]

    json_parse_value(state, /* is_global_object = */ 0, value);
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	2100      	movs	r1, #0
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f95e 	bl	80032d0 <json_parse_value>

    /* successfully parsed an array element! */
    elements++;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	3301      	adds	r3, #1
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
    allow_comma = 1;
 800301a:	2301      	movs	r3, #1
 800301c:	623b      	str	r3, [r7, #32]
  } while (state->offset < size);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	429a      	cmp	r2, r3
 8003026:	d888      	bhi.n	8002f3a <json_parse_array+0x36>

  /* end the linked list. */
  if (previous) {
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <json_parse_array+0x130>
    previous->next = json_null;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2200      	movs	r2, #0
 8003032:	605a      	str	r2, [r3, #4]
  }

  if (0 == elements) {
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <json_parse_array+0x13c>
    array->start = json_null;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
  }

  array->length = elements;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003044:	605a      	str	r2, [r3, #4]
}
 8003046:	bf00      	nop
 8003048:	3728      	adds	r7, #40	; 0x28
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <json_parse_number>:

json_weak void json_parse_number(struct json_parse_state_s *state,
                                 struct json_number_s *number);
void json_parse_number(struct json_parse_state_s *state,
                       struct json_number_s *number) {
 8003050:	b480      	push	{r7}
 8003052:	b08f      	sub	sp, #60	; 0x3c
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  const size_t flags_bitset = state->flags_bitset;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	623b      	str	r3, [r7, #32]
  size_t offset = state->offset;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
  const size_t size = state->size;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	61fb      	str	r3, [r7, #28]
  size_t bytes_written = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	633b      	str	r3, [r7, #48]	; 0x30
  const char *const src = state->src;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	61bb      	str	r3, [r7, #24]
  char *data = state->data;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	617b      	str	r3, [r7, #20]

  number->number = data;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	601a      	str	r2, [r3, #0]

  if (json_parse_flags_allow_hexadecimal_numbers & flags_bitset) {
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80b4 	beq.w	80031f6 <json_parse_number+0x1a6>
    if (('0' == src[offset]) &&
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003092:	4413      	add	r3, r2
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b30      	cmp	r3, #48	; 0x30
 8003098:	f040 80ad 	bne.w	80031f6 <json_parse_number+0x1a6>
        (('x' == src[offset + 1]) || ('X' == src[offset + 1]))) {
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309e:	3301      	adds	r3, #1
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4413      	add	r3, r2
 80030a4:	781b      	ldrb	r3, [r3, #0]
    if (('0' == src[offset]) &&
 80030a6:	2b78      	cmp	r3, #120	; 0x78
 80030a8:	d014      	beq.n	80030d4 <json_parse_number+0x84>
        (('x' == src[offset + 1]) || ('X' == src[offset + 1]))) {
 80030aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ac:	3301      	adds	r3, #1
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4413      	add	r3, r2
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b58      	cmp	r3, #88	; 0x58
 80030b6:	f040 809e 	bne.w	80031f6 <json_parse_number+0x1a6>
      /* consume hexadecimal digits. */
      while ((offset < size) &&
 80030ba:	e00b      	b.n	80030d4 <json_parse_number+0x84>
             (('0' <= src[offset] && src[offset] <= '9') ||
              ('a' <= src[offset] && src[offset] <= 'f') ||
              ('A' <= src[offset] && src[offset] <= 'F') ||
              ('x' == src[offset]) || ('X' == src[offset]))) {
        data[bytes_written++] = src[offset++];
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	637a      	str	r2, [r7, #52]	; 0x34
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	441a      	add	r2, r3
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	1c59      	adds	r1, r3, #1
 80030ca:	6339      	str	r1, [r7, #48]	; 0x30
 80030cc:	6979      	ldr	r1, [r7, #20]
 80030ce:	440b      	add	r3, r1
 80030d0:	7812      	ldrb	r2, [r2, #0]
 80030d2:	701a      	strb	r2, [r3, #0]
      while ((offset < size) &&
 80030d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	429a      	cmp	r2, r3
 80030da:	f080 808c 	bcs.w	80031f6 <json_parse_number+0x1a6>
             (('0' <= src[offset] && src[offset] <= '9') ||
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e2:	4413      	add	r3, r2
 80030e4:	781b      	ldrb	r3, [r3, #0]
      while ((offset < size) &&
 80030e6:	2b2f      	cmp	r3, #47	; 0x2f
 80030e8:	d905      	bls.n	80030f6 <json_parse_number+0xa6>
             (('0' <= src[offset] && src[offset] <= '9') ||
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ee:	4413      	add	r3, r2
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b39      	cmp	r3, #57	; 0x39
 80030f4:	d9e2      	bls.n	80030bc <json_parse_number+0x6c>
              ('a' <= src[offset] && src[offset] <= 'f') ||
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fa:	4413      	add	r3, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
             (('0' <= src[offset] && src[offset] <= '9') ||
 80030fe:	2b60      	cmp	r3, #96	; 0x60
 8003100:	d905      	bls.n	800310e <json_parse_number+0xbe>
              ('a' <= src[offset] && src[offset] <= 'f') ||
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003106:	4413      	add	r3, r2
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b66      	cmp	r3, #102	; 0x66
 800310c:	d9d6      	bls.n	80030bc <json_parse_number+0x6c>
              ('A' <= src[offset] && src[offset] <= 'F') ||
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003112:	4413      	add	r3, r2
 8003114:	781b      	ldrb	r3, [r3, #0]
              ('a' <= src[offset] && src[offset] <= 'f') ||
 8003116:	2b40      	cmp	r3, #64	; 0x40
 8003118:	d905      	bls.n	8003126 <json_parse_number+0xd6>
              ('A' <= src[offset] && src[offset] <= 'F') ||
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311e:	4413      	add	r3, r2
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b46      	cmp	r3, #70	; 0x46
 8003124:	d9ca      	bls.n	80030bc <json_parse_number+0x6c>
              ('x' == src[offset]) || ('X' == src[offset]))) {
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312a:	4413      	add	r3, r2
 800312c:	781b      	ldrb	r3, [r3, #0]
              ('A' <= src[offset] && src[offset] <= 'F') ||
 800312e:	2b78      	cmp	r3, #120	; 0x78
 8003130:	d0c4      	beq.n	80030bc <json_parse_number+0x6c>
              ('x' == src[offset]) || ('X' == src[offset]))) {
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003136:	4413      	add	r3, r2
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b58      	cmp	r3, #88	; 0x58
 800313c:	d0be      	beq.n	80030bc <json_parse_number+0x6c>
      }
    }
  }

  while (offset < size) {
 800313e:	e05a      	b.n	80031f6 <json_parse_number+0x1a6>
    int end = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (src[offset]) {
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003148:	4413      	add	r3, r2
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b45      	cmp	r3, #69	; 0x45
 800314e:	dc3d      	bgt.n	80031cc <json_parse_number+0x17c>
 8003150:	2b2b      	cmp	r3, #43	; 0x2b
 8003152:	db4a      	blt.n	80031ea <json_parse_number+0x19a>
 8003154:	3b2b      	subs	r3, #43	; 0x2b
 8003156:	2b1a      	cmp	r3, #26
 8003158:	d847      	bhi.n	80031ea <json_parse_number+0x19a>
 800315a:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <json_parse_number+0x110>)
 800315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003160:	080031d1 	.word	0x080031d1
 8003164:	080031eb 	.word	0x080031eb
 8003168:	080031d1 	.word	0x080031d1
 800316c:	080031d1 	.word	0x080031d1
 8003170:	080031eb 	.word	0x080031eb
 8003174:	080031d1 	.word	0x080031d1
 8003178:	080031d1 	.word	0x080031d1
 800317c:	080031d1 	.word	0x080031d1
 8003180:	080031d1 	.word	0x080031d1
 8003184:	080031d1 	.word	0x080031d1
 8003188:	080031d1 	.word	0x080031d1
 800318c:	080031d1 	.word	0x080031d1
 8003190:	080031d1 	.word	0x080031d1
 8003194:	080031d1 	.word	0x080031d1
 8003198:	080031d1 	.word	0x080031d1
 800319c:	080031eb 	.word	0x080031eb
 80031a0:	080031eb 	.word	0x080031eb
 80031a4:	080031eb 	.word	0x080031eb
 80031a8:	080031eb 	.word	0x080031eb
 80031ac:	080031eb 	.word	0x080031eb
 80031b0:	080031eb 	.word	0x080031eb
 80031b4:	080031eb 	.word	0x080031eb
 80031b8:	080031eb 	.word	0x080031eb
 80031bc:	080031eb 	.word	0x080031eb
 80031c0:	080031eb 	.word	0x080031eb
 80031c4:	080031eb 	.word	0x080031eb
 80031c8:	080031d1 	.word	0x080031d1
 80031cc:	2b65      	cmp	r3, #101	; 0x65
 80031ce:	d10c      	bne.n	80031ea <json_parse_number+0x19a>
    case '.':
    case 'e':
    case 'E':
    case '+':
    case '-':
      data[bytes_written++] = src[offset++];
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	637a      	str	r2, [r7, #52]	; 0x34
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	441a      	add	r2, r3
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	1c59      	adds	r1, r3, #1
 80031de:	6339      	str	r1, [r7, #48]	; 0x30
 80031e0:	6979      	ldr	r1, [r7, #20]
 80031e2:	440b      	add	r3, r1
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	701a      	strb	r2, [r3, #0]
      break;
 80031e8:	e002      	b.n	80031f0 <json_parse_number+0x1a0>
    default:
      end = 1;
 80031ea:	2301      	movs	r3, #1
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80031ee:	bf00      	nop
    }

    if (0 != end) {
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d104      	bne.n	8003200 <json_parse_number+0x1b0>
  while (offset < size) {
 80031f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d3a0      	bcc.n	8003140 <json_parse_number+0xf0>
 80031fe:	e000      	b.n	8003202 <json_parse_number+0x1b2>
      break;
 8003200:	bf00      	nop
    }
  }

  if (json_parse_flags_allow_inf_and_nan & flags_bitset) {
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d047      	beq.n	800329c <json_parse_number+0x24c>
    const size_t inf_strlen = 8; /* = strlen("Infinity");. */
 800320c:	2308      	movs	r3, #8
 800320e:	613b      	str	r3, [r7, #16]
    const size_t nan_strlen = 3; /* = strlen("NaN");. */
 8003210:	2303      	movs	r3, #3
 8003212:	60fb      	str	r3, [r7, #12]

    if (offset + inf_strlen < size) {
 8003214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	429a      	cmp	r2, r3
 800321e:	d91b      	bls.n	8003258 <json_parse_number+0x208>
      if ('I' == src[offset]) {
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003224:	4413      	add	r3, r2
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b49      	cmp	r3, #73	; 0x49
 800322a:	d115      	bne.n	8003258 <json_parse_number+0x208>
        size_t i;
        /* We found our special 'Infinity' keyword! */
        for (i = 0; i < inf_strlen; i++) {
 800322c:	2300      	movs	r3, #0
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003230:	e00e      	b.n	8003250 <json_parse_number+0x200>
          data[bytes_written++] = src[offset++];
 8003232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	637a      	str	r2, [r7, #52]	; 0x34
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	441a      	add	r2, r3
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	1c59      	adds	r1, r3, #1
 8003240:	6339      	str	r1, [r7, #48]	; 0x30
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	440b      	add	r3, r1
 8003246:	7812      	ldrb	r2, [r2, #0]
 8003248:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < inf_strlen; i++) {
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	3301      	adds	r3, #1
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	429a      	cmp	r2, r3
 8003256:	d3ec      	bcc.n	8003232 <json_parse_number+0x1e2>
        }
      }
    }

    if (offset + nan_strlen < size) {
 8003258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4413      	add	r3, r2
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	429a      	cmp	r2, r3
 8003262:	d91b      	bls.n	800329c <json_parse_number+0x24c>
      if ('N' == src[offset]) {
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003268:	4413      	add	r3, r2
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b4e      	cmp	r3, #78	; 0x4e
 800326e:	d115      	bne.n	800329c <json_parse_number+0x24c>
        size_t i;
        /* We found our special 'NaN' keyword! */
        for (i = 0; i < nan_strlen; i++) {
 8003270:	2300      	movs	r3, #0
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
 8003274:	e00e      	b.n	8003294 <json_parse_number+0x244>
          data[bytes_written++] = src[offset++];
 8003276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	637a      	str	r2, [r7, #52]	; 0x34
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	441a      	add	r2, r3
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	1c59      	adds	r1, r3, #1
 8003284:	6339      	str	r1, [r7, #48]	; 0x30
 8003286:	6979      	ldr	r1, [r7, #20]
 8003288:	440b      	add	r3, r1
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nan_strlen; i++) {
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	3301      	adds	r3, #1
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
 8003294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	429a      	cmp	r2, r3
 800329a:	d3ec      	bcc.n	8003276 <json_parse_number+0x226>
      }
    }
  }

  /* record the size of the number. */
  number->number_size = bytes_written;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a0:	605a      	str	r2, [r3, #4]
  /* add null terminator to number string. */
  data[bytes_written++] = '\0';
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	633a      	str	r2, [r7, #48]	; 0x30
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4413      	add	r3, r2
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
  /* move data along. */
  state->data += bytes_written;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	441a      	add	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	611a      	str	r2, [r3, #16]
  /* update offset. */
  state->offset = offset;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032c0:	609a      	str	r2, [r3, #8]
}
 80032c2:	bf00      	nop
 80032c4:	373c      	adds	r7, #60	; 0x3c
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop

080032d0 <json_parse_value>:

json_weak void json_parse_value(struct json_parse_state_s *state,
                                int is_global_object,
                                struct json_value_s *value);
void json_parse_value(struct json_parse_state_s *state, int is_global_object,
                      struct json_value_s *value) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	61fb      	str	r3, [r7, #28]
  const char *const src = state->src;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	61bb      	str	r3, [r7, #24]
  const size_t size = state->size;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	617b      	str	r3, [r7, #20]
  size_t offset;

  (void)json_skip_all_skippables(state);
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f7fe fa1d 	bl	800172e <json_skip_all_skippables>

  /* cache offset now. */
  offset = state->offset;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	613b      	str	r3, [r7, #16]

  if (is_global_object) {
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d014      	beq.n	800332a <json_parse_value+0x5a>
    value->type = json_type_object;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	605a      	str	r2, [r3, #4]
    value->payload = state->dom;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	601a      	str	r2, [r3, #0]
    state->dom += sizeof(struct json_object_s);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f103 0208 	add.w	r2, r3, #8
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	615a      	str	r2, [r3, #20]
    json_parse_object(state, /* is_global_object = */ 1,
                      (struct json_object_s *)value->payload);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
    json_parse_object(state, /* is_global_object = */ 1,
 800331e:	461a      	mov	r2, r3
 8003320:	2101      	movs	r1, #1
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fcec 	bl	8002d00 <json_parse_object>
        json_parse_number(state, (struct json_number_s *)value->payload);
      }
      break;
    }
  }
}
 8003328:	e1eb      	b.n	8003702 <json_parse_value+0x432>
    switch (src[offset]) {
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4413      	add	r3, r2
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b5b      	cmp	r3, #91	; 0x5b
 8003334:	dc7e      	bgt.n	8003434 <json_parse_value+0x164>
 8003336:	2b22      	cmp	r3, #34	; 0x22
 8003338:	f2c0 80d0 	blt.w	80034dc <json_parse_value+0x20c>
 800333c:	3b22      	subs	r3, #34	; 0x22
 800333e:	2b39      	cmp	r3, #57	; 0x39
 8003340:	f200 80cc 	bhi.w	80034dc <json_parse_value+0x20c>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <json_parse_value+0x7c>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	0800343b 	.word	0x0800343b
 8003350:	080034dd 	.word	0x080034dd
 8003354:	080034dd 	.word	0x080034dd
 8003358:	080034dd 	.word	0x080034dd
 800335c:	080034dd 	.word	0x080034dd
 8003360:	0800343b 	.word	0x0800343b
 8003364:	080034dd 	.word	0x080034dd
 8003368:	080034dd 	.word	0x080034dd
 800336c:	080034dd 	.word	0x080034dd
 8003370:	080034b5 	.word	0x080034b5
 8003374:	080034dd 	.word	0x080034dd
 8003378:	080034b5 	.word	0x080034b5
 800337c:	080034b5 	.word	0x080034b5
 8003380:	080034dd 	.word	0x080034dd
 8003384:	080034b5 	.word	0x080034b5
 8003388:	080034b5 	.word	0x080034b5
 800338c:	080034b5 	.word	0x080034b5
 8003390:	080034b5 	.word	0x080034b5
 8003394:	080034b5 	.word	0x080034b5
 8003398:	080034b5 	.word	0x080034b5
 800339c:	080034b5 	.word	0x080034b5
 80033a0:	080034b5 	.word	0x080034b5
 80033a4:	080034b5 	.word	0x080034b5
 80033a8:	080034b5 	.word	0x080034b5
 80033ac:	080034dd 	.word	0x080034dd
 80033b0:	080034dd 	.word	0x080034dd
 80033b4:	080034dd 	.word	0x080034dd
 80033b8:	080034dd 	.word	0x080034dd
 80033bc:	080034dd 	.word	0x080034dd
 80033c0:	080034dd 	.word	0x080034dd
 80033c4:	080034dd 	.word	0x080034dd
 80033c8:	080034dd 	.word	0x080034dd
 80033cc:	080034dd 	.word	0x080034dd
 80033d0:	080034dd 	.word	0x080034dd
 80033d4:	080034dd 	.word	0x080034dd
 80033d8:	080034dd 	.word	0x080034dd
 80033dc:	080034dd 	.word	0x080034dd
 80033e0:	080034dd 	.word	0x080034dd
 80033e4:	080034dd 	.word	0x080034dd
 80033e8:	080034dd 	.word	0x080034dd
 80033ec:	080034dd 	.word	0x080034dd
 80033f0:	080034dd 	.word	0x080034dd
 80033f4:	080034dd 	.word	0x080034dd
 80033f8:	080034dd 	.word	0x080034dd
 80033fc:	080034dd 	.word	0x080034dd
 8003400:	080034dd 	.word	0x080034dd
 8003404:	080034dd 	.word	0x080034dd
 8003408:	080034dd 	.word	0x080034dd
 800340c:	080034dd 	.word	0x080034dd
 8003410:	080034dd 	.word	0x080034dd
 8003414:	080034dd 	.word	0x080034dd
 8003418:	080034dd 	.word	0x080034dd
 800341c:	080034dd 	.word	0x080034dd
 8003420:	080034dd 	.word	0x080034dd
 8003424:	080034dd 	.word	0x080034dd
 8003428:	080034dd 	.word	0x080034dd
 800342c:	080034dd 	.word	0x080034dd
 8003430:	0800348d 	.word	0x0800348d
 8003434:	2b7b      	cmp	r3, #123	; 0x7b
 8003436:	d014      	beq.n	8003462 <json_parse_value+0x192>
 8003438:	e050      	b.n	80034dc <json_parse_value+0x20c>
      value->type = json_type_string;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	605a      	str	r2, [r3, #4]
      value->payload = state->dom;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	601a      	str	r2, [r3, #0]
      state->dom += sizeof(struct json_string_s);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f103 0208 	add.w	r2, r3, #8
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	615a      	str	r2, [r3, #20]
      json_parse_string(state, (struct json_string_s *)value->payload);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4619      	mov	r1, r3
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff fa18 	bl	8002890 <json_parse_string>
      break;
 8003460:	e14f      	b.n	8003702 <json_parse_value+0x432>
      value->type = json_type_object;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	605a      	str	r2, [r3, #4]
      value->payload = state->dom;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	601a      	str	r2, [r3, #0]
      state->dom += sizeof(struct json_object_s);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	f103 0208 	add.w	r2, r3, #8
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	615a      	str	r2, [r3, #20]
                        (struct json_object_s *)value->payload);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
      json_parse_object(state, /* is_global_object = */ 0,
 8003480:	461a      	mov	r2, r3
 8003482:	2100      	movs	r1, #0
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff fc3b 	bl	8002d00 <json_parse_object>
      break;
 800348a:	e13a      	b.n	8003702 <json_parse_value+0x432>
      value->type = json_type_array;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2203      	movs	r2, #3
 8003490:	605a      	str	r2, [r3, #4]
      value->payload = state->dom;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	601a      	str	r2, [r3, #0]
      state->dom += sizeof(struct json_array_s);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f103 0208 	add.w	r2, r3, #8
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	615a      	str	r2, [r3, #20]
      json_parse_array(state, (struct json_array_s *)value->payload);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4619      	mov	r1, r3
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff fd29 	bl	8002f04 <json_parse_array>
      break;
 80034b2:	e126      	b.n	8003702 <json_parse_value+0x432>
      value->type = json_type_number;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	605a      	str	r2, [r3, #4]
      value->payload = state->dom;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	601a      	str	r2, [r3, #0]
      state->dom += sizeof(struct json_number_s);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f103 0208 	add.w	r2, r3, #8
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	615a      	str	r2, [r3, #20]
      json_parse_number(state, (struct json_number_s *)value->payload);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4619      	mov	r1, r3
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff fdbb 	bl	8003050 <json_parse_number>
      break;
 80034da:	e112      	b.n	8003702 <json_parse_value+0x432>
      if ((offset + 4) <= size && 't' == src[offset + 0] &&
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	3304      	adds	r3, #4
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d326      	bcc.n	8003534 <json_parse_value+0x264>
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4413      	add	r3, r2
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b74      	cmp	r3, #116	; 0x74
 80034f0:	d120      	bne.n	8003534 <json_parse_value+0x264>
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	3301      	adds	r3, #1
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4413      	add	r3, r2
 80034fa:	781b      	ldrb	r3, [r3, #0]
      if ((offset + 4) <= size && 't' == src[offset + 0] &&
 80034fc:	2b72      	cmp	r3, #114	; 0x72
 80034fe:	d119      	bne.n	8003534 <json_parse_value+0x264>
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	3302      	adds	r3, #2
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4413      	add	r3, r2
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b75      	cmp	r3, #117	; 0x75
 800350c:	d112      	bne.n	8003534 <json_parse_value+0x264>
          'e' == src[offset + 3]) {
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	3303      	adds	r3, #3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4413      	add	r3, r2
 8003516:	781b      	ldrb	r3, [r3, #0]
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 8003518:	2b65      	cmp	r3, #101	; 0x65
 800351a:	d10b      	bne.n	8003534 <json_parse_value+0x264>
        value->type = json_type_true;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2204      	movs	r2, #4
 8003520:	605a      	str	r2, [r3, #4]
        value->payload = json_null;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
        state->offset += 4;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	1d1a      	adds	r2, r3, #4
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	609a      	str	r2, [r3, #8]
 8003532:	e0e5      	b.n	8003700 <json_parse_value+0x430>
      } else if ((offset + 5) <= size && 'f' == src[offset + 0] &&
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	3305      	adds	r3, #5
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	429a      	cmp	r2, r3
 800353c:	d32d      	bcc.n	800359a <json_parse_value+0x2ca>
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b66      	cmp	r3, #102	; 0x66
 8003548:	d127      	bne.n	800359a <json_parse_value+0x2ca>
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	3301      	adds	r3, #1
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4413      	add	r3, r2
 8003552:	781b      	ldrb	r3, [r3, #0]
      } else if ((offset + 5) <= size && 'f' == src[offset + 0] &&
 8003554:	2b61      	cmp	r3, #97	; 0x61
 8003556:	d120      	bne.n	800359a <json_parse_value+0x2ca>
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	3302      	adds	r3, #2
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4413      	add	r3, r2
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b6c      	cmp	r3, #108	; 0x6c
 8003564:	d119      	bne.n	800359a <json_parse_value+0x2ca>
                 's' == src[offset + 3] && 'e' == src[offset + 4]) {
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	3303      	adds	r3, #3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4413      	add	r3, r2
 800356e:	781b      	ldrb	r3, [r3, #0]
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8003570:	2b73      	cmp	r3, #115	; 0x73
 8003572:	d112      	bne.n	800359a <json_parse_value+0x2ca>
                 's' == src[offset + 3] && 'e' == src[offset + 4]) {
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	3304      	adds	r3, #4
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4413      	add	r3, r2
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b65      	cmp	r3, #101	; 0x65
 8003580:	d10b      	bne.n	800359a <json_parse_value+0x2ca>
        value->type = json_type_false;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2205      	movs	r2, #5
 8003586:	605a      	str	r2, [r3, #4]
        value->payload = json_null;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
        state->offset += 5;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	1d5a      	adds	r2, r3, #5
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	e0b2      	b.n	8003700 <json_parse_value+0x430>
      } else if ((offset + 4) <= size && 'n' == src[offset + 0] &&
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	3304      	adds	r3, #4
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d326      	bcc.n	80035f2 <json_parse_value+0x322>
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b6e      	cmp	r3, #110	; 0x6e
 80035ae:	d120      	bne.n	80035f2 <json_parse_value+0x322>
                 'u' == src[offset + 1] && 'l' == src[offset + 2] &&
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	3301      	adds	r3, #1
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4413      	add	r3, r2
 80035b8:	781b      	ldrb	r3, [r3, #0]
      } else if ((offset + 4) <= size && 'n' == src[offset + 0] &&
 80035ba:	2b75      	cmp	r3, #117	; 0x75
 80035bc:	d119      	bne.n	80035f2 <json_parse_value+0x322>
                 'u' == src[offset + 1] && 'l' == src[offset + 2] &&
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	3302      	adds	r3, #2
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4413      	add	r3, r2
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b6c      	cmp	r3, #108	; 0x6c
 80035ca:	d112      	bne.n	80035f2 <json_parse_value+0x322>
                 'l' == src[offset + 3]) {
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3303      	adds	r3, #3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4413      	add	r3, r2
 80035d4:	781b      	ldrb	r3, [r3, #0]
                 'u' == src[offset + 1] && 'l' == src[offset + 2] &&
 80035d6:	2b6c      	cmp	r3, #108	; 0x6c
 80035d8:	d10b      	bne.n	80035f2 <json_parse_value+0x322>
        value->type = json_type_null;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2206      	movs	r2, #6
 80035de:	605a      	str	r2, [r3, #4]
        value->payload = json_null;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
        state->offset += 4;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	1d1a      	adds	r2, r3, #4
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	e086      	b.n	8003700 <json_parse_value+0x430>
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d02c      	beq.n	8003656 <json_parse_value+0x386>
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	3303      	adds	r3, #3
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	429a      	cmp	r2, r3
 8003604:	d327      	bcc.n	8003656 <json_parse_value+0x386>
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4413      	add	r3, r2
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b4e      	cmp	r3, #78	; 0x4e
 8003610:	d121      	bne.n	8003656 <json_parse_value+0x386>
                 'a' == src[offset + 1] && 'N' == src[offset + 2]) {
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	3301      	adds	r3, #1
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4413      	add	r3, r2
 800361a:	781b      	ldrb	r3, [r3, #0]
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 800361c:	2b61      	cmp	r3, #97	; 0x61
 800361e:	d11a      	bne.n	8003656 <json_parse_value+0x386>
                 'a' == src[offset + 1] && 'N' == src[offset + 2]) {
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	3302      	adds	r3, #2
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4413      	add	r3, r2
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b4e      	cmp	r3, #78	; 0x4e
 800362c:	d113      	bne.n	8003656 <json_parse_value+0x386>
        value->type = json_type_number;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	605a      	str	r2, [r3, #4]
        value->payload = state->dom;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	601a      	str	r2, [r3, #0]
        state->dom += sizeof(struct json_number_s);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f103 0208 	add.w	r2, r3, #8
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	615a      	str	r2, [r3, #20]
        json_parse_number(state, (struct json_number_s *)value->payload);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4619      	mov	r1, r3
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f7ff fcfe 	bl	8003050 <json_parse_number>
 8003654:	e054      	b.n	8003700 <json_parse_value+0x430>
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d04f      	beq.n	8003700 <json_parse_value+0x430>
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	3308      	adds	r3, #8
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	429a      	cmp	r2, r3
 8003668:	d34a      	bcc.n	8003700 <json_parse_value+0x430>
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4413      	add	r3, r2
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b49      	cmp	r3, #73	; 0x49
 8003674:	d144      	bne.n	8003700 <json_parse_value+0x430>
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	3301      	adds	r3, #1
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4413      	add	r3, r2
 800367e:	781b      	ldrb	r3, [r3, #0]
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 8003680:	2b6e      	cmp	r3, #110	; 0x6e
 8003682:	d13d      	bne.n	8003700 <json_parse_value+0x430>
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	3302      	adds	r3, #2
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4413      	add	r3, r2
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b66      	cmp	r3, #102	; 0x66
 8003690:	d136      	bne.n	8003700 <json_parse_value+0x430>
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	3303      	adds	r3, #3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4413      	add	r3, r2
 800369a:	781b      	ldrb	r3, [r3, #0]
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 800369c:	2b69      	cmp	r3, #105	; 0x69
 800369e:	d12f      	bne.n	8003700 <json_parse_value+0x430>
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	3304      	adds	r3, #4
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4413      	add	r3, r2
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b6e      	cmp	r3, #110	; 0x6e
 80036ac:	d128      	bne.n	8003700 <json_parse_value+0x430>
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	3305      	adds	r3, #5
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4413      	add	r3, r2
 80036b6:	781b      	ldrb	r3, [r3, #0]
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 80036b8:	2b69      	cmp	r3, #105	; 0x69
 80036ba:	d121      	bne.n	8003700 <json_parse_value+0x430>
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	3306      	adds	r3, #6
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4413      	add	r3, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b74      	cmp	r3, #116	; 0x74
 80036c8:	d11a      	bne.n	8003700 <json_parse_value+0x430>
                 'y' == src[offset + 7]) {
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	3307      	adds	r3, #7
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4413      	add	r3, r2
 80036d2:	781b      	ldrb	r3, [r3, #0]
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 80036d4:	2b79      	cmp	r3, #121	; 0x79
 80036d6:	d113      	bne.n	8003700 <json_parse_value+0x430>
        value->type = json_type_number;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	605a      	str	r2, [r3, #4]
        value->payload = state->dom;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	601a      	str	r2, [r3, #0]
        state->dom += sizeof(struct json_number_s);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f103 0208 	add.w	r2, r3, #8
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	615a      	str	r2, [r3, #20]
        json_parse_number(state, (struct json_number_s *)value->payload);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4619      	mov	r1, r3
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff fca9 	bl	8003050 <json_parse_number>
      break;
 80036fe:	e7ff      	b.n	8003700 <json_parse_value+0x430>
 8003700:	bf00      	nop
}
 8003702:	bf00      	nop
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop

0800370c <json_parse_ex>:

struct json_value_s *
json_parse_ex(const void *src, size_t src_size, size_t flags_bitset,
              void *(*alloc_func_ptr)(void *user_data, size_t size),
              void *user_data, struct json_parse_result_s *result) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b094      	sub	sp, #80	; 0x50
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  void *allocation;
  struct json_value_s *value;
  size_t total_size;
  int input_error;

  if (result) {
 800371a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00b      	beq.n	8003738 <json_parse_ex+0x2c>
    result->error = json_parse_error_none;
 8003720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
    result->error_offset = 0;
 8003726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003728:	2200      	movs	r2, #0
 800372a:	605a      	str	r2, [r3, #4]
    result->error_line_no = 0;
 800372c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
    result->error_row_no = 0;
 8003732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003734:	2200      	movs	r2, #0
 8003736:	60da      	str	r2, [r3, #12]
  }

  if (json_null == src) {
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <json_parse_ex+0x36>
    /* invalid src pointer was null! */
    return json_null;
 800373e:	2300      	movs	r3, #0
 8003740:	e09a      	b.n	8003878 <json_parse_ex+0x16c>
  }

  state.src = (const char *)src;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	613b      	str	r3, [r7, #16]
  state.size = src_size;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	617b      	str	r3, [r7, #20]
  state.offset = 0;
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
  state.line_no = 1;
 800374e:	2301      	movs	r3, #1
 8003750:	633b      	str	r3, [r7, #48]	; 0x30
  state.line_offset = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
  state.error = json_parse_error_none;
 8003756:	2300      	movs	r3, #0
 8003758:	63bb      	str	r3, [r7, #56]	; 0x38
  state.dom_size = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	62bb      	str	r3, [r7, #40]	; 0x28
  state.data_size = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
  state.flags_bitset = flags_bitset;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	61fb      	str	r3, [r7, #28]

  input_error = json_get_value_size(
      &state, (int)(json_parse_flags_allow_global_object & state.flags_bitset));
 8003766:	69fb      	ldr	r3, [r7, #28]
  input_error = json_get_value_size(
 8003768:	f003 0204 	and.w	r2, r3, #4
 800376c:	f107 0310 	add.w	r3, r7, #16
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fe98 	bl	80024a8 <json_get_value_size>
 8003778:	6478      	str	r0, [r7, #68]	; 0x44

  if (0 == input_error) {
 800377a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10c      	bne.n	800379a <json_parse_ex+0x8e>
    json_skip_all_skippables(&state);
 8003780:	f107 0310 	add.w	r3, r7, #16
 8003784:	4618      	mov	r0, r3
 8003786:	f7fd ffd2 	bl	800172e <json_skip_all_skippables>

    if (state.offset != state.size) {
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	429a      	cmp	r2, r3
 8003790:	d003      	beq.n	800379a <json_parse_ex+0x8e>
      /* our parsing didn't have an error, but there are characters remaining in
       * the input that weren't part of the JSON! */

      state.error = json_parse_error_unexpected_trailing_characters;
 8003792:	230a      	movs	r3, #10
 8003794:	63bb      	str	r3, [r7, #56]	; 0x38
      input_error = 1;
 8003796:	2301      	movs	r3, #1
 8003798:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  if (input_error) {
 800379a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379c:	2b00      	cmp	r3, #0
 800379e:	d012      	beq.n	80037c6 <json_parse_ex+0xba>
    /* parsing value's size failed (most likely an invalid JSON DOM!). */
    if (result) {
 80037a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00d      	beq.n	80037c2 <json_parse_ex+0xb6>
      result->error = state.error;
 80037a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037aa:	601a      	str	r2, [r3, #0]
      result->error_offset = state.offset;
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b0:	605a      	str	r2, [r3, #4]
      result->error_line_no = state.line_no;
 80037b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b6:	609a      	str	r2, [r3, #8]
      result->error_row_no = state.offset - state.line_offset;
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037bc:	1ad2      	subs	r2, r2, r3
 80037be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c0:	60da      	str	r2, [r3, #12]
    }
    return json_null;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e058      	b.n	8003878 <json_parse_ex+0x16c>
  }

  /* our total allocation is the combination of the dom and data sizes (we. */
  /* first encode the structure of the JSON, and then the data referenced by. */
  /* the JSON values). */
  total_size = state.dom_size + state.data_size;
 80037c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	4413      	add	r3, r2
 80037cc:	643b      	str	r3, [r7, #64]	; 0x40

  if (json_null == alloc_func_ptr) {
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d105      	bne.n	80037e0 <json_parse_ex+0xd4>
    allocation = malloc(total_size);
 80037d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80037d6:	f00f f89b 	bl	8012910 <malloc>
 80037da:	4603      	mov	r3, r0
 80037dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037de:	e004      	b.n	80037ea <json_parse_ex+0xde>
  } else {
    allocation = alloc_func_ptr(user_data, total_size);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80037e6:	4798      	blx	r3
 80037e8:	64f8      	str	r0, [r7, #76]	; 0x4c
  }

  if (json_null == allocation) {
 80037ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d110      	bne.n	8003812 <json_parse_ex+0x106>
    /* malloc failed! */
    if (result) {
 80037f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <json_parse_ex+0x102>
      result->error = json_parse_error_allocator_failed;
 80037f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f8:	2209      	movs	r2, #9
 80037fa:	601a      	str	r2, [r3, #0]
      result->error_offset = 0;
 80037fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037fe:	2200      	movs	r2, #0
 8003800:	605a      	str	r2, [r3, #4]
      result->error_line_no = 0;
 8003802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003804:	2200      	movs	r2, #0
 8003806:	609a      	str	r2, [r3, #8]
      result->error_row_no = 0;
 8003808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380a:	2200      	movs	r2, #0
 800380c:	60da      	str	r2, [r3, #12]
    }

    return json_null;
 800380e:	2300      	movs	r3, #0
 8003810:	e032      	b.n	8003878 <json_parse_ex+0x16c>
  }

  /* reset offset so we can reuse it. */
  state.offset = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]

  /* reset the line information so we can reuse it. */
  state.line_no = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	633b      	str	r3, [r7, #48]	; 0x30
  state.line_offset = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	637b      	str	r3, [r7, #52]	; 0x34

  state.dom = (char *)allocation;
 800381e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
  state.data = state.dom + state.dom_size;
 8003822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	4413      	add	r3, r2
 8003828:	623b      	str	r3, [r7, #32]

  if (json_parse_flags_allow_location_information & state.flags_bitset) {
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d012      	beq.n	800385a <json_parse_ex+0x14e>
    struct json_value_ex_s *value_ex = (struct json_value_ex_s *)state.dom;
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	63fb      	str	r3, [r7, #60]	; 0x3c
    state.dom += sizeof(struct json_value_ex_s);
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	3314      	adds	r3, #20
 800383c:	627b      	str	r3, [r7, #36]	; 0x24

    value_ex->offset = state.offset;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003842:	609a      	str	r2, [r3, #8]
    value_ex->line_no = state.line_no;
 8003844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003848:	60da      	str	r2, [r3, #12]
    value_ex->row_no = state.offset - state.line_offset;
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	1ad2      	subs	r2, r2, r3
 8003850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003852:	611a      	str	r2, [r3, #16]

    value = &(value_ex->value);
 8003854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
 8003858:	e004      	b.n	8003864 <json_parse_ex+0x158>
  } else {
    value = (struct json_value_s *)state.dom;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	64bb      	str	r3, [r7, #72]	; 0x48
    state.dom += sizeof(struct json_value_s);
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	3308      	adds	r3, #8
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
  }

  json_parse_value(
      &state, (int)(json_parse_flags_allow_global_object & state.flags_bitset),
 8003864:	69fb      	ldr	r3, [r7, #28]
  json_parse_value(
 8003866:	f003 0104 	and.w	r1, r3, #4
 800386a:	f107 0310 	add.w	r3, r7, #16
 800386e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fd2d 	bl	80032d0 <json_parse_value>
      value);

  return (struct json_value_s *)allocation;
 8003876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003878:	4618      	mov	r0, r3
 800387a:	3750      	adds	r7, #80	; 0x50
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <json_parse>:

struct json_value_s *json_parse(const void *src, size_t src_size) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af02      	add	r7, sp, #8
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  return json_parse_ex(src, src_size, json_parse_flags_default, json_null,
 800388a:	2300      	movs	r3, #0
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	2300      	movs	r3, #0
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2300      	movs	r3, #0
 8003894:	2200      	movs	r2, #0
 8003896:	6839      	ldr	r1, [r7, #0]
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ff37 	bl	800370c <json_parse_ex>
 800389e:	4603      	mov	r3, r0
                       json_null, json_null);
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <json_value_as_string>:
  json_extract_copy_value(&state, value);

  return (struct json_value_s *)allocation;
}

struct json_string_s *json_value_as_string(struct json_value_s *const value) {
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  if (value->type != json_type_string) {
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <json_value_as_string+0x14>
    return json_null;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e001      	b.n	80038c0 <json_value_as_string+0x18>
  }

  return (struct json_string_s *)value->payload;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <json_value_as_number>:

struct json_number_s *json_value_as_number(struct json_value_s *const value) {
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if (value->type != json_type_number) {
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d001      	beq.n	80038e0 <json_value_as_number+0x14>
    return json_null;
 80038dc:	2300      	movs	r3, #0
 80038de:	e001      	b.n	80038e4 <json_value_as_number+0x18>
  }

  return (struct json_number_s *)value->payload;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038f4:	f000 ffe2 	bl	80048bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038f8:	f000 f81c 	bl	8003934 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038fc:	f000 f8e6 	bl	8003acc <MX_GPIO_Init>
  MX_TIM14_Init();
 8003900:	f000 f8c0 	bl	8003a84 <MX_TIM14_Init>
  MX_LWIP_Init();
 8003904:	f004 fae8 	bl	8007ed8 <MX_LWIP_Init>
  MX_SPI3_Init();
 8003908:	f000 f884 	bl	8003a14 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  udpClient_connect();
 800390c:	f000 fcbc 	bl	8004288 <udpClient_connect>
  HAL_TIM_Base_Start_IT(&htim14);
 8003910:	4805      	ldr	r0, [pc, #20]	; (8003928 <main+0x38>)
 8003912:	f004 f88d 	bl	8007a30 <HAL_TIM_Base_Start_IT>
  HAL_SPI_Receive_IT(&hspi3, rxBuffer, sizeof(rxBuffer));
 8003916:	2202      	movs	r2, #2
 8003918:	4904      	ldr	r1, [pc, #16]	; (800392c <main+0x3c>)
 800391a:	4805      	ldr	r0, [pc, #20]	; (8003930 <main+0x40>)
 800391c:	f003 faf2 	bl	8006f04 <HAL_SPI_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8003920:	f004 fc0c 	bl	800813c <MX_LWIP_Process>
 8003924:	e7fc      	b.n	8003920 <main+0x30>
 8003926:	bf00      	nop
 8003928:	2000045c 	.word	0x2000045c
 800392c:	20000458 	.word	0x20000458
 8003930:	20000400 	.word	0x20000400

08003934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b094      	sub	sp, #80	; 0x50
 8003938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800393a:	f107 0320 	add.w	r3, r7, #32
 800393e:	2230      	movs	r2, #48	; 0x30
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f00f f82a 	bl	801299c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003948:	f107 030c 	add.w	r3, r7, #12
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003958:	2300      	movs	r3, #0
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <SystemClock_Config+0xd8>)
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	4a2a      	ldr	r2, [pc, #168]	; (8003a0c <SystemClock_Config+0xd8>)
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003966:	6413      	str	r3, [r2, #64]	; 0x40
 8003968:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <SystemClock_Config+0xd8>)
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003974:	2300      	movs	r3, #0
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <SystemClock_Config+0xdc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a24      	ldr	r2, [pc, #144]	; (8003a10 <SystemClock_Config+0xdc>)
 800397e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <SystemClock_Config+0xdc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003990:	2301      	movs	r3, #1
 8003992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800399a:	2302      	movs	r3, #2
 800399c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800399e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80039a4:	230c      	movs	r3, #12
 80039a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80039a8:	2360      	movs	r3, #96	; 0x60
 80039aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80039ac:	2304      	movs	r3, #4
 80039ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80039b0:	2304      	movs	r3, #4
 80039b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039b4:	f107 0320 	add.w	r3, r7, #32
 80039b8:	4618      	mov	r0, r3
 80039ba:	f002 fc55 	bl	8006268 <HAL_RCC_OscConfig>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80039c4:	f000 fa4c 	bl	8003e60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039c8:	230f      	movs	r3, #15
 80039ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039cc:	2302      	movs	r3, #2
 80039ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f002 feb6 	bl	8006758 <HAL_RCC_ClockConfig>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80039f2:	f000 fa35 	bl	8003e60 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 80039f6:	2200      	movs	r2, #0
 80039f8:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 80039fc:	2000      	movs	r0, #0
 80039fe:	f002 ff91 	bl	8006924 <HAL_RCC_MCOConfig>
}
 8003a02:	bf00      	nop
 8003a04:	3750      	adds	r7, #80	; 0x50
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40007000 	.word	0x40007000

08003a14 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003a18:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a1a:	4a19      	ldr	r2, [pc, #100]	; (8003a80 <MX_SPI3_Init+0x6c>)
 8003a1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a24:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8003a26:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a2c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a2e:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a46:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a4a:	2210      	movs	r2, #16
 8003a4c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a5a:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a62:	220a      	movs	r2, #10
 8003a64:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003a66:	4805      	ldr	r0, [pc, #20]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a68:	f003 f886 	bl	8006b78 <HAL_SPI_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8003a72:	f000 f9f5 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000400 	.word	0x20000400
 8003a80:	40003c00 	.word	0x40003c00

08003a84 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <MX_TIM14_Init+0x40>)
 8003a8a:	4a0f      	ldr	r2, [pc, #60]	; (8003ac8 <MX_TIM14_Init+0x44>)
 8003a8c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 800 - 1;
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <MX_TIM14_Init+0x40>)
 8003a90:	f240 321f 	movw	r2, #799	; 0x31f
 8003a94:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <MX_TIM14_Init+0x40>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9375 - 1;
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <MX_TIM14_Init+0x40>)
 8003a9e:	f242 429e 	movw	r2, #9374	; 0x249e
 8003aa2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aa4:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <MX_TIM14_Init+0x40>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <MX_TIM14_Init+0x40>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003ab0:	4804      	ldr	r0, [pc, #16]	; (8003ac4 <MX_TIM14_Init+0x40>)
 8003ab2:	f003 ff6e 	bl	8007992 <HAL_TIM_Base_Init>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8003abc:	f000 f9d0 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003ac0:	bf00      	nop
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	2000045c 	.word	0x2000045c
 8003ac8:	40002000 	.word	0x40002000

08003acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08c      	sub	sp, #48	; 0x30
 8003ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad2:	f107 031c 	add.w	r3, r7, #28
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	609a      	str	r2, [r3, #8]
 8003ade:	60da      	str	r2, [r3, #12]
 8003ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	4b93      	ldr	r3, [pc, #588]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	4a92      	ldr	r2, [pc, #584]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003aec:	f043 0310 	orr.w	r3, r3, #16
 8003af0:	6313      	str	r3, [r2, #48]	; 0x30
 8003af2:	4b90      	ldr	r3, [pc, #576]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	4b8c      	ldr	r3, [pc, #560]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	4a8b      	ldr	r2, [pc, #556]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0e:	4b89      	ldr	r3, [pc, #548]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	4b85      	ldr	r3, [pc, #532]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4a84      	ldr	r2, [pc, #528]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b24:	f043 0304 	orr.w	r3, r3, #4
 8003b28:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2a:	4b82      	ldr	r3, [pc, #520]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	4b7e      	ldr	r3, [pc, #504]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	4a7d      	ldr	r2, [pc, #500]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	6313      	str	r3, [r2, #48]	; 0x30
 8003b46:	4b7b      	ldr	r3, [pc, #492]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	4b77      	ldr	r3, [pc, #476]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	4a76      	ldr	r2, [pc, #472]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b5c:	f043 0302 	orr.w	r3, r3, #2
 8003b60:	6313      	str	r3, [r2, #48]	; 0x30
 8003b62:	4b74      	ldr	r3, [pc, #464]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	4b70      	ldr	r3, [pc, #448]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	4a6f      	ldr	r2, [pc, #444]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b78:	f043 0308 	orr.w	r3, r3, #8
 8003b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7e:	4b6d      	ldr	r3, [pc, #436]	; (8003d34 <MX_GPIO_Init+0x268>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CAL3_REQ_Pin|CAL2_REQ_Pin|CAL1_REQ_Pin|CAL4_REQ_Pin, GPIO_PIN_RESET);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f242 01c1 	movw	r1, #8385	; 0x20c1
 8003b90:	4869      	ldr	r0, [pc, #420]	; (8003d38 <MX_GPIO_Init+0x26c>)
 8003b92:	f002 fb37 	bl	8006204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003b96:	2201      	movs	r2, #1
 8003b98:	2110      	movs	r1, #16
 8003b9a:	4868      	ldr	r0, [pc, #416]	; (8003d3c <MX_GPIO_Init+0x270>)
 8003b9c:	f002 fb32 	bl	8006204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIG_OUT_4_Pin|DIG_OUT_3_Pin, GPIO_PIN_RESET);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8003ba6:	4866      	ldr	r0, [pc, #408]	; (8003d40 <MX_GPIO_Init+0x274>)
 8003ba8:	f002 fb2c 	bl	8006204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIG_OUT_2_Pin|DIG_OUT_1_Pin, GPIO_PIN_RESET);
 8003bac:	2200      	movs	r2, #0
 8003bae:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003bb2:	4864      	ldr	r0, [pc, #400]	; (8003d44 <MX_GPIO_Init+0x278>)
 8003bb4:	f002 fb26 	bl	8006204 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAL4_CLK_Pin CAL2_CLK_Pin CAL1_CLK_Pin */
  GPIO_InitStruct.Pin = CAL4_CLK_Pin|CAL2_CLK_Pin|CAL1_CLK_Pin;
 8003bb8:	f248 2304 	movw	r3, #33284	; 0x8204
 8003bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bc8:	f107 031c 	add.w	r3, r7, #28
 8003bcc:	4619      	mov	r1, r3
 8003bce:	485a      	ldr	r0, [pc, #360]	; (8003d38 <MX_GPIO_Init+0x26c>)
 8003bd0:	f002 f964 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAL4_DATA_Pin CAL1_DATA_Pin */
  GPIO_InitStruct.Pin = CAL4_DATA_Pin|CAL1_DATA_Pin;
 8003bd4:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8003bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bde:	2301      	movs	r3, #1
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003be2:	f107 031c 	add.w	r3, r7, #28
 8003be6:	4619      	mov	r1, r3
 8003be8:	4853      	ldr	r0, [pc, #332]	; (8003d38 <MX_GPIO_Init+0x26c>)
 8003bea:	f002 f957 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAL3_REQ_Pin CAL2_REQ_Pin CAL1_REQ_Pin CAL4_REQ_Pin */
  GPIO_InitStruct.Pin = CAL3_REQ_Pin|CAL2_REQ_Pin|CAL1_REQ_Pin|CAL4_REQ_Pin;
 8003bee:	f242 03c1 	movw	r3, #8385	; 0x20c1
 8003bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003bf4:	2311      	movs	r3, #17
 8003bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c00:	f107 031c 	add.w	r3, r7, #28
 8003c04:	4619      	mov	r1, r3
 8003c06:	484c      	ldr	r0, [pc, #304]	; (8003d38 <MX_GPIO_Init+0x26c>)
 8003c08:	f002 f948 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL3_CLK_Pin */
  GPIO_InitStruct.Pin = CAL3_CLK_Pin;
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c16:	2301      	movs	r3, #1
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CAL3_CLK_GPIO_Port, &GPIO_InitStruct);
 8003c1a:	f107 031c 	add.w	r3, r7, #28
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4848      	ldr	r0, [pc, #288]	; (8003d44 <MX_GPIO_Init+0x278>)
 8003c22:	f002 f93b 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL3_DATA_Pin */
  GPIO_InitStruct.Pin = CAL3_DATA_Pin;
 8003c26:	2301      	movs	r3, #1
 8003c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CAL3_DATA_GPIO_Port, &GPIO_InitStruct);
 8003c32:	f107 031c 	add.w	r3, r7, #28
 8003c36:	4619      	mov	r1, r3
 8003c38:	4840      	ldr	r0, [pc, #256]	; (8003d3c <MX_GPIO_Init+0x270>)
 8003c3a:	f002 f92f 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c3e:	2310      	movs	r3, #16
 8003c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c42:	2301      	movs	r3, #1
 8003c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4e:	f107 031c 	add.w	r3, r7, #28
 8003c52:	4619      	mov	r1, r3
 8003c54:	4839      	ldr	r0, [pc, #228]	; (8003d3c <MX_GPIO_Init+0x270>)
 8003c56:	f002 f921 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL2_DATA_Pin */
  GPIO_InitStruct.Pin = CAL2_DATA_Pin;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c62:	2301      	movs	r3, #1
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CAL2_DATA_GPIO_Port, &GPIO_InitStruct);
 8003c66:	f107 031c 	add.w	r3, r7, #28
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4836      	ldr	r0, [pc, #216]	; (8003d48 <MX_GPIO_Init+0x27c>)
 8003c6e:	f002 f915 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_OUT_4_Pin DIG_OUT_3_Pin */
  GPIO_InitStruct.Pin = DIG_OUT_4_Pin|DIG_OUT_3_Pin;
 8003c72:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c84:	f107 031c 	add.w	r3, r7, #28
 8003c88:	4619      	mov	r1, r3
 8003c8a:	482d      	ldr	r0, [pc, #180]	; (8003d40 <MX_GPIO_Init+0x274>)
 8003c8c:	f002 f906 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_OUT_2_Pin DIG_OUT_1_Pin */
  GPIO_InitStruct.Pin = DIG_OUT_2_Pin|DIG_OUT_1_Pin;
 8003c90:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c96:	2301      	movs	r3, #1
 8003c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca2:	f107 031c 	add.w	r3, r7, #28
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4826      	ldr	r0, [pc, #152]	; (8003d44 <MX_GPIO_Init+0x278>)
 8003caa:	f002 f8f7 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc4:	f107 031c 	add.w	r3, r7, #28
 8003cc8:	4619      	mov	r1, r3
 8003cca:	481c      	ldr	r0, [pc, #112]	; (8003d3c <MX_GPIO_Init+0x270>)
 8003ccc:	f002 f8e6 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_PLC_Pin uC_PEDAL_Pin */
  GPIO_InitStruct.Pin = uC_PLC_Pin|uC_PEDAL_Pin;
 8003cd0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cd6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce0:	f107 031c 	add.w	r3, r7, #28
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4818      	ldr	r0, [pc, #96]	; (8003d48 <MX_GPIO_Init+0x27c>)
 8003ce8:	f002 f8d8 	bl	8005e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003cec:	2200      	movs	r2, #0
 8003cee:	2100      	movs	r1, #0
 8003cf0:	2008      	movs	r0, #8
 8003cf2:	f000 ff54 	bl	8004b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003cf6:	2008      	movs	r0, #8
 8003cf8:	f000 ff6d 	bl	8004bd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2100      	movs	r1, #0
 8003d00:	2009      	movs	r0, #9
 8003d02:	f000 ff4c 	bl	8004b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003d06:	2009      	movs	r0, #9
 8003d08:	f000 ff65 	bl	8004bd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2100      	movs	r1, #0
 8003d10:	2017      	movs	r0, #23
 8003d12:	f000 ff44 	bl	8004b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d16:	2017      	movs	r0, #23
 8003d18:	f000 ff5d 	bl	8004bd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2100      	movs	r1, #0
 8003d20:	2028      	movs	r0, #40	; 0x28
 8003d22:	f000 ff3c 	bl	8004b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d26:	2028      	movs	r0, #40	; 0x28
 8003d28:	f000 ff55 	bl	8004bd6 <HAL_NVIC_EnableIRQ>

}
 8003d2c:	bf00      	nop
 8003d2e:	3730      	adds	r7, #48	; 0x30
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40020000 	.word	0x40020000
 8003d40:	40020c00 	.word	0x40020c00
 8003d44:	40020800 	.word	0x40020800
 8003d48:	40020400 	.word	0x40020400

08003d4c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	if(htim  == &htim14){
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a14      	ldr	r2, [pc, #80]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d120      	bne.n	8003d9e <HAL_TIM_PeriodElapsedCallback+0x52>
		// todo: esta funcion va a cambiar cuando hagamos las pruebas finales, porque es solo un ejemplo.
//		HAL_GPIO_WritePin(CAL1_REQ_GPIO_Port, CAL1_REQ_Pin); // periodicamente tenemos un request, en teoria setteado cada 93.75ms, empieza bajo
		HAL_GPIO_WritePin(CAL1_REQ_GPIO_Port, CAL1_REQ_Pin, GPIO_PIN_RESET); // turn off REQ
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d62:	4812      	ldr	r0, [pc, #72]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d64:	f002 fa4e 	bl	8006204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CAL2_REQ_GPIO_Port, CAL2_REQ_Pin, GPIO_PIN_RESET); //
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2180      	movs	r1, #128	; 0x80
 8003d6c:	480f      	ldr	r0, [pc, #60]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d6e:	f002 fa49 	bl	8006204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CAL3_REQ_GPIO_Port, CAL3_REQ_Pin, GPIO_PIN_RESET); //
 8003d72:	2200      	movs	r2, #0
 8003d74:	2140      	movs	r1, #64	; 0x40
 8003d76:	480d      	ldr	r0, [pc, #52]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d78:	f002 fa44 	bl	8006204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CAL4_REQ_GPIO_Port, CAL4_REQ_Pin, GPIO_PIN_RESET); //
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2101      	movs	r1, #1
 8003d80:	480a      	ldr	r0, [pc, #40]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d82:	f002 fa3f 	bl	8006204 <HAL_GPIO_WritePin>

		onRisingEdgeOfReqSignal(CALIPER_1); // prendo el flag de poder empezar a leer los bits
 8003d86:	2000      	movs	r0, #0
 8003d88:	f7fd f988 	bl	800109c <onRisingEdgeOfReqSignal>
		onRisingEdgeOfReqSignal(CALIPER_2);
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	f7fd f985 	bl	800109c <onRisingEdgeOfReqSignal>
		onRisingEdgeOfReqSignal(CALIPER_3);
 8003d92:	2002      	movs	r0, #2
 8003d94:	f7fd f982 	bl	800109c <onRisingEdgeOfReqSignal>
		onRisingEdgeOfReqSignal(CALIPER_4);
 8003d98:	2003      	movs	r0, #3
 8003d9a:	f7fd f97f 	bl	800109c <onRisingEdgeOfReqSignal>
	}
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	2000045c 	.word	0x2000045c
 8003dac:	40021000 	.word	0x40021000

08003db0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	80fb      	strh	r3, [r7, #6]
	// llega una interrupcion por GPIO

	if(GPIO_Pin ==CAL1_CLK_Pin || GPIO_Pin == CAL2_CLK_Pin || GPIO_Pin == CAL3_CLK_Pin || GPIO_Pin == CAL4_CLK_Pin ){
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc0:	d009      	beq.n	8003dd6 <HAL_GPIO_EXTI_Callback+0x26>
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc8:	d005      	beq.n	8003dd6 <HAL_GPIO_EXTI_Callback+0x26>
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d002      	beq.n	8003dd6 <HAL_GPIO_EXTI_Callback+0x26>
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d109      	bne.n	8003dea <HAL_GPIO_EXTI_Callback+0x3a>
		//esto se hace si el GPIO_Pin es alguno de los del calibre (CLK)

		onRisingEdgeOfClockSignal(getCaliperNumberGivenClockPin(GPIO_Pin), caliperManager); // aca se realiza la lectura de los bits y se va guardando en el buffer
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fd f8c1 	bl	8000f60 <getCaliperNumberGivenClockPin>
 8003dde:	4603      	mov	r3, r0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	4914      	ldr	r1, [pc, #80]	; (8003e34 <HAL_GPIO_EXTI_Callback+0x84>)
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fd f96f 	bl	80010c8 <onRisingEdgeOfClockSignal>
	}

	if(GPIO_Pin == uC_PEDAL_Pin){
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df0:	d117      	bne.n	8003e22 <HAL_GPIO_EXTI_Callback+0x72>
		// que pasa con el pedal de los calibres
	  HAL_TIM_Base_Start_IT(&htim14); // start timer
 8003df2:	4811      	ldr	r0, [pc, #68]	; (8003e38 <HAL_GPIO_EXTI_Callback+0x88>)
 8003df4:	f003 fe1c 	bl	8007a30 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(CAL1_REQ_GPIO_Port, CAL1_REQ_Pin, GPIO_PIN_SET); // supose REQ starts down, we turn on the REQ
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003dfe:	480f      	ldr	r0, [pc, #60]	; (8003e3c <HAL_GPIO_EXTI_Callback+0x8c>)
 8003e00:	f002 fa00 	bl	8006204 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CAL2_REQ_GPIO_Port, CAL2_REQ_Pin, GPIO_PIN_SET); // supose REQ starts down, we turn on the REQ
 8003e04:	2201      	movs	r2, #1
 8003e06:	2180      	movs	r1, #128	; 0x80
 8003e08:	480c      	ldr	r0, [pc, #48]	; (8003e3c <HAL_GPIO_EXTI_Callback+0x8c>)
 8003e0a:	f002 f9fb 	bl	8006204 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CAL3_REQ_GPIO_Port, CAL3_REQ_Pin, GPIO_PIN_SET); // supose REQ starts down, we turn on the REQ
 8003e0e:	2201      	movs	r2, #1
 8003e10:	2140      	movs	r1, #64	; 0x40
 8003e12:	480a      	ldr	r0, [pc, #40]	; (8003e3c <HAL_GPIO_EXTI_Callback+0x8c>)
 8003e14:	f002 f9f6 	bl	8006204 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CAL4_REQ_GPIO_Port, CAL4_REQ_Pin, GPIO_PIN_SET); // supose REQ starts down, we turn on the REQ
 8003e18:	2201      	movs	r2, #1
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4807      	ldr	r0, [pc, #28]	; (8003e3c <HAL_GPIO_EXTI_Callback+0x8c>)
 8003e1e:	f002 f9f1 	bl	8006204 <HAL_GPIO_WritePin>
	}

	if(GPIO_Pin == uC_PLC_Pin){
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2b40      	cmp	r3, #64	; 0x40
 8003e26:	d101      	bne.n	8003e2c <HAL_GPIO_EXTI_Callback+0x7c>
		// que pasa si viene el PLC
		pieceCountManager();
 8003e28:	f000 fbfe 	bl	8004628 <pieceCountManager>
	}
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	080044bf 	.word	0x080044bf
 8003e38:	2000045c 	.word	0x2000045c
 8003e3c:	40021000 	.word	0x40021000

08003e40 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
// now we have on buffer the data
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003e48:	2201      	movs	r2, #1
 8003e4a:	2110      	movs	r1, #16
 8003e4c:	4803      	ldr	r0, [pc, #12]	; (8003e5c <HAL_SPI_RxCpltCallback+0x1c>)
 8003e4e:	f002 f9d9 	bl	8006204 <HAL_GPIO_WritePin>

}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40020000 	.word	0x40020000

08003e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e64:	b672      	cpsid	i
}
 8003e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e68:	e7fe      	b.n	8003e68 <Error_Handler+0x8>
	...

08003e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	607b      	str	r3, [r7, #4]
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <HAL_MspInit+0x4c>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	4a0f      	ldr	r2, [pc, #60]	; (8003eb8 <HAL_MspInit+0x4c>)
 8003e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e80:	6453      	str	r3, [r2, #68]	; 0x44
 8003e82:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <HAL_MspInit+0x4c>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8a:	607b      	str	r3, [r7, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_MspInit+0x4c>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <HAL_MspInit+0x4c>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9e:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_MspInit+0x4c>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800

08003ebc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec4:	f107 0314 	add.w	r3, r7, #20
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1d      	ldr	r2, [pc, #116]	; (8003f50 <HAL_SPI_MspInit+0x94>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d134      	bne.n	8003f48 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <HAL_SPI_MspInit+0x98>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	4a1b      	ldr	r2, [pc, #108]	; (8003f54 <HAL_SPI_MspInit+0x98>)
 8003ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eec:	6413      	str	r3, [r2, #64]	; 0x40
 8003eee:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <HAL_SPI_MspInit+0x98>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <HAL_SPI_MspInit+0x98>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4a14      	ldr	r2, [pc, #80]	; (8003f54 <HAL_SPI_MspInit+0x98>)
 8003f04:	f043 0304 	orr.w	r3, r3, #4
 8003f08:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <HAL_SPI_MspInit+0x98>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003f16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f24:	2303      	movs	r3, #3
 8003f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003f28:	2306      	movs	r3, #6
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f2c:	f107 0314 	add.w	r3, r7, #20
 8003f30:	4619      	mov	r1, r3
 8003f32:	4809      	ldr	r0, [pc, #36]	; (8003f58 <HAL_SPI_MspInit+0x9c>)
 8003f34:	f001 ffb2 	bl	8005e9c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	2033      	movs	r0, #51	; 0x33
 8003f3e:	f000 fe2e 	bl	8004b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003f42:	2033      	movs	r0, #51	; 0x33
 8003f44:	f000 fe47 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003f48:	bf00      	nop
 8003f4a:	3728      	adds	r7, #40	; 0x28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40003c00 	.word	0x40003c00
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40020800 	.word	0x40020800

08003f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <HAL_TIM_Base_MspInit+0x48>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d115      	bne.n	8003f9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <HAL_TIM_Base_MspInit+0x4c>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	4a0c      	ldr	r2, [pc, #48]	; (8003fa8 <HAL_TIM_Base_MspInit+0x4c>)
 8003f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <HAL_TIM_Base_MspInit+0x4c>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	202d      	movs	r0, #45	; 0x2d
 8003f90:	f000 fe05 	bl	8004b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003f94:	202d      	movs	r0, #45	; 0x2d
 8003f96:	f000 fe1e 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40002000 	.word	0x40002000
 8003fa8:	40023800 	.word	0x40023800

08003fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fb0:	e7fe      	b.n	8003fb0 <NMI_Handler+0x4>

08003fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fb6:	e7fe      	b.n	8003fb6 <HardFault_Handler+0x4>

08003fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fbc:	e7fe      	b.n	8003fbc <MemManage_Handler+0x4>

08003fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fc2:	e7fe      	b.n	8003fc2 <BusFault_Handler+0x4>

08003fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fc8:	e7fe      	b.n	8003fc8 <UsageFault_Handler+0x4>

08003fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fea:	bf00      	nop
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ff8:	f000 fcb2 	bl	8004960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ffc:	bf00      	nop
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004004:	2004      	movs	r0, #4
 8004006:	f002 f917 	bl	8006238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}

0800400e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004012:	2008      	movs	r0, #8
 8004014:	f002 f910 	bl	8006238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004018:	bf00      	nop
 800401a:	bd80      	pop	{r7, pc}

0800401c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004020:	2040      	movs	r0, #64	; 0x40
 8004022:	f002 f909 	bl	8006238 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004026:	f44f 7080 	mov.w	r0, #256	; 0x100
 800402a:	f002 f905 	bl	8006238 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800402e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004032:	f002 f901 	bl	8006238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}

0800403a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800403e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004042:	f002 f8f9 	bl	8006238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004050:	4802      	ldr	r0, [pc, #8]	; (800405c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004052:	f003 fd5d 	bl	8007b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	2000045c 	.word	0x2000045c

08004060 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004064:	4802      	ldr	r0, [pc, #8]	; (8004070 <SPI3_IRQHandler+0x10>)
 8004066:	f003 f87f 	bl	8007168 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000400 	.word	0x20000400

08004074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
	return 1;
 8004078:	2301      	movs	r3, #1
}
 800407a:	4618      	mov	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <_kill>:

int _kill(int pid, int sig)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <_kill+0x20>)
 8004090:	2216      	movs	r2, #22
 8004092:	601a      	str	r2, [r3, #0]
	return -1;
 8004094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004098:	4618      	mov	r0, r3
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	200090f4 	.word	0x200090f4

080040a8 <_exit>:

void _exit (int status)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040b0:	f04f 31ff 	mov.w	r1, #4294967295
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff ffe5 	bl	8004084 <_kill>
	while (1) {}		/* Make sure we hang here */
 80040ba:	e7fe      	b.n	80040ba <_exit+0x12>

080040bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	e00a      	b.n	80040e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040ce:	f3af 8000 	nop.w
 80040d2:	4601      	mov	r1, r0
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	60ba      	str	r2, [r7, #8]
 80040da:	b2ca      	uxtb	r2, r1
 80040dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	3301      	adds	r3, #1
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	dbf0      	blt.n	80040ce <_read+0x12>
	}

return len;
 80040ec:	687b      	ldr	r3, [r7, #4]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b086      	sub	sp, #24
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	e009      	b.n	800411c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	60ba      	str	r2, [r7, #8]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	3301      	adds	r3, #1
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	429a      	cmp	r2, r3
 8004122:	dbf1      	blt.n	8004108 <_write+0x12>
	}
	return len;
 8004124:	687b      	ldr	r3, [r7, #4]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <_close>:

int _close(int file)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
	return -1;
 8004136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004156:	605a      	str	r2, [r3, #4]
	return 0;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <_isatty>:

int _isatty(int file)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
	return 1;
 800416e:	2301      	movs	r3, #1
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
	return 0;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041a0:	4a14      	ldr	r2, [pc, #80]	; (80041f4 <_sbrk+0x5c>)
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <_sbrk+0x60>)
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041ac:	4b13      	ldr	r3, [pc, #76]	; (80041fc <_sbrk+0x64>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <_sbrk+0x64>)
 80041b6:	4a12      	ldr	r2, [pc, #72]	; (8004200 <_sbrk+0x68>)
 80041b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041ba:	4b10      	ldr	r3, [pc, #64]	; (80041fc <_sbrk+0x64>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4413      	add	r3, r2
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d205      	bcs.n	80041d4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80041c8:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <_sbrk+0x6c>)
 80041ca:	220c      	movs	r2, #12
 80041cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	e009      	b.n	80041e8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <_sbrk+0x64>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <_sbrk+0x64>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	4a06      	ldr	r2, [pc, #24]	; (80041fc <_sbrk+0x64>)
 80041e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041e6:	68fb      	ldr	r3, [r7, #12]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	20020000 	.word	0x20020000
 80041f8:	00000400 	.word	0x00000400
 80041fc:	20000284 	.word	0x20000284
 8004200:	20009108 	.word	0x20009108
 8004204:	200090f4 	.word	0x200090f4

08004208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <SystemInit+0x20>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	4a05      	ldr	r2, [pc, #20]	; (8004228 <SystemInit+0x20>)
 8004214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <udpClient_send_first_message>:
struct udp_pcb *upcb;
char buffer[1000];
message_t message;

static void udpClient_send_first_message(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b09c      	sub	sp, #112	; 0x70
 8004230:	af00      	add	r7, sp, #0
  struct pbuf *txBuf;
  char data[100];

  int len = sprintf(data, "Success on Initializing UDP Client");
 8004232:	1d3b      	adds	r3, r7, #4
 8004234:	4912      	ldr	r1, [pc, #72]	; (8004280 <udpClient_send_first_message+0x54>)
 8004236:	4618      	mov	r0, r3
 8004238:	f00f f934 	bl	80134a4 <siprintf>
 800423c:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800423e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004240:	b29b      	uxth	r3, r3
 8004242:	f44f 7220 	mov.w	r2, #640	; 0x280
 8004246:	4619      	mov	r1, r3
 8004248:	2036      	movs	r0, #54	; 0x36
 800424a:	f005 fabb 	bl	80097c4 <pbuf_alloc>
 800424e:	66b8      	str	r0, [r7, #104]	; 0x68

  if (txBuf != NULL)
 8004250:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00f      	beq.n	8004276 <udpClient_send_first_message+0x4a>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 8004256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004258:	b29a      	uxth	r2, r3
 800425a:	1d3b      	adds	r3, r7, #4
 800425c:	4619      	mov	r1, r3
 800425e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004260:	f006 f800 	bl	800a264 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 8004264:	4b07      	ldr	r3, [pc, #28]	; (8004284 <udpClient_send_first_message+0x58>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800426a:	4618      	mov	r0, r3
 800426c:	f00b fd22 	bl	800fcb4 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 8004270:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004272:	f005 fd8b 	bl	8009d8c <pbuf_free>
  }
}
 8004276:	bf00      	nop
 8004278:	3770      	adds	r7, #112	; 0x70
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	08016870 	.word	0x08016870
 8004284:	200004a4 	.word	0x200004a4

08004288 <udpClient_connect>:


void udpClient_connect(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 800428e:	f00c f811 	bl	80102b4 <udp_new>
 8004292:	4603      	mov	r3, r0
 8004294:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <udpClient_connect+0x5c>)
 8004296:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 192, 168, 0, 111);
 8004298:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <udpClient_connect+0x60>)
 800429a:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 8);
 800429c:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <udpClient_connect+0x5c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f107 0108 	add.w	r1, r7, #8
 80042a4:	2208      	movs	r2, #8
 80042a6:	4618      	mov	r0, r3
 80042a8:	f00b feee 	bl	8010088 <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 0, 10); // CAMBIAR ESTO SIEMRPE!
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <udpClient_connect+0x64>)
 80042ae:	607b      	str	r3, [r7, #4]
	err= udp_connect(upcb, &DestIPaddr, 7);
 80042b0:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <udpClient_connect+0x5c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	1d39      	adds	r1, r7, #4
 80042b6:	2207      	movs	r2, #7
 80042b8:	4618      	mov	r0, r3
 80042ba:	f00b ff6d 	bl	8010198 <udp_connect>
 80042be:	4603      	mov	r3, r0
 80042c0:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 80042c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d108      	bne.n	80042dc <udpClient_connect+0x54>
	{
//		/* 2. Send message to server */
		udpClient_send_first_message ();
 80042ca:	f7ff ffaf 	bl	800422c <udpClient_send_first_message>

		/* 3. Set a receive callback for the upcb */
		udp_recv(upcb, udp_receive_callback, NULL);
 80042ce:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <udpClient_connect+0x5c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2200      	movs	r2, #0
 80042d4:	4906      	ldr	r1, [pc, #24]	; (80042f0 <udpClient_connect+0x68>)
 80042d6:	4618      	mov	r0, r3
 80042d8:	f00b ffcc 	bl	8010274 <udp_recv>
	}
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	200004a4 	.word	0x200004a4
 80042e8:	6f00a8c0 	.word	0x6f00a8c0
 80042ec:	0a00a8c0 	.word	0x0a00a8c0
 80042f0:	08004359 	.word	0x08004359

080042f4 <udpClient_custom_string>:


void udpClient_custom_string(message_t message)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b09e      	sub	sp, #120	; 0x78
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	463b      	mov	r3, r7
 80042fc:	e883 0003 	stmia.w	r3, {r0, r1}
  struct pbuf *txBuf;
  char data[100];

	/* Copy the message data to the txBuf */
  strncpy (data, message.msg, message.len);
 8004300:	6839      	ldr	r1, [r7, #0]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	f107 030c 	add.w	r3, r7, #12
 8004308:	4618      	mov	r0, r3
 800430a:	f00f f8f3 	bl	80134f4 <strncpy>
  int len = message.len;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	677b      	str	r3, [r7, #116]	; 0x74

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8004312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004314:	b29b      	uxth	r3, r3
 8004316:	f44f 7220 	mov.w	r2, #640	; 0x280
 800431a:	4619      	mov	r1, r3
 800431c:	2036      	movs	r0, #54	; 0x36
 800431e:	f005 fa51 	bl	80097c4 <pbuf_alloc>
 8004322:	6738      	str	r0, [r7, #112]	; 0x70

  if (txBuf != NULL)
 8004324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004326:	2b00      	cmp	r3, #0
 8004328:	d010      	beq.n	800434c <udpClient_custom_string+0x58>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 800432a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800432c:	b29a      	uxth	r2, r3
 800432e:	f107 030c 	add.w	r3, r7, #12
 8004332:	4619      	mov	r1, r3
 8004334:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004336:	f005 ff95 	bl	800a264 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 800433a:	4b06      	ldr	r3, [pc, #24]	; (8004354 <udpClient_custom_string+0x60>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004340:	4618      	mov	r0, r3
 8004342:	f00b fcb7 	bl	800fcb4 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 8004346:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004348:	f005 fd20 	bl	8009d8c <pbuf_free>
  }
}
 800434c:	bf00      	nop
 800434e:	3778      	adds	r7, #120	; 0x78
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	200004a4 	.word	0x200004a4

08004358 <udp_receive_callback>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	strncpy (buffer, (char *)p->payload, p->len);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6859      	ldr	r1, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	895b      	ldrh	r3, [r3, #10]
 800436e:	461a      	mov	r2, r3
 8004370:	480b      	ldr	r0, [pc, #44]	; (80043a0 <udp_receive_callback+0x48>)
 8004372:	f00f f8bf 	bl	80134f4 <strncpy>

	// store the Ethernet Message
	message.msg = buffer;
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <udp_receive_callback+0x4c>)
 8004378:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <udp_receive_callback+0x48>)
 800437a:	601a      	str	r2, [r3, #0]
	message.len = p-> len;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	895b      	ldrh	r3, [r3, #10]
 8004380:	461a      	mov	r2, r3
 8004382:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <udp_receive_callback+0x4c>)
 8004384:	605a      	str	r2, [r3, #4]

	// process the received message
	ETHonMessageReceived(message);
 8004386:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <udp_receive_callback+0x4c>)
 8004388:	e893 0003 	ldmia.w	r3, {r0, r1}
 800438c:	f000 f96e 	bl	800466c <ETHonMessageReceived>

	/* Free receive pbuf */
	pbuf_free(p);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f005 fcfb 	bl	8009d8c <pbuf_free>
}
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	200004b0 	.word	0x200004b0
 80043a4:	200004a8 	.word	0x200004a8

080043a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80043a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043ac:	480d      	ldr	r0, [pc, #52]	; (80043e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043ae:	490e      	ldr	r1, [pc, #56]	; (80043e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043b0:	4a0e      	ldr	r2, [pc, #56]	; (80043ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043b4:	e002      	b.n	80043bc <LoopCopyDataInit>

080043b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043ba:	3304      	adds	r3, #4

080043bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043c0:	d3f9      	bcc.n	80043b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043c2:	4a0b      	ldr	r2, [pc, #44]	; (80043f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043c4:	4c0b      	ldr	r4, [pc, #44]	; (80043f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043c8:	e001      	b.n	80043ce <LoopFillZerobss>

080043ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043cc:	3204      	adds	r2, #4

080043ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043d0:	d3fb      	bcc.n	80043ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043d2:	f7ff ff19 	bl	8004208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043d6:	f00e fa77 	bl	80128c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043da:	f7ff fa89 	bl	80038f0 <main>
  bx  lr    
 80043de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043e8:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80043ec:	08019a48 	.word	0x08019a48
  ldr r2, =_sbss
 80043f0:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80043f4:	20009104 	.word	0x20009104

080043f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043f8:	e7fe      	b.n	80043f8 <ADC_IRQHandler>
	...

080043fc <analogInDigitalOutManager>:
//
// Created by joa-m on 11/1/2021.
//
#include "../Inc/analogInDigitalOutManager.h"

void analogInDigitalOutManager(message_t json){
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b09c      	sub	sp, #112	; 0x70
 8004400:	af00      	add	r7, sp, #0
 8004402:	463b      	mov	r3, r7
 8004404:	e883 0003 	stmia.w	r3, {r0, r1}
    char frameType[100];
    getFrameType(json, frameType);
 8004408:	f107 030c 	add.w	r3, r7, #12
 800440c:	461a      	mov	r2, r3
 800440e:	463b      	mov	r3, r7
 8004410:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004414:	f000 f939 	bl	800468a <getFrameType>

    if(strcmp(frameType, "READ_ANALOG_IN") == 0){
 8004418:	f107 030c 	add.w	r3, r7, #12
 800441c:	490e      	ldr	r1, [pc, #56]	; (8004458 <analogInDigitalOutManager+0x5c>)
 800441e:	4618      	mov	r0, r3
 8004420:	f7fb fed6 	bl	80001d0 <strcmp>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d104      	bne.n	8004434 <analogInDigitalOutManager+0x38>
        analogInManager(json);
 800442a:	463b      	mov	r3, r7
 800442c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004430:	f000 f832 	bl	8004498 <analogInManager>
    }

    if(strcmp(frameType, "DIGITAL_OUTPUT_SET_STATE") == 0){
 8004434:	f107 030c 	add.w	r3, r7, #12
 8004438:	4908      	ldr	r1, [pc, #32]	; (800445c <analogInDigitalOutManager+0x60>)
 800443a:	4618      	mov	r0, r3
 800443c:	f7fb fec8 	bl	80001d0 <strcmp>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <analogInDigitalOutManager+0x54>
        digitalOutManager(json);
 8004446:	463b      	mov	r3, r7
 8004448:	e893 0003 	ldmia.w	r3, {r0, r1}
 800444c:	f000 f8b8 	bl	80045c0 <digitalOutManager>
    }
}
 8004450:	bf00      	nop
 8004452:	3770      	adds	r7, #112	; 0x70
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	080168c4 	.word	0x080168c4
 800445c:	080168d4 	.word	0x080168d4

08004460 <sendADCReadRequest>:

bool analogValidate(uint32_t analogData){
    return analogData <= MAX_VALID_VALUE && analogData >= MIN_VALID_VALUE;
}

void sendADCReadRequest(int inputNum){
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
//	uint8_t pData[1];
	uint8_t pData[1] = {ADC_CH0_MASK};
 8004468:	23aa      	movs	r3, #170	; 0xaa
 800446a:	733b      	strb	r3, [r7, #12]
	uint16_t timeout = 50;
 800446c:	2332      	movs	r3, #50	; 0x32
 800446e:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004470:	2200      	movs	r2, #0
 8004472:	2110      	movs	r1, #16
 8004474:	4806      	ldr	r0, [pc, #24]	; (8004490 <sendADCReadRequest+0x30>)
 8004476:	f001 fec5 	bl	8006204 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, pData, sizeof(pData), timeout);
 800447a:	89fb      	ldrh	r3, [r7, #14]
 800447c:	f107 010c 	add.w	r1, r7, #12
 8004480:	2201      	movs	r2, #1
 8004482:	4804      	ldr	r0, [pc, #16]	; (8004494 <sendADCReadRequest+0x34>)
 8004484:	f002 fc01 	bl	8006c8a <HAL_SPI_Transmit>
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40020000 	.word	0x40020000
 8004494:	20000400 	.word	0x20000400

08004498 <analogInManager>:

void analogInManager(message_t json){
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	463b      	mov	r3, r7
 80044a0:	e883 0003 	stmia.w	r3, {r0, r1}
    int inputNum = getInputNumber(json);
 80044a4:	463b      	mov	r3, r7
 80044a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80044aa:	f000 f911 	bl	80046d0 <getInputNumber>
 80044ae:	60f8      	str	r0, [r7, #12]
//    int receivedData = readAdc(inputNum);


    sendADCReadRequest(inputNum);
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f7ff ffd5 	bl	8004460 <sendADCReadRequest>
//    char str2send[100];
//    bool isValid = analogValidate(receivedData);
//    message_t msg = sendAnalogInMessage(str2send, inputNum, receivedData, isValid);
//
//    ETHsendMessage(msg);
}
 80044b6:	bf00      	nop
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <caliperManager>:
    return getIsValidCaliperMeasure();
}

#endif

void caliperManager(caliper_number caliperNumber){
 80044be:	b580      	push	{r7, lr}
 80044c0:	b0a2      	sub	sp, #136	; 0x88
 80044c2:	af02      	add	r7, sp, #8
 80044c4:	4603      	mov	r3, r0
 80044c6:	73fb      	strb	r3, [r7, #15]
    int retry;
    bool isValid = false;
 80044c8:	2300      	movs	r3, #0
 80044ca:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    digimatic_frame_t* digimaticFrames;
    for(retry = 0; retry< RETRY_TIMES; retry++){
 80044ce:	2300      	movs	r3, #0
 80044d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044d2:	e011      	b.n	80044f8 <caliperManager+0x3a>
        digimaticFrames = digimaticGetMeasureFrames(caliperNumber);
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc fea6 	bl	8001228 <digimaticGetMeasureFrames>
 80044dc:	6778      	str	r0, [r7, #116]	; 0x74
        isValid = validCaliperMeasure(digimaticFrames);
 80044de:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80044e0:	f7fc ff60 	bl	80013a4 <validCaliperMeasure>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
        if(isValid) break;
 80044ea:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <caliperManager+0x42>
    for(retry = 0; retry< RETRY_TIMES; retry++){
 80044f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044f4:	3301      	adds	r3, #1
 80044f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	ddea      	ble.n	80044d4 <caliperManager+0x16>
 80044fe:	e000      	b.n	8004502 <caliperManager+0x44>
        if(isValid) break;
 8004500:	bf00      	nop
    }

    char str2send[MAX_STRING_SIZE];
    message_t msg;
    if(isValid){
 8004502:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004506:	2b00      	cmp	r3, #0
 8004508:	d011      	beq.n	800452e <caliperManager+0x70>
    	digimatic_measure_t measure = digimaticMeasure(digimaticFrames);
 800450a:	f107 0314 	add.w	r3, r7, #20
 800450e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004510:	4618      	mov	r0, r3
 8004512:	f7fc feb5 	bl	8001280 <digimaticMeasure>
        msg = sendCaliperMeasure(str2send, measure, caliperNumber);
 8004516:	f107 001c 	add.w	r0, r7, #28
 800451a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	f107 0314 	add.w	r3, r7, #20
 8004526:	cb0c      	ldmia	r3, {r2, r3}
 8004528:	f000 f948 	bl	80047bc <sendCaliperMeasure>
 800452c:	e00d      	b.n	800454a <caliperManager+0x8c>
    } else {
        msg = sendCaliperWarning(str2send, caliperNumber);
 800452e:	463b      	mov	r3, r7
 8004530:	7bfa      	ldrb	r2, [r7, #15]
 8004532:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f984 	bl	8004844 <sendCaliperWarning>
 800453c:	f107 031c 	add.w	r3, r7, #28
 8004540:	463a      	mov	r2, r7
 8004542:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004546:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    ETHsendMessage(msg);
 800454a:	f107 031c 	add.w	r3, r7, #28
 800454e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004552:	f000 f87c 	bl	800464e <ETHsendMessage>
}
 8004556:	bf00      	nop
 8004558:	3780      	adds	r7, #128	; 0x80
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <turnOn>:
// SALIDAS DIGITALES
// {PC9, PC7, PD15, PD13}
GPIO_TypeDef* outputGpioPortMapping[] = {GPIOC,GPIOC,GPIOD,GPIOD};
uint16_t outputGpioPinMapping[] = {GPIO_PIN_9,GPIO_PIN_7,GPIO_PIN_15,GPIO_PIN_13};

void turnOn(int outputNum){
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(outputGpioPortMapping[outputNum], outputGpioPinMapping[outputNum], GPIO_PIN_SET);
 8004568:	4a07      	ldr	r2, [pc, #28]	; (8004588 <turnOn+0x28>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004570:	4a06      	ldr	r2, [pc, #24]	; (800458c <turnOn+0x2c>)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004578:	2201      	movs	r2, #1
 800457a:	4619      	mov	r1, r3
 800457c:	f001 fe42 	bl	8006204 <HAL_GPIO_WritePin>
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20000024 	.word	0x20000024
 800458c:	20000034 	.word	0x20000034

08004590 <turnOff>:
void turnOff(int outputNum){
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(outputGpioPortMapping[outputNum], outputGpioPinMapping[outputNum], GPIO_PIN_RESET);
 8004598:	4a07      	ldr	r2, [pc, #28]	; (80045b8 <turnOff+0x28>)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80045a0:	4a06      	ldr	r2, [pc, #24]	; (80045bc <turnOff+0x2c>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045a8:	2200      	movs	r2, #0
 80045aa:	4619      	mov	r1, r3
 80045ac:	f001 fe2a 	bl	8006204 <HAL_GPIO_WritePin>
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20000024 	.word	0x20000024
 80045bc:	20000034 	.word	0x20000034

080045c0 <digitalOutManager>:
#endif

void digitalOutManager(message_t json){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	463b      	mov	r3, r7
 80045c8:	e883 0003 	stmia.w	r3, {r0, r1}
    int outputNum = getOutputNum(json);
 80045cc:	463b      	mov	r3, r7
 80045ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80045d2:	f000 f8a2 	bl	800471a <getOutputNum>
 80045d6:	60f8      	str	r0, [r7, #12]
    char outputState[4];
    getOutputState(json, outputState);
 80045d8:	f107 0308 	add.w	r3, r7, #8
 80045dc:	461a      	mov	r2, r3
 80045de:	463b      	mov	r3, r7
 80045e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80045e4:	f000 f8c0 	bl	8004768 <getOutputState>

    if(strcmp(outputState, "ON") == 0){
 80045e8:	f107 0308 	add.w	r3, r7, #8
 80045ec:	490c      	ldr	r1, [pc, #48]	; (8004620 <digitalOutManager+0x60>)
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fb fdee 	bl	80001d0 <strcmp>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <digitalOutManager+0x40>
        turnOn(outputNum);
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff ffb0 	bl	8004560 <turnOn>
    }
    if(strcmp(outputState, "OFF") == 0){
 8004600:	f107 0308 	add.w	r3, r7, #8
 8004604:	4907      	ldr	r1, [pc, #28]	; (8004624 <digitalOutManager+0x64>)
 8004606:	4618      	mov	r0, r3
 8004608:	f7fb fde2 	bl	80001d0 <strcmp>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d102      	bne.n	8004618 <digitalOutManager+0x58>
        turnOff(outputNum);
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff ffbc 	bl	8004590 <turnOff>
    }
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	08016920 	.word	0x08016920
 8004624:	08016924 	.word	0x08016924

08004628 <pieceCountManager>:
//
// Created by joa-m on 11/1/2021.
//
#include "../Inc/pieceCountManager.h"

void pieceCountManager(void){
 8004628:	b580      	push	{r7, lr}
 800462a:	b09c      	sub	sp, #112	; 0x70
 800462c:	af00      	add	r7, sp, #0
    char str2send[100];
    message_t msg;
    msg = sendIncrementPieceCount(str2send);
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	f107 020c 	add.w	r2, r7, #12
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f924 	bl	8004884 <sendIncrementPieceCount>
    ETHsendMessage(msg);
 800463c:	1d3b      	adds	r3, r7, #4
 800463e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004642:	f000 f804 	bl	800464e <ETHsendMessage>
 8004646:	bf00      	nop
 8004648:	3770      	adds	r7, #112	; 0x70
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <ETHsendMessage>:
        printf(getTestBench());
        printf("\n");
    }
#endif

void ETHsendMessage(message_t message){
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	463b      	mov	r3, r7
 8004656:	e883 0003 	stmia.w	r3, {r0, r1}
    udpClient_custom_string(message);
 800465a:	463b      	mov	r3, r7
 800465c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004660:	f7ff fe48 	bl	80042f4 <udpClient_custom_string>
}
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <ETHonMessageReceived>:

void ETHonMessageReceived(message_t json){
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	463b      	mov	r3, r7
 8004674:	e883 0003 	stmia.w	r3, {r0, r1}
    analogInDigitalOutManager(json);
 8004678:	463b      	mov	r3, r7
 800467a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800467e:	f7ff febd 	bl	80043fc <analogInDigitalOutManager>
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <getFrameType>:

#include "../Inc/jsonGetter.h"

// free all! :)

void getFrameType(message_t json, char* frameTypePtr){
 800468a:	b580      	push	{r7, lr}
 800468c:	b088      	sub	sp, #32
 800468e:	af00      	add	r7, sp, #0
 8004690:	f107 0308 	add.w	r3, r7, #8
 8004694:	e883 0003 	stmia.w	r3, {r0, r1}
 8004698:	607a      	str	r2, [r7, #4]
    struct json_value_s* root = json_parse(json.msg, json.len);
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4611      	mov	r1, r2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff f8ed 	bl	8003880 <json_parse>
 80046a6:	61f8      	str	r0, [r7, #28]
    struct json_object_s* object = (struct json_object_s*)root->payload;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	61bb      	str	r3, [r7, #24]
    const char * frameType = ((struct json_string_s*)object->start->value->payload)->string;
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	617b      	str	r3, [r7, #20]
    strcpy(frameTypePtr, frameType);
 80046ba:	6979      	ldr	r1, [r7, #20]
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f00e ff11 	bl	80134e4 <strcpy>
    free(root);
 80046c2:	69f8      	ldr	r0, [r7, #28]
 80046c4:	f00e f92c 	bl	8012920 <free>
}
 80046c8:	bf00      	nop
 80046ca:	3720      	adds	r7, #32
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <getInputNumber>:

int getInputNumber(message_t json){
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	463b      	mov	r3, r7
 80046d8:	e883 0003 	stmia.w	r3, {r0, r1}
    struct json_value_s* root = json_parse(json.msg, json.len);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4611      	mov	r1, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff f8cc 	bl	8003880 <json_parse>
 80046e8:	6178      	str	r0, [r7, #20]
    struct json_object_s* object = (struct json_object_s*)root->payload;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	613b      	str	r3, [r7, #16]
    int inputNum = atoi(json_value_as_number(object->start->next->value)->number);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff f8e7 	bl	80038cc <json_value_as_number>
 80046fe:	4603      	mov	r3, r0
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f00e f8dc 	bl	80128c0 <atoi>
 8004708:	60f8      	str	r0, [r7, #12]
    free(root);
 800470a:	6978      	ldr	r0, [r7, #20]
 800470c:	f00e f908 	bl	8012920 <free>
    return inputNum;
 8004710:	68fb      	ldr	r3, [r7, #12]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <getOutputNum>:

int getOutputNum(message_t json){
 800471a:	b580      	push	{r7, lr}
 800471c:	b086      	sub	sp, #24
 800471e:	af00      	add	r7, sp, #0
 8004720:	463b      	mov	r3, r7
 8004722:	e883 0003 	stmia.w	r3, {r0, r1}
    struct json_value_s* root = json_parse(json.msg, json.len);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	4611      	mov	r1, r2
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff f8a7 	bl	8003880 <json_parse>
 8004732:	6178      	str	r0, [r7, #20]
    struct json_object_s* object = (struct json_object_s*)root->payload;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	613b      	str	r3, [r7, #16]
    struct json_object_element_s* frameType = object->start;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]
    int outputNum = atoi(json_value_as_number(frameType->next->value)->number);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff f8c0 	bl	80038cc <json_value_as_number>
 800474c:	4603      	mov	r3, r0
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f00e f8b5 	bl	80128c0 <atoi>
 8004756:	60b8      	str	r0, [r7, #8]
    free(root);
 8004758:	6978      	ldr	r0, [r7, #20]
 800475a:	f00e f8e1 	bl	8012920 <free>
    return outputNum;
 800475e:	68bb      	ldr	r3, [r7, #8]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <getOutputState>:
void getOutputState(message_t json, char* outputStatePtr){
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	f107 0308 	add.w	r3, r7, #8
 8004772:	e883 0003 	stmia.w	r3, {r0, r1}
 8004776:	607a      	str	r2, [r7, #4]
    struct json_value_s* root = json_parse(json.msg, json.len);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4611      	mov	r1, r2
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff f87e 	bl	8003880 <json_parse>
 8004784:	61f8      	str	r0, [r7, #28]
    struct json_object_s* object = (struct json_object_s*)root->payload;
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	61bb      	str	r3, [r7, #24]
    struct json_object_element_s* frameType = object->start;
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	617b      	str	r3, [r7, #20]
    const char * outputState = json_value_as_string(frameType->next->next->value)->string;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff f884 	bl	80038a8 <json_value_as_string>
 80047a0:	4603      	mov	r3, r0
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	613b      	str	r3, [r7, #16]
    strcpy(outputStatePtr, outputState);
 80047a6:	6939      	ldr	r1, [r7, #16]
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f00e fe9b 	bl	80134e4 <strcpy>
    free(root);
 80047ae:	69f8      	ldr	r0, [r7, #28]
 80047b0:	f00e f8b6 	bl	8012920 <free>
 80047b4:	bf00      	nop
 80047b6:	3720      	adds	r7, #32
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <sendCaliperMeasure>:
    msg2send.msg = str2send;
    msg2send.len = len;
    return msg2send;
};

message_t sendCaliperMeasure(char * str2send, digimatic_measure_t measure, caliper_number caliperNumber){
 80047bc:	b590      	push	{r4, r7, lr}
 80047be:	b08b      	sub	sp, #44	; 0x2c
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	4639      	mov	r1, r7
 80047c8:	e881 000c 	stmia.w	r1, {r2, r3}
    int len = -1;
 80047cc:	f04f 33ff 	mov.w	r3, #4294967295
 80047d0:	61fb      	str	r3, [r7, #28]
    if(measure.unit){
 80047d2:	793b      	ldrb	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d010      	beq.n	80047fa <sendCaliperMeasure+0x3e>
        len = sprintf(str2send,"{\"frameType\": \"SEND_CALIPER_MEASURE\",\"caliperNumber\": %d,\"data\": %.5f,\"unit\": \"inch\"}",caliperNumber, measure.number);
 80047d8:	f897 4030 	ldrb.w	r4, [r7, #48]	; 0x30
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fb fec2 	bl	8000568 <__aeabi_f2d>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	e9cd 2300 	strd	r2, r3, [sp]
 80047ec:	4622      	mov	r2, r4
 80047ee:	4913      	ldr	r1, [pc, #76]	; (800483c <sendCaliperMeasure+0x80>)
 80047f0:	68b8      	ldr	r0, [r7, #8]
 80047f2:	f00e fe57 	bl	80134a4 <siprintf>
 80047f6:	61f8      	str	r0, [r7, #28]
 80047f8:	e00f      	b.n	800481a <sendCaliperMeasure+0x5e>
    } else {
        len = sprintf(str2send,"{\"frameType\": \"SEND_CALIPER_MEASURE\",\"caliperNumber\": %d,\"data\": %.5f,\"unit\": \"mm\"}",caliperNumber, measure.number);
 80047fa:	f897 4030 	ldrb.w	r4, [r7, #48]	; 0x30
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7fb feb1 	bl	8000568 <__aeabi_f2d>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	e9cd 2300 	strd	r2, r3, [sp]
 800480e:	4622      	mov	r2, r4
 8004810:	490b      	ldr	r1, [pc, #44]	; (8004840 <sendCaliperMeasure+0x84>)
 8004812:	68b8      	ldr	r0, [r7, #8]
 8004814:	f00e fe46 	bl	80134a4 <siprintf>
 8004818:	61f8      	str	r0, [r7, #28]
    }
    message_t msg2send;
    msg2send.msg = str2send;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	617b      	str	r3, [r7, #20]
    msg2send.len = len;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	61bb      	str	r3, [r7, #24]
    return msg2send;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	461a      	mov	r2, r3
 8004826:	f107 0314 	add.w	r3, r7, #20
 800482a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800482e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	3724      	adds	r7, #36	; 0x24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd90      	pop	{r4, r7, pc}
 800483a:	bf00      	nop
 800483c:	08016950 	.word	0x08016950
 8004840:	080169a8 	.word	0x080169a8

08004844 <sendCaliperWarning>:

message_t sendCaliperWarning(char * str2send, caliper_number caliperNumber){
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	4613      	mov	r3, r2
 8004850:	71fb      	strb	r3, [r7, #7]
    int len = sprintf(str2send,"{\"frameType\": \"WARNING_RETRY_CALIPER\" ,\"caliperNumber\": %d}", caliperNumber);
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	461a      	mov	r2, r3
 8004856:	490a      	ldr	r1, [pc, #40]	; (8004880 <sendCaliperWarning+0x3c>)
 8004858:	68b8      	ldr	r0, [r7, #8]
 800485a:	f00e fe23 	bl	80134a4 <siprintf>
 800485e:	61f8      	str	r0, [r7, #28]
    message_t msg2send;
    msg2send.msg = str2send;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	617b      	str	r3, [r7, #20]
    msg2send.len = len;
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	61bb      	str	r3, [r7, #24]
    return msg2send;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	461a      	mov	r2, r3
 800486c:	f107 0314 	add.w	r3, r7, #20
 8004870:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004874:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	3720      	adds	r7, #32
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	080169fc 	.word	0x080169fc

08004884 <sendIncrementPieceCount>:

message_t sendIncrementPieceCount(char * str2send){
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
    int len = sprintf(str2send,"{\"frameType\": \"INCREMENT_PIECE_COUNTER\"}");
 800488e:	490a      	ldr	r1, [pc, #40]	; (80048b8 <sendIncrementPieceCount+0x34>)
 8004890:	6838      	ldr	r0, [r7, #0]
 8004892:	f00e fe07 	bl	80134a4 <siprintf>
 8004896:	6178      	str	r0, [r7, #20]
    message_t msg2send;
    msg2send.msg = str2send;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	60fb      	str	r3, [r7, #12]
    msg2send.len = len;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	613b      	str	r3, [r7, #16]
    return msg2send;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f107 030c 	add.w	r3, r7, #12
 80048a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80048ac:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	08016a38 	.word	0x08016a38

080048bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048c0:	4b0e      	ldr	r3, [pc, #56]	; (80048fc <HAL_Init+0x40>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a0d      	ldr	r2, [pc, #52]	; (80048fc <HAL_Init+0x40>)
 80048c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <HAL_Init+0x40>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <HAL_Init+0x40>)
 80048d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048d8:	4b08      	ldr	r3, [pc, #32]	; (80048fc <HAL_Init+0x40>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a07      	ldr	r2, [pc, #28]	; (80048fc <HAL_Init+0x40>)
 80048de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048e4:	2003      	movs	r0, #3
 80048e6:	f000 f94f 	bl	8004b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048ea:	2000      	movs	r0, #0
 80048ec:	f000 f808 	bl	8004900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048f0:	f7ff fabc 	bl	8003e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40023c00 	.word	0x40023c00

08004900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004908:	4b12      	ldr	r3, [pc, #72]	; (8004954 <HAL_InitTick+0x54>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	4b12      	ldr	r3, [pc, #72]	; (8004958 <HAL_InitTick+0x58>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	4619      	mov	r1, r3
 8004912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004916:	fbb3 f3f1 	udiv	r3, r3, r1
 800491a:	fbb2 f3f3 	udiv	r3, r2, r3
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f967 	bl	8004bf2 <HAL_SYSTICK_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e00e      	b.n	800494c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b0f      	cmp	r3, #15
 8004932:	d80a      	bhi.n	800494a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004934:	2200      	movs	r2, #0
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	f04f 30ff 	mov.w	r0, #4294967295
 800493c:	f000 f92f 	bl	8004b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004940:	4a06      	ldr	r2, [pc, #24]	; (800495c <HAL_InitTick+0x5c>)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	e000      	b.n	800494c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
}
 800494c:	4618      	mov	r0, r3
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20000020 	.word	0x20000020
 8004958:	20000040 	.word	0x20000040
 800495c:	2000003c 	.word	0x2000003c

08004960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004964:	4b06      	ldr	r3, [pc, #24]	; (8004980 <HAL_IncTick+0x20>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_IncTick+0x24>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4413      	add	r3, r2
 8004970:	4a04      	ldr	r2, [pc, #16]	; (8004984 <HAL_IncTick+0x24>)
 8004972:	6013      	str	r3, [r2, #0]
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000040 	.word	0x20000040
 8004984:	20000898 	.word	0x20000898

08004988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  return uwTick;
 800498c:	4b03      	ldr	r3, [pc, #12]	; (800499c <HAL_GetTick+0x14>)
 800498e:	681b      	ldr	r3, [r3, #0]
}
 8004990:	4618      	mov	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20000898 	.word	0x20000898

080049a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049a8:	f7ff ffee 	bl	8004988 <HAL_GetTick>
 80049ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d005      	beq.n	80049c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049ba:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <HAL_Delay+0x44>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049c6:	bf00      	nop
 80049c8:	f7ff ffde 	bl	8004988 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d8f7      	bhi.n	80049c8 <HAL_Delay+0x28>
  {
  }
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000040 	.word	0x20000040

080049e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <__NVIC_SetPriorityGrouping+0x44>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a04:	4013      	ands	r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a1a:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <__NVIC_SetPriorityGrouping+0x44>)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	60d3      	str	r3, [r2, #12]
}
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	e000ed00 	.word	0xe000ed00

08004a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <__NVIC_GetPriorityGrouping+0x18>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	f003 0307 	and.w	r3, r3, #7
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	db0b      	blt.n	8004a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	f003 021f 	and.w	r2, r3, #31
 8004a64:	4907      	ldr	r1, [pc, #28]	; (8004a84 <__NVIC_EnableIRQ+0x38>)
 8004a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	e000e100 	.word	0xe000e100

08004a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	6039      	str	r1, [r7, #0]
 8004a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	db0a      	blt.n	8004ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	490c      	ldr	r1, [pc, #48]	; (8004ad4 <__NVIC_SetPriority+0x4c>)
 8004aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa6:	0112      	lsls	r2, r2, #4
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	440b      	add	r3, r1
 8004aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ab0:	e00a      	b.n	8004ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	4908      	ldr	r1, [pc, #32]	; (8004ad8 <__NVIC_SetPriority+0x50>)
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	3b04      	subs	r3, #4
 8004ac0:	0112      	lsls	r2, r2, #4
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	761a      	strb	r2, [r3, #24]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000e100 	.word	0xe000e100
 8004ad8:	e000ed00 	.word	0xe000ed00

08004adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b089      	sub	sp, #36	; 0x24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f1c3 0307 	rsb	r3, r3, #7
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	bf28      	it	cs
 8004afa:	2304      	movcs	r3, #4
 8004afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	3304      	adds	r3, #4
 8004b02:	2b06      	cmp	r3, #6
 8004b04:	d902      	bls.n	8004b0c <NVIC_EncodePriority+0x30>
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3b03      	subs	r3, #3
 8004b0a:	e000      	b.n	8004b0e <NVIC_EncodePriority+0x32>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b10:	f04f 32ff 	mov.w	r2, #4294967295
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43da      	mvns	r2, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	401a      	ands	r2, r3
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b24:	f04f 31ff 	mov.w	r1, #4294967295
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	43d9      	mvns	r1, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b34:	4313      	orrs	r3, r2
         );
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3724      	adds	r7, #36	; 0x24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b54:	d301      	bcc.n	8004b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b56:	2301      	movs	r3, #1
 8004b58:	e00f      	b.n	8004b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b5a:	4a0a      	ldr	r2, [pc, #40]	; (8004b84 <SysTick_Config+0x40>)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b62:	210f      	movs	r1, #15
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295
 8004b68:	f7ff ff8e 	bl	8004a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <SysTick_Config+0x40>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b72:	4b04      	ldr	r3, [pc, #16]	; (8004b84 <SysTick_Config+0x40>)
 8004b74:	2207      	movs	r2, #7
 8004b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	e000e010 	.word	0xe000e010

08004b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff ff29 	bl	80049e8 <__NVIC_SetPriorityGrouping>
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b086      	sub	sp, #24
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bb0:	f7ff ff3e 	bl	8004a30 <__NVIC_GetPriorityGrouping>
 8004bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	6978      	ldr	r0, [r7, #20]
 8004bbc:	f7ff ff8e 	bl	8004adc <NVIC_EncodePriority>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff ff5d 	bl	8004a88 <__NVIC_SetPriority>
}
 8004bce:	bf00      	nop
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	4603      	mov	r3, r0
 8004bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff ff31 	bl	8004a4c <__NVIC_EnableIRQ>
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ffa2 	bl	8004b44 <SysTick_Config>
 8004c00:	4603      	mov	r3, r0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d004      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2280      	movs	r2, #128	; 0x80
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e00c      	b.n	8004c42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2205      	movs	r2, #5
 8004c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0201 	bic.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
	...

08004c50 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8004c60:	4baa      	ldr	r3, [pc, #680]	; (8004f0c <HAL_ETH_Init+0x2bc>)
 8004c62:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e183      	b.n	8004f7e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f003 fa62 	bl	8008154 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c90:	2300      	movs	r3, #0
 8004c92:	60bb      	str	r3, [r7, #8]
 8004c94:	4b9e      	ldr	r3, [pc, #632]	; (8004f10 <HAL_ETH_Init+0x2c0>)
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	4a9d      	ldr	r2, [pc, #628]	; (8004f10 <HAL_ETH_Init+0x2c0>)
 8004c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c9e:	6453      	str	r3, [r2, #68]	; 0x44
 8004ca0:	4b9b      	ldr	r3, [pc, #620]	; (8004f10 <HAL_ETH_Init+0x2c0>)
 8004ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004cac:	4b99      	ldr	r3, [pc, #612]	; (8004f14 <HAL_ETH_Init+0x2c4>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	4a98      	ldr	r2, [pc, #608]	; (8004f14 <HAL_ETH_Init+0x2c4>)
 8004cb2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cb6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004cb8:	4b96      	ldr	r3, [pc, #600]	; (8004f14 <HAL_ETH_Init+0x2c4>)
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	4994      	ldr	r1, [pc, #592]	; (8004f14 <HAL_ETH_Init+0x2c4>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0201 	orr.w	r2, r2, #1
 8004cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cdc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004cde:	f7ff fe53 	bl	8004988 <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004ce4:	e011      	b.n	8004d0a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004ce6:	f7ff fe4f 	bl	8004988 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cf4:	d909      	bls.n	8004d0a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e139      	b.n	8004f7e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e4      	bne.n	8004ce6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f023 031c 	bic.w	r3, r3, #28
 8004d2a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004d2c:	f001 ff18 	bl	8006b60 <HAL_RCC_GetHCLKFreq>
 8004d30:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	4a78      	ldr	r2, [pc, #480]	; (8004f18 <HAL_ETH_Init+0x2c8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d908      	bls.n	8004d4c <HAL_ETH_Init+0xfc>
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	4a77      	ldr	r2, [pc, #476]	; (8004f1c <HAL_ETH_Init+0x2cc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d804      	bhi.n	8004d4c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	f043 0308 	orr.w	r3, r3, #8
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	e027      	b.n	8004d9c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	4a73      	ldr	r2, [pc, #460]	; (8004f1c <HAL_ETH_Init+0x2cc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d908      	bls.n	8004d66 <HAL_ETH_Init+0x116>
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	4a6d      	ldr	r2, [pc, #436]	; (8004f0c <HAL_ETH_Init+0x2bc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d204      	bcs.n	8004d66 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f043 030c 	orr.w	r3, r3, #12
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	e01a      	b.n	8004d9c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	4a68      	ldr	r2, [pc, #416]	; (8004f0c <HAL_ETH_Init+0x2bc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d303      	bcc.n	8004d76 <HAL_ETH_Init+0x126>
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	4a6b      	ldr	r2, [pc, #428]	; (8004f20 <HAL_ETH_Init+0x2d0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d911      	bls.n	8004d9a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	4a69      	ldr	r2, [pc, #420]	; (8004f20 <HAL_ETH_Init+0x2d0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d908      	bls.n	8004d90 <HAL_ETH_Init+0x140>
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	4a68      	ldr	r2, [pc, #416]	; (8004f24 <HAL_ETH_Init+0x2d4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d804      	bhi.n	8004d90 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	f043 0304 	orr.w	r3, r3, #4
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	e005      	b.n	8004d9c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f043 0310 	orr.w	r3, r3, #16
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	e000      	b.n	8004d9c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004d9a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004da4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004da8:	2100      	movs	r1, #0
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fb98 	bl	80054e0 <HAL_ETH_WritePHYRegister>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004dba:	6939      	ldr	r1, [r7, #16]
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fd4d 	bl	800585c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e0d7      	b.n	8004f7e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004dce:	20ff      	movs	r0, #255	; 0xff
 8004dd0:	f7ff fde6 	bl	80049a0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80a5 	beq.w	8004f28 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dde:	f7ff fdd3 	bl	8004988 <HAL_GetTick>
 8004de2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004de4:	f107 030c 	add.w	r3, r7, #12
 8004de8:	461a      	mov	r2, r3
 8004dea:	2101      	movs	r1, #1
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fb0f 	bl	8005410 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004df2:	f7ff fdc9 	bl	8004988 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d90f      	bls.n	8004e24 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004e08:	6939      	ldr	r1, [r7, #16]
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fd26 	bl	800585c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e0ac      	b.n	8004f7e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0da      	beq.n	8004de4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004e2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e32:	2100      	movs	r1, #0
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fb53 	bl	80054e0 <HAL_ETH_WritePHYRegister>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00b      	beq.n	8004e58 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004e44:	6939      	ldr	r1, [r7, #16]
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fd08 	bl	800585c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004e54:	2301      	movs	r3, #1
 8004e56:	e092      	b.n	8004f7e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e58:	f7ff fd96 	bl	8004988 <HAL_GetTick>
 8004e5c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004e5e:	f107 030c 	add.w	r3, r7, #12
 8004e62:	461a      	mov	r2, r3
 8004e64:	2101      	movs	r1, #1
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fad2 	bl	8005410 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004e6c:	f7ff fd8c 	bl	8004988 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d90f      	bls.n	8004e9e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004e82:	6939      	ldr	r1, [r7, #16]
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fce9 	bl	800585c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e06f      	b.n	8004f7e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0da      	beq.n	8004e5e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004ea8:	f107 030c 	add.w	r3, r7, #12
 8004eac:	461a      	mov	r2, r3
 8004eae:	211f      	movs	r1, #31
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 faad 	bl	8005410 <HAL_ETH_ReadPHYRegister>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00b      	beq.n	8004ed4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004ec0:	6939      	ldr	r1, [r7, #16]
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fcca 	bl	800585c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e054      	b.n	8004f7e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ee4:	60da      	str	r2, [r3, #12]
 8004ee6:	e002      	b.n	8004eee <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	609a      	str	r2, [r3, #8]
 8004efe:	e035      	b.n	8004f6c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	e030      	b.n	8004f6c <HAL_ETH_Init+0x31c>
 8004f0a:	bf00      	nop
 8004f0c:	03938700 	.word	0x03938700
 8004f10:	40023800 	.word	0x40023800
 8004f14:	40013800 	.word	0x40013800
 8004f18:	01312cff 	.word	0x01312cff
 8004f1c:	02160ebf 	.word	0x02160ebf
 8004f20:	05f5e0ff 	.word	0x05f5e0ff
 8004f24:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	08db      	lsrs	r3, r3, #3
 8004f2e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	085b      	lsrs	r3, r3, #1
 8004f36:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	2100      	movs	r1, #0
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 facd 	bl	80054e0 <HAL_ETH_WritePHYRegister>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00b      	beq.n	8004f64 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004f50:	6939      	ldr	r1, [r7, #16]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fc82 	bl	800585c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e00c      	b.n	8004f7e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004f64:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004f68:	f7ff fd1a 	bl	80049a0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004f6c:	6939      	ldr	r1, [r7, #16]
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fc74 	bl	800585c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3720      	adds	r7, #32
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop

08004f88 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_ETH_DMATxDescListInit+0x20>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e052      	b.n	800504e <HAL_ETH_DMATxDescListInit+0xc6>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	e030      	b.n	8005026 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	015b      	lsls	r3, r3, #5
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	4413      	add	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004fd4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004fdc:	fb02 f303 	mul.w	r3, r2, r3
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d105      	bne.n	8004ffe <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	3b01      	subs	r3, #1
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	429a      	cmp	r2, r3
 8005006:	d208      	bcs.n	800501a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	3301      	adds	r3, #1
 800500c:	015b      	lsls	r3, r3, #5
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	4413      	add	r3, r2
 8005012:	461a      	mov	r2, r3
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	60da      	str	r2, [r3, #12]
 8005018:	e002      	b.n	8005020 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	3301      	adds	r3, #1
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d3ca      	bcc.n	8004fc4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005038:	3310      	adds	r3, #16
 800503a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800505a:	b480      	push	{r7}
 800505c:	b087      	sub	sp, #28
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_ETH_DMARxDescListInit+0x20>
 8005076:	2302      	movs	r3, #2
 8005078:	e056      	b.n	8005128 <HAL_ETH_DMARxDescListInit+0xce>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2202      	movs	r2, #2
 8005086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	e034      	b.n	8005100 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	015b      	lsls	r3, r3, #5
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	4413      	add	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050a6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80050ae:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	4413      	add	r3, r2
 80050be:	461a      	mov	r2, r3
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d105      	bne.n	80050d8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	3b01      	subs	r3, #1
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d208      	bcs.n	80050f4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	3301      	adds	r3, #1
 80050e6:	015b      	lsls	r3, r3, #5
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	4413      	add	r3, r2
 80050ec:	461a      	mov	r2, r3
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	e002      	b.n	80050fa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	3301      	adds	r3, #1
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d3c6      	bcc.n	8005096 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005112:	330c      	adds	r3, #12
 8005114:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	2300      	movs	r3, #0
 8005148:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005150:	2b01      	cmp	r3, #1
 8005152:	d101      	bne.n	8005158 <HAL_ETH_TransmitFrame+0x24>
 8005154:	2302      	movs	r3, #2
 8005156:	e0cd      	b.n	80052f4 <HAL_ETH_TransmitFrame+0x1c0>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d109      	bne.n	8005182 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800517e:	2301      	movs	r3, #1
 8005180:	e0b8      	b.n	80052f4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	da09      	bge.n	80051a0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2212      	movs	r2, #18
 8005190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0a9      	b.n	80052f4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d915      	bls.n	80051d6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	4a54      	ldr	r2, [pc, #336]	; (8005300 <HAL_ETH_TransmitFrame+0x1cc>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	0a9b      	lsrs	r3, r3, #10
 80051b4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	4b51      	ldr	r3, [pc, #324]	; (8005300 <HAL_ETH_TransmitFrame+0x1cc>)
 80051ba:	fba3 1302 	umull	r1, r3, r3, r2
 80051be:	0a9b      	lsrs	r3, r3, #10
 80051c0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	3301      	adds	r3, #1
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	e001      	b.n	80051da <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80051d6:	2301      	movs	r3, #1
 80051d8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d11c      	bne.n	800521a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80051ee:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80051fa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800520a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	461a      	mov	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	62da      	str	r2, [r3, #44]	; 0x2c
 8005218:	e04b      	b.n	80052b2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	e044      	b.n	80052aa <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800522e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d107      	bne.n	8005246 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005244:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800524e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	3b01      	subs	r3, #1
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	429a      	cmp	r2, r3
 8005258:	d116      	bne.n	8005288 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005268:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	4a25      	ldr	r2, [pc, #148]	; (8005304 <HAL_ETH_TransmitFrame+0x1d0>)
 800526e:	fb02 f203 	mul.w	r2, r2, r3
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	4413      	add	r3, r2
 8005276:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800527a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005286:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005296:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	461a      	mov	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	3301      	adds	r3, #1
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d3b6      	bcc.n	8005220 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ba:	3314      	adds	r3, #20
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00d      	beq.n	80052e2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ce:	3314      	adds	r3, #20
 80052d0:	2204      	movs	r2, #4
 80052d2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052dc:	3304      	adds	r3, #4
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	ac02b00b 	.word	0xac02b00b
 8005304:	fffffa0c 	.word	0xfffffa0c

08005308 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <HAL_ETH_GetReceivedFrame+0x1a>
 800531e:	2302      	movs	r3, #2
 8005320:	e070      	b.n	8005404 <HAL_ETH_GetReceivedFrame+0xfc>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	db5a      	blt.n	80053f2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005346:	2b00      	cmp	r3, #0
 8005348:	d030      	beq.n	80053ac <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	2b01      	cmp	r3, #1
 800535a:	d103      	bne.n	8005364 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	0c1b      	lsrs	r3, r3, #16
 8005374:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005378:	3b04      	subs	r3, #4
 800537a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	461a      	mov	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e02b      	b.n	8005404 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d010      	beq.n	80053dc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	461a      	mov	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	629a      	str	r2, [r3, #40]	; 0x28
 80053da:	e00a      	b.n	80053f2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	461a      	mov	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	460b      	mov	r3, r1
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b82      	cmp	r3, #130	; 0x82
 8005430:	d101      	bne.n	8005436 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8005432:	2302      	movs	r3, #2
 8005434:	e050      	b.n	80054d8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2282      	movs	r2, #130	; 0x82
 800543a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f003 031c 	and.w	r3, r3, #28
 800544c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8a1b      	ldrh	r3, [r3, #16]
 8005452:	02db      	lsls	r3, r3, #11
 8005454:	b29b      	uxth	r3, r3
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800545c:	897b      	ldrh	r3, [r7, #10]
 800545e:	019b      	lsls	r3, r3, #6
 8005460:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f023 0302 	bic.w	r3, r3, #2
 8005470:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005482:	f7ff fa81 	bl	8004988 <HAL_GetTick>
 8005486:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005488:	e015      	b.n	80054b6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800548a:	f7ff fa7d 	bl	8004988 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005498:	d309      	bcc.n	80054ae <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e014      	b.n	80054d8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e4      	bne.n	800548a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	460b      	mov	r3, r1
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b42      	cmp	r3, #66	; 0x42
 8005500:	d101      	bne.n	8005506 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8005502:	2302      	movs	r3, #2
 8005504:	e04e      	b.n	80055a4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2242      	movs	r2, #66	; 0x42
 800550a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f003 031c 	and.w	r3, r3, #28
 800551c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8a1b      	ldrh	r3, [r3, #16]
 8005522:	02db      	lsls	r3, r3, #11
 8005524:	b29b      	uxth	r3, r3
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800552c:	897b      	ldrh	r3, [r7, #10]
 800552e:	019b      	lsls	r3, r3, #6
 8005530:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f043 0302 	orr.w	r3, r3, #2
 8005540:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800555c:	f7ff fa14 	bl	8004988 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005562:	e015      	b.n	8005590 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8005564:	f7ff fa10 	bl	8004988 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005572:	d309      	bcc.n	8005588 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e00d      	b.n	80055a4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e4      	bne.n	8005564 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_ETH_Start+0x16>
 80055be:	2302      	movs	r3, #2
 80055c0:	e01f      	b.n	8005602 <HAL_ETH_Start+0x56>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fb44 	bl	8005c60 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fb7b 	bl	8005cd4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fc12 	bl	8005e08 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fbaf 	bl	8005d48 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fbdc 	bl	8005da8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_ETH_Stop+0x16>
 800561c:	2302      	movs	r3, #2
 800561e:	e01f      	b.n	8005660 <HAL_ETH_Stop+0x56>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fba1 	bl	8005d78 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fbce 	bl	8005dd8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fb66 	bl	8005d0e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fbe0 	bl	8005e08 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fb26 	bl	8005c9a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_ETH_ConfigMAC+0x1c>
 8005680:	2302      	movs	r3, #2
 8005682:	e0e4      	b.n	800584e <HAL_ETH_ConfigMAC+0x1e6>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80b1 	beq.w	80057fe <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4b6c      	ldr	r3, [pc, #432]	; (8005858 <HAL_ETH_ConfigMAC+0x1f0>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80056b4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80056ba:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80056c0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80056c6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80056cc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80056d2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80056d8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80056de:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80056e4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80056ea:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80056f0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80056f6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800570e:	2001      	movs	r0, #1
 8005710:	f7ff f946 	bl	80049a0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005724:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800572a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8005730:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8005736:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800573c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8005742:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800574e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005750:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800575a:	2001      	movs	r0, #1
 800575c:	f7ff f920 	bl	80049a0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005770:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800577a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	f64f 7341 	movw	r3, #65345	; 0xff41
 800578a:	4013      	ands	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005792:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005798:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800579e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80057a4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80057aa:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80057b0:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80057c8:	2001      	movs	r0, #1
 80057ca:	f7ff f8e9 	bl	80049a0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80057ee:	2001      	movs	r0, #1
 80057f0:	f7ff f8d6 	bl	80049a0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	61da      	str	r2, [r3, #28]
 80057fc:	e01e      	b.n	800583c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800580c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800582e:	2001      	movs	r0, #1
 8005830:	f7ff f8b6 	bl	80049a0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	ff20810f 	.word	0xff20810f

0800585c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b0b0      	sub	sp, #192	; 0xc0
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d007      	beq.n	8005882 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005878:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005880:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8005882:	2300      	movs	r3, #0
 8005884:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8005886:	2300      	movs	r3, #0
 8005888:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800588a:	2300      	movs	r3, #0
 800588c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800588e:	2300      	movs	r3, #0
 8005890:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005892:	2300      	movs	r3, #0
 8005894:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8005896:	2300      	movs	r3, #0
 8005898:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d103      	bne.n	80058aa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80058a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058a6:	663b      	str	r3, [r7, #96]	; 0x60
 80058a8:	e001      	b.n	80058ae <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80058ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058b2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80058b4:	2300      	movs	r3, #0
 80058b6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80058b8:	2300      	movs	r3, #0
 80058ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80058bc:	2300      	movs	r3, #0
 80058be:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80058c4:	2300      	movs	r3, #0
 80058c6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80058c8:	2340      	movs	r3, #64	; 0x40
 80058ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80058cc:	2300      	movs	r3, #0
 80058ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80058d8:	2300      	movs	r3, #0
 80058da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80058de:	2300      	movs	r3, #0
 80058e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80058e4:	2300      	movs	r3, #0
 80058e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005902:	2300      	movs	r3, #0
 8005904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005908:	2300      	movs	r3, #0
 800590a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800590e:	2300      	movs	r3, #0
 8005910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005914:	2300      	movs	r3, #0
 8005916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800591a:	2300      	movs	r3, #0
 800591c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8005920:	2300      	movs	r3, #0
 8005922:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005930:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005934:	4bac      	ldr	r3, [pc, #688]	; (8005be8 <ETH_MACDMAConfig+0x38c>)
 8005936:	4013      	ands	r3, r2
 8005938:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800593c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800593e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005940:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8005942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8005944:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8005946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005948:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800594e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8005950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8005952:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8005954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8005956:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800595c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800595e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005960:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8005962:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005964:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8005966:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005968:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800596a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800596c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800596e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005970:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005972:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005984:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005990:	2001      	movs	r0, #1
 8005992:	f7ff f805 	bl	80049a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800599e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80059a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80059a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80059a4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80059a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80059a8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80059aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80059ae:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80059b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80059b4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80059b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80059ba:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80059bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80059c0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80059c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80059cc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80059ce:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80059da:	2001      	movs	r0, #1
 80059dc:	f7fe ffe0 	bl	80049a0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059e8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059f2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80059fc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005a08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a0c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005a10:	4013      	ands	r3, r2
 8005a12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005a16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a1a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005a1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005a20:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005a22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005a26:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005a2c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8005a32:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005a34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005a38:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005a3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a4c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a58:	2001      	movs	r0, #1
 8005a5a:	f7fe ffa1 	bl	80049a0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a66:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005a68:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005a6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a82:	2001      	movs	r0, #1
 8005a84:	f7fe ff8c 	bl	80049a0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a90:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a9a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005aa0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005aa4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005ab6:	2304      	movs	r3, #4
 8005ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005aba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ac4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005ac6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005aca:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ad0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005ad2:	2380      	movs	r3, #128	; 0x80
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005ada:	2300      	movs	r3, #0
 8005adc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae6:	3318      	adds	r3, #24
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005aee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005af2:	4b3e      	ldr	r3, [pc, #248]	; (8005bec <ETH_MACDMAConfig+0x390>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005afa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005afc:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005afe:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005b00:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005b02:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005b04:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005b06:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005b08:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005b0a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005b0c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005b0e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005b10:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005b12:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005b16:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005b1a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005b1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b2e:	3318      	adds	r3, #24
 8005b30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b34:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3e:	3318      	adds	r3, #24
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b46:	2001      	movs	r0, #1
 8005b48:	f7fe ff2a 	bl	80049a0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b54:	3318      	adds	r3, #24
 8005b56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b5a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005b60:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005b64:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005b68:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005b6c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b70:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005b72:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005b76:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b84:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b94:	2001      	movs	r0, #1
 8005b96:	f7fe ff03 	bl	80049a0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ba6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d10f      	bne.n	8005bd0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb8:	331c      	adds	r3, #28
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bcc:	331c      	adds	r3, #28
 8005bce:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f809 	bl	8005bf0 <ETH_MACAddressConfig>
}
 8005bde:	bf00      	nop
 8005be0:	37c0      	adds	r7, #192	; 0xc0
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	ff20810f 	.word	0xff20810f
 8005bec:	f8de3f23 	.word	0xf8de3f23

08005bf0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3305      	adds	r3, #5
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	3204      	adds	r2, #4
 8005c08:	7812      	ldrb	r2, [r2, #0]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <ETH_MACAddressConfig+0x68>)
 8005c12:	4413      	add	r3, r2
 8005c14:	461a      	mov	r2, r3
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3303      	adds	r3, #3
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	061a      	lsls	r2, r3, #24
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	3302      	adds	r3, #2
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	041b      	lsls	r3, r3, #16
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	4313      	orrs	r3, r2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	7812      	ldrb	r2, [r2, #0]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <ETH_MACAddressConfig+0x6c>)
 8005c42:	4413      	add	r3, r2
 8005c44:	461a      	mov	r2, r3
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	6013      	str	r3, [r2, #0]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40028040 	.word	0x40028040
 8005c5c:	40028044 	.word	0x40028044

08005c60 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0208 	orr.w	r2, r2, #8
 8005c7a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005c84:	2001      	movs	r0, #1
 8005c86:	f000 f8e9 	bl	8005e5c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	601a      	str	r2, [r3, #0]
}
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0208 	bic.w	r2, r2, #8
 8005cb4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005cbe:	2001      	movs	r0, #1
 8005cc0:	f000 f8cc 	bl	8005e5c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	601a      	str	r2, [r3, #0]
}
 8005ccc:	bf00      	nop
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0204 	orr.w	r2, r2, #4
 8005cee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	f000 f8af 	bl	8005e5c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	601a      	str	r2, [r3, #0]
}
 8005d06:	bf00      	nop
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0204 	bic.w	r2, r2, #4
 8005d28:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005d32:	2001      	movs	r0, #1
 8005d34:	f000 f892 	bl	8005e5c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	601a      	str	r2, [r3, #0]
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d58:	3318      	adds	r3, #24
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d68:	3318      	adds	r3, #24
 8005d6a:	601a      	str	r2, [r3, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d88:	3318      	adds	r3, #24
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d98:	3318      	adds	r3, #24
 8005d9a:	601a      	str	r2, [r3, #0]
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db8:	3318      	adds	r3, #24
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0202 	orr.w	r2, r2, #2
 8005dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc8:	3318      	adds	r3, #24
 8005dca:	601a      	str	r2, [r3, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de8:	3318      	adds	r3, #24
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0202 	bic.w	r2, r2, #2
 8005df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df8:	3318      	adds	r3, #24
 8005dfa:	601a      	str	r2, [r3, #0]
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e1c:	3318      	adds	r3, #24
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2c:	3318      	adds	r3, #24
 8005e2e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e38:	3318      	adds	r3, #24
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005e3e:	2001      	movs	r0, #1
 8005e40:	f000 f80c 	bl	8005e5c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e4e:	3318      	adds	r3, #24
 8005e50:	601a      	str	r2, [r3, #0]
}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e64:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <ETH_Delay+0x38>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a0b      	ldr	r2, [pc, #44]	; (8005e98 <ETH_Delay+0x3c>)
 8005e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6e:	0a5b      	lsrs	r3, r3, #9
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
 8005e76:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005e78:	bf00      	nop
  } 
  while (Delay --);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	1e5a      	subs	r2, r3, #1
 8005e7e:	60fa      	str	r2, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1f9      	bne.n	8005e78 <ETH_Delay+0x1c>
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	20000020 	.word	0x20000020
 8005e98:	10624dd3 	.word	0x10624dd3

08005e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b089      	sub	sp, #36	; 0x24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61fb      	str	r3, [r7, #28]
 8005eb6:	e16b      	b.n	8006190 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005eb8:	2201      	movs	r2, #1
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	f040 815a 	bne.w	800618a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d005      	beq.n	8005eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d130      	bne.n	8005f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	2203      	movs	r2, #3
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	43db      	mvns	r3, r3
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	4013      	ands	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f24:	2201      	movs	r2, #1
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4013      	ands	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	091b      	lsrs	r3, r3, #4
 8005f3a:	f003 0201 	and.w	r2, r3, #1
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	fa02 f303 	lsl.w	r3, r2, r3
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f003 0303 	and.w	r3, r3, #3
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d017      	beq.n	8005f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	2203      	movs	r2, #3
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	4013      	ands	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f003 0303 	and.w	r3, r3, #3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d123      	bne.n	8005fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	08da      	lsrs	r2, r3, #3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3208      	adds	r2, #8
 8005fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	220f      	movs	r2, #15
 8005fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	08da      	lsrs	r2, r3, #3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3208      	adds	r2, #8
 8005fda:	69b9      	ldr	r1, [r7, #24]
 8005fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	2203      	movs	r2, #3
 8005fec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f003 0203 	and.w	r2, r3, #3
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	4313      	orrs	r3, r2
 800600c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80b4 	beq.w	800618a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	4b60      	ldr	r3, [pc, #384]	; (80061a8 <HAL_GPIO_Init+0x30c>)
 8006028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602a:	4a5f      	ldr	r2, [pc, #380]	; (80061a8 <HAL_GPIO_Init+0x30c>)
 800602c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006030:	6453      	str	r3, [r2, #68]	; 0x44
 8006032:	4b5d      	ldr	r3, [pc, #372]	; (80061a8 <HAL_GPIO_Init+0x30c>)
 8006034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800603e:	4a5b      	ldr	r2, [pc, #364]	; (80061ac <HAL_GPIO_Init+0x310>)
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	089b      	lsrs	r3, r3, #2
 8006044:	3302      	adds	r3, #2
 8006046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800604a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	220f      	movs	r2, #15
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	43db      	mvns	r3, r3
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	4013      	ands	r3, r2
 8006060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a52      	ldr	r2, [pc, #328]	; (80061b0 <HAL_GPIO_Init+0x314>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d02b      	beq.n	80060c2 <HAL_GPIO_Init+0x226>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a51      	ldr	r2, [pc, #324]	; (80061b4 <HAL_GPIO_Init+0x318>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d025      	beq.n	80060be <HAL_GPIO_Init+0x222>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a50      	ldr	r2, [pc, #320]	; (80061b8 <HAL_GPIO_Init+0x31c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d01f      	beq.n	80060ba <HAL_GPIO_Init+0x21e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a4f      	ldr	r2, [pc, #316]	; (80061bc <HAL_GPIO_Init+0x320>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d019      	beq.n	80060b6 <HAL_GPIO_Init+0x21a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a4e      	ldr	r2, [pc, #312]	; (80061c0 <HAL_GPIO_Init+0x324>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d013      	beq.n	80060b2 <HAL_GPIO_Init+0x216>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a4d      	ldr	r2, [pc, #308]	; (80061c4 <HAL_GPIO_Init+0x328>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00d      	beq.n	80060ae <HAL_GPIO_Init+0x212>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a4c      	ldr	r2, [pc, #304]	; (80061c8 <HAL_GPIO_Init+0x32c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d007      	beq.n	80060aa <HAL_GPIO_Init+0x20e>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a4b      	ldr	r2, [pc, #300]	; (80061cc <HAL_GPIO_Init+0x330>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d101      	bne.n	80060a6 <HAL_GPIO_Init+0x20a>
 80060a2:	2307      	movs	r3, #7
 80060a4:	e00e      	b.n	80060c4 <HAL_GPIO_Init+0x228>
 80060a6:	2308      	movs	r3, #8
 80060a8:	e00c      	b.n	80060c4 <HAL_GPIO_Init+0x228>
 80060aa:	2306      	movs	r3, #6
 80060ac:	e00a      	b.n	80060c4 <HAL_GPIO_Init+0x228>
 80060ae:	2305      	movs	r3, #5
 80060b0:	e008      	b.n	80060c4 <HAL_GPIO_Init+0x228>
 80060b2:	2304      	movs	r3, #4
 80060b4:	e006      	b.n	80060c4 <HAL_GPIO_Init+0x228>
 80060b6:	2303      	movs	r3, #3
 80060b8:	e004      	b.n	80060c4 <HAL_GPIO_Init+0x228>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e002      	b.n	80060c4 <HAL_GPIO_Init+0x228>
 80060be:	2301      	movs	r3, #1
 80060c0:	e000      	b.n	80060c4 <HAL_GPIO_Init+0x228>
 80060c2:	2300      	movs	r3, #0
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	f002 0203 	and.w	r2, r2, #3
 80060ca:	0092      	lsls	r2, r2, #2
 80060cc:	4093      	lsls	r3, r2
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060d4:	4935      	ldr	r1, [pc, #212]	; (80061ac <HAL_GPIO_Init+0x310>)
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	089b      	lsrs	r3, r3, #2
 80060da:	3302      	adds	r3, #2
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060e2:	4b3b      	ldr	r3, [pc, #236]	; (80061d0 <HAL_GPIO_Init+0x334>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	43db      	mvns	r3, r3
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	4013      	ands	r3, r2
 80060f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	4313      	orrs	r3, r2
 8006104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006106:	4a32      	ldr	r2, [pc, #200]	; (80061d0 <HAL_GPIO_Init+0x334>)
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800610c:	4b30      	ldr	r3, [pc, #192]	; (80061d0 <HAL_GPIO_Init+0x334>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	43db      	mvns	r3, r3
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	4013      	ands	r3, r2
 800611a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	4313      	orrs	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006130:	4a27      	ldr	r2, [pc, #156]	; (80061d0 <HAL_GPIO_Init+0x334>)
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006136:	4b26      	ldr	r3, [pc, #152]	; (80061d0 <HAL_GPIO_Init+0x334>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	43db      	mvns	r3, r3
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	4013      	ands	r3, r2
 8006144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4313      	orrs	r3, r2
 8006158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800615a:	4a1d      	ldr	r2, [pc, #116]	; (80061d0 <HAL_GPIO_Init+0x334>)
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006160:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <HAL_GPIO_Init+0x334>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	43db      	mvns	r3, r3
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4013      	ands	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006184:	4a12      	ldr	r2, [pc, #72]	; (80061d0 <HAL_GPIO_Init+0x334>)
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	3301      	adds	r3, #1
 800618e:	61fb      	str	r3, [r7, #28]
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	2b0f      	cmp	r3, #15
 8006194:	f67f ae90 	bls.w	8005eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	3724      	adds	r7, #36	; 0x24
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40023800 	.word	0x40023800
 80061ac:	40013800 	.word	0x40013800
 80061b0:	40020000 	.word	0x40020000
 80061b4:	40020400 	.word	0x40020400
 80061b8:	40020800 	.word	0x40020800
 80061bc:	40020c00 	.word	0x40020c00
 80061c0:	40021000 	.word	0x40021000
 80061c4:	40021400 	.word	0x40021400
 80061c8:	40021800 	.word	0x40021800
 80061cc:	40021c00 	.word	0x40021c00
 80061d0:	40013c00 	.word	0x40013c00

080061d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	887b      	ldrh	r3, [r7, #2]
 80061e6:	4013      	ands	r3, r2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061ec:	2301      	movs	r3, #1
 80061ee:	73fb      	strb	r3, [r7, #15]
 80061f0:	e001      	b.n	80061f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061f2:	2300      	movs	r3, #0
 80061f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	807b      	strh	r3, [r7, #2]
 8006210:	4613      	mov	r3, r2
 8006212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006214:	787b      	ldrb	r3, [r7, #1]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800621a:	887a      	ldrh	r2, [r7, #2]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006220:	e003      	b.n	800622a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006222:	887b      	ldrh	r3, [r7, #2]
 8006224:	041a      	lsls	r2, r3, #16
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	619a      	str	r2, [r3, #24]
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
	...

08006238 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006242:	4b08      	ldr	r3, [pc, #32]	; (8006264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006244:	695a      	ldr	r2, [r3, #20]
 8006246:	88fb      	ldrh	r3, [r7, #6]
 8006248:	4013      	ands	r3, r2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d006      	beq.n	800625c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800624e:	4a05      	ldr	r2, [pc, #20]	; (8006264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006250:	88fb      	ldrh	r3, [r7, #6]
 8006252:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006254:	88fb      	ldrh	r3, [r7, #6]
 8006256:	4618      	mov	r0, r3
 8006258:	f7fd fdaa 	bl	8003db0 <HAL_GPIO_EXTI_Callback>
  }
}
 800625c:	bf00      	nop
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40013c00 	.word	0x40013c00

08006268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e264      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d075      	beq.n	8006372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006286:	4ba3      	ldr	r3, [pc, #652]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 030c 	and.w	r3, r3, #12
 800628e:	2b04      	cmp	r3, #4
 8006290:	d00c      	beq.n	80062ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006292:	4ba0      	ldr	r3, [pc, #640]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800629a:	2b08      	cmp	r3, #8
 800629c:	d112      	bne.n	80062c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800629e:	4b9d      	ldr	r3, [pc, #628]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062aa:	d10b      	bne.n	80062c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ac:	4b99      	ldr	r3, [pc, #612]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d05b      	beq.n	8006370 <HAL_RCC_OscConfig+0x108>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d157      	bne.n	8006370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e23f      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062cc:	d106      	bne.n	80062dc <HAL_RCC_OscConfig+0x74>
 80062ce:	4b91      	ldr	r3, [pc, #580]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a90      	ldr	r2, [pc, #576]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	e01d      	b.n	8006318 <HAL_RCC_OscConfig+0xb0>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062e4:	d10c      	bne.n	8006300 <HAL_RCC_OscConfig+0x98>
 80062e6:	4b8b      	ldr	r3, [pc, #556]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a8a      	ldr	r2, [pc, #552]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	4b88      	ldr	r3, [pc, #544]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a87      	ldr	r2, [pc, #540]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e00b      	b.n	8006318 <HAL_RCC_OscConfig+0xb0>
 8006300:	4b84      	ldr	r3, [pc, #528]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a83      	ldr	r2, [pc, #524]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	4b81      	ldr	r3, [pc, #516]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a80      	ldr	r2, [pc, #512]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d013      	beq.n	8006348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006320:	f7fe fb32 	bl	8004988 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006328:	f7fe fb2e 	bl	8004988 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b64      	cmp	r3, #100	; 0x64
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e204      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633a:	4b76      	ldr	r3, [pc, #472]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f0      	beq.n	8006328 <HAL_RCC_OscConfig+0xc0>
 8006346:	e014      	b.n	8006372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006348:	f7fe fb1e 	bl	8004988 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006350:	f7fe fb1a 	bl	8004988 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b64      	cmp	r3, #100	; 0x64
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e1f0      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006362:	4b6c      	ldr	r3, [pc, #432]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <HAL_RCC_OscConfig+0xe8>
 800636e:	e000      	b.n	8006372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d063      	beq.n	8006446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800637e:	4b65      	ldr	r3, [pc, #404]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 030c 	and.w	r3, r3, #12
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00b      	beq.n	80063a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800638a:	4b62      	ldr	r3, [pc, #392]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006392:	2b08      	cmp	r3, #8
 8006394:	d11c      	bne.n	80063d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006396:	4b5f      	ldr	r3, [pc, #380]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d116      	bne.n	80063d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063a2:	4b5c      	ldr	r3, [pc, #368]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <HAL_RCC_OscConfig+0x152>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d001      	beq.n	80063ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e1c4      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ba:	4b56      	ldr	r3, [pc, #344]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	4952      	ldr	r1, [pc, #328]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ce:	e03a      	b.n	8006446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d020      	beq.n	800641a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063d8:	4b4f      	ldr	r3, [pc, #316]	; (8006518 <HAL_RCC_OscConfig+0x2b0>)
 80063da:	2201      	movs	r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063de:	f7fe fad3 	bl	8004988 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063e6:	f7fe facf 	bl	8004988 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e1a5      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f8:	4b46      	ldr	r3, [pc, #280]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0f0      	beq.n	80063e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006404:	4b43      	ldr	r3, [pc, #268]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	4940      	ldr	r1, [pc, #256]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006414:	4313      	orrs	r3, r2
 8006416:	600b      	str	r3, [r1, #0]
 8006418:	e015      	b.n	8006446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800641a:	4b3f      	ldr	r3, [pc, #252]	; (8006518 <HAL_RCC_OscConfig+0x2b0>)
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006420:	f7fe fab2 	bl	8004988 <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006428:	f7fe faae 	bl	8004988 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e184      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800643a:	4b36      	ldr	r3, [pc, #216]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1f0      	bne.n	8006428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d030      	beq.n	80064b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d016      	beq.n	8006488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800645a:	4b30      	ldr	r3, [pc, #192]	; (800651c <HAL_RCC_OscConfig+0x2b4>)
 800645c:	2201      	movs	r2, #1
 800645e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006460:	f7fe fa92 	bl	8004988 <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006466:	e008      	b.n	800647a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006468:	f7fe fa8e 	bl	8004988 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b02      	cmp	r3, #2
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e164      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800647a:	4b26      	ldr	r3, [pc, #152]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800647c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0f0      	beq.n	8006468 <HAL_RCC_OscConfig+0x200>
 8006486:	e015      	b.n	80064b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006488:	4b24      	ldr	r3, [pc, #144]	; (800651c <HAL_RCC_OscConfig+0x2b4>)
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800648e:	f7fe fa7b 	bl	8004988 <HAL_GetTick>
 8006492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006494:	e008      	b.n	80064a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006496:	f7fe fa77 	bl	8004988 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e14d      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a8:	4b1a      	ldr	r3, [pc, #104]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80064aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1f0      	bne.n	8006496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80a0 	beq.w	8006602 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064c6:	4b13      	ldr	r3, [pc, #76]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10f      	bne.n	80064f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064d2:	2300      	movs	r3, #0
 80064d4:	60bb      	str	r3, [r7, #8]
 80064d6:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	4a0e      	ldr	r2, [pc, #56]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80064dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e0:	6413      	str	r3, [r2, #64]	; 0x40
 80064e2:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ea:	60bb      	str	r3, [r7, #8]
 80064ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064ee:	2301      	movs	r3, #1
 80064f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064f2:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <HAL_RCC_OscConfig+0x2b8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d121      	bne.n	8006542 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064fe:	4b08      	ldr	r3, [pc, #32]	; (8006520 <HAL_RCC_OscConfig+0x2b8>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a07      	ldr	r2, [pc, #28]	; (8006520 <HAL_RCC_OscConfig+0x2b8>)
 8006504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800650a:	f7fe fa3d 	bl	8004988 <HAL_GetTick>
 800650e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006510:	e011      	b.n	8006536 <HAL_RCC_OscConfig+0x2ce>
 8006512:	bf00      	nop
 8006514:	40023800 	.word	0x40023800
 8006518:	42470000 	.word	0x42470000
 800651c:	42470e80 	.word	0x42470e80
 8006520:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006524:	f7fe fa30 	bl	8004988 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e106      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006536:	4b85      	ldr	r3, [pc, #532]	; (800674c <HAL_RCC_OscConfig+0x4e4>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0f0      	beq.n	8006524 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d106      	bne.n	8006558 <HAL_RCC_OscConfig+0x2f0>
 800654a:	4b81      	ldr	r3, [pc, #516]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654e:	4a80      	ldr	r2, [pc, #512]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006550:	f043 0301 	orr.w	r3, r3, #1
 8006554:	6713      	str	r3, [r2, #112]	; 0x70
 8006556:	e01c      	b.n	8006592 <HAL_RCC_OscConfig+0x32a>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b05      	cmp	r3, #5
 800655e:	d10c      	bne.n	800657a <HAL_RCC_OscConfig+0x312>
 8006560:	4b7b      	ldr	r3, [pc, #492]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006564:	4a7a      	ldr	r2, [pc, #488]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006566:	f043 0304 	orr.w	r3, r3, #4
 800656a:	6713      	str	r3, [r2, #112]	; 0x70
 800656c:	4b78      	ldr	r3, [pc, #480]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 800656e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006570:	4a77      	ldr	r2, [pc, #476]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	6713      	str	r3, [r2, #112]	; 0x70
 8006578:	e00b      	b.n	8006592 <HAL_RCC_OscConfig+0x32a>
 800657a:	4b75      	ldr	r3, [pc, #468]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	4a74      	ldr	r2, [pc, #464]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006580:	f023 0301 	bic.w	r3, r3, #1
 8006584:	6713      	str	r3, [r2, #112]	; 0x70
 8006586:	4b72      	ldr	r3, [pc, #456]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	4a71      	ldr	r2, [pc, #452]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 800658c:	f023 0304 	bic.w	r3, r3, #4
 8006590:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d015      	beq.n	80065c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800659a:	f7fe f9f5 	bl	8004988 <HAL_GetTick>
 800659e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065a0:	e00a      	b.n	80065b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065a2:	f7fe f9f1 	bl	8004988 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e0c5      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b8:	4b65      	ldr	r3, [pc, #404]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 80065ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0ee      	beq.n	80065a2 <HAL_RCC_OscConfig+0x33a>
 80065c4:	e014      	b.n	80065f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c6:	f7fe f9df 	bl	8004988 <HAL_GetTick>
 80065ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065cc:	e00a      	b.n	80065e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065ce:	f7fe f9db 	bl	8004988 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065dc:	4293      	cmp	r3, r2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e0af      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065e4:	4b5a      	ldr	r3, [pc, #360]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 80065e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1ee      	bne.n	80065ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d105      	bne.n	8006602 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065f6:	4b56      	ldr	r3, [pc, #344]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	4a55      	ldr	r2, [pc, #340]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 80065fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006600:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 809b 	beq.w	8006742 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800660c:	4b50      	ldr	r3, [pc, #320]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 030c 	and.w	r3, r3, #12
 8006614:	2b08      	cmp	r3, #8
 8006616:	d05c      	beq.n	80066d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d141      	bne.n	80066a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006620:	4b4c      	ldr	r3, [pc, #304]	; (8006754 <HAL_RCC_OscConfig+0x4ec>)
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006626:	f7fe f9af 	bl	8004988 <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800662e:	f7fe f9ab 	bl	8004988 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e081      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006640:	4b43      	ldr	r3, [pc, #268]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1f0      	bne.n	800662e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	69da      	ldr	r2, [r3, #28]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	431a      	orrs	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	019b      	lsls	r3, r3, #6
 800665c:	431a      	orrs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	3b01      	subs	r3, #1
 8006666:	041b      	lsls	r3, r3, #16
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	061b      	lsls	r3, r3, #24
 8006670:	4937      	ldr	r1, [pc, #220]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006672:	4313      	orrs	r3, r2
 8006674:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006676:	4b37      	ldr	r3, [pc, #220]	; (8006754 <HAL_RCC_OscConfig+0x4ec>)
 8006678:	2201      	movs	r2, #1
 800667a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800667c:	f7fe f984 	bl	8004988 <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006684:	f7fe f980 	bl	8004988 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e056      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006696:	4b2e      	ldr	r3, [pc, #184]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0f0      	beq.n	8006684 <HAL_RCC_OscConfig+0x41c>
 80066a2:	e04e      	b.n	8006742 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066a4:	4b2b      	ldr	r3, [pc, #172]	; (8006754 <HAL_RCC_OscConfig+0x4ec>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066aa:	f7fe f96d 	bl	8004988 <HAL_GetTick>
 80066ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066b0:	e008      	b.n	80066c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066b2:	f7fe f969 	bl	8004988 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d901      	bls.n	80066c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e03f      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c4:	4b22      	ldr	r3, [pc, #136]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1f0      	bne.n	80066b2 <HAL_RCC_OscConfig+0x44a>
 80066d0:	e037      	b.n	8006742 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d101      	bne.n	80066de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e032      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066de:	4b1c      	ldr	r3, [pc, #112]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d028      	beq.n	800673e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d121      	bne.n	800673e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006704:	429a      	cmp	r2, r3
 8006706:	d11a      	bne.n	800673e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800670e:	4013      	ands	r3, r2
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006714:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006716:	4293      	cmp	r3, r2
 8006718:	d111      	bne.n	800673e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	085b      	lsrs	r3, r3, #1
 8006726:	3b01      	subs	r3, #1
 8006728:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800672a:	429a      	cmp	r2, r3
 800672c:	d107      	bne.n	800673e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800673a:	429a      	cmp	r2, r3
 800673c:	d001      	beq.n	8006742 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40007000 	.word	0x40007000
 8006750:	40023800 	.word	0x40023800
 8006754:	42470060 	.word	0x42470060

08006758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e0cc      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800676c:	4b68      	ldr	r3, [pc, #416]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d90c      	bls.n	8006794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677a:	4b65      	ldr	r3, [pc, #404]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006782:	4b63      	ldr	r3, [pc, #396]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d001      	beq.n	8006794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e0b8      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d020      	beq.n	80067e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067ac:	4b59      	ldr	r3, [pc, #356]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	4a58      	ldr	r2, [pc, #352]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067c4:	4b53      	ldr	r3, [pc, #332]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4a52      	ldr	r2, [pc, #328]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067d0:	4b50      	ldr	r3, [pc, #320]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	494d      	ldr	r1, [pc, #308]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d044      	beq.n	8006878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d107      	bne.n	8006806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f6:	4b47      	ldr	r3, [pc, #284]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d119      	bne.n	8006836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e07f      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d003      	beq.n	8006816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006812:	2b03      	cmp	r3, #3
 8006814:	d107      	bne.n	8006826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006816:	4b3f      	ldr	r3, [pc, #252]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d109      	bne.n	8006836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e06f      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006826:	4b3b      	ldr	r3, [pc, #236]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e067      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006836:	4b37      	ldr	r3, [pc, #220]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f023 0203 	bic.w	r2, r3, #3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	4934      	ldr	r1, [pc, #208]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006844:	4313      	orrs	r3, r2
 8006846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006848:	f7fe f89e 	bl	8004988 <HAL_GetTick>
 800684c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800684e:	e00a      	b.n	8006866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006850:	f7fe f89a 	bl	8004988 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	f241 3288 	movw	r2, #5000	; 0x1388
 800685e:	4293      	cmp	r3, r2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e04f      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006866:	4b2b      	ldr	r3, [pc, #172]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f003 020c 	and.w	r2, r3, #12
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	429a      	cmp	r2, r3
 8006876:	d1eb      	bne.n	8006850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006878:	4b25      	ldr	r3, [pc, #148]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d20c      	bcs.n	80068a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006886:	4b22      	ldr	r3, [pc, #136]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800688e:	4b20      	ldr	r3, [pc, #128]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d001      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e032      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068ac:	4b19      	ldr	r3, [pc, #100]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	4916      	ldr	r1, [pc, #88]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068ca:	4b12      	ldr	r3, [pc, #72]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	490e      	ldr	r1, [pc, #56]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068de:	f000 f889 	bl	80069f4 <HAL_RCC_GetSysClockFreq>
 80068e2:	4602      	mov	r2, r0
 80068e4:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	091b      	lsrs	r3, r3, #4
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	490a      	ldr	r1, [pc, #40]	; (8006918 <HAL_RCC_ClockConfig+0x1c0>)
 80068f0:	5ccb      	ldrb	r3, [r1, r3]
 80068f2:	fa22 f303 	lsr.w	r3, r2, r3
 80068f6:	4a09      	ldr	r2, [pc, #36]	; (800691c <HAL_RCC_ClockConfig+0x1c4>)
 80068f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068fa:	4b09      	ldr	r3, [pc, #36]	; (8006920 <HAL_RCC_ClockConfig+0x1c8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fd fffe 	bl	8004900 <HAL_InitTick>

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40023c00 	.word	0x40023c00
 8006914:	40023800 	.word	0x40023800
 8006918:	080194c0 	.word	0x080194c0
 800691c:	20000020 	.word	0x20000020
 8006920:	2000003c 	.word	0x2000003c

08006924 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08c      	sub	sp, #48	; 0x30
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d129      	bne.n	800698a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8006936:	2300      	movs	r3, #0
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	4b2b      	ldr	r3, [pc, #172]	; (80069e8 <HAL_RCC_MCOConfig+0xc4>)
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	4a2a      	ldr	r2, [pc, #168]	; (80069e8 <HAL_RCC_MCOConfig+0xc4>)
 8006940:	f043 0301 	orr.w	r3, r3, #1
 8006944:	6313      	str	r3, [r2, #48]	; 0x30
 8006946:	4b28      	ldr	r3, [pc, #160]	; (80069e8 <HAL_RCC_MCOConfig+0xc4>)
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006958:	2302      	movs	r3, #2
 800695a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800695c:	2303      	movs	r3, #3
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006960:	2300      	movs	r3, #0
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006964:	2300      	movs	r3, #0
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006968:	f107 031c 	add.w	r3, r7, #28
 800696c:	4619      	mov	r1, r3
 800696e:	481f      	ldr	r0, [pc, #124]	; (80069ec <HAL_RCC_MCOConfig+0xc8>)
 8006970:	f7ff fa94 	bl	8005e9c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006974:	4b1c      	ldr	r3, [pc, #112]	; (80069e8 <HAL_RCC_MCOConfig+0xc4>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	430b      	orrs	r3, r1
 8006982:	4919      	ldr	r1, [pc, #100]	; (80069e8 <HAL_RCC_MCOConfig+0xc4>)
 8006984:	4313      	orrs	r3, r2
 8006986:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006988:	e029      	b.n	80069de <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800698a:	2300      	movs	r3, #0
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	4b16      	ldr	r3, [pc, #88]	; (80069e8 <HAL_RCC_MCOConfig+0xc4>)
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	4a15      	ldr	r2, [pc, #84]	; (80069e8 <HAL_RCC_MCOConfig+0xc4>)
 8006994:	f043 0304 	orr.w	r3, r3, #4
 8006998:	6313      	str	r3, [r2, #48]	; 0x30
 800699a:	4b13      	ldr	r3, [pc, #76]	; (80069e8 <HAL_RCC_MCOConfig+0xc4>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80069a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ac:	2302      	movs	r3, #2
 80069ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069b0:	2303      	movs	r3, #3
 80069b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b4:	2300      	movs	r3, #0
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80069b8:	2300      	movs	r3, #0
 80069ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80069bc:	f107 031c 	add.w	r3, r7, #28
 80069c0:	4619      	mov	r1, r3
 80069c2:	480b      	ldr	r0, [pc, #44]	; (80069f0 <HAL_RCC_MCOConfig+0xcc>)
 80069c4:	f7ff fa6a 	bl	8005e9c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80069c8:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <HAL_RCC_MCOConfig+0xc4>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	00d9      	lsls	r1, r3, #3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	430b      	orrs	r3, r1
 80069d8:	4903      	ldr	r1, [pc, #12]	; (80069e8 <HAL_RCC_MCOConfig+0xc4>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	608b      	str	r3, [r1, #8]
}
 80069de:	bf00      	nop
 80069e0:	3730      	adds	r7, #48	; 0x30
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	40023800 	.word	0x40023800
 80069ec:	40020000 	.word	0x40020000
 80069f0:	40020800 	.word	0x40020800

080069f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069f4:	b5b0      	push	{r4, r5, r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069fa:	2100      	movs	r1, #0
 80069fc:	6079      	str	r1, [r7, #4]
 80069fe:	2100      	movs	r1, #0
 8006a00:	60f9      	str	r1, [r7, #12]
 8006a02:	2100      	movs	r1, #0
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006a06:	2100      	movs	r1, #0
 8006a08:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a0a:	4952      	ldr	r1, [pc, #328]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a0c:	6889      	ldr	r1, [r1, #8]
 8006a0e:	f001 010c 	and.w	r1, r1, #12
 8006a12:	2908      	cmp	r1, #8
 8006a14:	d00d      	beq.n	8006a32 <HAL_RCC_GetSysClockFreq+0x3e>
 8006a16:	2908      	cmp	r1, #8
 8006a18:	f200 8094 	bhi.w	8006b44 <HAL_RCC_GetSysClockFreq+0x150>
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	d002      	beq.n	8006a26 <HAL_RCC_GetSysClockFreq+0x32>
 8006a20:	2904      	cmp	r1, #4
 8006a22:	d003      	beq.n	8006a2c <HAL_RCC_GetSysClockFreq+0x38>
 8006a24:	e08e      	b.n	8006b44 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a26:	4b4c      	ldr	r3, [pc, #304]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x164>)
 8006a28:	60bb      	str	r3, [r7, #8]
       break;
 8006a2a:	e08e      	b.n	8006b4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a2c:	4b4b      	ldr	r3, [pc, #300]	; (8006b5c <HAL_RCC_GetSysClockFreq+0x168>)
 8006a2e:	60bb      	str	r3, [r7, #8]
      break;
 8006a30:	e08b      	b.n	8006b4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a32:	4948      	ldr	r1, [pc, #288]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a34:	6849      	ldr	r1, [r1, #4]
 8006a36:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006a3a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a3c:	4945      	ldr	r1, [pc, #276]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a3e:	6849      	ldr	r1, [r1, #4]
 8006a40:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006a44:	2900      	cmp	r1, #0
 8006a46:	d024      	beq.n	8006a92 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a48:	4942      	ldr	r1, [pc, #264]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a4a:	6849      	ldr	r1, [r1, #4]
 8006a4c:	0989      	lsrs	r1, r1, #6
 8006a4e:	4608      	mov	r0, r1
 8006a50:	f04f 0100 	mov.w	r1, #0
 8006a54:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006a58:	f04f 0500 	mov.w	r5, #0
 8006a5c:	ea00 0204 	and.w	r2, r0, r4
 8006a60:	ea01 0305 	and.w	r3, r1, r5
 8006a64:	493d      	ldr	r1, [pc, #244]	; (8006b5c <HAL_RCC_GetSysClockFreq+0x168>)
 8006a66:	fb01 f003 	mul.w	r0, r1, r3
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	fb01 f102 	mul.w	r1, r1, r2
 8006a70:	1844      	adds	r4, r0, r1
 8006a72:	493a      	ldr	r1, [pc, #232]	; (8006b5c <HAL_RCC_GetSysClockFreq+0x168>)
 8006a74:	fba2 0101 	umull	r0, r1, r2, r1
 8006a78:	1863      	adds	r3, r4, r1
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	f7fa f8f0 	bl	8000c68 <__aeabi_uldivmod>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	e04a      	b.n	8006b28 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a92:	4b30      	ldr	r3, [pc, #192]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	099b      	lsrs	r3, r3, #6
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006aa2:	f04f 0100 	mov.w	r1, #0
 8006aa6:	ea02 0400 	and.w	r4, r2, r0
 8006aaa:	ea03 0501 	and.w	r5, r3, r1
 8006aae:	4620      	mov	r0, r4
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	014b      	lsls	r3, r1, #5
 8006abc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ac0:	0142      	lsls	r2, r0, #5
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	1b00      	subs	r0, r0, r4
 8006ac8:	eb61 0105 	sbc.w	r1, r1, r5
 8006acc:	f04f 0200 	mov.w	r2, #0
 8006ad0:	f04f 0300 	mov.w	r3, #0
 8006ad4:	018b      	lsls	r3, r1, #6
 8006ad6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006ada:	0182      	lsls	r2, r0, #6
 8006adc:	1a12      	subs	r2, r2, r0
 8006ade:	eb63 0301 	sbc.w	r3, r3, r1
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f04f 0100 	mov.w	r1, #0
 8006aea:	00d9      	lsls	r1, r3, #3
 8006aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006af0:	00d0      	lsls	r0, r2, #3
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	1912      	adds	r2, r2, r4
 8006af8:	eb45 0303 	adc.w	r3, r5, r3
 8006afc:	f04f 0000 	mov.w	r0, #0
 8006b00:	f04f 0100 	mov.w	r1, #0
 8006b04:	0299      	lsls	r1, r3, #10
 8006b06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006b0a:	0290      	lsls	r0, r2, #10
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4610      	mov	r0, r2
 8006b12:	4619      	mov	r1, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	461a      	mov	r2, r3
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	f7fa f8a4 	bl	8000c68 <__aeabi_uldivmod>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4613      	mov	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b28:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	0c1b      	lsrs	r3, r3, #16
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	3301      	adds	r3, #1
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b40:	60bb      	str	r3, [r7, #8]
      break;
 8006b42:	e002      	b.n	8006b4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b44:	4b04      	ldr	r3, [pc, #16]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x164>)
 8006b46:	60bb      	str	r3, [r7, #8]
      break;
 8006b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bdb0      	pop	{r4, r5, r7, pc}
 8006b54:	40023800 	.word	0x40023800
 8006b58:	00f42400 	.word	0x00f42400
 8006b5c:	017d7840 	.word	0x017d7840

08006b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b64:	4b03      	ldr	r3, [pc, #12]	; (8006b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b66:	681b      	ldr	r3, [r3, #0]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	20000020 	.word	0x20000020

08006b78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e07b      	b.n	8006c82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d108      	bne.n	8006ba4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b9a:	d009      	beq.n	8006bb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	61da      	str	r2, [r3, #28]
 8006ba2:	e005      	b.n	8006bb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fd f976 	bl	8003ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c34:	ea42 0103 	orr.w	r1, r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	0c1b      	lsrs	r3, r3, #16
 8006c4e:	f003 0104 	and.w	r1, r3, #4
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	f003 0210 	and.w	r2, r3, #16
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b088      	sub	sp, #32
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	603b      	str	r3, [r7, #0]
 8006c96:	4613      	mov	r3, r2
 8006c98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d101      	bne.n	8006cac <HAL_SPI_Transmit+0x22>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e126      	b.n	8006efa <HAL_SPI_Transmit+0x270>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cb4:	f7fd fe68 	bl	8004988 <HAL_GetTick>
 8006cb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cba:	88fb      	ldrh	r3, [r7, #6]
 8006cbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d002      	beq.n	8006cd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cca:	2302      	movs	r3, #2
 8006ccc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cce:	e10b      	b.n	8006ee8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <HAL_SPI_Transmit+0x52>
 8006cd6:	88fb      	ldrh	r3, [r7, #6]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d102      	bne.n	8006ce2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ce0:	e102      	b.n	8006ee8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	88fa      	ldrh	r2, [r7, #6]
 8006cfa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	88fa      	ldrh	r2, [r7, #6]
 8006d00:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d28:	d10f      	bne.n	8006d4a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d54:	2b40      	cmp	r3, #64	; 0x40
 8006d56:	d007      	beq.n	8006d68 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d70:	d14b      	bne.n	8006e0a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <HAL_SPI_Transmit+0xf6>
 8006d7a:	8afb      	ldrh	r3, [r7, #22]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d13e      	bne.n	8006dfe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d84:	881a      	ldrh	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d90:	1c9a      	adds	r2, r3, #2
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006da4:	e02b      	b.n	8006dfe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d112      	bne.n	8006dda <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	881a      	ldrh	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc4:	1c9a      	adds	r2, r3, #2
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dd8:	e011      	b.n	8006dfe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dda:	f7fd fdd5 	bl	8004988 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d803      	bhi.n	8006df2 <HAL_SPI_Transmit+0x168>
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df0:	d102      	bne.n	8006df8 <HAL_SPI_Transmit+0x16e>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d102      	bne.n	8006dfe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006dfc:	e074      	b.n	8006ee8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1ce      	bne.n	8006da6 <HAL_SPI_Transmit+0x11c>
 8006e08:	e04c      	b.n	8006ea4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_SPI_Transmit+0x18e>
 8006e12:	8afb      	ldrh	r3, [r7, #22]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d140      	bne.n	8006e9a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	7812      	ldrb	r2, [r2, #0]
 8006e24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e3e:	e02c      	b.n	8006e9a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d113      	bne.n	8006e76 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	330c      	adds	r3, #12
 8006e58:	7812      	ldrb	r2, [r2, #0]
 8006e5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e74:	e011      	b.n	8006e9a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e76:	f7fd fd87 	bl	8004988 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d803      	bhi.n	8006e8e <HAL_SPI_Transmit+0x204>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8c:	d102      	bne.n	8006e94 <HAL_SPI_Transmit+0x20a>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d102      	bne.n	8006e9a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e98:	e026      	b.n	8006ee8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1cd      	bne.n	8006e40 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fc7d 	bl	80077a8 <SPI_EndRxTxTransaction>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10a      	bne.n	8006ed8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	613b      	str	r3, [r7, #16]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	613b      	str	r3, [r7, #16]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	613b      	str	r3, [r7, #16]
 8006ed6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	77fb      	strb	r3, [r7, #31]
 8006ee4:	e000      	b.n	8006ee8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006ee6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ef8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d110      	bne.n	8006f40 <HAL_SPI_Receive_IT+0x3c>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f26:	d10b      	bne.n	8006f40 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	68b9      	ldr	r1, [r7, #8]
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 f882 	bl	8007040 <HAL_SPI_TransmitReceive_IT>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	e076      	b.n	800702e <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d101      	bne.n	8006f4e <HAL_SPI_Receive_IT+0x4a>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	e06f      	b.n	800702e <HAL_SPI_Receive_IT+0x12a>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d002      	beq.n	8006f68 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8006f62:	2302      	movs	r3, #2
 8006f64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f66:	e05d      	b.n	8007024 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_SPI_Receive_IT+0x70>
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d102      	bne.n	8006f7a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f78:	e054      	b.n	8007024 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	88fa      	ldrh	r2, [r7, #6]
 8006f92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	88fa      	ldrh	r2, [r7, #6]
 8006f98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4a1e      	ldr	r2, [pc, #120]	; (8007038 <HAL_SPI_Receive_IT+0x134>)
 8006fbe:	641a      	str	r2, [r3, #64]	; 0x40
 8006fc0:	e002      	b.n	8006fc8 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4a1d      	ldr	r2, [pc, #116]	; (800703c <HAL_SPI_Receive_IT+0x138>)
 8006fc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fd0:	d10f      	bne.n	8006ff2 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fe0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ff0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007000:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700c:	2b40      	cmp	r3, #64	; 0x40
 800700e:	d008      	beq.n	8007022 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	e000      	b.n	8007024 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8007022:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800702c:	7dfb      	ldrb	r3, [r7, #23]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	08007585 	.word	0x08007585
 800703c:	0800753b 	.word	0x0800753b

08007040 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
 800704c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_SPI_TransmitReceive_IT+0x20>
 800705c:	2302      	movs	r3, #2
 800705e:	e075      	b.n	800714c <HAL_SPI_TransmitReceive_IT+0x10c>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800706e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007076:	7dbb      	ldrb	r3, [r7, #22]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d00d      	beq.n	8007098 <HAL_SPI_TransmitReceive_IT+0x58>
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007082:	d106      	bne.n	8007092 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d102      	bne.n	8007092 <HAL_SPI_TransmitReceive_IT+0x52>
 800708c:	7dbb      	ldrb	r3, [r7, #22]
 800708e:	2b04      	cmp	r3, #4
 8007090:	d002      	beq.n	8007098 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007092:	2302      	movs	r3, #2
 8007094:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007096:	e054      	b.n	8007142 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <HAL_SPI_TransmitReceive_IT+0x6a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_SPI_TransmitReceive_IT+0x6a>
 80070a4:	887b      	ldrh	r3, [r7, #2]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d102      	bne.n	80070b0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070ae:	e048      	b.n	8007142 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d003      	beq.n	80070c4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2205      	movs	r2, #5
 80070c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	887a      	ldrh	r2, [r7, #2]
 80070d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	887a      	ldrh	r2, [r7, #2]
 80070da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	887a      	ldrh	r2, [r7, #2]
 80070e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	887a      	ldrh	r2, [r7, #2]
 80070ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d006      	beq.n	8007104 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4a17      	ldr	r2, [pc, #92]	; (8007158 <HAL_SPI_TransmitReceive_IT+0x118>)
 80070fa:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4a17      	ldr	r2, [pc, #92]	; (800715c <HAL_SPI_TransmitReceive_IT+0x11c>)
 8007100:	645a      	str	r2, [r3, #68]	; 0x44
 8007102:	e005      	b.n	8007110 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4a16      	ldr	r2, [pc, #88]	; (8007160 <HAL_SPI_TransmitReceive_IT+0x120>)
 8007108:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4a15      	ldr	r2, [pc, #84]	; (8007164 <HAL_SPI_TransmitReceive_IT+0x124>)
 800710e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800711e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712a:	2b40      	cmp	r3, #64	; 0x40
 800712c:	d008      	beq.n	8007140 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	e000      	b.n	8007142 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8007140:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800714a:	7dfb      	ldrb	r3, [r7, #23]
}
 800714c:	4618      	mov	r0, r3
 800714e:	371c      	adds	r7, #28
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	0800747d 	.word	0x0800747d
 800715c:	080074dd 	.word	0x080074dd
 8007160:	080073b9 	.word	0x080073b9
 8007164:	0800741d 	.word	0x0800741d

08007168 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b088      	sub	sp, #32
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	099b      	lsrs	r3, r3, #6
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10f      	bne.n	80071ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	099b      	lsrs	r3, r3, #6
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d004      	beq.n	80071ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4798      	blx	r3
    return;
 80071aa:	e0d7      	b.n	800735c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	085b      	lsrs	r3, r3, #1
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00a      	beq.n	80071ce <HAL_SPI_IRQHandler+0x66>
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	09db      	lsrs	r3, r3, #7
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	4798      	blx	r3
    return;
 80071cc:	e0c6      	b.n	800735c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	095b      	lsrs	r3, r3, #5
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10c      	bne.n	80071f4 <HAL_SPI_IRQHandler+0x8c>
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	099b      	lsrs	r3, r3, #6
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	0a1b      	lsrs	r3, r3, #8
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 80b4 	beq.w	800735c <HAL_SPI_IRQHandler+0x1f4>
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	095b      	lsrs	r3, r3, #5
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80ad 	beq.w	800735c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	099b      	lsrs	r3, r3, #6
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d023      	beq.n	8007256 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b03      	cmp	r3, #3
 8007218:	d011      	beq.n	800723e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721e:	f043 0204 	orr.w	r2, r3, #4
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007226:	2300      	movs	r3, #0
 8007228:	617b      	str	r3, [r7, #20]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	617b      	str	r3, [r7, #20]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	617b      	str	r3, [r7, #20]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	e00b      	b.n	8007256 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800723e:	2300      	movs	r3, #0
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	613b      	str	r3, [r7, #16]
 8007252:	693b      	ldr	r3, [r7, #16]
        return;
 8007254:	e082      	b.n	800735c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	095b      	lsrs	r3, r3, #5
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d014      	beq.n	800728c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007266:	f043 0201 	orr.w	r2, r3, #1
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	0a1b      	lsrs	r3, r3, #8
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00c      	beq.n	80072b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729c:	f043 0208 	orr.w	r2, r3, #8
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80072a4:	2300      	movs	r3, #0
 80072a6:	60bb      	str	r3, [r7, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	60bb      	str	r3, [r7, #8]
 80072b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d04f      	beq.n	800735a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d104      	bne.n	80072e6 <HAL_SPI_IRQHandler+0x17e>
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d034      	beq.n	8007350 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0203 	bic.w	r2, r2, #3
 80072f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d011      	beq.n	8007322 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007302:	4a18      	ldr	r2, [pc, #96]	; (8007364 <HAL_SPI_IRQHandler+0x1fc>)
 8007304:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800730a:	4618      	mov	r0, r3
 800730c:	f7fd fc7d 	bl	8004c0a <HAL_DMA_Abort_IT>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007326:	2b00      	cmp	r3, #0
 8007328:	d016      	beq.n	8007358 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800732e:	4a0d      	ldr	r2, [pc, #52]	; (8007364 <HAL_SPI_IRQHandler+0x1fc>)
 8007330:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007336:	4618      	mov	r0, r3
 8007338:	f7fd fc67 	bl	8004c0a <HAL_DMA_Abort_IT>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00a      	beq.n	8007358 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007346:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800734e:	e003      	b.n	8007358 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f813 	bl	800737c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007356:	e000      	b.n	800735a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007358:	bf00      	nop
    return;
 800735a:	bf00      	nop
  }
}
 800735c:	3720      	adds	r7, #32
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	08007391 	.word	0x08007391

08007368 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f7ff ffe6 	bl	800737c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073b0:	bf00      	nop
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f103 020c 	add.w	r2, r3, #12
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10f      	bne.n	8007414 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007402:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa0c 	bl	800782c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	330c      	adds	r3, #12
 800742e:	7812      	ldrb	r2, [r2, #0]
 8007430:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800744e:	b29b      	uxth	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10f      	bne.n	8007474 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007462:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d102      	bne.n	8007474 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f9dc 	bl	800782c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	b292      	uxth	r2, r2
 8007490:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	1c9a      	adds	r2, r3, #2
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	3b01      	subs	r3, #1
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10f      	bne.n	80074d4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d102      	bne.n	80074d4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f9ac 	bl	800782c <SPI_CloseRxTx_ISR>
    }
  }
}
 80074d4:	bf00      	nop
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	881a      	ldrh	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f4:	1c9a      	adds	r2, r3, #2
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074fe:	b29b      	uxth	r3, r3
 8007500:	3b01      	subs	r3, #1
 8007502:	b29a      	uxth	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10f      	bne.n	8007532 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007520:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007526:	b29b      	uxth	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d102      	bne.n	8007532 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f97d 	bl	800782c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007532:	bf00      	nop
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f103 020c 	add.w	r2, r3, #12
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	7812      	ldrb	r2, [r2, #0]
 8007550:	b2d2      	uxtb	r2, r2
 8007552:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007562:	b29b      	uxth	r3, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	b29a      	uxth	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007570:	b29b      	uxth	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d102      	bne.n	800757c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f9cc 	bl	8007914 <SPI_CloseRx_ISR>
  }
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007596:	b292      	uxth	r2, r2
 8007598:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	1c9a      	adds	r2, r3, #2
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f9a9 	bl	8007914 <SPI_CloseRx_ISR>
  }
}
 80075c2:	bf00      	nop
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	603b      	str	r3, [r7, #0]
 80075d8:	4613      	mov	r3, r2
 80075da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075dc:	f7fd f9d4 	bl	8004988 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	4413      	add	r3, r2
 80075ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80075ec:	f7fd f9cc 	bl	8004988 <HAL_GetTick>
 80075f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80075f2:	4b39      	ldr	r3, [pc, #228]	; (80076d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	015b      	lsls	r3, r3, #5
 80075f8:	0d1b      	lsrs	r3, r3, #20
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	fb02 f303 	mul.w	r3, r2, r3
 8007600:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007602:	e054      	b.n	80076ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760a:	d050      	beq.n	80076ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800760c:	f7fd f9bc 	bl	8004988 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	429a      	cmp	r2, r3
 800761a:	d902      	bls.n	8007622 <SPI_WaitFlagStateUntilTimeout+0x56>
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d13d      	bne.n	800769e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007630:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800763a:	d111      	bne.n	8007660 <SPI_WaitFlagStateUntilTimeout+0x94>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007644:	d004      	beq.n	8007650 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800764e:	d107      	bne.n	8007660 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800765e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007668:	d10f      	bne.n	800768a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007688:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e017      	b.n	80076ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4013      	ands	r3, r2
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	bf0c      	ite	eq
 80076be:	2301      	moveq	r3, #1
 80076c0:	2300      	movne	r3, #0
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d19b      	bne.n	8007604 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3720      	adds	r7, #32
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000020 	.word	0x20000020

080076dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076f0:	d111      	bne.n	8007716 <SPI_EndRxTransaction+0x3a>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076fa:	d004      	beq.n	8007706 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007704:	d107      	bne.n	8007716 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007714:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800771e:	d12a      	bne.n	8007776 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007728:	d012      	beq.n	8007750 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2200      	movs	r2, #0
 8007732:	2180      	movs	r1, #128	; 0x80
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f7ff ff49 	bl	80075cc <SPI_WaitFlagStateUntilTimeout>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d02d      	beq.n	800779c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007744:	f043 0220 	orr.w	r2, r3, #32
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e026      	b.n	800779e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2200      	movs	r2, #0
 8007758:	2101      	movs	r1, #1
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7ff ff36 	bl	80075cc <SPI_WaitFlagStateUntilTimeout>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d01a      	beq.n	800779c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776a:	f043 0220 	orr.w	r2, r3, #32
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e013      	b.n	800779e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2200      	movs	r2, #0
 800777e:	2101      	movs	r1, #1
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff ff23 	bl	80075cc <SPI_WaitFlagStateUntilTimeout>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d007      	beq.n	800779c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007790:	f043 0220 	orr.w	r2, r3, #32
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e000      	b.n	800779e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077b4:	4b1b      	ldr	r3, [pc, #108]	; (8007824 <SPI_EndRxTxTransaction+0x7c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a1b      	ldr	r2, [pc, #108]	; (8007828 <SPI_EndRxTxTransaction+0x80>)
 80077ba:	fba2 2303 	umull	r2, r3, r2, r3
 80077be:	0d5b      	lsrs	r3, r3, #21
 80077c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077c4:	fb02 f303 	mul.w	r3, r2, r3
 80077c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077d2:	d112      	bne.n	80077fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2200      	movs	r2, #0
 80077dc:	2180      	movs	r1, #128	; 0x80
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f7ff fef4 	bl	80075cc <SPI_WaitFlagStateUntilTimeout>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d016      	beq.n	8007818 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ee:	f043 0220 	orr.w	r2, r3, #32
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e00f      	b.n	800781a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	3b01      	subs	r3, #1
 8007804:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007810:	2b80      	cmp	r3, #128	; 0x80
 8007812:	d0f2      	beq.n	80077fa <SPI_EndRxTxTransaction+0x52>
 8007814:	e000      	b.n	8007818 <SPI_EndRxTxTransaction+0x70>
        break;
 8007816:	bf00      	nop
  }

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20000020 	.word	0x20000020
 8007828:	165e9f81 	.word	0x165e9f81

0800782c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007834:	4b35      	ldr	r3, [pc, #212]	; (800790c <SPI_CloseRxTx_ISR+0xe0>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a35      	ldr	r2, [pc, #212]	; (8007910 <SPI_CloseRxTx_ISR+0xe4>)
 800783a:	fba2 2303 	umull	r2, r3, r2, r3
 800783e:	0a5b      	lsrs	r3, r3, #9
 8007840:	2264      	movs	r2, #100	; 0x64
 8007842:	fb02 f303 	mul.w	r3, r2, r3
 8007846:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007848:	f7fd f89e 	bl	8004988 <HAL_GetTick>
 800784c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0220 	bic.w	r2, r2, #32
 800785c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d106      	bne.n	8007872 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007868:	f043 0220 	orr.w	r2, r3, #32
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007870:	e009      	b.n	8007886 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	3b01      	subs	r3, #1
 8007876:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0eb      	beq.n	800785e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	2164      	movs	r1, #100	; 0x64
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff ff8c 	bl	80077a8 <SPI_EndRxTxTransaction>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789a:	f043 0220 	orr.w	r2, r3, #32
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10a      	bne.n	80078c0 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	60fb      	str	r3, [r7, #12]
 80078be:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d115      	bne.n	80078f4 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	d107      	bne.n	80078e4 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7fc faaf 	bl	8003e40 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80078e2:	e00e      	b.n	8007902 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff fd3b 	bl	8007368 <HAL_SPI_TxRxCpltCallback>
}
 80078f2:	e006      	b.n	8007902 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7ff fd3d 	bl	800737c <HAL_SPI_ErrorCallback>
}
 8007902:	bf00      	nop
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20000020 	.word	0x20000020
 8007910:	057619f1 	.word	0x057619f1

08007914 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685a      	ldr	r2, [r3, #4]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800792a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800792c:	f7fd f82c 	bl	8004988 <HAL_GetTick>
 8007930:	4603      	mov	r3, r0
 8007932:	461a      	mov	r2, r3
 8007934:	2164      	movs	r1, #100	; 0x64
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff fed0 	bl	80076dc <SPI_EndRxTransaction>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d005      	beq.n	800794e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007946:	f043 0220 	orr.w	r2, r3, #32
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007956:	2300      	movs	r3, #0
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	60fb      	str	r3, [r7, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007978:	2b00      	cmp	r3, #0
 800797a:	d103      	bne.n	8007984 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7fc fa5f 	bl	8003e40 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007982:	e002      	b.n	800798a <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff fcf9 	bl	800737c <HAL_SPI_ErrorCallback>
}
 800798a:	bf00      	nop
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e041      	b.n	8007a28 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d106      	bne.n	80079be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7fc facf 	bl	8003f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3304      	adds	r3, #4
 80079ce:	4619      	mov	r1, r3
 80079d0:	4610      	mov	r0, r2
 80079d2:	f000 f9cd 	bl	8007d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d001      	beq.n	8007a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e04e      	b.n	8007ae6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0201 	orr.w	r2, r2, #1
 8007a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a23      	ldr	r2, [pc, #140]	; (8007af4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d022      	beq.n	8007ab0 <HAL_TIM_Base_Start_IT+0x80>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a72:	d01d      	beq.n	8007ab0 <HAL_TIM_Base_Start_IT+0x80>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1f      	ldr	r2, [pc, #124]	; (8007af8 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d018      	beq.n	8007ab0 <HAL_TIM_Base_Start_IT+0x80>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a1e      	ldr	r2, [pc, #120]	; (8007afc <HAL_TIM_Base_Start_IT+0xcc>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d013      	beq.n	8007ab0 <HAL_TIM_Base_Start_IT+0x80>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a1c      	ldr	r2, [pc, #112]	; (8007b00 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d00e      	beq.n	8007ab0 <HAL_TIM_Base_Start_IT+0x80>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a1b      	ldr	r2, [pc, #108]	; (8007b04 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d009      	beq.n	8007ab0 <HAL_TIM_Base_Start_IT+0x80>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a19      	ldr	r2, [pc, #100]	; (8007b08 <HAL_TIM_Base_Start_IT+0xd8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d004      	beq.n	8007ab0 <HAL_TIM_Base_Start_IT+0x80>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a18      	ldr	r2, [pc, #96]	; (8007b0c <HAL_TIM_Base_Start_IT+0xdc>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d111      	bne.n	8007ad4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b06      	cmp	r3, #6
 8007ac0:	d010      	beq.n	8007ae4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f042 0201 	orr.w	r2, r2, #1
 8007ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad2:	e007      	b.n	8007ae4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f042 0201 	orr.w	r2, r2, #1
 8007ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	40010000 	.word	0x40010000
 8007af8:	40000400 	.word	0x40000400
 8007afc:	40000800 	.word	0x40000800
 8007b00:	40000c00 	.word	0x40000c00
 8007b04:	40010400 	.word	0x40010400
 8007b08:	40014000 	.word	0x40014000
 8007b0c:	40001800 	.word	0x40001800

08007b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d122      	bne.n	8007b6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d11b      	bne.n	8007b6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f06f 0202 	mvn.w	r2, #2
 8007b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	f003 0303 	and.w	r3, r3, #3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f8ee 	bl	8007d34 <HAL_TIM_IC_CaptureCallback>
 8007b58:	e005      	b.n	8007b66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f8e0 	bl	8007d20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f8f1 	bl	8007d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	f003 0304 	and.w	r3, r3, #4
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d122      	bne.n	8007bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d11b      	bne.n	8007bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f06f 0204 	mvn.w	r2, #4
 8007b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2202      	movs	r2, #2
 8007b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f8c4 	bl	8007d34 <HAL_TIM_IC_CaptureCallback>
 8007bac:	e005      	b.n	8007bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f8b6 	bl	8007d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f8c7 	bl	8007d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	f003 0308 	and.w	r3, r3, #8
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	d122      	bne.n	8007c14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	f003 0308 	and.w	r3, r3, #8
 8007bd8:	2b08      	cmp	r3, #8
 8007bda:	d11b      	bne.n	8007c14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f06f 0208 	mvn.w	r2, #8
 8007be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2204      	movs	r2, #4
 8007bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f89a 	bl	8007d34 <HAL_TIM_IC_CaptureCallback>
 8007c00:	e005      	b.n	8007c0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f88c 	bl	8007d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f89d 	bl	8007d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	f003 0310 	and.w	r3, r3, #16
 8007c1e:	2b10      	cmp	r3, #16
 8007c20:	d122      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f003 0310 	and.w	r3, r3, #16
 8007c2c:	2b10      	cmp	r3, #16
 8007c2e:	d11b      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f06f 0210 	mvn.w	r2, #16
 8007c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2208      	movs	r2, #8
 8007c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f870 	bl	8007d34 <HAL_TIM_IC_CaptureCallback>
 8007c54:	e005      	b.n	8007c62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f862 	bl	8007d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f873 	bl	8007d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d10e      	bne.n	8007c94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d107      	bne.n	8007c94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f06f 0201 	mvn.w	r2, #1
 8007c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7fc f85c 	bl	8003d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9e:	2b80      	cmp	r3, #128	; 0x80
 8007ca0:	d10e      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cac:	2b80      	cmp	r3, #128	; 0x80
 8007cae:	d107      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f902 	bl	8007ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cca:	2b40      	cmp	r3, #64	; 0x40
 8007ccc:	d10e      	bne.n	8007cec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd8:	2b40      	cmp	r3, #64	; 0x40
 8007cda:	d107      	bne.n	8007cec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f838 	bl	8007d5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b20      	cmp	r3, #32
 8007cf8:	d10e      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b20      	cmp	r3, #32
 8007d06:	d107      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0220 	mvn.w	r2, #32
 8007d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f8cc 	bl	8007eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d18:	bf00      	nop
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a40      	ldr	r2, [pc, #256]	; (8007e84 <TIM_Base_SetConfig+0x114>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d013      	beq.n	8007db0 <TIM_Base_SetConfig+0x40>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8e:	d00f      	beq.n	8007db0 <TIM_Base_SetConfig+0x40>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a3d      	ldr	r2, [pc, #244]	; (8007e88 <TIM_Base_SetConfig+0x118>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d00b      	beq.n	8007db0 <TIM_Base_SetConfig+0x40>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a3c      	ldr	r2, [pc, #240]	; (8007e8c <TIM_Base_SetConfig+0x11c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d007      	beq.n	8007db0 <TIM_Base_SetConfig+0x40>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a3b      	ldr	r2, [pc, #236]	; (8007e90 <TIM_Base_SetConfig+0x120>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d003      	beq.n	8007db0 <TIM_Base_SetConfig+0x40>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a3a      	ldr	r2, [pc, #232]	; (8007e94 <TIM_Base_SetConfig+0x124>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d108      	bne.n	8007dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a2f      	ldr	r2, [pc, #188]	; (8007e84 <TIM_Base_SetConfig+0x114>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d02b      	beq.n	8007e22 <TIM_Base_SetConfig+0xb2>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd0:	d027      	beq.n	8007e22 <TIM_Base_SetConfig+0xb2>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a2c      	ldr	r2, [pc, #176]	; (8007e88 <TIM_Base_SetConfig+0x118>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d023      	beq.n	8007e22 <TIM_Base_SetConfig+0xb2>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a2b      	ldr	r2, [pc, #172]	; (8007e8c <TIM_Base_SetConfig+0x11c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d01f      	beq.n	8007e22 <TIM_Base_SetConfig+0xb2>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a2a      	ldr	r2, [pc, #168]	; (8007e90 <TIM_Base_SetConfig+0x120>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d01b      	beq.n	8007e22 <TIM_Base_SetConfig+0xb2>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a29      	ldr	r2, [pc, #164]	; (8007e94 <TIM_Base_SetConfig+0x124>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d017      	beq.n	8007e22 <TIM_Base_SetConfig+0xb2>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a28      	ldr	r2, [pc, #160]	; (8007e98 <TIM_Base_SetConfig+0x128>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d013      	beq.n	8007e22 <TIM_Base_SetConfig+0xb2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a27      	ldr	r2, [pc, #156]	; (8007e9c <TIM_Base_SetConfig+0x12c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d00f      	beq.n	8007e22 <TIM_Base_SetConfig+0xb2>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a26      	ldr	r2, [pc, #152]	; (8007ea0 <TIM_Base_SetConfig+0x130>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d00b      	beq.n	8007e22 <TIM_Base_SetConfig+0xb2>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a25      	ldr	r2, [pc, #148]	; (8007ea4 <TIM_Base_SetConfig+0x134>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d007      	beq.n	8007e22 <TIM_Base_SetConfig+0xb2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a24      	ldr	r2, [pc, #144]	; (8007ea8 <TIM_Base_SetConfig+0x138>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d003      	beq.n	8007e22 <TIM_Base_SetConfig+0xb2>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a23      	ldr	r2, [pc, #140]	; (8007eac <TIM_Base_SetConfig+0x13c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d108      	bne.n	8007e34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689a      	ldr	r2, [r3, #8]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a0a      	ldr	r2, [pc, #40]	; (8007e84 <TIM_Base_SetConfig+0x114>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d003      	beq.n	8007e68 <TIM_Base_SetConfig+0xf8>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a0c      	ldr	r2, [pc, #48]	; (8007e94 <TIM_Base_SetConfig+0x124>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d103      	bne.n	8007e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	691a      	ldr	r2, [r3, #16]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	615a      	str	r2, [r3, #20]
}
 8007e76:	bf00      	nop
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	40010000 	.word	0x40010000
 8007e88:	40000400 	.word	0x40000400
 8007e8c:	40000800 	.word	0x40000800
 8007e90:	40000c00 	.word	0x40000c00
 8007e94:	40010400 	.word	0x40010400
 8007e98:	40014000 	.word	0x40014000
 8007e9c:	40014400 	.word	0x40014400
 8007ea0:	40014800 	.word	0x40014800
 8007ea4:	40001800 	.word	0x40001800
 8007ea8:	40001c00 	.word	0x40001c00
 8007eac:	40002000 	.word	0x40002000

08007eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007ede:	4b8d      	ldr	r3, [pc, #564]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007ee0:	22c0      	movs	r2, #192	; 0xc0
 8007ee2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007ee4:	4b8b      	ldr	r3, [pc, #556]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007ee6:	22a8      	movs	r2, #168	; 0xa8
 8007ee8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8007eea:	4b8a      	ldr	r3, [pc, #552]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8007ef0:	4b88      	ldr	r3, [pc, #544]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007ef2:	226f      	movs	r2, #111	; 0x6f
 8007ef4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007ef6:	4b88      	ldr	r3, [pc, #544]	; (8008118 <MX_LWIP_Init+0x240>)
 8007ef8:	22ff      	movs	r2, #255	; 0xff
 8007efa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007efc:	4b86      	ldr	r3, [pc, #536]	; (8008118 <MX_LWIP_Init+0x240>)
 8007efe:	22ff      	movs	r2, #255	; 0xff
 8007f00:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007f02:	4b85      	ldr	r3, [pc, #532]	; (8008118 <MX_LWIP_Init+0x240>)
 8007f04:	22ff      	movs	r2, #255	; 0xff
 8007f06:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007f08:	4b83      	ldr	r3, [pc, #524]	; (8008118 <MX_LWIP_Init+0x240>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007f0e:	4b83      	ldr	r3, [pc, #524]	; (800811c <MX_LWIP_Init+0x244>)
 8007f10:	22c0      	movs	r2, #192	; 0xc0
 8007f12:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007f14:	4b81      	ldr	r3, [pc, #516]	; (800811c <MX_LWIP_Init+0x244>)
 8007f16:	22a8      	movs	r2, #168	; 0xa8
 8007f18:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007f1a:	4b80      	ldr	r3, [pc, #512]	; (800811c <MX_LWIP_Init+0x244>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007f20:	4b7e      	ldr	r3, [pc, #504]	; (800811c <MX_LWIP_Init+0x244>)
 8007f22:	2201      	movs	r2, #1
 8007f24:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007f26:	f000 fcab 	bl	8008880 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007f2a:	4b7a      	ldr	r3, [pc, #488]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	061a      	lsls	r2, r3, #24
 8007f30:	4b78      	ldr	r3, [pc, #480]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	041b      	lsls	r3, r3, #16
 8007f36:	431a      	orrs	r2, r3
 8007f38:	4b76      	ldr	r3, [pc, #472]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007f3a:	789b      	ldrb	r3, [r3, #2]
 8007f3c:	021b      	lsls	r3, r3, #8
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	4a74      	ldr	r2, [pc, #464]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007f42:	78d2      	ldrb	r2, [r2, #3]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	061a      	lsls	r2, r3, #24
 8007f48:	4b72      	ldr	r3, [pc, #456]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	0619      	lsls	r1, r3, #24
 8007f4e:	4b71      	ldr	r3, [pc, #452]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007f50:	785b      	ldrb	r3, [r3, #1]
 8007f52:	041b      	lsls	r3, r3, #16
 8007f54:	4319      	orrs	r1, r3
 8007f56:	4b6f      	ldr	r3, [pc, #444]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007f58:	789b      	ldrb	r3, [r3, #2]
 8007f5a:	021b      	lsls	r3, r3, #8
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	496d      	ldr	r1, [pc, #436]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007f60:	78c9      	ldrb	r1, [r1, #3]
 8007f62:	430b      	orrs	r3, r1
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	4b69      	ldr	r3, [pc, #420]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	0619      	lsls	r1, r3, #24
 8007f72:	4b68      	ldr	r3, [pc, #416]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007f74:	785b      	ldrb	r3, [r3, #1]
 8007f76:	041b      	lsls	r3, r3, #16
 8007f78:	4319      	orrs	r1, r3
 8007f7a:	4b66      	ldr	r3, [pc, #408]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007f7c:	789b      	ldrb	r3, [r3, #2]
 8007f7e:	021b      	lsls	r3, r3, #8
 8007f80:	430b      	orrs	r3, r1
 8007f82:	4964      	ldr	r1, [pc, #400]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007f84:	78c9      	ldrb	r1, [r1, #3]
 8007f86:	430b      	orrs	r3, r1
 8007f88:	0a1b      	lsrs	r3, r3, #8
 8007f8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	4b60      	ldr	r3, [pc, #384]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	0619      	lsls	r1, r3, #24
 8007f96:	4b5f      	ldr	r3, [pc, #380]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007f98:	785b      	ldrb	r3, [r3, #1]
 8007f9a:	041b      	lsls	r3, r3, #16
 8007f9c:	4319      	orrs	r1, r3
 8007f9e:	4b5d      	ldr	r3, [pc, #372]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007fa0:	789b      	ldrb	r3, [r3, #2]
 8007fa2:	021b      	lsls	r3, r3, #8
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	495b      	ldr	r1, [pc, #364]	; (8008114 <MX_LWIP_Init+0x23c>)
 8007fa8:	78c9      	ldrb	r1, [r1, #3]
 8007faa:	430b      	orrs	r3, r1
 8007fac:	0e1b      	lsrs	r3, r3, #24
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	4a5b      	ldr	r2, [pc, #364]	; (8008120 <MX_LWIP_Init+0x248>)
 8007fb2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007fb4:	4b58      	ldr	r3, [pc, #352]	; (8008118 <MX_LWIP_Init+0x240>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	061a      	lsls	r2, r3, #24
 8007fba:	4b57      	ldr	r3, [pc, #348]	; (8008118 <MX_LWIP_Init+0x240>)
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	041b      	lsls	r3, r3, #16
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	4b55      	ldr	r3, [pc, #340]	; (8008118 <MX_LWIP_Init+0x240>)
 8007fc4:	789b      	ldrb	r3, [r3, #2]
 8007fc6:	021b      	lsls	r3, r3, #8
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	4a53      	ldr	r2, [pc, #332]	; (8008118 <MX_LWIP_Init+0x240>)
 8007fcc:	78d2      	ldrb	r2, [r2, #3]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	061a      	lsls	r2, r3, #24
 8007fd2:	4b51      	ldr	r3, [pc, #324]	; (8008118 <MX_LWIP_Init+0x240>)
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	0619      	lsls	r1, r3, #24
 8007fd8:	4b4f      	ldr	r3, [pc, #316]	; (8008118 <MX_LWIP_Init+0x240>)
 8007fda:	785b      	ldrb	r3, [r3, #1]
 8007fdc:	041b      	lsls	r3, r3, #16
 8007fde:	4319      	orrs	r1, r3
 8007fe0:	4b4d      	ldr	r3, [pc, #308]	; (8008118 <MX_LWIP_Init+0x240>)
 8007fe2:	789b      	ldrb	r3, [r3, #2]
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	430b      	orrs	r3, r1
 8007fe8:	494b      	ldr	r1, [pc, #300]	; (8008118 <MX_LWIP_Init+0x240>)
 8007fea:	78c9      	ldrb	r1, [r1, #3]
 8007fec:	430b      	orrs	r3, r1
 8007fee:	021b      	lsls	r3, r3, #8
 8007ff0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	4b48      	ldr	r3, [pc, #288]	; (8008118 <MX_LWIP_Init+0x240>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	0619      	lsls	r1, r3, #24
 8007ffc:	4b46      	ldr	r3, [pc, #280]	; (8008118 <MX_LWIP_Init+0x240>)
 8007ffe:	785b      	ldrb	r3, [r3, #1]
 8008000:	041b      	lsls	r3, r3, #16
 8008002:	4319      	orrs	r1, r3
 8008004:	4b44      	ldr	r3, [pc, #272]	; (8008118 <MX_LWIP_Init+0x240>)
 8008006:	789b      	ldrb	r3, [r3, #2]
 8008008:	021b      	lsls	r3, r3, #8
 800800a:	430b      	orrs	r3, r1
 800800c:	4942      	ldr	r1, [pc, #264]	; (8008118 <MX_LWIP_Init+0x240>)
 800800e:	78c9      	ldrb	r1, [r1, #3]
 8008010:	430b      	orrs	r3, r1
 8008012:	0a1b      	lsrs	r3, r3, #8
 8008014:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008018:	431a      	orrs	r2, r3
 800801a:	4b3f      	ldr	r3, [pc, #252]	; (8008118 <MX_LWIP_Init+0x240>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	0619      	lsls	r1, r3, #24
 8008020:	4b3d      	ldr	r3, [pc, #244]	; (8008118 <MX_LWIP_Init+0x240>)
 8008022:	785b      	ldrb	r3, [r3, #1]
 8008024:	041b      	lsls	r3, r3, #16
 8008026:	4319      	orrs	r1, r3
 8008028:	4b3b      	ldr	r3, [pc, #236]	; (8008118 <MX_LWIP_Init+0x240>)
 800802a:	789b      	ldrb	r3, [r3, #2]
 800802c:	021b      	lsls	r3, r3, #8
 800802e:	430b      	orrs	r3, r1
 8008030:	4939      	ldr	r1, [pc, #228]	; (8008118 <MX_LWIP_Init+0x240>)
 8008032:	78c9      	ldrb	r1, [r1, #3]
 8008034:	430b      	orrs	r3, r1
 8008036:	0e1b      	lsrs	r3, r3, #24
 8008038:	4313      	orrs	r3, r2
 800803a:	4a3a      	ldr	r2, [pc, #232]	; (8008124 <MX_LWIP_Init+0x24c>)
 800803c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800803e:	4b37      	ldr	r3, [pc, #220]	; (800811c <MX_LWIP_Init+0x244>)
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	061a      	lsls	r2, r3, #24
 8008044:	4b35      	ldr	r3, [pc, #212]	; (800811c <MX_LWIP_Init+0x244>)
 8008046:	785b      	ldrb	r3, [r3, #1]
 8008048:	041b      	lsls	r3, r3, #16
 800804a:	431a      	orrs	r2, r3
 800804c:	4b33      	ldr	r3, [pc, #204]	; (800811c <MX_LWIP_Init+0x244>)
 800804e:	789b      	ldrb	r3, [r3, #2]
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	4313      	orrs	r3, r2
 8008054:	4a31      	ldr	r2, [pc, #196]	; (800811c <MX_LWIP_Init+0x244>)
 8008056:	78d2      	ldrb	r2, [r2, #3]
 8008058:	4313      	orrs	r3, r2
 800805a:	061a      	lsls	r2, r3, #24
 800805c:	4b2f      	ldr	r3, [pc, #188]	; (800811c <MX_LWIP_Init+0x244>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	0619      	lsls	r1, r3, #24
 8008062:	4b2e      	ldr	r3, [pc, #184]	; (800811c <MX_LWIP_Init+0x244>)
 8008064:	785b      	ldrb	r3, [r3, #1]
 8008066:	041b      	lsls	r3, r3, #16
 8008068:	4319      	orrs	r1, r3
 800806a:	4b2c      	ldr	r3, [pc, #176]	; (800811c <MX_LWIP_Init+0x244>)
 800806c:	789b      	ldrb	r3, [r3, #2]
 800806e:	021b      	lsls	r3, r3, #8
 8008070:	430b      	orrs	r3, r1
 8008072:	492a      	ldr	r1, [pc, #168]	; (800811c <MX_LWIP_Init+0x244>)
 8008074:	78c9      	ldrb	r1, [r1, #3]
 8008076:	430b      	orrs	r3, r1
 8008078:	021b      	lsls	r3, r3, #8
 800807a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800807e:	431a      	orrs	r2, r3
 8008080:	4b26      	ldr	r3, [pc, #152]	; (800811c <MX_LWIP_Init+0x244>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	0619      	lsls	r1, r3, #24
 8008086:	4b25      	ldr	r3, [pc, #148]	; (800811c <MX_LWIP_Init+0x244>)
 8008088:	785b      	ldrb	r3, [r3, #1]
 800808a:	041b      	lsls	r3, r3, #16
 800808c:	4319      	orrs	r1, r3
 800808e:	4b23      	ldr	r3, [pc, #140]	; (800811c <MX_LWIP_Init+0x244>)
 8008090:	789b      	ldrb	r3, [r3, #2]
 8008092:	021b      	lsls	r3, r3, #8
 8008094:	430b      	orrs	r3, r1
 8008096:	4921      	ldr	r1, [pc, #132]	; (800811c <MX_LWIP_Init+0x244>)
 8008098:	78c9      	ldrb	r1, [r1, #3]
 800809a:	430b      	orrs	r3, r1
 800809c:	0a1b      	lsrs	r3, r3, #8
 800809e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080a2:	431a      	orrs	r2, r3
 80080a4:	4b1d      	ldr	r3, [pc, #116]	; (800811c <MX_LWIP_Init+0x244>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	0619      	lsls	r1, r3, #24
 80080aa:	4b1c      	ldr	r3, [pc, #112]	; (800811c <MX_LWIP_Init+0x244>)
 80080ac:	785b      	ldrb	r3, [r3, #1]
 80080ae:	041b      	lsls	r3, r3, #16
 80080b0:	4319      	orrs	r1, r3
 80080b2:	4b1a      	ldr	r3, [pc, #104]	; (800811c <MX_LWIP_Init+0x244>)
 80080b4:	789b      	ldrb	r3, [r3, #2]
 80080b6:	021b      	lsls	r3, r3, #8
 80080b8:	430b      	orrs	r3, r1
 80080ba:	4918      	ldr	r1, [pc, #96]	; (800811c <MX_LWIP_Init+0x244>)
 80080bc:	78c9      	ldrb	r1, [r1, #3]
 80080be:	430b      	orrs	r3, r1
 80080c0:	0e1b      	lsrs	r3, r3, #24
 80080c2:	4313      	orrs	r3, r2
 80080c4:	4a18      	ldr	r2, [pc, #96]	; (8008128 <MX_LWIP_Init+0x250>)
 80080c6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80080c8:	4b18      	ldr	r3, [pc, #96]	; (800812c <MX_LWIP_Init+0x254>)
 80080ca:	9302      	str	r3, [sp, #8]
 80080cc:	4b18      	ldr	r3, [pc, #96]	; (8008130 <MX_LWIP_Init+0x258>)
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	2300      	movs	r3, #0
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	4b14      	ldr	r3, [pc, #80]	; (8008128 <MX_LWIP_Init+0x250>)
 80080d6:	4a13      	ldr	r2, [pc, #76]	; (8008124 <MX_LWIP_Init+0x24c>)
 80080d8:	4911      	ldr	r1, [pc, #68]	; (8008120 <MX_LWIP_Init+0x248>)
 80080da:	4816      	ldr	r0, [pc, #88]	; (8008134 <MX_LWIP_Init+0x25c>)
 80080dc:	f001 f876 	bl	80091cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80080e0:	4814      	ldr	r0, [pc, #80]	; (8008134 <MX_LWIP_Init+0x25c>)
 80080e2:	f001 fa25 	bl	8009530 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80080e6:	4b13      	ldr	r3, [pc, #76]	; (8008134 <MX_LWIP_Init+0x25c>)
 80080e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80080ec:	089b      	lsrs	r3, r3, #2
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80080f8:	480e      	ldr	r0, [pc, #56]	; (8008134 <MX_LWIP_Init+0x25c>)
 80080fa:	f001 fa29 	bl	8009550 <netif_set_up>
 80080fe:	e002      	b.n	8008106 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008100:	480c      	ldr	r0, [pc, #48]	; (8008134 <MX_LWIP_Init+0x25c>)
 8008102:	f001 fa91 	bl	8009628 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8008106:	490c      	ldr	r1, [pc, #48]	; (8008138 <MX_LWIP_Init+0x260>)
 8008108:	480a      	ldr	r0, [pc, #40]	; (8008134 <MX_LWIP_Init+0x25c>)
 800810a:	f001 fabf 	bl	800968c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800810e:	bf00      	nop
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	200008e0 	.word	0x200008e0
 8008118:	200008dc 	.word	0x200008dc
 800811c:	2000089c 	.word	0x2000089c
 8008120:	200008d8 	.word	0x200008d8
 8008124:	200008e4 	.word	0x200008e4
 8008128:	200008e8 	.word	0x200008e8
 800812c:	08012715 	.word	0x08012715
 8008130:	080086ad 	.word	0x080086ad
 8008134:	200008a0 	.word	0x200008a0
 8008138:	08008719 	.word	0x08008719

0800813c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8008140:	4803      	ldr	r0, [pc, #12]	; (8008150 <MX_LWIP_Process+0x14>)
 8008142:	f000 fa93 	bl	800866c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8008146:	f007 fbb1 	bl	800f8ac <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800814a:	bf00      	nop
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	200008a0 	.word	0x200008a0

08008154 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b08e      	sub	sp, #56	; 0x38
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800815c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008160:	2200      	movs	r2, #0
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	605a      	str	r2, [r3, #4]
 8008166:	609a      	str	r2, [r3, #8]
 8008168:	60da      	str	r2, [r3, #12]
 800816a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a46      	ldr	r2, [pc, #280]	; (800828c <HAL_ETH_MspInit+0x138>)
 8008172:	4293      	cmp	r3, r2
 8008174:	f040 8085 	bne.w	8008282 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008178:	2300      	movs	r3, #0
 800817a:	623b      	str	r3, [r7, #32]
 800817c:	4b44      	ldr	r3, [pc, #272]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 800817e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008180:	4a43      	ldr	r2, [pc, #268]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 8008182:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008186:	6313      	str	r3, [r2, #48]	; 0x30
 8008188:	4b41      	ldr	r3, [pc, #260]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 800818a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008190:	623b      	str	r3, [r7, #32]
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	2300      	movs	r3, #0
 8008196:	61fb      	str	r3, [r7, #28]
 8008198:	4b3d      	ldr	r3, [pc, #244]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 800819a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819c:	4a3c      	ldr	r2, [pc, #240]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 800819e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081a2:	6313      	str	r3, [r2, #48]	; 0x30
 80081a4:	4b3a      	ldr	r3, [pc, #232]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 80081a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081ac:	61fb      	str	r3, [r7, #28]
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	2300      	movs	r3, #0
 80081b2:	61bb      	str	r3, [r7, #24]
 80081b4:	4b36      	ldr	r3, [pc, #216]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 80081b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b8:	4a35      	ldr	r2, [pc, #212]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 80081ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081be:	6313      	str	r3, [r2, #48]	; 0x30
 80081c0:	4b33      	ldr	r3, [pc, #204]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081c8:	61bb      	str	r3, [r7, #24]
 80081ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	4b2f      	ldr	r3, [pc, #188]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 80081d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d4:	4a2e      	ldr	r2, [pc, #184]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 80081d6:	f043 0304 	orr.w	r3, r3, #4
 80081da:	6313      	str	r3, [r2, #48]	; 0x30
 80081dc:	4b2c      	ldr	r3, [pc, #176]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 80081de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e0:	f003 0304 	and.w	r3, r3, #4
 80081e4:	617b      	str	r3, [r7, #20]
 80081e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081e8:	2300      	movs	r3, #0
 80081ea:	613b      	str	r3, [r7, #16]
 80081ec:	4b28      	ldr	r3, [pc, #160]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 80081ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f0:	4a27      	ldr	r2, [pc, #156]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 80081f2:	f043 0301 	orr.w	r3, r3, #1
 80081f6:	6313      	str	r3, [r2, #48]	; 0x30
 80081f8:	4b25      	ldr	r3, [pc, #148]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 80081fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	613b      	str	r3, [r7, #16]
 8008202:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008204:	2300      	movs	r3, #0
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	4b21      	ldr	r3, [pc, #132]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 800820a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820c:	4a20      	ldr	r2, [pc, #128]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 800820e:	f043 0302 	orr.w	r3, r3, #2
 8008212:	6313      	str	r3, [r2, #48]	; 0x30
 8008214:	4b1e      	ldr	r3, [pc, #120]	; (8008290 <HAL_ETH_MspInit+0x13c>)
 8008216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	60fb      	str	r3, [r7, #12]
 800821e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008220:	2332      	movs	r3, #50	; 0x32
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008224:	2302      	movs	r3, #2
 8008226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008228:	2300      	movs	r3, #0
 800822a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800822c:	2303      	movs	r3, #3
 800822e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008230:	230b      	movs	r3, #11
 8008232:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008238:	4619      	mov	r1, r3
 800823a:	4816      	ldr	r0, [pc, #88]	; (8008294 <HAL_ETH_MspInit+0x140>)
 800823c:	f7fd fe2e 	bl	8005e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008240:	2386      	movs	r3, #134	; 0x86
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008244:	2302      	movs	r3, #2
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008248:	2300      	movs	r3, #0
 800824a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800824c:	2303      	movs	r3, #3
 800824e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008250:	230b      	movs	r3, #11
 8008252:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008258:	4619      	mov	r1, r3
 800825a:	480f      	ldr	r0, [pc, #60]	; (8008298 <HAL_ETH_MspInit+0x144>)
 800825c:	f7fd fe1e 	bl	8005e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8008260:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008266:	2302      	movs	r3, #2
 8008268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800826a:	2300      	movs	r3, #0
 800826c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800826e:	2303      	movs	r3, #3
 8008270:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008272:	230b      	movs	r3, #11
 8008274:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800827a:	4619      	mov	r1, r3
 800827c:	4807      	ldr	r0, [pc, #28]	; (800829c <HAL_ETH_MspInit+0x148>)
 800827e:	f7fd fe0d 	bl	8005e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008282:	bf00      	nop
 8008284:	3738      	adds	r7, #56	; 0x38
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	40028000 	.word	0x40028000
 8008290:	40023800 	.word	0x40023800
 8008294:	40020800 	.word	0x40020800
 8008298:	40020000 	.word	0x40020000
 800829c:	40020400 	.word	0x40020400

080082a0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80082a8:	4b41      	ldr	r3, [pc, #260]	; (80083b0 <low_level_init+0x110>)
 80082aa:	4a42      	ldr	r2, [pc, #264]	; (80083b4 <low_level_init+0x114>)
 80082ac:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80082ae:	4b40      	ldr	r3, [pc, #256]	; (80083b0 <low_level_init+0x110>)
 80082b0:	2201      	movs	r2, #1
 80082b2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80082b4:	4b3e      	ldr	r3, [pc, #248]	; (80083b0 <low_level_init+0x110>)
 80082b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80082ba:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80082bc:	4b3c      	ldr	r3, [pc, #240]	; (80083b0 <low_level_init+0x110>)
 80082be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082c2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8720A_PHY_ADDRESS;
 80082c4:	4b3a      	ldr	r3, [pc, #232]	; (80083b0 <low_level_init+0x110>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80082ca:	2300      	movs	r3, #0
 80082cc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80082ce:	2380      	movs	r3, #128	; 0x80
 80082d0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80082d2:	23e1      	movs	r3, #225	; 0xe1
 80082d4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80082d6:	2300      	movs	r3, #0
 80082d8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80082da:	2300      	movs	r3, #0
 80082dc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80082de:	2300      	movs	r3, #0
 80082e0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80082e2:	4a33      	ldr	r2, [pc, #204]	; (80083b0 <low_level_init+0x110>)
 80082e4:	f107 0308 	add.w	r3, r7, #8
 80082e8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80082ea:	4b31      	ldr	r3, [pc, #196]	; (80083b0 <low_level_init+0x110>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80082f0:	4b2f      	ldr	r3, [pc, #188]	; (80083b0 <low_level_init+0x110>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80082f6:	4b2e      	ldr	r3, [pc, #184]	; (80083b0 <low_level_init+0x110>)
 80082f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80082fc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80082fe:	482c      	ldr	r0, [pc, #176]	; (80083b0 <low_level_init+0x110>)
 8008300:	f7fc fca6 	bl	8004c50 <HAL_ETH_Init>
 8008304:	4603      	mov	r3, r0
 8008306:	73fb      	strb	r3, [r7, #15]

  if (hal_eth_init_status == HAL_OK)
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d108      	bne.n	8008320 <low_level_init+0x80>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008314:	f043 0304 	orr.w	r3, r3, #4
 8008318:	b2da      	uxtb	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008320:	2304      	movs	r3, #4
 8008322:	4a25      	ldr	r2, [pc, #148]	; (80083b8 <low_level_init+0x118>)
 8008324:	4925      	ldr	r1, [pc, #148]	; (80083bc <low_level_init+0x11c>)
 8008326:	4822      	ldr	r0, [pc, #136]	; (80083b0 <low_level_init+0x110>)
 8008328:	f7fc fe2e 	bl	8004f88 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800832c:	2304      	movs	r3, #4
 800832e:	4a24      	ldr	r2, [pc, #144]	; (80083c0 <low_level_init+0x120>)
 8008330:	4924      	ldr	r1, [pc, #144]	; (80083c4 <low_level_init+0x124>)
 8008332:	481f      	ldr	r0, [pc, #124]	; (80083b0 <low_level_init+0x110>)
 8008334:	f7fc fe91 	bl	800505a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2206      	movs	r2, #6
 800833c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008340:	4b1b      	ldr	r3, [pc, #108]	; (80083b0 <low_level_init+0x110>)
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	781a      	ldrb	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800834c:	4b18      	ldr	r3, [pc, #96]	; (80083b0 <low_level_init+0x110>)
 800834e:	695b      	ldr	r3, [r3, #20]
 8008350:	785a      	ldrb	r2, [r3, #1]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008358:	4b15      	ldr	r3, [pc, #84]	; (80083b0 <low_level_init+0x110>)
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	789a      	ldrb	r2, [r3, #2]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008364:	4b12      	ldr	r3, [pc, #72]	; (80083b0 <low_level_init+0x110>)
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	78da      	ldrb	r2, [r3, #3]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008370:	4b0f      	ldr	r3, [pc, #60]	; (80083b0 <low_level_init+0x110>)
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	791a      	ldrb	r2, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800837c:	4b0c      	ldr	r3, [pc, #48]	; (80083b0 <low_level_init+0x110>)
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	795a      	ldrb	r2, [r3, #5]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800838e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008396:	f043 030a 	orr.w	r3, r3, #10
 800839a:	b2da      	uxtb	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80083a2:	4803      	ldr	r0, [pc, #12]	; (80083b0 <low_level_init+0x110>)
 80083a4:	f7fd f902 	bl	80055ac <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80083a8:	bf00      	nop
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	200021bc 	.word	0x200021bc
 80083b4:	40028000 	.word	0x40028000
 80083b8:	20002204 	.word	0x20002204
 80083bc:	200008ec 	.word	0x200008ec
 80083c0:	2000096c 	.word	0x2000096c
 80083c4:	2000213c 	.word	0x2000213c

080083c8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08a      	sub	sp, #40	; 0x28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80083d2:	4b4b      	ldr	r3, [pc, #300]	; (8008500 <low_level_output+0x138>)
 80083d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80083ea:	4b45      	ldr	r3, [pc, #276]	; (8008500 <low_level_output+0x138>)
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80083f0:	2300      	movs	r3, #0
 80083f2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	623b      	str	r3, [r7, #32]
 80083f8:	e05a      	b.n	80084b0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	da03      	bge.n	800840a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008402:	23f8      	movs	r3, #248	; 0xf8
 8008404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008408:	e05c      	b.n	80084c4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	895b      	ldrh	r3, [r3, #10]
 800840e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008414:	e02f      	b.n	8008476 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008416:	69fa      	ldr	r2, [r7, #28]
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	18d0      	adds	r0, r2, r3
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	18d1      	adds	r1, r2, r3
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800842a:	3304      	adds	r3, #4
 800842c:	461a      	mov	r2, r3
 800842e:	f00a fa8d 	bl	801294c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	da03      	bge.n	8008448 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008440:	23f8      	movs	r3, #248	; 0xf8
 8008442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008446:	e03d      	b.n	80084c4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008458:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008464:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008470:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	4413      	add	r3, r2
 800847c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008480:	4293      	cmp	r3, r2
 8008482:	d8c8      	bhi.n	8008416 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008484:	69fa      	ldr	r2, [r7, #28]
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	18d0      	adds	r0, r2, r3
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	4413      	add	r3, r2
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	4619      	mov	r1, r3
 8008496:	f00a fa59 	bl	801294c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4413      	add	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4413      	add	r3, r2
 80084a8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	623b      	str	r3, [r7, #32]
 80084b0:	6a3b      	ldr	r3, [r7, #32]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1a1      	bne.n	80083fa <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80084b6:	6979      	ldr	r1, [r7, #20]
 80084b8:	4811      	ldr	r0, [pc, #68]	; (8008500 <low_level_output+0x138>)
 80084ba:	f7fc fe3b 	bl	8005134 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80084c4:	4b0e      	ldr	r3, [pc, #56]	; (8008500 <low_level_output+0x138>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084cc:	3314      	adds	r3, #20
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0320 	and.w	r3, r3, #32
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00d      	beq.n	80084f4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80084d8:	4b09      	ldr	r3, [pc, #36]	; (8008500 <low_level_output+0x138>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e0:	3314      	adds	r3, #20
 80084e2:	2220      	movs	r2, #32
 80084e4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80084e6:	4b06      	ldr	r3, [pc, #24]	; (8008500 <low_level_output+0x138>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ee:	3304      	adds	r3, #4
 80084f0:	2200      	movs	r2, #0
 80084f2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80084f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3728      	adds	r7, #40	; 0x28
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	200021bc 	.word	0x200021bc

08008504 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b08c      	sub	sp, #48	; 0x30
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800850c:	2300      	movs	r3, #0
 800850e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008510:	2300      	movs	r3, #0
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008524:	2300      	movs	r3, #0
 8008526:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8008528:	484f      	ldr	r0, [pc, #316]	; (8008668 <low_level_input+0x164>)
 800852a:	f7fc feed 	bl	8005308 <HAL_ETH_GetReceivedFrame>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <low_level_input+0x34>

    return NULL;
 8008534:	2300      	movs	r3, #0
 8008536:	e092      	b.n	800865e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008538:	4b4b      	ldr	r3, [pc, #300]	; (8008668 <low_level_input+0x164>)
 800853a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800853e:	4b4a      	ldr	r3, [pc, #296]	; (8008668 <low_level_input+0x164>)
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008544:	89fb      	ldrh	r3, [r7, #14]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d007      	beq.n	800855a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800854a:	89fb      	ldrh	r3, [r7, #14]
 800854c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008550:	4619      	mov	r1, r3
 8008552:	2000      	movs	r0, #0
 8008554:	f001 f936 	bl	80097c4 <pbuf_alloc>
 8008558:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855c:	2b00      	cmp	r3, #0
 800855e:	d04b      	beq.n	80085f8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008560:	4b41      	ldr	r3, [pc, #260]	; (8008668 <low_level_input+0x164>)
 8008562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008564:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800856a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856c:	62bb      	str	r3, [r7, #40]	; 0x28
 800856e:	e040      	b.n	80085f2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	895b      	ldrh	r3, [r3, #10]
 8008574:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008576:	2300      	movs	r3, #0
 8008578:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800857a:	e021      	b.n	80085c0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	18d0      	adds	r0, r2, r3
 8008584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	18d1      	adds	r1, r2, r3
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008590:	3304      	adds	r3, #4
 8008592:	461a      	mov	r2, r3
 8008594:	f00a f9da 	bl	801294c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80085a4:	69fa      	ldr	r2, [r7, #28]
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	4413      	add	r3, r2
 80085aa:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80085ae:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80085ba:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	4413      	add	r3, r2
 80085c6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d8d6      	bhi.n	800857c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	18d0      	adds	r0, r2, r3
 80085d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	4413      	add	r3, r2
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	4619      	mov	r1, r3
 80085e0:	f00a f9b4 	bl	801294c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80085e4:	69fa      	ldr	r2, [r7, #28]
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	4413      	add	r3, r2
 80085ea:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80085ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80085f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1bb      	bne.n	8008570 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80085f8:	4b1b      	ldr	r3, [pc, #108]	; (8008668 <low_level_input+0x164>)
 80085fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80085fe:	2300      	movs	r3, #0
 8008600:	613b      	str	r3, [r7, #16]
 8008602:	e00b      	b.n	800861c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	3301      	adds	r3, #1
 800861a:	613b      	str	r3, [r7, #16]
 800861c:	4b12      	ldr	r3, [pc, #72]	; (8008668 <low_level_input+0x164>)
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	429a      	cmp	r2, r3
 8008624:	d3ee      	bcc.n	8008604 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008626:	4b10      	ldr	r3, [pc, #64]	; (8008668 <low_level_input+0x164>)
 8008628:	2200      	movs	r2, #0
 800862a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800862c:	4b0e      	ldr	r3, [pc, #56]	; (8008668 <low_level_input+0x164>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008634:	3314      	adds	r3, #20
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00d      	beq.n	800865c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008640:	4b09      	ldr	r3, [pc, #36]	; (8008668 <low_level_input+0x164>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008648:	3314      	adds	r3, #20
 800864a:	2280      	movs	r2, #128	; 0x80
 800864c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800864e:	4b06      	ldr	r3, [pc, #24]	; (8008668 <low_level_input+0x164>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008656:	3308      	adds	r3, #8
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800865c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800865e:	4618      	mov	r0, r3
 8008660:	3730      	adds	r7, #48	; 0x30
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	200021bc 	.word	0x200021bc

0800866c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff ff45 	bl	8008504 <low_level_input>
 800867a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d010      	beq.n	80086a4 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	6879      	ldr	r1, [r7, #4]
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	4798      	blx	r3
 800868c:	4603      	mov	r3, r0
 800868e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8008690:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d006      	beq.n	80086a6 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f001 fb77 	bl	8009d8c <pbuf_free>
    p = NULL;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	e000      	b.n	80086a6 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80086a4:	bf00      	nop
  }
}
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d106      	bne.n	80086c8 <ethernetif_init+0x1c>
 80086ba:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <ethernetif_init+0x48>)
 80086bc:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80086c0:	490d      	ldr	r1, [pc, #52]	; (80086f8 <ethernetif_init+0x4c>)
 80086c2:	480e      	ldr	r0, [pc, #56]	; (80086fc <ethernetif_init+0x50>)
 80086c4:	f00a fe86 	bl	80133d4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2273      	movs	r2, #115	; 0x73
 80086cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2274      	movs	r2, #116	; 0x74
 80086d4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a09      	ldr	r2, [pc, #36]	; (8008700 <ethernetif_init+0x54>)
 80086dc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a08      	ldr	r2, [pc, #32]	; (8008704 <ethernetif_init+0x58>)
 80086e2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7ff fddb 	bl	80082a0 <low_level_init>

  return ERR_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	08016ae0 	.word	0x08016ae0
 80086f8:	08016afc 	.word	0x08016afc
 80086fc:	08016b0c 	.word	0x08016b0c
 8008700:	08010bdd 	.word	0x08010bdd
 8008704:	080083c9 	.word	0x080083c9

08008708 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800870c:	f7fc f93c 	bl	8004988 <HAL_GetTick>
 8008710:	4603      	mov	r3, r0
}
 8008712:	4618      	mov	r0, r3
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800872e:	089b      	lsrs	r3, r3, #2
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d05d      	beq.n	80087f6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800873a:	4b34      	ldr	r3, [pc, #208]	; (800880c <ethernetif_update_config+0xf4>)
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d03f      	beq.n	80087c2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008742:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008746:	2100      	movs	r1, #0
 8008748:	4830      	ldr	r0, [pc, #192]	; (800880c <ethernetif_update_config+0xf4>)
 800874a:	f7fc fec9 	bl	80054e0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800874e:	f7fc f91b 	bl	8004988 <HAL_GetTick>
 8008752:	4603      	mov	r3, r0
 8008754:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008756:	f107 0308 	add.w	r3, r7, #8
 800875a:	461a      	mov	r2, r3
 800875c:	2101      	movs	r1, #1
 800875e:	482b      	ldr	r0, [pc, #172]	; (800880c <ethernetif_update_config+0xf4>)
 8008760:	f7fc fe56 	bl	8005410 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008764:	f7fc f910 	bl	8004988 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008772:	d828      	bhi.n	80087c6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f003 0320 	and.w	r3, r3, #32
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0eb      	beq.n	8008756 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800877e:	f107 0308 	add.w	r3, r7, #8
 8008782:	461a      	mov	r2, r3
 8008784:	211f      	movs	r1, #31
 8008786:	4821      	ldr	r0, [pc, #132]	; (800880c <ethernetif_update_config+0xf4>)
 8008788:	f7fc fe42 	bl	8005410 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f003 0310 	and.w	r3, r3, #16
 8008792:	2b00      	cmp	r3, #0
 8008794:	d004      	beq.n	80087a0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008796:	4b1d      	ldr	r3, [pc, #116]	; (800880c <ethernetif_update_config+0xf4>)
 8008798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800879c:	60da      	str	r2, [r3, #12]
 800879e:	e002      	b.n	80087a6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80087a0:	4b1a      	ldr	r3, [pc, #104]	; (800880c <ethernetif_update_config+0xf4>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f003 0304 	and.w	r3, r3, #4
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d003      	beq.n	80087b8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80087b0:	4b16      	ldr	r3, [pc, #88]	; (800880c <ethernetif_update_config+0xf4>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	609a      	str	r2, [r3, #8]
 80087b6:	e016      	b.n	80087e6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80087b8:	4b14      	ldr	r3, [pc, #80]	; (800880c <ethernetif_update_config+0xf4>)
 80087ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80087be:	609a      	str	r2, [r3, #8]
 80087c0:	e011      	b.n	80087e6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80087c2:	bf00      	nop
 80087c4:	e000      	b.n	80087c8 <ethernetif_update_config+0xb0>
          goto error;
 80087c6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80087c8:	4b10      	ldr	r3, [pc, #64]	; (800880c <ethernetif_update_config+0xf4>)
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	08db      	lsrs	r3, r3, #3
 80087ce:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80087d0:	4b0e      	ldr	r3, [pc, #56]	; (800880c <ethernetif_update_config+0xf4>)
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	085b      	lsrs	r3, r3, #1
 80087d6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80087d8:	4313      	orrs	r3, r2
 80087da:	b29b      	uxth	r3, r3
 80087dc:	461a      	mov	r2, r3
 80087de:	2100      	movs	r1, #0
 80087e0:	480a      	ldr	r0, [pc, #40]	; (800880c <ethernetif_update_config+0xf4>)
 80087e2:	f7fc fe7d 	bl	80054e0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80087e6:	2100      	movs	r1, #0
 80087e8:	4808      	ldr	r0, [pc, #32]	; (800880c <ethernetif_update_config+0xf4>)
 80087ea:	f7fc ff3d 	bl	8005668 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80087ee:	4807      	ldr	r0, [pc, #28]	; (800880c <ethernetif_update_config+0xf4>)
 80087f0:	f7fc fedc 	bl	80055ac <HAL_ETH_Start>
 80087f4:	e002      	b.n	80087fc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80087f6:	4805      	ldr	r0, [pc, #20]	; (800880c <ethernetif_update_config+0xf4>)
 80087f8:	f7fc ff07 	bl	800560a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f807 	bl	8008810 <ethernetif_notify_conn_changed>
}
 8008802:	bf00      	nop
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	200021bc 	.word	0x200021bc

08008810 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800882e:	88fb      	ldrh	r3, [r7, #6]
 8008830:	021b      	lsls	r3, r3, #8
 8008832:	b21a      	sxth	r2, r3
 8008834:	88fb      	ldrh	r3, [r7, #6]
 8008836:	0a1b      	lsrs	r3, r3, #8
 8008838:	b29b      	uxth	r3, r3
 800883a:	b21b      	sxth	r3, r3
 800883c:	4313      	orrs	r3, r2
 800883e:	b21b      	sxth	r3, r3
 8008840:	b29b      	uxth	r3, r3
}
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	061a      	lsls	r2, r3, #24
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	021b      	lsls	r3, r3, #8
 800885e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008862:	431a      	orrs	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	0a1b      	lsrs	r3, r3, #8
 8008868:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	0e1b      	lsrs	r3, r3, #24
 8008872:	4313      	orrs	r3, r2
}
 8008874:	4618      	mov	r0, r3
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800888a:	f000 f8d5 	bl	8008a38 <mem_init>
  memp_init();
 800888e:	f000 fbdb 	bl	8009048 <memp_init>
  pbuf_init();
  netif_init();
 8008892:	f000 fc93 	bl	80091bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008896:	f007 f84b 	bl	800f930 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800889a:	f001 fda7 	bl	800a3ec <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800889e:	f006 ffbd 	bl	800f81c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80088a2:	bf00      	nop
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	4603      	mov	r3, r0
 80088b4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80088b6:	4b05      	ldr	r3, [pc, #20]	; (80088cc <ptr_to_mem+0x20>)
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	88fb      	ldrh	r3, [r7, #6]
 80088bc:	4413      	add	r3, r2
}
 80088be:	4618      	mov	r0, r3
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	20000288 	.word	0x20000288

080088d0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80088d8:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <mem_to_ptr+0x20>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	b29b      	uxth	r3, r3
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	20000288 	.word	0x20000288

080088f4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80088f4:	b590      	push	{r4, r7, lr}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80088fc:	4b45      	ldr	r3, [pc, #276]	; (8008a14 <plug_holes+0x120>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	429a      	cmp	r2, r3
 8008904:	d206      	bcs.n	8008914 <plug_holes+0x20>
 8008906:	4b44      	ldr	r3, [pc, #272]	; (8008a18 <plug_holes+0x124>)
 8008908:	f240 12df 	movw	r2, #479	; 0x1df
 800890c:	4943      	ldr	r1, [pc, #268]	; (8008a1c <plug_holes+0x128>)
 800890e:	4844      	ldr	r0, [pc, #272]	; (8008a20 <plug_holes+0x12c>)
 8008910:	f00a fd60 	bl	80133d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008914:	4b43      	ldr	r3, [pc, #268]	; (8008a24 <plug_holes+0x130>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	429a      	cmp	r2, r3
 800891c:	d306      	bcc.n	800892c <plug_holes+0x38>
 800891e:	4b3e      	ldr	r3, [pc, #248]	; (8008a18 <plug_holes+0x124>)
 8008920:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008924:	4940      	ldr	r1, [pc, #256]	; (8008a28 <plug_holes+0x134>)
 8008926:	483e      	ldr	r0, [pc, #248]	; (8008a20 <plug_holes+0x12c>)
 8008928:	f00a fd54 	bl	80133d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	791b      	ldrb	r3, [r3, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d006      	beq.n	8008942 <plug_holes+0x4e>
 8008934:	4b38      	ldr	r3, [pc, #224]	; (8008a18 <plug_holes+0x124>)
 8008936:	f240 12e1 	movw	r2, #481	; 0x1e1
 800893a:	493c      	ldr	r1, [pc, #240]	; (8008a2c <plug_holes+0x138>)
 800893c:	4838      	ldr	r0, [pc, #224]	; (8008a20 <plug_holes+0x12c>)
 800893e:	f00a fd49 	bl	80133d4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800894a:	d906      	bls.n	800895a <plug_holes+0x66>
 800894c:	4b32      	ldr	r3, [pc, #200]	; (8008a18 <plug_holes+0x124>)
 800894e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008952:	4937      	ldr	r1, [pc, #220]	; (8008a30 <plug_holes+0x13c>)
 8008954:	4832      	ldr	r0, [pc, #200]	; (8008a20 <plug_holes+0x12c>)
 8008956:	f00a fd3d 	bl	80133d4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff ffa4 	bl	80088ac <ptr_to_mem>
 8008964:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	429a      	cmp	r2, r3
 800896c:	d024      	beq.n	80089b8 <plug_holes+0xc4>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	791b      	ldrb	r3, [r3, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d120      	bne.n	80089b8 <plug_holes+0xc4>
 8008976:	4b2b      	ldr	r3, [pc, #172]	; (8008a24 <plug_holes+0x130>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	429a      	cmp	r2, r3
 800897e:	d01b      	beq.n	80089b8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008980:	4b2c      	ldr	r3, [pc, #176]	; (8008a34 <plug_holes+0x140>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	429a      	cmp	r2, r3
 8008988:	d102      	bne.n	8008990 <plug_holes+0x9c>
      lfree = mem;
 800898a:	4a2a      	ldr	r2, [pc, #168]	; (8008a34 <plug_holes+0x140>)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	881a      	ldrh	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80089a0:	d00a      	beq.n	80089b8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7ff ff80 	bl	80088ac <ptr_to_mem>
 80089ac:	4604      	mov	r4, r0
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7ff ff8e 	bl	80088d0 <mem_to_ptr>
 80089b4:	4603      	mov	r3, r0
 80089b6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	885b      	ldrh	r3, [r3, #2]
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff ff75 	bl	80088ac <ptr_to_mem>
 80089c2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d01f      	beq.n	8008a0c <plug_holes+0x118>
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	791b      	ldrb	r3, [r3, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d11b      	bne.n	8008a0c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80089d4:	4b17      	ldr	r3, [pc, #92]	; (8008a34 <plug_holes+0x140>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d102      	bne.n	80089e4 <plug_holes+0xf0>
      lfree = pmem;
 80089de:	4a15      	ldr	r2, [pc, #84]	; (8008a34 <plug_holes+0x140>)
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	881a      	ldrh	r2, [r3, #0]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80089f4:	d00a      	beq.n	8008a0c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	881b      	ldrh	r3, [r3, #0]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff ff56 	bl	80088ac <ptr_to_mem>
 8008a00:	4604      	mov	r4, r0
 8008a02:	68b8      	ldr	r0, [r7, #8]
 8008a04:	f7ff ff64 	bl	80088d0 <mem_to_ptr>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008a0c:	bf00      	nop
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd90      	pop	{r4, r7, pc}
 8008a14:	20000288 	.word	0x20000288
 8008a18:	08016b34 	.word	0x08016b34
 8008a1c:	08016b64 	.word	0x08016b64
 8008a20:	08016b7c 	.word	0x08016b7c
 8008a24:	2000028c 	.word	0x2000028c
 8008a28:	08016ba4 	.word	0x08016ba4
 8008a2c:	08016bc0 	.word	0x08016bc0
 8008a30:	08016bdc 	.word	0x08016bdc
 8008a34:	20000290 	.word	0x20000290

08008a38 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008a3e:	4b18      	ldr	r3, [pc, #96]	; (8008aa0 <mem_init+0x68>)
 8008a40:	3303      	adds	r3, #3
 8008a42:	f023 0303 	bic.w	r3, r3, #3
 8008a46:	461a      	mov	r2, r3
 8008a48:	4b16      	ldr	r3, [pc, #88]	; (8008aa4 <mem_init+0x6c>)
 8008a4a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008a4c:	4b15      	ldr	r3, [pc, #84]	; (8008aa4 <mem_init+0x6c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008a58:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008a66:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8008a6a:	f7ff ff1f 	bl	80088ac <ptr_to_mem>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	4a0d      	ldr	r2, [pc, #52]	; (8008aa8 <mem_init+0x70>)
 8008a72:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008a74:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <mem_init+0x70>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008a7c:	4b0a      	ldr	r3, [pc, #40]	; (8008aa8 <mem_init+0x70>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008a84:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008a86:	4b08      	ldr	r3, [pc, #32]	; (8008aa8 <mem_init+0x70>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008a8e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008a90:	4b04      	ldr	r3, [pc, #16]	; (8008aa4 <mem_init+0x6c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a05      	ldr	r2, [pc, #20]	; (8008aac <mem_init+0x74>)
 8008a96:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008a98:	bf00      	nop
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	200039ec 	.word	0x200039ec
 8008aa4:	20000288 	.word	0x20000288
 8008aa8:	2000028c 	.word	0x2000028c
 8008aac:	20000290 	.word	0x20000290

08008ab0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7ff ff09 	bl	80088d0 <mem_to_ptr>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7ff fef0 	bl	80088ac <ptr_to_mem>
 8008acc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	885b      	ldrh	r3, [r3, #2]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff feea 	bl	80088ac <ptr_to_mem>
 8008ad8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008ae2:	d818      	bhi.n	8008b16 <mem_link_valid+0x66>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	885b      	ldrh	r3, [r3, #2]
 8008ae8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008aec:	d813      	bhi.n	8008b16 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008af2:	8afa      	ldrh	r2, [r7, #22]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d004      	beq.n	8008b02 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	8afa      	ldrh	r2, [r7, #22]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d109      	bne.n	8008b16 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008b02:	4b08      	ldr	r3, [pc, #32]	; (8008b24 <mem_link_valid+0x74>)
 8008b04:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d006      	beq.n	8008b1a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	885b      	ldrh	r3, [r3, #2]
 8008b10:	8afa      	ldrh	r2, [r7, #22]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d001      	beq.n	8008b1a <mem_link_valid+0x6a>
    return 0;
 8008b16:	2300      	movs	r3, #0
 8008b18:	e000      	b.n	8008b1c <mem_link_valid+0x6c>
  }
  return 1;
 8008b1a:	2301      	movs	r3, #1
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	2000028c 	.word	0x2000028c

08008b28 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d04c      	beq.n	8008bd0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f003 0303 	and.w	r3, r3, #3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d007      	beq.n	8008b50 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008b40:	4b25      	ldr	r3, [pc, #148]	; (8008bd8 <mem_free+0xb0>)
 8008b42:	f240 2273 	movw	r2, #627	; 0x273
 8008b46:	4925      	ldr	r1, [pc, #148]	; (8008bdc <mem_free+0xb4>)
 8008b48:	4825      	ldr	r0, [pc, #148]	; (8008be0 <mem_free+0xb8>)
 8008b4a:	f00a fc43 	bl	80133d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008b4e:	e040      	b.n	8008bd2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3b08      	subs	r3, #8
 8008b54:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008b56:	4b23      	ldr	r3, [pc, #140]	; (8008be4 <mem_free+0xbc>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d306      	bcc.n	8008b6e <mem_free+0x46>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f103 020c 	add.w	r2, r3, #12
 8008b66:	4b20      	ldr	r3, [pc, #128]	; (8008be8 <mem_free+0xc0>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d907      	bls.n	8008b7e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008b6e:	4b1a      	ldr	r3, [pc, #104]	; (8008bd8 <mem_free+0xb0>)
 8008b70:	f240 227f 	movw	r2, #639	; 0x27f
 8008b74:	491d      	ldr	r1, [pc, #116]	; (8008bec <mem_free+0xc4>)
 8008b76:	481a      	ldr	r0, [pc, #104]	; (8008be0 <mem_free+0xb8>)
 8008b78:	f00a fc2c 	bl	80133d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008b7c:	e029      	b.n	8008bd2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	791b      	ldrb	r3, [r3, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d107      	bne.n	8008b96 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008b86:	4b14      	ldr	r3, [pc, #80]	; (8008bd8 <mem_free+0xb0>)
 8008b88:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008b8c:	4918      	ldr	r1, [pc, #96]	; (8008bf0 <mem_free+0xc8>)
 8008b8e:	4814      	ldr	r0, [pc, #80]	; (8008be0 <mem_free+0xb8>)
 8008b90:	f00a fc20 	bl	80133d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008b94:	e01d      	b.n	8008bd2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f7ff ff8a 	bl	8008ab0 <mem_link_valid>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d107      	bne.n	8008bb2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008ba2:	4b0d      	ldr	r3, [pc, #52]	; (8008bd8 <mem_free+0xb0>)
 8008ba4:	f240 2295 	movw	r2, #661	; 0x295
 8008ba8:	4912      	ldr	r1, [pc, #72]	; (8008bf4 <mem_free+0xcc>)
 8008baa:	480d      	ldr	r0, [pc, #52]	; (8008be0 <mem_free+0xb8>)
 8008bac:	f00a fc12 	bl	80133d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008bb0:	e00f      	b.n	8008bd2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008bb8:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <mem_free+0xd0>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d202      	bcs.n	8008bc8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008bc2:	4a0d      	ldr	r2, [pc, #52]	; (8008bf8 <mem_free+0xd0>)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f7ff fe93 	bl	80088f4 <plug_holes>
 8008bce:	e000      	b.n	8008bd2 <mem_free+0xaa>
    return;
 8008bd0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	08016b34 	.word	0x08016b34
 8008bdc:	08016c08 	.word	0x08016c08
 8008be0:	08016b7c 	.word	0x08016b7c
 8008be4:	20000288 	.word	0x20000288
 8008be8:	2000028c 	.word	0x2000028c
 8008bec:	08016c2c 	.word	0x08016c2c
 8008bf0:	08016c48 	.word	0x08016c48
 8008bf4:	08016c70 	.word	0x08016c70
 8008bf8:	20000290 	.word	0x20000290

08008bfc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008c08:	887b      	ldrh	r3, [r7, #2]
 8008c0a:	3303      	adds	r3, #3
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	f023 0303 	bic.w	r3, r3, #3
 8008c12:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008c14:	8bfb      	ldrh	r3, [r7, #30]
 8008c16:	2b0b      	cmp	r3, #11
 8008c18:	d801      	bhi.n	8008c1e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008c1a:	230c      	movs	r3, #12
 8008c1c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008c1e:	8bfb      	ldrh	r3, [r7, #30]
 8008c20:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008c24:	d803      	bhi.n	8008c2e <mem_trim+0x32>
 8008c26:	8bfa      	ldrh	r2, [r7, #30]
 8008c28:	887b      	ldrh	r3, [r7, #2]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d201      	bcs.n	8008c32 <mem_trim+0x36>
    return NULL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e0cc      	b.n	8008dcc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008c32:	4b68      	ldr	r3, [pc, #416]	; (8008dd4 <mem_trim+0x1d8>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d304      	bcc.n	8008c46 <mem_trim+0x4a>
 8008c3c:	4b66      	ldr	r3, [pc, #408]	; (8008dd8 <mem_trim+0x1dc>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d306      	bcc.n	8008c54 <mem_trim+0x58>
 8008c46:	4b65      	ldr	r3, [pc, #404]	; (8008ddc <mem_trim+0x1e0>)
 8008c48:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008c4c:	4964      	ldr	r1, [pc, #400]	; (8008de0 <mem_trim+0x1e4>)
 8008c4e:	4865      	ldr	r0, [pc, #404]	; (8008de4 <mem_trim+0x1e8>)
 8008c50:	f00a fbc0 	bl	80133d4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008c54:	4b5f      	ldr	r3, [pc, #380]	; (8008dd4 <mem_trim+0x1d8>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d304      	bcc.n	8008c68 <mem_trim+0x6c>
 8008c5e:	4b5e      	ldr	r3, [pc, #376]	; (8008dd8 <mem_trim+0x1dc>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d301      	bcc.n	8008c6c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	e0af      	b.n	8008dcc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3b08      	subs	r3, #8
 8008c70:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008c72:	69b8      	ldr	r0, [r7, #24]
 8008c74:	f7ff fe2c 	bl	80088d0 <mem_to_ptr>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	881a      	ldrh	r2, [r3, #0]
 8008c80:	8afb      	ldrh	r3, [r7, #22]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	3b08      	subs	r3, #8
 8008c88:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008c8a:	8bfa      	ldrh	r2, [r7, #30]
 8008c8c:	8abb      	ldrh	r3, [r7, #20]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d906      	bls.n	8008ca0 <mem_trim+0xa4>
 8008c92:	4b52      	ldr	r3, [pc, #328]	; (8008ddc <mem_trim+0x1e0>)
 8008c94:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008c98:	4953      	ldr	r1, [pc, #332]	; (8008de8 <mem_trim+0x1ec>)
 8008c9a:	4852      	ldr	r0, [pc, #328]	; (8008de4 <mem_trim+0x1e8>)
 8008c9c:	f00a fb9a 	bl	80133d4 <iprintf>
  if (newsize > size) {
 8008ca0:	8bfa      	ldrh	r2, [r7, #30]
 8008ca2:	8abb      	ldrh	r3, [r7, #20]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d901      	bls.n	8008cac <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	e08f      	b.n	8008dcc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008cac:	8bfa      	ldrh	r2, [r7, #30]
 8008cae:	8abb      	ldrh	r3, [r7, #20]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d101      	bne.n	8008cb8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	e089      	b.n	8008dcc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff fdf5 	bl	80088ac <ptr_to_mem>
 8008cc2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	791b      	ldrb	r3, [r3, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d13f      	bne.n	8008d4c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008cd4:	d106      	bne.n	8008ce4 <mem_trim+0xe8>
 8008cd6:	4b41      	ldr	r3, [pc, #260]	; (8008ddc <mem_trim+0x1e0>)
 8008cd8:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008cdc:	4943      	ldr	r1, [pc, #268]	; (8008dec <mem_trim+0x1f0>)
 8008cde:	4841      	ldr	r0, [pc, #260]	; (8008de4 <mem_trim+0x1e8>)
 8008ce0:	f00a fb78 	bl	80133d4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008cea:	8afa      	ldrh	r2, [r7, #22]
 8008cec:	8bfb      	ldrh	r3, [r7, #30]
 8008cee:	4413      	add	r3, r2
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008cf6:	4b3e      	ldr	r3, [pc, #248]	; (8008df0 <mem_trim+0x1f4>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d106      	bne.n	8008d0e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8008d00:	89fb      	ldrh	r3, [r7, #14]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7ff fdd2 	bl	80088ac <ptr_to_mem>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	4a39      	ldr	r2, [pc, #228]	; (8008df0 <mem_trim+0x1f4>)
 8008d0c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008d0e:	89fb      	ldrh	r3, [r7, #14]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7ff fdcb 	bl	80088ac <ptr_to_mem>
 8008d16:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	89ba      	ldrh	r2, [r7, #12]
 8008d22:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	8afa      	ldrh	r2, [r7, #22]
 8008d28:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	89fa      	ldrh	r2, [r7, #14]
 8008d2e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008d38:	d047      	beq.n	8008dca <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	881b      	ldrh	r3, [r3, #0]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff fdb4 	bl	80088ac <ptr_to_mem>
 8008d44:	4602      	mov	r2, r0
 8008d46:	89fb      	ldrh	r3, [r7, #14]
 8008d48:	8053      	strh	r3, [r2, #2]
 8008d4a:	e03e      	b.n	8008dca <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008d4c:	8bfb      	ldrh	r3, [r7, #30]
 8008d4e:	f103 0214 	add.w	r2, r3, #20
 8008d52:	8abb      	ldrh	r3, [r7, #20]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d838      	bhi.n	8008dca <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008d58:	8afa      	ldrh	r2, [r7, #22]
 8008d5a:	8bfb      	ldrh	r3, [r7, #30]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	3308      	adds	r3, #8
 8008d62:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	881b      	ldrh	r3, [r3, #0]
 8008d68:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008d6c:	d106      	bne.n	8008d7c <mem_trim+0x180>
 8008d6e:	4b1b      	ldr	r3, [pc, #108]	; (8008ddc <mem_trim+0x1e0>)
 8008d70:	f240 3216 	movw	r2, #790	; 0x316
 8008d74:	491d      	ldr	r1, [pc, #116]	; (8008dec <mem_trim+0x1f0>)
 8008d76:	481b      	ldr	r0, [pc, #108]	; (8008de4 <mem_trim+0x1e8>)
 8008d78:	f00a fb2c 	bl	80133d4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008d7c:	89fb      	ldrh	r3, [r7, #14]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff fd94 	bl	80088ac <ptr_to_mem>
 8008d84:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008d86:	4b1a      	ldr	r3, [pc, #104]	; (8008df0 <mem_trim+0x1f4>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d202      	bcs.n	8008d96 <mem_trim+0x19a>
      lfree = mem2;
 8008d90:	4a17      	ldr	r2, [pc, #92]	; (8008df0 <mem_trim+0x1f4>)
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	881a      	ldrh	r2, [r3, #0]
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	8afa      	ldrh	r2, [r7, #22]
 8008da8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	89fa      	ldrh	r2, [r7, #14]
 8008dae:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008db8:	d007      	beq.n	8008dca <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff fd74 	bl	80088ac <ptr_to_mem>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	89fb      	ldrh	r3, [r7, #14]
 8008dc8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008dca:	687b      	ldr	r3, [r7, #4]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3720      	adds	r7, #32
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20000288 	.word	0x20000288
 8008dd8:	2000028c 	.word	0x2000028c
 8008ddc:	08016b34 	.word	0x08016b34
 8008de0:	08016ca4 	.word	0x08016ca4
 8008de4:	08016b7c 	.word	0x08016b7c
 8008de8:	08016cbc 	.word	0x08016cbc
 8008dec:	08016cdc 	.word	0x08016cdc
 8008df0:	20000290 	.word	0x20000290

08008df4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008dfe:	88fb      	ldrh	r3, [r7, #6]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <mem_malloc+0x14>
    return NULL;
 8008e04:	2300      	movs	r3, #0
 8008e06:	e0d9      	b.n	8008fbc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008e08:	88fb      	ldrh	r3, [r7, #6]
 8008e0a:	3303      	adds	r3, #3
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	f023 0303 	bic.w	r3, r3, #3
 8008e12:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008e14:	8bbb      	ldrh	r3, [r7, #28]
 8008e16:	2b0b      	cmp	r3, #11
 8008e18:	d801      	bhi.n	8008e1e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008e1a:	230c      	movs	r3, #12
 8008e1c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008e1e:	8bbb      	ldrh	r3, [r7, #28]
 8008e20:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008e24:	d803      	bhi.n	8008e2e <mem_malloc+0x3a>
 8008e26:	8bba      	ldrh	r2, [r7, #28]
 8008e28:	88fb      	ldrh	r3, [r7, #6]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d201      	bcs.n	8008e32 <mem_malloc+0x3e>
    return NULL;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e0c4      	b.n	8008fbc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008e32:	4b64      	ldr	r3, [pc, #400]	; (8008fc4 <mem_malloc+0x1d0>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7ff fd4a 	bl	80088d0 <mem_to_ptr>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	83fb      	strh	r3, [r7, #30]
 8008e40:	e0b4      	b.n	8008fac <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008e42:	8bfb      	ldrh	r3, [r7, #30]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7ff fd31 	bl	80088ac <ptr_to_mem>
 8008e4a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	791b      	ldrb	r3, [r3, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f040 80a4 	bne.w	8008f9e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	8bfb      	ldrh	r3, [r7, #30]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	f1a3 0208 	sub.w	r2, r3, #8
 8008e64:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008e66:	429a      	cmp	r2, r3
 8008e68:	f0c0 8099 	bcc.w	8008f9e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	461a      	mov	r2, r3
 8008e72:	8bfb      	ldrh	r3, [r7, #30]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	f1a3 0208 	sub.w	r2, r3, #8
 8008e7a:	8bbb      	ldrh	r3, [r7, #28]
 8008e7c:	3314      	adds	r3, #20
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d333      	bcc.n	8008eea <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008e82:	8bfa      	ldrh	r2, [r7, #30]
 8008e84:	8bbb      	ldrh	r3, [r7, #28]
 8008e86:	4413      	add	r3, r2
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008e8e:	8a7b      	ldrh	r3, [r7, #18]
 8008e90:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008e94:	d106      	bne.n	8008ea4 <mem_malloc+0xb0>
 8008e96:	4b4c      	ldr	r3, [pc, #304]	; (8008fc8 <mem_malloc+0x1d4>)
 8008e98:	f240 3287 	movw	r2, #903	; 0x387
 8008e9c:	494b      	ldr	r1, [pc, #300]	; (8008fcc <mem_malloc+0x1d8>)
 8008e9e:	484c      	ldr	r0, [pc, #304]	; (8008fd0 <mem_malloc+0x1dc>)
 8008ea0:	f00a fa98 	bl	80133d4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008ea4:	8a7b      	ldrh	r3, [r7, #18]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7ff fd00 	bl	80088ac <ptr_to_mem>
 8008eac:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	881a      	ldrh	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	8bfa      	ldrh	r2, [r7, #30]
 8008ec0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	8a7a      	ldrh	r2, [r7, #18]
 8008ec6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008ed6:	d00b      	beq.n	8008ef0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff fce5 	bl	80088ac <ptr_to_mem>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	8a7b      	ldrh	r3, [r7, #18]
 8008ee6:	8053      	strh	r3, [r2, #2]
 8008ee8:	e002      	b.n	8008ef0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2201      	movs	r2, #1
 8008eee:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008ef0:	4b34      	ldr	r3, [pc, #208]	; (8008fc4 <mem_malloc+0x1d0>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d127      	bne.n	8008f4a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8008efa:	4b32      	ldr	r3, [pc, #200]	; (8008fc4 <mem_malloc+0x1d0>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008f00:	e005      	b.n	8008f0e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	881b      	ldrh	r3, [r3, #0]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7ff fcd0 	bl	80088ac <ptr_to_mem>
 8008f0c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	791b      	ldrb	r3, [r3, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d004      	beq.n	8008f20 <mem_malloc+0x12c>
 8008f16:	4b2f      	ldr	r3, [pc, #188]	; (8008fd4 <mem_malloc+0x1e0>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d1f0      	bne.n	8008f02 <mem_malloc+0x10e>
          }
          lfree = cur;
 8008f20:	4a28      	ldr	r2, [pc, #160]	; (8008fc4 <mem_malloc+0x1d0>)
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008f26:	4b27      	ldr	r3, [pc, #156]	; (8008fc4 <mem_malloc+0x1d0>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b2a      	ldr	r3, [pc, #168]	; (8008fd4 <mem_malloc+0x1e0>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d00b      	beq.n	8008f4a <mem_malloc+0x156>
 8008f32:	4b24      	ldr	r3, [pc, #144]	; (8008fc4 <mem_malloc+0x1d0>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	791b      	ldrb	r3, [r3, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d006      	beq.n	8008f4a <mem_malloc+0x156>
 8008f3c:	4b22      	ldr	r3, [pc, #136]	; (8008fc8 <mem_malloc+0x1d4>)
 8008f3e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008f42:	4925      	ldr	r1, [pc, #148]	; (8008fd8 <mem_malloc+0x1e4>)
 8008f44:	4822      	ldr	r0, [pc, #136]	; (8008fd0 <mem_malloc+0x1dc>)
 8008f46:	f00a fa45 	bl	80133d4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008f4a:	8bba      	ldrh	r2, [r7, #28]
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	4413      	add	r3, r2
 8008f50:	3308      	adds	r3, #8
 8008f52:	4a20      	ldr	r2, [pc, #128]	; (8008fd4 <mem_malloc+0x1e0>)
 8008f54:	6812      	ldr	r2, [r2, #0]
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d906      	bls.n	8008f68 <mem_malloc+0x174>
 8008f5a:	4b1b      	ldr	r3, [pc, #108]	; (8008fc8 <mem_malloc+0x1d4>)
 8008f5c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008f60:	491e      	ldr	r1, [pc, #120]	; (8008fdc <mem_malloc+0x1e8>)
 8008f62:	481b      	ldr	r0, [pc, #108]	; (8008fd0 <mem_malloc+0x1dc>)
 8008f64:	f00a fa36 	bl	80133d4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d006      	beq.n	8008f80 <mem_malloc+0x18c>
 8008f72:	4b15      	ldr	r3, [pc, #84]	; (8008fc8 <mem_malloc+0x1d4>)
 8008f74:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008f78:	4919      	ldr	r1, [pc, #100]	; (8008fe0 <mem_malloc+0x1ec>)
 8008f7a:	4815      	ldr	r0, [pc, #84]	; (8008fd0 <mem_malloc+0x1dc>)
 8008f7c:	f00a fa2a 	bl	80133d4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f003 0303 	and.w	r3, r3, #3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d006      	beq.n	8008f98 <mem_malloc+0x1a4>
 8008f8a:	4b0f      	ldr	r3, [pc, #60]	; (8008fc8 <mem_malloc+0x1d4>)
 8008f8c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008f90:	4914      	ldr	r1, [pc, #80]	; (8008fe4 <mem_malloc+0x1f0>)
 8008f92:	480f      	ldr	r0, [pc, #60]	; (8008fd0 <mem_malloc+0x1dc>)
 8008f94:	f00a fa1e 	bl	80133d4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	3308      	adds	r3, #8
 8008f9c:	e00e      	b.n	8008fbc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008f9e:	8bfb      	ldrh	r3, [r7, #30]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7ff fc83 	bl	80088ac <ptr_to_mem>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008fac:	8bfa      	ldrh	r2, [r7, #30]
 8008fae:	8bbb      	ldrh	r3, [r7, #28]
 8008fb0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	f4ff af44 	bcc.w	8008e42 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3720      	adds	r7, #32
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	20000290 	.word	0x20000290
 8008fc8:	08016b34 	.word	0x08016b34
 8008fcc:	08016cdc 	.word	0x08016cdc
 8008fd0:	08016b7c 	.word	0x08016b7c
 8008fd4:	2000028c 	.word	0x2000028c
 8008fd8:	08016cf0 	.word	0x08016cf0
 8008fdc:	08016d0c 	.word	0x08016d0c
 8008fe0:	08016d3c 	.word	0x08016d3c
 8008fe4:	08016d6c 	.word	0x08016d6c

08008fe8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	3303      	adds	r3, #3
 8008ffe:	f023 0303 	bic.w	r3, r3, #3
 8009002:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009004:	2300      	movs	r3, #0
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	e011      	b.n	800902e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	461a      	mov	r2, r3
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	4413      	add	r3, r2
 8009026:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	3301      	adds	r3, #1
 800902c:	60fb      	str	r3, [r7, #12]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	885b      	ldrh	r3, [r3, #2]
 8009032:	461a      	mov	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	4293      	cmp	r3, r2
 8009038:	dbe7      	blt.n	800900a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800903a:	bf00      	nop
 800903c:	bf00      	nop
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800904e:	2300      	movs	r3, #0
 8009050:	80fb      	strh	r3, [r7, #6]
 8009052:	e009      	b.n	8009068 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009054:	88fb      	ldrh	r3, [r7, #6]
 8009056:	4a08      	ldr	r2, [pc, #32]	; (8009078 <memp_init+0x30>)
 8009058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff ffc3 	bl	8008fe8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009062:	88fb      	ldrh	r3, [r7, #6]
 8009064:	3301      	adds	r3, #1
 8009066:	80fb      	strh	r3, [r7, #6]
 8009068:	88fb      	ldrh	r3, [r7, #6]
 800906a:	2b08      	cmp	r3, #8
 800906c:	d9f2      	bls.n	8009054 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800906e:	bf00      	nop
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	0801953c 	.word	0x0801953c

0800907c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d012      	beq.n	80090b8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	6812      	ldr	r2, [r2, #0]
 800909a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f003 0303 	and.w	r3, r3, #3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d006      	beq.n	80090b4 <do_memp_malloc_pool+0x38>
 80090a6:	4b07      	ldr	r3, [pc, #28]	; (80090c4 <do_memp_malloc_pool+0x48>)
 80090a8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80090ac:	4906      	ldr	r1, [pc, #24]	; (80090c8 <do_memp_malloc_pool+0x4c>)
 80090ae:	4807      	ldr	r0, [pc, #28]	; (80090cc <do_memp_malloc_pool+0x50>)
 80090b0:	f00a f990 	bl	80133d4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	e000      	b.n	80090ba <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	08016d90 	.word	0x08016d90
 80090c8:	08016dc0 	.word	0x08016dc0
 80090cc:	08016de4 	.word	0x08016de4

080090d0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80090da:	79fb      	ldrb	r3, [r7, #7]
 80090dc:	2b08      	cmp	r3, #8
 80090de:	d908      	bls.n	80090f2 <memp_malloc+0x22>
 80090e0:	4b0a      	ldr	r3, [pc, #40]	; (800910c <memp_malloc+0x3c>)
 80090e2:	f240 1257 	movw	r2, #343	; 0x157
 80090e6:	490a      	ldr	r1, [pc, #40]	; (8009110 <memp_malloc+0x40>)
 80090e8:	480a      	ldr	r0, [pc, #40]	; (8009114 <memp_malloc+0x44>)
 80090ea:	f00a f973 	bl	80133d4 <iprintf>
 80090ee:	2300      	movs	r3, #0
 80090f0:	e008      	b.n	8009104 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80090f2:	79fb      	ldrb	r3, [r7, #7]
 80090f4:	4a08      	ldr	r2, [pc, #32]	; (8009118 <memp_malloc+0x48>)
 80090f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7ff ffbe 	bl	800907c <do_memp_malloc_pool>
 8009100:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009102:	68fb      	ldr	r3, [r7, #12]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	08016d90 	.word	0x08016d90
 8009110:	08016e20 	.word	0x08016e20
 8009114:	08016de4 	.word	0x08016de4
 8009118:	0801953c 	.word	0x0801953c

0800911c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	f003 0303 	and.w	r3, r3, #3
 800912c:	2b00      	cmp	r3, #0
 800912e:	d006      	beq.n	800913e <do_memp_free_pool+0x22>
 8009130:	4b0a      	ldr	r3, [pc, #40]	; (800915c <do_memp_free_pool+0x40>)
 8009132:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009136:	490a      	ldr	r1, [pc, #40]	; (8009160 <do_memp_free_pool+0x44>)
 8009138:	480a      	ldr	r0, [pc, #40]	; (8009164 <do_memp_free_pool+0x48>)
 800913a:	f00a f94b 	bl	80133d4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009154:	bf00      	nop
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	08016d90 	.word	0x08016d90
 8009160:	08016e40 	.word	0x08016e40
 8009164:	08016de4 	.word	0x08016de4

08009168 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	6039      	str	r1, [r7, #0]
 8009172:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	2b08      	cmp	r3, #8
 8009178:	d907      	bls.n	800918a <memp_free+0x22>
 800917a:	4b0c      	ldr	r3, [pc, #48]	; (80091ac <memp_free+0x44>)
 800917c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009180:	490b      	ldr	r1, [pc, #44]	; (80091b0 <memp_free+0x48>)
 8009182:	480c      	ldr	r0, [pc, #48]	; (80091b4 <memp_free+0x4c>)
 8009184:	f00a f926 	bl	80133d4 <iprintf>
 8009188:	e00c      	b.n	80091a4 <memp_free+0x3c>

  if (mem == NULL) {
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d008      	beq.n	80091a2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009190:	79fb      	ldrb	r3, [r7, #7]
 8009192:	4a09      	ldr	r2, [pc, #36]	; (80091b8 <memp_free+0x50>)
 8009194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff ffbe 	bl	800911c <do_memp_free_pool>
 80091a0:	e000      	b.n	80091a4 <memp_free+0x3c>
    return;
 80091a2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	08016d90 	.word	0x08016d90
 80091b0:	08016e60 	.word	0x08016e60
 80091b4:	08016de4 	.word	0x08016de4
 80091b8:	0801953c 	.word	0x0801953c

080091bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80091c0:	bf00      	nop
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
	...

080091cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
 80091d8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d108      	bne.n	80091f2 <netif_add+0x26>
 80091e0:	4b57      	ldr	r3, [pc, #348]	; (8009340 <netif_add+0x174>)
 80091e2:	f240 1227 	movw	r2, #295	; 0x127
 80091e6:	4957      	ldr	r1, [pc, #348]	; (8009344 <netif_add+0x178>)
 80091e8:	4857      	ldr	r0, [pc, #348]	; (8009348 <netif_add+0x17c>)
 80091ea:	f00a f8f3 	bl	80133d4 <iprintf>
 80091ee:	2300      	movs	r3, #0
 80091f0:	e0a2      	b.n	8009338 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d108      	bne.n	800920a <netif_add+0x3e>
 80091f8:	4b51      	ldr	r3, [pc, #324]	; (8009340 <netif_add+0x174>)
 80091fa:	f44f 7294 	mov.w	r2, #296	; 0x128
 80091fe:	4953      	ldr	r1, [pc, #332]	; (800934c <netif_add+0x180>)
 8009200:	4851      	ldr	r0, [pc, #324]	; (8009348 <netif_add+0x17c>)
 8009202:	f00a f8e7 	bl	80133d4 <iprintf>
 8009206:	2300      	movs	r3, #0
 8009208:	e096      	b.n	8009338 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009210:	4b4f      	ldr	r3, [pc, #316]	; (8009350 <netif_add+0x184>)
 8009212:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800921a:	4b4d      	ldr	r3, [pc, #308]	; (8009350 <netif_add+0x184>)
 800921c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009224:	4b4a      	ldr	r3, [pc, #296]	; (8009350 <netif_add+0x184>)
 8009226:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4a45      	ldr	r2, [pc, #276]	; (8009354 <netif_add+0x188>)
 800923e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6a3a      	ldr	r2, [r7, #32]
 8009258:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 800925a:	4b3f      	ldr	r3, [pc, #252]	; (8009358 <netif_add+0x18c>)
 800925c:	781a      	ldrb	r2, [r3, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009268:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	68b9      	ldr	r1, [r7, #8]
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 f913 	bl	800949c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	4798      	blx	r3
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <netif_add+0xba>
    return NULL;
 8009282:	2300      	movs	r3, #0
 8009284:	e058      	b.n	8009338 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800928c:	2bff      	cmp	r3, #255	; 0xff
 800928e:	d103      	bne.n	8009298 <netif_add+0xcc>
        netif->num = 0;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800929c:	4b2f      	ldr	r3, [pc, #188]	; (800935c <netif_add+0x190>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	617b      	str	r3, [r7, #20]
 80092a2:	e02b      	b.n	80092fc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d106      	bne.n	80092ba <netif_add+0xee>
 80092ac:	4b24      	ldr	r3, [pc, #144]	; (8009340 <netif_add+0x174>)
 80092ae:	f240 128b 	movw	r2, #395	; 0x18b
 80092b2:	492b      	ldr	r1, [pc, #172]	; (8009360 <netif_add+0x194>)
 80092b4:	4824      	ldr	r0, [pc, #144]	; (8009348 <netif_add+0x17c>)
 80092b6:	f00a f88d 	bl	80133d4 <iprintf>
        num_netifs++;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	3301      	adds	r3, #1
 80092be:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	2bff      	cmp	r3, #255	; 0xff
 80092c4:	dd06      	ble.n	80092d4 <netif_add+0x108>
 80092c6:	4b1e      	ldr	r3, [pc, #120]	; (8009340 <netif_add+0x174>)
 80092c8:	f240 128d 	movw	r2, #397	; 0x18d
 80092cc:	4925      	ldr	r1, [pc, #148]	; (8009364 <netif_add+0x198>)
 80092ce:	481e      	ldr	r0, [pc, #120]	; (8009348 <netif_add+0x17c>)
 80092d0:	f00a f880 	bl	80133d4 <iprintf>
        if (netif2->num == netif->num) {
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d108      	bne.n	80092f6 <netif_add+0x12a>
          netif->num++;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092ea:	3301      	adds	r3, #1
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80092f4:	e005      	b.n	8009302 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1d0      	bne.n	80092a4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1be      	bne.n	8009286 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800930e:	2bfe      	cmp	r3, #254	; 0xfe
 8009310:	d103      	bne.n	800931a <netif_add+0x14e>
    netif_num = 0;
 8009312:	4b11      	ldr	r3, [pc, #68]	; (8009358 <netif_add+0x18c>)
 8009314:	2200      	movs	r2, #0
 8009316:	701a      	strb	r2, [r3, #0]
 8009318:	e006      	b.n	8009328 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009320:	3301      	adds	r3, #1
 8009322:	b2da      	uxtb	r2, r3
 8009324:	4b0c      	ldr	r3, [pc, #48]	; (8009358 <netif_add+0x18c>)
 8009326:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009328:	4b0c      	ldr	r3, [pc, #48]	; (800935c <netif_add+0x190>)
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009330:	4a0a      	ldr	r2, [pc, #40]	; (800935c <netif_add+0x190>)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009336:	68fb      	ldr	r3, [r7, #12]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	08016e7c 	.word	0x08016e7c
 8009344:	08016f10 	.word	0x08016f10
 8009348:	08016ecc 	.word	0x08016ecc
 800934c:	08016f2c 	.word	0x08016f2c
 8009350:	080195a0 	.word	0x080195a0
 8009354:	080096af 	.word	0x080096af
 8009358:	200002b8 	.word	0x200002b8
 800935c:	200090c8 	.word	0x200090c8
 8009360:	08016f50 	.word	0x08016f50
 8009364:	08016f64 	.word	0x08016f64

08009368 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f002 fb81 	bl	800ba7c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800937a:	6839      	ldr	r1, [r7, #0]
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f006 ffb1 	bl	80102e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009382:	bf00      	nop
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
	...

0800938c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b086      	sub	sp, #24
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d106      	bne.n	80093ac <netif_do_set_ipaddr+0x20>
 800939e:	4b1d      	ldr	r3, [pc, #116]	; (8009414 <netif_do_set_ipaddr+0x88>)
 80093a0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80093a4:	491c      	ldr	r1, [pc, #112]	; (8009418 <netif_do_set_ipaddr+0x8c>)
 80093a6:	481d      	ldr	r0, [pc, #116]	; (800941c <netif_do_set_ipaddr+0x90>)
 80093a8:	f00a f814 	bl	80133d4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d106      	bne.n	80093c0 <netif_do_set_ipaddr+0x34>
 80093b2:	4b18      	ldr	r3, [pc, #96]	; (8009414 <netif_do_set_ipaddr+0x88>)
 80093b4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80093b8:	4917      	ldr	r1, [pc, #92]	; (8009418 <netif_do_set_ipaddr+0x8c>)
 80093ba:	4818      	ldr	r0, [pc, #96]	; (800941c <netif_do_set_ipaddr+0x90>)
 80093bc:	f00a f80a 	bl	80133d4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	3304      	adds	r3, #4
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d01c      	beq.n	8009408 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	3304      	adds	r3, #4
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80093de:	f107 0314 	add.w	r3, r7, #20
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff ffbf 	bl	8009368 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <netif_do_set_ipaddr+0x6a>
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	e000      	b.n	80093f8 <netif_do_set_ipaddr+0x6c>
 80093f6:	2300      	movs	r3, #0
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80093fc:	2101      	movs	r1, #1
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f000 f8d2 	bl	80095a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009404:	2301      	movs	r3, #1
 8009406:	e000      	b.n	800940a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3718      	adds	r7, #24
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	08016e7c 	.word	0x08016e7c
 8009418:	08016f94 	.word	0x08016f94
 800941c:	08016ecc 	.word	0x08016ecc

08009420 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3308      	adds	r3, #8
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	429a      	cmp	r2, r3
 8009438:	d00a      	beq.n	8009450 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <netif_do_set_netmask+0x26>
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	e000      	b.n	8009448 <netif_do_set_netmask+0x28>
 8009446:	2300      	movs	r3, #0
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800944c:	2301      	movs	r3, #1
 800944e:	e000      	b.n	8009452 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800945e:	b480      	push	{r7}
 8009460:	b085      	sub	sp, #20
 8009462:	af00      	add	r7, sp, #0
 8009464:	60f8      	str	r0, [r7, #12]
 8009466:	60b9      	str	r1, [r7, #8]
 8009468:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	330c      	adds	r3, #12
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	429a      	cmp	r2, r3
 8009476:	d00a      	beq.n	800948e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d002      	beq.n	8009484 <netif_do_set_gw+0x26>
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	e000      	b.n	8009486 <netif_do_set_gw+0x28>
 8009484:	2300      	movs	r3, #0
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800948a:	2301      	movs	r3, #1
 800948c:	e000      	b.n	8009490 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
 80094a8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80094aa:	2300      	movs	r3, #0
 80094ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80094ae:	2300      	movs	r3, #0
 80094b0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80094b8:	4b1c      	ldr	r3, [pc, #112]	; (800952c <netif_set_addr+0x90>)
 80094ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80094c2:	4b1a      	ldr	r3, [pc, #104]	; (800952c <netif_set_addr+0x90>)
 80094c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80094cc:	4b17      	ldr	r3, [pc, #92]	; (800952c <netif_set_addr+0x90>)
 80094ce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <netif_set_addr+0x42>
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <netif_set_addr+0x46>
 80094de:	2301      	movs	r3, #1
 80094e0:	e000      	b.n	80094e4 <netif_set_addr+0x48>
 80094e2:	2300      	movs	r3, #0
 80094e4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d006      	beq.n	80094fa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80094ec:	f107 0310 	add.w	r3, r7, #16
 80094f0:	461a      	mov	r2, r3
 80094f2:	68b9      	ldr	r1, [r7, #8]
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f7ff ff49 	bl	800938c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80094fa:	69fa      	ldr	r2, [r7, #28]
 80094fc:	6879      	ldr	r1, [r7, #4]
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f7ff ff8e 	bl	8009420 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009504:	69ba      	ldr	r2, [r7, #24]
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7ff ffa8 	bl	800945e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d106      	bne.n	8009522 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009514:	f107 0310 	add.w	r3, r7, #16
 8009518:	461a      	mov	r2, r3
 800951a:	68b9      	ldr	r1, [r7, #8]
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f7ff ff35 	bl	800938c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009522:	bf00      	nop
 8009524:	3720      	adds	r7, #32
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	080195a0 	.word	0x080195a0

08009530 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009538:	4a04      	ldr	r2, [pc, #16]	; (800954c <netif_set_default+0x1c>)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800953e:	bf00      	nop
 8009540:	370c      	adds	r7, #12
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	200090cc 	.word	0x200090cc

08009550 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d107      	bne.n	800956e <netif_set_up+0x1e>
 800955e:	4b0f      	ldr	r3, [pc, #60]	; (800959c <netif_set_up+0x4c>)
 8009560:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009564:	490e      	ldr	r1, [pc, #56]	; (80095a0 <netif_set_up+0x50>)
 8009566:	480f      	ldr	r0, [pc, #60]	; (80095a4 <netif_set_up+0x54>)
 8009568:	f009 ff34 	bl	80133d4 <iprintf>
 800956c:	e013      	b.n	8009596 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10c      	bne.n	8009596 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009582:	f043 0301 	orr.w	r3, r3, #1
 8009586:	b2da      	uxtb	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800958e:	2103      	movs	r1, #3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f809 	bl	80095a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	08016e7c 	.word	0x08016e7c
 80095a0:	08017004 	.word	0x08017004
 80095a4:	08016ecc 	.word	0x08016ecc

080095a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d106      	bne.n	80095c8 <netif_issue_reports+0x20>
 80095ba:	4b18      	ldr	r3, [pc, #96]	; (800961c <netif_issue_reports+0x74>)
 80095bc:	f240 326d 	movw	r2, #877	; 0x36d
 80095c0:	4917      	ldr	r1, [pc, #92]	; (8009620 <netif_issue_reports+0x78>)
 80095c2:	4818      	ldr	r0, [pc, #96]	; (8009624 <netif_issue_reports+0x7c>)
 80095c4:	f009 ff06 	bl	80133d4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80095ce:	f003 0304 	and.w	r3, r3, #4
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d01e      	beq.n	8009614 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80095dc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d017      	beq.n	8009614 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80095e4:	78fb      	ldrb	r3, [r7, #3]
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d013      	beq.n	8009616 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	3304      	adds	r3, #4
 80095f2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00e      	beq.n	8009616 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80095fe:	f003 0308 	and.w	r3, r3, #8
 8009602:	2b00      	cmp	r3, #0
 8009604:	d007      	beq.n	8009616 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	3304      	adds	r3, #4
 800960a:	4619      	mov	r1, r3
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f007 fdd3 	bl	80111b8 <etharp_request>
 8009612:	e000      	b.n	8009616 <netif_issue_reports+0x6e>
    return;
 8009614:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	08016e7c 	.word	0x08016e7c
 8009620:	08017020 	.word	0x08017020
 8009624:	08016ecc 	.word	0x08016ecc

08009628 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d107      	bne.n	8009646 <netif_set_down+0x1e>
 8009636:	4b12      	ldr	r3, [pc, #72]	; (8009680 <netif_set_down+0x58>)
 8009638:	f240 329b 	movw	r2, #923	; 0x39b
 800963c:	4911      	ldr	r1, [pc, #68]	; (8009684 <netif_set_down+0x5c>)
 800963e:	4812      	ldr	r0, [pc, #72]	; (8009688 <netif_set_down+0x60>)
 8009640:	f009 fec8 	bl	80133d4 <iprintf>
 8009644:	e019      	b.n	800967a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	2b00      	cmp	r3, #0
 8009652:	d012      	beq.n	800967a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800965a:	f023 0301 	bic.w	r3, r3, #1
 800965e:	b2da      	uxtb	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800966c:	f003 0308 	and.w	r3, r3, #8
 8009670:	2b00      	cmp	r3, #0
 8009672:	d002      	beq.n	800967a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f007 f95d 	bl	8010934 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	08016e7c 	.word	0x08016e7c
 8009684:	08017044 	.word	0x08017044
 8009688:	08016ecc 	.word	0x08016ecc

0800968c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	61da      	str	r2, [r3, #28]
  }
}
 80096a2:	bf00      	nop
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b085      	sub	sp, #20
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80096ba:	f06f 030b 	mvn.w	r3, #11
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
	...

080096cc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	4603      	mov	r3, r0
 80096d4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80096d6:	79fb      	ldrb	r3, [r7, #7]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d013      	beq.n	8009704 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80096dc:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <netif_get_by_index+0x48>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	e00c      	b.n	80096fe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80096ea:	3301      	adds	r3, #1
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	79fa      	ldrb	r2, [r7, #7]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d101      	bne.n	80096f8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	e006      	b.n	8009706 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	60fb      	str	r3, [r7, #12]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1ef      	bne.n	80096e4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	200090c8 	.word	0x200090c8

08009718 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800971e:	4b0c      	ldr	r3, [pc, #48]	; (8009750 <pbuf_free_ooseq+0x38>)
 8009720:	2200      	movs	r2, #0
 8009722:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009724:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <pbuf_free_ooseq+0x3c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	607b      	str	r3, [r7, #4]
 800972a:	e00a      	b.n	8009742 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009730:	2b00      	cmp	r3, #0
 8009732:	d003      	beq.n	800973c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f002 f9df 	bl	800baf8 <tcp_free_ooseq>
      return;
 800973a:	e005      	b.n	8009748 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	607b      	str	r3, [r7, #4]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1f1      	bne.n	800972c <pbuf_free_ooseq+0x14>
    }
  }
}
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	200090d0 	.word	0x200090d0
 8009754:	200090d8 	.word	0x200090d8

08009758 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009758:	b480      	push	{r7}
 800975a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800975c:	4b03      	ldr	r3, [pc, #12]	; (800976c <pbuf_pool_is_empty+0x14>)
 800975e:	2201      	movs	r2, #1
 8009760:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009762:	bf00      	nop
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	200090d0 	.word	0x200090d0

08009770 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	4611      	mov	r1, r2
 800977c:	461a      	mov	r2, r3
 800977e:	460b      	mov	r3, r1
 8009780:	80fb      	strh	r3, [r7, #6]
 8009782:	4613      	mov	r3, r2
 8009784:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	88fa      	ldrh	r2, [r7, #6]
 8009796:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	88ba      	ldrh	r2, [r7, #4]
 800979c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800979e:	8b3b      	ldrh	r3, [r7, #24]
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	7f3a      	ldrb	r2, [r7, #28]
 80097aa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2201      	movs	r2, #1
 80097b0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	73da      	strb	r2, [r3, #15]
}
 80097b8:	bf00      	nop
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b08c      	sub	sp, #48	; 0x30
 80097c8:	af02      	add	r7, sp, #8
 80097ca:	4603      	mov	r3, r0
 80097cc:	71fb      	strb	r3, [r7, #7]
 80097ce:	460b      	mov	r3, r1
 80097d0:	80bb      	strh	r3, [r7, #4]
 80097d2:	4613      	mov	r3, r2
 80097d4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80097da:	887b      	ldrh	r3, [r7, #2]
 80097dc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80097e0:	d07f      	beq.n	80098e2 <pbuf_alloc+0x11e>
 80097e2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80097e6:	f300 80c8 	bgt.w	800997a <pbuf_alloc+0x1b6>
 80097ea:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80097ee:	d010      	beq.n	8009812 <pbuf_alloc+0x4e>
 80097f0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80097f4:	f300 80c1 	bgt.w	800997a <pbuf_alloc+0x1b6>
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d002      	beq.n	8009802 <pbuf_alloc+0x3e>
 80097fc:	2b41      	cmp	r3, #65	; 0x41
 80097fe:	f040 80bc 	bne.w	800997a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009802:	887a      	ldrh	r2, [r7, #2]
 8009804:	88bb      	ldrh	r3, [r7, #4]
 8009806:	4619      	mov	r1, r3
 8009808:	2000      	movs	r0, #0
 800980a:	f000 f8d1 	bl	80099b0 <pbuf_alloc_reference>
 800980e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009810:	e0bd      	b.n	800998e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009812:	2300      	movs	r3, #0
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009816:	2300      	movs	r3, #0
 8009818:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800981a:	88bb      	ldrh	r3, [r7, #4]
 800981c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800981e:	2008      	movs	r0, #8
 8009820:	f7ff fc56 	bl	80090d0 <memp_malloc>
 8009824:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d109      	bne.n	8009840 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800982c:	f7ff ff94 	bl	8009758 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	2b00      	cmp	r3, #0
 8009834:	d002      	beq.n	800983c <pbuf_alloc+0x78>
            pbuf_free(p);
 8009836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009838:	f000 faa8 	bl	8009d8c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800983c:	2300      	movs	r3, #0
 800983e:	e0a7      	b.n	8009990 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009840:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009842:	3303      	adds	r3, #3
 8009844:	b29b      	uxth	r3, r3
 8009846:	f023 0303 	bic.w	r3, r3, #3
 800984a:	b29b      	uxth	r3, r3
 800984c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009850:	b29b      	uxth	r3, r3
 8009852:	8b7a      	ldrh	r2, [r7, #26]
 8009854:	4293      	cmp	r3, r2
 8009856:	bf28      	it	cs
 8009858:	4613      	movcs	r3, r2
 800985a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800985c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800985e:	3310      	adds	r3, #16
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	4413      	add	r3, r2
 8009864:	3303      	adds	r3, #3
 8009866:	f023 0303 	bic.w	r3, r3, #3
 800986a:	4618      	mov	r0, r3
 800986c:	89f9      	ldrh	r1, [r7, #14]
 800986e:	8b7a      	ldrh	r2, [r7, #26]
 8009870:	2300      	movs	r3, #0
 8009872:	9301      	str	r3, [sp, #4]
 8009874:	887b      	ldrh	r3, [r7, #2]
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	460b      	mov	r3, r1
 800987a:	4601      	mov	r1, r0
 800987c:	6938      	ldr	r0, [r7, #16]
 800987e:	f7ff ff77 	bl	8009770 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	f003 0303 	and.w	r3, r3, #3
 800988a:	2b00      	cmp	r3, #0
 800988c:	d006      	beq.n	800989c <pbuf_alloc+0xd8>
 800988e:	4b42      	ldr	r3, [pc, #264]	; (8009998 <pbuf_alloc+0x1d4>)
 8009890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009894:	4941      	ldr	r1, [pc, #260]	; (800999c <pbuf_alloc+0x1d8>)
 8009896:	4842      	ldr	r0, [pc, #264]	; (80099a0 <pbuf_alloc+0x1dc>)
 8009898:	f009 fd9c 	bl	80133d4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800989c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800989e:	3303      	adds	r3, #3
 80098a0:	f023 0303 	bic.w	r3, r3, #3
 80098a4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80098a8:	d106      	bne.n	80098b8 <pbuf_alloc+0xf4>
 80098aa:	4b3b      	ldr	r3, [pc, #236]	; (8009998 <pbuf_alloc+0x1d4>)
 80098ac:	f44f 7281 	mov.w	r2, #258	; 0x102
 80098b0:	493c      	ldr	r1, [pc, #240]	; (80099a4 <pbuf_alloc+0x1e0>)
 80098b2:	483b      	ldr	r0, [pc, #236]	; (80099a0 <pbuf_alloc+0x1dc>)
 80098b4:	f009 fd8e 	bl	80133d4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d102      	bne.n	80098c4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	627b      	str	r3, [r7, #36]	; 0x24
 80098c2:	e002      	b.n	80098ca <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80098ce:	8b7a      	ldrh	r2, [r7, #26]
 80098d0:	89fb      	ldrh	r3, [r7, #14]
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80098da:	8b7b      	ldrh	r3, [r7, #26]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d19e      	bne.n	800981e <pbuf_alloc+0x5a>
      break;
 80098e0:	e055      	b.n	800998e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80098e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80098e4:	3303      	adds	r3, #3
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	f023 0303 	bic.w	r3, r3, #3
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	88bb      	ldrh	r3, [r7, #4]
 80098f0:	3303      	adds	r3, #3
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	f023 0303 	bic.w	r3, r3, #3
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	4413      	add	r3, r2
 80098fc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80098fe:	8b3b      	ldrh	r3, [r7, #24]
 8009900:	3310      	adds	r3, #16
 8009902:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009904:	8b3a      	ldrh	r2, [r7, #24]
 8009906:	88bb      	ldrh	r3, [r7, #4]
 8009908:	3303      	adds	r3, #3
 800990a:	f023 0303 	bic.w	r3, r3, #3
 800990e:	429a      	cmp	r2, r3
 8009910:	d306      	bcc.n	8009920 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009912:	8afa      	ldrh	r2, [r7, #22]
 8009914:	88bb      	ldrh	r3, [r7, #4]
 8009916:	3303      	adds	r3, #3
 8009918:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800991c:	429a      	cmp	r2, r3
 800991e:	d201      	bcs.n	8009924 <pbuf_alloc+0x160>
        return NULL;
 8009920:	2300      	movs	r3, #0
 8009922:	e035      	b.n	8009990 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009924:	8afb      	ldrh	r3, [r7, #22]
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff fa64 	bl	8008df4 <mem_malloc>
 800992c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	2b00      	cmp	r3, #0
 8009932:	d101      	bne.n	8009938 <pbuf_alloc+0x174>
        return NULL;
 8009934:	2300      	movs	r3, #0
 8009936:	e02b      	b.n	8009990 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009938:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800993a:	3310      	adds	r3, #16
 800993c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800993e:	4413      	add	r3, r2
 8009940:	3303      	adds	r3, #3
 8009942:	f023 0303 	bic.w	r3, r3, #3
 8009946:	4618      	mov	r0, r3
 8009948:	88b9      	ldrh	r1, [r7, #4]
 800994a:	88ba      	ldrh	r2, [r7, #4]
 800994c:	2300      	movs	r3, #0
 800994e:	9301      	str	r3, [sp, #4]
 8009950:	887b      	ldrh	r3, [r7, #2]
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	460b      	mov	r3, r1
 8009956:	4601      	mov	r1, r0
 8009958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800995a:	f7ff ff09 	bl	8009770 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f003 0303 	and.w	r3, r3, #3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d010      	beq.n	800998c <pbuf_alloc+0x1c8>
 800996a:	4b0b      	ldr	r3, [pc, #44]	; (8009998 <pbuf_alloc+0x1d4>)
 800996c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009970:	490d      	ldr	r1, [pc, #52]	; (80099a8 <pbuf_alloc+0x1e4>)
 8009972:	480b      	ldr	r0, [pc, #44]	; (80099a0 <pbuf_alloc+0x1dc>)
 8009974:	f009 fd2e 	bl	80133d4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009978:	e008      	b.n	800998c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800997a:	4b07      	ldr	r3, [pc, #28]	; (8009998 <pbuf_alloc+0x1d4>)
 800997c:	f240 1227 	movw	r2, #295	; 0x127
 8009980:	490a      	ldr	r1, [pc, #40]	; (80099ac <pbuf_alloc+0x1e8>)
 8009982:	4807      	ldr	r0, [pc, #28]	; (80099a0 <pbuf_alloc+0x1dc>)
 8009984:	f009 fd26 	bl	80133d4 <iprintf>
      return NULL;
 8009988:	2300      	movs	r3, #0
 800998a:	e001      	b.n	8009990 <pbuf_alloc+0x1cc>
      break;
 800998c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009990:	4618      	mov	r0, r3
 8009992:	3728      	adds	r7, #40	; 0x28
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	080170ac 	.word	0x080170ac
 800999c:	080170dc 	.word	0x080170dc
 80099a0:	0801710c 	.word	0x0801710c
 80099a4:	08017134 	.word	0x08017134
 80099a8:	08017168 	.word	0x08017168
 80099ac:	08017194 	.word	0x08017194

080099b0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af02      	add	r7, sp, #8
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	807b      	strh	r3, [r7, #2]
 80099bc:	4613      	mov	r3, r2
 80099be:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80099c0:	883b      	ldrh	r3, [r7, #0]
 80099c2:	2b41      	cmp	r3, #65	; 0x41
 80099c4:	d009      	beq.n	80099da <pbuf_alloc_reference+0x2a>
 80099c6:	883b      	ldrh	r3, [r7, #0]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d006      	beq.n	80099da <pbuf_alloc_reference+0x2a>
 80099cc:	4b0f      	ldr	r3, [pc, #60]	; (8009a0c <pbuf_alloc_reference+0x5c>)
 80099ce:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80099d2:	490f      	ldr	r1, [pc, #60]	; (8009a10 <pbuf_alloc_reference+0x60>)
 80099d4:	480f      	ldr	r0, [pc, #60]	; (8009a14 <pbuf_alloc_reference+0x64>)
 80099d6:	f009 fcfd 	bl	80133d4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80099da:	2007      	movs	r0, #7
 80099dc:	f7ff fb78 	bl	80090d0 <memp_malloc>
 80099e0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d101      	bne.n	80099ec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	e00b      	b.n	8009a04 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80099ec:	8879      	ldrh	r1, [r7, #2]
 80099ee:	887a      	ldrh	r2, [r7, #2]
 80099f0:	2300      	movs	r3, #0
 80099f2:	9301      	str	r3, [sp, #4]
 80099f4:	883b      	ldrh	r3, [r7, #0]
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	460b      	mov	r3, r1
 80099fa:	6879      	ldr	r1, [r7, #4]
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f7ff feb7 	bl	8009770 <pbuf_init_alloced_pbuf>
  return p;
 8009a02:	68fb      	ldr	r3, [r7, #12]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	080170ac 	.word	0x080170ac
 8009a10:	080171b0 	.word	0x080171b0
 8009a14:	0801710c 	.word	0x0801710c

08009a18 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af02      	add	r7, sp, #8
 8009a1e:	607b      	str	r3, [r7, #4]
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]
 8009a24:	460b      	mov	r3, r1
 8009a26:	81bb      	strh	r3, [r7, #12]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009a30:	8a7b      	ldrh	r3, [r7, #18]
 8009a32:	3303      	adds	r3, #3
 8009a34:	f023 0203 	bic.w	r2, r3, #3
 8009a38:	89bb      	ldrh	r3, [r7, #12]
 8009a3a:	441a      	add	r2, r3
 8009a3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d901      	bls.n	8009a46 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009a42:	2300      	movs	r3, #0
 8009a44:	e018      	b.n	8009a78 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d007      	beq.n	8009a5c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009a4c:	8a7b      	ldrh	r3, [r7, #18]
 8009a4e:	3303      	adds	r3, #3
 8009a50:	f023 0303 	bic.w	r3, r3, #3
 8009a54:	6a3a      	ldr	r2, [r7, #32]
 8009a56:	4413      	add	r3, r2
 8009a58:	617b      	str	r3, [r7, #20]
 8009a5a:	e001      	b.n	8009a60 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	89b9      	ldrh	r1, [r7, #12]
 8009a64:	89ba      	ldrh	r2, [r7, #12]
 8009a66:	2302      	movs	r3, #2
 8009a68:	9301      	str	r3, [sp, #4]
 8009a6a:	897b      	ldrh	r3, [r7, #10]
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	460b      	mov	r3, r1
 8009a70:	6979      	ldr	r1, [r7, #20]
 8009a72:	f7ff fe7d 	bl	8009770 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009a76:	687b      	ldr	r3, [r7, #4]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d106      	bne.n	8009aa0 <pbuf_realloc+0x20>
 8009a92:	4b3a      	ldr	r3, [pc, #232]	; (8009b7c <pbuf_realloc+0xfc>)
 8009a94:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009a98:	4939      	ldr	r1, [pc, #228]	; (8009b80 <pbuf_realloc+0x100>)
 8009a9a:	483a      	ldr	r0, [pc, #232]	; (8009b84 <pbuf_realloc+0x104>)
 8009a9c:	f009 fc9a 	bl	80133d4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	891b      	ldrh	r3, [r3, #8]
 8009aa4:	887a      	ldrh	r2, [r7, #2]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d263      	bcs.n	8009b72 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	891a      	ldrh	r2, [r3, #8]
 8009aae:	887b      	ldrh	r3, [r7, #2]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009ab4:	887b      	ldrh	r3, [r7, #2]
 8009ab6:	817b      	strh	r3, [r7, #10]
  q = p;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009abc:	e018      	b.n	8009af0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	895b      	ldrh	r3, [r3, #10]
 8009ac2:	897a      	ldrh	r2, [r7, #10]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	891a      	ldrh	r2, [r3, #8]
 8009acc:	893b      	ldrh	r3, [r7, #8]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <pbuf_realloc+0x70>
 8009ae2:	4b26      	ldr	r3, [pc, #152]	; (8009b7c <pbuf_realloc+0xfc>)
 8009ae4:	f240 12af 	movw	r2, #431	; 0x1af
 8009ae8:	4927      	ldr	r1, [pc, #156]	; (8009b88 <pbuf_realloc+0x108>)
 8009aea:	4826      	ldr	r0, [pc, #152]	; (8009b84 <pbuf_realloc+0x104>)
 8009aec:	f009 fc72 	bl	80133d4 <iprintf>
  while (rem_len > q->len) {
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	895b      	ldrh	r3, [r3, #10]
 8009af4:	897a      	ldrh	r2, [r7, #10]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d8e1      	bhi.n	8009abe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	7b1b      	ldrb	r3, [r3, #12]
 8009afe:	f003 030f 	and.w	r3, r3, #15
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d121      	bne.n	8009b4a <pbuf_realloc+0xca>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	895b      	ldrh	r3, [r3, #10]
 8009b0a:	897a      	ldrh	r2, [r7, #10]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d01c      	beq.n	8009b4a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	7b5b      	ldrb	r3, [r3, #13]
 8009b14:	f003 0302 	and.w	r3, r3, #2
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d116      	bne.n	8009b4a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	685a      	ldr	r2, [r3, #4]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	897b      	ldrh	r3, [r7, #10]
 8009b28:	4413      	add	r3, r2
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f7ff f864 	bl	8008bfc <mem_trim>
 8009b34:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d106      	bne.n	8009b4a <pbuf_realloc+0xca>
 8009b3c:	4b0f      	ldr	r3, [pc, #60]	; (8009b7c <pbuf_realloc+0xfc>)
 8009b3e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009b42:	4912      	ldr	r1, [pc, #72]	; (8009b8c <pbuf_realloc+0x10c>)
 8009b44:	480f      	ldr	r0, [pc, #60]	; (8009b84 <pbuf_realloc+0x104>)
 8009b46:	f009 fc45 	bl	80133d4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	897a      	ldrh	r2, [r7, #10]
 8009b4e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	895a      	ldrh	r2, [r3, #10]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 f911 	bl	8009d8c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	601a      	str	r2, [r3, #0]
 8009b70:	e000      	b.n	8009b74 <pbuf_realloc+0xf4>
    return;
 8009b72:	bf00      	nop

}
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	080170ac 	.word	0x080170ac
 8009b80:	080171c4 	.word	0x080171c4
 8009b84:	0801710c 	.word	0x0801710c
 8009b88:	080171dc 	.word	0x080171dc
 8009b8c:	080171f4 	.word	0x080171f4

08009b90 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d106      	bne.n	8009bb2 <pbuf_add_header_impl+0x22>
 8009ba4:	4b2b      	ldr	r3, [pc, #172]	; (8009c54 <pbuf_add_header_impl+0xc4>)
 8009ba6:	f240 12df 	movw	r2, #479	; 0x1df
 8009baa:	492b      	ldr	r1, [pc, #172]	; (8009c58 <pbuf_add_header_impl+0xc8>)
 8009bac:	482b      	ldr	r0, [pc, #172]	; (8009c5c <pbuf_add_header_impl+0xcc>)
 8009bae:	f009 fc11 	bl	80133d4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d003      	beq.n	8009bc0 <pbuf_add_header_impl+0x30>
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bbe:	d301      	bcc.n	8009bc4 <pbuf_add_header_impl+0x34>
    return 1;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e043      	b.n	8009c4c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d101      	bne.n	8009bce <pbuf_add_header_impl+0x3e>
    return 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	e03e      	b.n	8009c4c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	891a      	ldrh	r2, [r3, #8]
 8009bd6:	8a7b      	ldrh	r3, [r7, #18]
 8009bd8:	4413      	add	r3, r2
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	8a7a      	ldrh	r2, [r7, #18]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d901      	bls.n	8009be6 <pbuf_add_header_impl+0x56>
    return 1;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e032      	b.n	8009c4c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	7b1b      	ldrb	r3, [r3, #12]
 8009bea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009bec:	8a3b      	ldrh	r3, [r7, #16]
 8009bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00c      	beq.n	8009c10 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	425b      	negs	r3, r3
 8009bfe:	4413      	add	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3310      	adds	r3, #16
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d20d      	bcs.n	8009c28 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e01d      	b.n	8009c4c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009c10:	79fb      	ldrb	r3, [r7, #7]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d006      	beq.n	8009c24 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	425b      	negs	r3, r3
 8009c1e:	4413      	add	r3, r2
 8009c20:	617b      	str	r3, [r7, #20]
 8009c22:	e001      	b.n	8009c28 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e011      	b.n	8009c4c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	895a      	ldrh	r2, [r3, #10]
 8009c32:	8a7b      	ldrh	r3, [r7, #18]
 8009c34:	4413      	add	r3, r2
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	891a      	ldrh	r2, [r3, #8]
 8009c40:	8a7b      	ldrh	r3, [r7, #18]
 8009c42:	4413      	add	r3, r2
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	811a      	strh	r2, [r3, #8]


  return 0;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3718      	adds	r7, #24
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	080170ac 	.word	0x080170ac
 8009c58:	08017210 	.word	0x08017210
 8009c5c:	0801710c 	.word	0x0801710c

08009c60 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7ff ff8e 	bl	8009b90 <pbuf_add_header_impl>
 8009c74:	4603      	mov	r3, r0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
	...

08009c80 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d106      	bne.n	8009c9e <pbuf_remove_header+0x1e>
 8009c90:	4b20      	ldr	r3, [pc, #128]	; (8009d14 <pbuf_remove_header+0x94>)
 8009c92:	f240 224b 	movw	r2, #587	; 0x24b
 8009c96:	4920      	ldr	r1, [pc, #128]	; (8009d18 <pbuf_remove_header+0x98>)
 8009c98:	4820      	ldr	r0, [pc, #128]	; (8009d1c <pbuf_remove_header+0x9c>)
 8009c9a:	f009 fb9b 	bl	80133d4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d003      	beq.n	8009cac <pbuf_remove_header+0x2c>
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009caa:	d301      	bcc.n	8009cb0 <pbuf_remove_header+0x30>
    return 1;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e02c      	b.n	8009d0a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d101      	bne.n	8009cba <pbuf_remove_header+0x3a>
    return 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	e027      	b.n	8009d0a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	895b      	ldrh	r3, [r3, #10]
 8009cc2:	89fa      	ldrh	r2, [r7, #14]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d908      	bls.n	8009cda <pbuf_remove_header+0x5a>
 8009cc8:	4b12      	ldr	r3, [pc, #72]	; (8009d14 <pbuf_remove_header+0x94>)
 8009cca:	f240 2255 	movw	r2, #597	; 0x255
 8009cce:	4914      	ldr	r1, [pc, #80]	; (8009d20 <pbuf_remove_header+0xa0>)
 8009cd0:	4812      	ldr	r0, [pc, #72]	; (8009d1c <pbuf_remove_header+0x9c>)
 8009cd2:	f009 fb7f 	bl	80133d4 <iprintf>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e017      	b.n	8009d0a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	441a      	add	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	895a      	ldrh	r2, [r3, #10]
 8009cf0:	89fb      	ldrh	r3, [r7, #14]
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	891a      	ldrh	r2, [r3, #8]
 8009cfe:	89fb      	ldrh	r3, [r7, #14]
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	080170ac 	.word	0x080170ac
 8009d18:	08017210 	.word	0x08017210
 8009d1c:	0801710c 	.word	0x0801710c
 8009d20:	0801721c 	.word	0x0801721c

08009d24 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	807b      	strh	r3, [r7, #2]
 8009d30:	4613      	mov	r3, r2
 8009d32:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009d34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	da08      	bge.n	8009d4e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009d3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d40:	425b      	negs	r3, r3
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff ff9b 	bl	8009c80 <pbuf_remove_header>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	e007      	b.n	8009d5e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009d4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d52:	787a      	ldrb	r2, [r7, #1]
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7ff ff1a 	bl	8009b90 <pbuf_add_header_impl>
 8009d5c:	4603      	mov	r3, r0
  }
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009d72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d76:	2201      	movs	r2, #1
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7ff ffd2 	bl	8009d24 <pbuf_header_impl>
 8009d80:	4603      	mov	r3, r0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10b      	bne.n	8009db2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d106      	bne.n	8009dae <pbuf_free+0x22>
 8009da0:	4b38      	ldr	r3, [pc, #224]	; (8009e84 <pbuf_free+0xf8>)
 8009da2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009da6:	4938      	ldr	r1, [pc, #224]	; (8009e88 <pbuf_free+0xfc>)
 8009da8:	4838      	ldr	r0, [pc, #224]	; (8009e8c <pbuf_free+0x100>)
 8009daa:	f009 fb13 	bl	80133d4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	e063      	b.n	8009e7a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009db2:	2300      	movs	r3, #0
 8009db4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009db6:	e05c      	b.n	8009e72 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	7b9b      	ldrb	r3, [r3, #14]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d106      	bne.n	8009dce <pbuf_free+0x42>
 8009dc0:	4b30      	ldr	r3, [pc, #192]	; (8009e84 <pbuf_free+0xf8>)
 8009dc2:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009dc6:	4932      	ldr	r1, [pc, #200]	; (8009e90 <pbuf_free+0x104>)
 8009dc8:	4830      	ldr	r0, [pc, #192]	; (8009e8c <pbuf_free+0x100>)
 8009dca:	f009 fb03 	bl	80133d4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	7b9b      	ldrb	r3, [r3, #14]
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	739a      	strb	r2, [r3, #14]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	7b9b      	ldrb	r3, [r3, #14]
 8009dde:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009de0:	7dbb      	ldrb	r3, [r7, #22]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d143      	bne.n	8009e6e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	7b1b      	ldrb	r3, [r3, #12]
 8009df0:	f003 030f 	and.w	r3, r3, #15
 8009df4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	7b5b      	ldrb	r3, [r3, #13]
 8009dfa:	f003 0302 	and.w	r3, r3, #2
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d011      	beq.n	8009e26 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d106      	bne.n	8009e1c <pbuf_free+0x90>
 8009e0e:	4b1d      	ldr	r3, [pc, #116]	; (8009e84 <pbuf_free+0xf8>)
 8009e10:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009e14:	491f      	ldr	r1, [pc, #124]	; (8009e94 <pbuf_free+0x108>)
 8009e16:	481d      	ldr	r0, [pc, #116]	; (8009e8c <pbuf_free+0x100>)
 8009e18:	f009 fadc 	bl	80133d4 <iprintf>
        pc->custom_free_function(p);
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	4798      	blx	r3
 8009e24:	e01d      	b.n	8009e62 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d104      	bne.n	8009e36 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009e2c:	6879      	ldr	r1, [r7, #4]
 8009e2e:	2008      	movs	r0, #8
 8009e30:	f7ff f99a 	bl	8009168 <memp_free>
 8009e34:	e015      	b.n	8009e62 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d104      	bne.n	8009e46 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009e3c:	6879      	ldr	r1, [r7, #4]
 8009e3e:	2007      	movs	r0, #7
 8009e40:	f7ff f992 	bl	8009168 <memp_free>
 8009e44:	e00d      	b.n	8009e62 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d103      	bne.n	8009e54 <pbuf_free+0xc8>
          mem_free(p);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f7fe fe6b 	bl	8008b28 <mem_free>
 8009e52:	e006      	b.n	8009e62 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009e54:	4b0b      	ldr	r3, [pc, #44]	; (8009e84 <pbuf_free+0xf8>)
 8009e56:	f240 320f 	movw	r2, #783	; 0x30f
 8009e5a:	490f      	ldr	r1, [pc, #60]	; (8009e98 <pbuf_free+0x10c>)
 8009e5c:	480b      	ldr	r0, [pc, #44]	; (8009e8c <pbuf_free+0x100>)
 8009e5e:	f009 fab9 	bl	80133d4 <iprintf>
        }
      }
      count++;
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	3301      	adds	r3, #1
 8009e66:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	607b      	str	r3, [r7, #4]
 8009e6c:	e001      	b.n	8009e72 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d19f      	bne.n	8009db8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	080170ac 	.word	0x080170ac
 8009e88:	08017210 	.word	0x08017210
 8009e8c:	0801710c 	.word	0x0801710c
 8009e90:	0801723c 	.word	0x0801723c
 8009e94:	08017254 	.word	0x08017254
 8009e98:	08017278 	.word	0x08017278

08009e9c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009ea8:	e005      	b.n	8009eb6 <pbuf_clen+0x1a>
    ++len;
 8009eaa:	89fb      	ldrh	r3, [r7, #14]
 8009eac:	3301      	adds	r3, #1
 8009eae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1f6      	bne.n	8009eaa <pbuf_clen+0xe>
  }
  return len;
 8009ebc:	89fb      	ldrh	r3, [r7, #14]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
	...

08009ecc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d010      	beq.n	8009efc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	7b9b      	ldrb	r3, [r3, #14]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	7b9b      	ldrb	r3, [r3, #14]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d106      	bne.n	8009efc <pbuf_ref+0x30>
 8009eee:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <pbuf_ref+0x38>)
 8009ef0:	f240 3242 	movw	r2, #834	; 0x342
 8009ef4:	4904      	ldr	r1, [pc, #16]	; (8009f08 <pbuf_ref+0x3c>)
 8009ef6:	4805      	ldr	r0, [pc, #20]	; (8009f0c <pbuf_ref+0x40>)
 8009ef8:	f009 fa6c 	bl	80133d4 <iprintf>
  }
}
 8009efc:	bf00      	nop
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	080170ac 	.word	0x080170ac
 8009f08:	0801728c 	.word	0x0801728c
 8009f0c:	0801710c 	.word	0x0801710c

08009f10 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <pbuf_cat+0x16>
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d107      	bne.n	8009f36 <pbuf_cat+0x26>
 8009f26:	4b20      	ldr	r3, [pc, #128]	; (8009fa8 <pbuf_cat+0x98>)
 8009f28:	f240 3259 	movw	r2, #857	; 0x359
 8009f2c:	491f      	ldr	r1, [pc, #124]	; (8009fac <pbuf_cat+0x9c>)
 8009f2e:	4820      	ldr	r0, [pc, #128]	; (8009fb0 <pbuf_cat+0xa0>)
 8009f30:	f009 fa50 	bl	80133d4 <iprintf>
 8009f34:	e034      	b.n	8009fa0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	60fb      	str	r3, [r7, #12]
 8009f3a:	e00a      	b.n	8009f52 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	891a      	ldrh	r2, [r3, #8]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	891b      	ldrh	r3, [r3, #8]
 8009f44:	4413      	add	r3, r2
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	60fb      	str	r3, [r7, #12]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1f0      	bne.n	8009f3c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	891a      	ldrh	r2, [r3, #8]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	895b      	ldrh	r3, [r3, #10]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d006      	beq.n	8009f74 <pbuf_cat+0x64>
 8009f66:	4b10      	ldr	r3, [pc, #64]	; (8009fa8 <pbuf_cat+0x98>)
 8009f68:	f240 3262 	movw	r2, #866	; 0x362
 8009f6c:	4911      	ldr	r1, [pc, #68]	; (8009fb4 <pbuf_cat+0xa4>)
 8009f6e:	4810      	ldr	r0, [pc, #64]	; (8009fb0 <pbuf_cat+0xa0>)
 8009f70:	f009 fa30 	bl	80133d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d006      	beq.n	8009f8a <pbuf_cat+0x7a>
 8009f7c:	4b0a      	ldr	r3, [pc, #40]	; (8009fa8 <pbuf_cat+0x98>)
 8009f7e:	f240 3263 	movw	r2, #867	; 0x363
 8009f82:	490d      	ldr	r1, [pc, #52]	; (8009fb8 <pbuf_cat+0xa8>)
 8009f84:	480a      	ldr	r0, [pc, #40]	; (8009fb0 <pbuf_cat+0xa0>)
 8009f86:	f009 fa25 	bl	80133d4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	891a      	ldrh	r2, [r3, #8]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	891b      	ldrh	r3, [r3, #8]
 8009f92:	4413      	add	r3, r2
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	080170ac 	.word	0x080170ac
 8009fac:	080172a0 	.word	0x080172a0
 8009fb0:	0801710c 	.word	0x0801710c
 8009fb4:	080172d8 	.word	0x080172d8
 8009fb8:	08017308 	.word	0x08017308

08009fbc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7ff ffa1 	bl	8009f10 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009fce:	6838      	ldr	r0, [r7, #0]
 8009fd0:	f7ff ff7c 	bl	8009ecc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009fd4:	bf00      	nop
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	617b      	str	r3, [r7, #20]
 8009fea:	2300      	movs	r3, #0
 8009fec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d008      	beq.n	800a006 <pbuf_copy+0x2a>
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d005      	beq.n	800a006 <pbuf_copy+0x2a>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	891a      	ldrh	r2, [r3, #8]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	891b      	ldrh	r3, [r3, #8]
 800a002:	429a      	cmp	r2, r3
 800a004:	d209      	bcs.n	800a01a <pbuf_copy+0x3e>
 800a006:	4b57      	ldr	r3, [pc, #348]	; (800a164 <pbuf_copy+0x188>)
 800a008:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a00c:	4956      	ldr	r1, [pc, #344]	; (800a168 <pbuf_copy+0x18c>)
 800a00e:	4857      	ldr	r0, [pc, #348]	; (800a16c <pbuf_copy+0x190>)
 800a010:	f009 f9e0 	bl	80133d4 <iprintf>
 800a014:	f06f 030f 	mvn.w	r3, #15
 800a018:	e09f      	b.n	800a15a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	895b      	ldrh	r3, [r3, #10]
 800a01e:	461a      	mov	r2, r3
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	1ad2      	subs	r2, r2, r3
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	895b      	ldrh	r3, [r3, #10]
 800a028:	4619      	mov	r1, r3
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	1acb      	subs	r3, r1, r3
 800a02e:	429a      	cmp	r2, r3
 800a030:	d306      	bcc.n	800a040 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	895b      	ldrh	r3, [r3, #10]
 800a036:	461a      	mov	r2, r3
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	60fb      	str	r3, [r7, #12]
 800a03e:	e005      	b.n	800a04c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	895b      	ldrh	r3, [r3, #10]
 800a044:	461a      	mov	r2, r3
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	18d0      	adds	r0, r2, r3
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	4413      	add	r3, r2
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	4619      	mov	r1, r3
 800a060:	f008 fc74 	bl	801294c <memcpy>
    offset_to += len;
 800a064:	697a      	ldr	r2, [r7, #20]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	4413      	add	r3, r2
 800a06a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	4413      	add	r3, r2
 800a072:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	895b      	ldrh	r3, [r3, #10]
 800a078:	461a      	mov	r2, r3
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d906      	bls.n	800a08e <pbuf_copy+0xb2>
 800a080:	4b38      	ldr	r3, [pc, #224]	; (800a164 <pbuf_copy+0x188>)
 800a082:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a086:	493a      	ldr	r1, [pc, #232]	; (800a170 <pbuf_copy+0x194>)
 800a088:	4838      	ldr	r0, [pc, #224]	; (800a16c <pbuf_copy+0x190>)
 800a08a:	f009 f9a3 	bl	80133d4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	895b      	ldrh	r3, [r3, #10]
 800a092:	461a      	mov	r2, r3
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	4293      	cmp	r3, r2
 800a098:	d906      	bls.n	800a0a8 <pbuf_copy+0xcc>
 800a09a:	4b32      	ldr	r3, [pc, #200]	; (800a164 <pbuf_copy+0x188>)
 800a09c:	f240 32da 	movw	r2, #986	; 0x3da
 800a0a0:	4934      	ldr	r1, [pc, #208]	; (800a174 <pbuf_copy+0x198>)
 800a0a2:	4832      	ldr	r0, [pc, #200]	; (800a16c <pbuf_copy+0x190>)
 800a0a4:	f009 f996 	bl	80133d4 <iprintf>
    if (offset_from >= p_from->len) {
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	895b      	ldrh	r3, [r3, #10]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d304      	bcc.n	800a0be <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	895b      	ldrh	r3, [r3, #10]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d114      	bne.n	800a0f4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10c      	bne.n	800a0f4 <pbuf_copy+0x118>
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d009      	beq.n	800a0f4 <pbuf_copy+0x118>
 800a0e0:	4b20      	ldr	r3, [pc, #128]	; (800a164 <pbuf_copy+0x188>)
 800a0e2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a0e6:	4924      	ldr	r1, [pc, #144]	; (800a178 <pbuf_copy+0x19c>)
 800a0e8:	4820      	ldr	r0, [pc, #128]	; (800a16c <pbuf_copy+0x190>)
 800a0ea:	f009 f973 	bl	80133d4 <iprintf>
 800a0ee:	f06f 030f 	mvn.w	r3, #15
 800a0f2:	e032      	b.n	800a15a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d013      	beq.n	800a122 <pbuf_copy+0x146>
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	895a      	ldrh	r2, [r3, #10]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	891b      	ldrh	r3, [r3, #8]
 800a102:	429a      	cmp	r2, r3
 800a104:	d10d      	bne.n	800a122 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d009      	beq.n	800a122 <pbuf_copy+0x146>
 800a10e:	4b15      	ldr	r3, [pc, #84]	; (800a164 <pbuf_copy+0x188>)
 800a110:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a114:	4919      	ldr	r1, [pc, #100]	; (800a17c <pbuf_copy+0x1a0>)
 800a116:	4815      	ldr	r0, [pc, #84]	; (800a16c <pbuf_copy+0x190>)
 800a118:	f009 f95c 	bl	80133d4 <iprintf>
 800a11c:	f06f 0305 	mvn.w	r3, #5
 800a120:	e01b      	b.n	800a15a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d013      	beq.n	800a150 <pbuf_copy+0x174>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	895a      	ldrh	r2, [r3, #10]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	891b      	ldrh	r3, [r3, #8]
 800a130:	429a      	cmp	r2, r3
 800a132:	d10d      	bne.n	800a150 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d009      	beq.n	800a150 <pbuf_copy+0x174>
 800a13c:	4b09      	ldr	r3, [pc, #36]	; (800a164 <pbuf_copy+0x188>)
 800a13e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a142:	490e      	ldr	r1, [pc, #56]	; (800a17c <pbuf_copy+0x1a0>)
 800a144:	4809      	ldr	r0, [pc, #36]	; (800a16c <pbuf_copy+0x190>)
 800a146:	f009 f945 	bl	80133d4 <iprintf>
 800a14a:	f06f 0305 	mvn.w	r3, #5
 800a14e:	e004      	b.n	800a15a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	f47f af61 	bne.w	800a01a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3718      	adds	r7, #24
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	080170ac 	.word	0x080170ac
 800a168:	08017354 	.word	0x08017354
 800a16c:	0801710c 	.word	0x0801710c
 800a170:	08017384 	.word	0x08017384
 800a174:	0801739c 	.word	0x0801739c
 800a178:	080173b8 	.word	0x080173b8
 800a17c:	080173c8 	.word	0x080173c8

0800a180 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	4611      	mov	r1, r2
 800a18c:	461a      	mov	r2, r3
 800a18e:	460b      	mov	r3, r1
 800a190:	80fb      	strh	r3, [r7, #6]
 800a192:	4613      	mov	r3, r2
 800a194:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a19a:	2300      	movs	r3, #0
 800a19c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d108      	bne.n	800a1b6 <pbuf_copy_partial+0x36>
 800a1a4:	4b2b      	ldr	r3, [pc, #172]	; (800a254 <pbuf_copy_partial+0xd4>)
 800a1a6:	f240 420a 	movw	r2, #1034	; 0x40a
 800a1aa:	492b      	ldr	r1, [pc, #172]	; (800a258 <pbuf_copy_partial+0xd8>)
 800a1ac:	482b      	ldr	r0, [pc, #172]	; (800a25c <pbuf_copy_partial+0xdc>)
 800a1ae:	f009 f911 	bl	80133d4 <iprintf>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	e04a      	b.n	800a24c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d108      	bne.n	800a1ce <pbuf_copy_partial+0x4e>
 800a1bc:	4b25      	ldr	r3, [pc, #148]	; (800a254 <pbuf_copy_partial+0xd4>)
 800a1be:	f240 420b 	movw	r2, #1035	; 0x40b
 800a1c2:	4927      	ldr	r1, [pc, #156]	; (800a260 <pbuf_copy_partial+0xe0>)
 800a1c4:	4825      	ldr	r0, [pc, #148]	; (800a25c <pbuf_copy_partial+0xdc>)
 800a1c6:	f009 f905 	bl	80133d4 <iprintf>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e03e      	b.n	800a24c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	61fb      	str	r3, [r7, #28]
 800a1d2:	e034      	b.n	800a23e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a1d4:	88bb      	ldrh	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00a      	beq.n	800a1f0 <pbuf_copy_partial+0x70>
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	895b      	ldrh	r3, [r3, #10]
 800a1de:	88ba      	ldrh	r2, [r7, #4]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d305      	bcc.n	800a1f0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	895b      	ldrh	r3, [r3, #10]
 800a1e8:	88ba      	ldrh	r2, [r7, #4]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	80bb      	strh	r3, [r7, #4]
 800a1ee:	e023      	b.n	800a238 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	895a      	ldrh	r2, [r3, #10]
 800a1f4:	88bb      	ldrh	r3, [r7, #4]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a1fa:	8b3a      	ldrh	r2, [r7, #24]
 800a1fc:	88fb      	ldrh	r3, [r7, #6]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d901      	bls.n	800a206 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a202:	88fb      	ldrh	r3, [r7, #6]
 800a204:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a206:	8b7b      	ldrh	r3, [r7, #26]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	18d0      	adds	r0, r2, r3
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	88bb      	ldrh	r3, [r7, #4]
 800a212:	4413      	add	r3, r2
 800a214:	8b3a      	ldrh	r2, [r7, #24]
 800a216:	4619      	mov	r1, r3
 800a218:	f008 fb98 	bl	801294c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a21c:	8afa      	ldrh	r2, [r7, #22]
 800a21e:	8b3b      	ldrh	r3, [r7, #24]
 800a220:	4413      	add	r3, r2
 800a222:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a224:	8b7a      	ldrh	r2, [r7, #26]
 800a226:	8b3b      	ldrh	r3, [r7, #24]
 800a228:	4413      	add	r3, r2
 800a22a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a22c:	88fa      	ldrh	r2, [r7, #6]
 800a22e:	8b3b      	ldrh	r3, [r7, #24]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	61fb      	str	r3, [r7, #28]
 800a23e:	88fb      	ldrh	r3, [r7, #6]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <pbuf_copy_partial+0xca>
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1c4      	bne.n	800a1d4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a24a:	8afb      	ldrh	r3, [r7, #22]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3720      	adds	r7, #32
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	080170ac 	.word	0x080170ac
 800a258:	080173f4 	.word	0x080173f4
 800a25c:	0801710c 	.word	0x0801710c
 800a260:	08017414 	.word	0x08017414

0800a264 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b088      	sub	sp, #32
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	4613      	mov	r3, r2
 800a270:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800a272:	88fb      	ldrh	r3, [r7, #6]
 800a274:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800a276:	2300      	movs	r3, #0
 800a278:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d109      	bne.n	800a294 <pbuf_take+0x30>
 800a280:	4b3a      	ldr	r3, [pc, #232]	; (800a36c <pbuf_take+0x108>)
 800a282:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800a286:	493a      	ldr	r1, [pc, #232]	; (800a370 <pbuf_take+0x10c>)
 800a288:	483a      	ldr	r0, [pc, #232]	; (800a374 <pbuf_take+0x110>)
 800a28a:	f009 f8a3 	bl	80133d4 <iprintf>
 800a28e:	f06f 030f 	mvn.w	r3, #15
 800a292:	e067      	b.n	800a364 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d109      	bne.n	800a2ae <pbuf_take+0x4a>
 800a29a:	4b34      	ldr	r3, [pc, #208]	; (800a36c <pbuf_take+0x108>)
 800a29c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800a2a0:	4935      	ldr	r1, [pc, #212]	; (800a378 <pbuf_take+0x114>)
 800a2a2:	4834      	ldr	r0, [pc, #208]	; (800a374 <pbuf_take+0x110>)
 800a2a4:	f009 f896 	bl	80133d4 <iprintf>
 800a2a8:	f06f 030f 	mvn.w	r3, #15
 800a2ac:	e05a      	b.n	800a364 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	891b      	ldrh	r3, [r3, #8]
 800a2b2:	88fa      	ldrh	r2, [r7, #6]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d909      	bls.n	800a2cc <pbuf_take+0x68>
 800a2b8:	4b2c      	ldr	r3, [pc, #176]	; (800a36c <pbuf_take+0x108>)
 800a2ba:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800a2be:	492f      	ldr	r1, [pc, #188]	; (800a37c <pbuf_take+0x118>)
 800a2c0:	482c      	ldr	r0, [pc, #176]	; (800a374 <pbuf_take+0x110>)
 800a2c2:	f009 f887 	bl	80133d4 <iprintf>
 800a2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ca:	e04b      	b.n	800a364 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d007      	beq.n	800a2e2 <pbuf_take+0x7e>
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d004      	beq.n	800a2e2 <pbuf_take+0x7e>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	891b      	ldrh	r3, [r3, #8]
 800a2dc:	88fa      	ldrh	r2, [r7, #6]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d902      	bls.n	800a2e8 <pbuf_take+0x84>
    return ERR_ARG;
 800a2e2:	f06f 030f 	mvn.w	r3, #15
 800a2e6:	e03d      	b.n	800a364 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	61fb      	str	r3, [r7, #28]
 800a2ec:	e028      	b.n	800a340 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d106      	bne.n	800a302 <pbuf_take+0x9e>
 800a2f4:	4b1d      	ldr	r3, [pc, #116]	; (800a36c <pbuf_take+0x108>)
 800a2f6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800a2fa:	4921      	ldr	r1, [pc, #132]	; (800a380 <pbuf_take+0x11c>)
 800a2fc:	481d      	ldr	r0, [pc, #116]	; (800a374 <pbuf_take+0x110>)
 800a2fe:	f009 f869 	bl	80133d4 <iprintf>
    buf_copy_len = total_copy_len;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	895b      	ldrh	r3, [r3, #10]
 800a30a:	461a      	mov	r2, r3
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	4293      	cmp	r3, r2
 800a310:	d902      	bls.n	800a318 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	895b      	ldrh	r3, [r3, #10]
 800a316:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	6858      	ldr	r0, [r3, #4]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	4413      	add	r3, r2
 800a322:	69ba      	ldr	r2, [r7, #24]
 800a324:	4619      	mov	r1, r3
 800a326:	f008 fb11 	bl	801294c <memcpy>
    total_copy_len -= buf_copy_len;
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	1ad3      	subs	r3, r2, r3
 800a330:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	4413      	add	r3, r2
 800a338:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	61fb      	str	r3, [r7, #28]
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1d3      	bne.n	800a2ee <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d103      	bne.n	800a354 <pbuf_take+0xf0>
 800a34c:	88fb      	ldrh	r3, [r7, #6]
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	429a      	cmp	r2, r3
 800a352:	d006      	beq.n	800a362 <pbuf_take+0xfe>
 800a354:	4b05      	ldr	r3, [pc, #20]	; (800a36c <pbuf_take+0x108>)
 800a356:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800a35a:	490a      	ldr	r1, [pc, #40]	; (800a384 <pbuf_take+0x120>)
 800a35c:	4805      	ldr	r0, [pc, #20]	; (800a374 <pbuf_take+0x110>)
 800a35e:	f009 f839 	bl	80133d4 <iprintf>
  return ERR_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3720      	adds	r7, #32
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	080170ac 	.word	0x080170ac
 800a370:	08017484 	.word	0x08017484
 800a374:	0801710c 	.word	0x0801710c
 800a378:	0801749c 	.word	0x0801749c
 800a37c:	080174b8 	.word	0x080174b8
 800a380:	080174d8 	.word	0x080174d8
 800a384:	080174f0 	.word	0x080174f0

0800a388 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	603a      	str	r2, [r7, #0]
 800a392:	71fb      	strb	r3, [r7, #7]
 800a394:	460b      	mov	r3, r1
 800a396:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	8919      	ldrh	r1, [r3, #8]
 800a39c:	88ba      	ldrh	r2, [r7, #4]
 800a39e:	79fb      	ldrb	r3, [r7, #7]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff fa0f 	bl	80097c4 <pbuf_alloc>
 800a3a6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <pbuf_clone+0x2a>
    return NULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	e011      	b.n	800a3d6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f7ff fe11 	bl	8009fdc <pbuf_copy>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a3be:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d006      	beq.n	800a3d4 <pbuf_clone+0x4c>
 800a3c6:	4b06      	ldr	r3, [pc, #24]	; (800a3e0 <pbuf_clone+0x58>)
 800a3c8:	f240 5224 	movw	r2, #1316	; 0x524
 800a3cc:	4905      	ldr	r1, [pc, #20]	; (800a3e4 <pbuf_clone+0x5c>)
 800a3ce:	4806      	ldr	r0, [pc, #24]	; (800a3e8 <pbuf_clone+0x60>)
 800a3d0:	f009 f800 	bl	80133d4 <iprintf>
  return q;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	080170ac 	.word	0x080170ac
 800a3e4:	08017520 	.word	0x08017520
 800a3e8:	0801710c 	.word	0x0801710c

0800a3ec <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a3f0:	f009 f808 	bl	8013404 <rand>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a402:	b29a      	uxth	r2, r3
 800a404:	4b01      	ldr	r3, [pc, #4]	; (800a40c <tcp_init+0x20>)
 800a406:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a408:	bf00      	nop
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	20000042 	.word	0x20000042

0800a410 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	7d1b      	ldrb	r3, [r3, #20]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d105      	bne.n	800a42c <tcp_free+0x1c>
 800a420:	4b06      	ldr	r3, [pc, #24]	; (800a43c <tcp_free+0x2c>)
 800a422:	22d4      	movs	r2, #212	; 0xd4
 800a424:	4906      	ldr	r1, [pc, #24]	; (800a440 <tcp_free+0x30>)
 800a426:	4807      	ldr	r0, [pc, #28]	; (800a444 <tcp_free+0x34>)
 800a428:	f008 ffd4 	bl	80133d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a42c:	6879      	ldr	r1, [r7, #4]
 800a42e:	2001      	movs	r0, #1
 800a430:	f7fe fe9a 	bl	8009168 <memp_free>
}
 800a434:	bf00      	nop
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	080175ac 	.word	0x080175ac
 800a440:	080175dc 	.word	0x080175dc
 800a444:	080175f0 	.word	0x080175f0

0800a448 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	7d1b      	ldrb	r3, [r3, #20]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d105      	bne.n	800a464 <tcp_free_listen+0x1c>
 800a458:	4b06      	ldr	r3, [pc, #24]	; (800a474 <tcp_free_listen+0x2c>)
 800a45a:	22df      	movs	r2, #223	; 0xdf
 800a45c:	4906      	ldr	r1, [pc, #24]	; (800a478 <tcp_free_listen+0x30>)
 800a45e:	4807      	ldr	r0, [pc, #28]	; (800a47c <tcp_free_listen+0x34>)
 800a460:	f008 ffb8 	bl	80133d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a464:	6879      	ldr	r1, [r7, #4]
 800a466:	2002      	movs	r0, #2
 800a468:	f7fe fe7e 	bl	8009168 <memp_free>
}
 800a46c:	bf00      	nop
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	080175ac 	.word	0x080175ac
 800a478:	08017618 	.word	0x08017618
 800a47c:	080175f0 	.word	0x080175f0

0800a480 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a484:	f000 fea2 	bl	800b1cc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a488:	4b07      	ldr	r3, [pc, #28]	; (800a4a8 <tcp_tmr+0x28>)
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	3301      	adds	r3, #1
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	4b05      	ldr	r3, [pc, #20]	; (800a4a8 <tcp_tmr+0x28>)
 800a492:	701a      	strb	r2, [r3, #0]
 800a494:	4b04      	ldr	r3, [pc, #16]	; (800a4a8 <tcp_tmr+0x28>)
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	f003 0301 	and.w	r3, r3, #1
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a4a0:	f000 fb54 	bl	800ab4c <tcp_slowtmr>
  }
}
 800a4a4:	bf00      	nop
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	200002b9 	.word	0x200002b9

0800a4ac <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d105      	bne.n	800a4c8 <tcp_remove_listener+0x1c>
 800a4bc:	4b0d      	ldr	r3, [pc, #52]	; (800a4f4 <tcp_remove_listener+0x48>)
 800a4be:	22ff      	movs	r2, #255	; 0xff
 800a4c0:	490d      	ldr	r1, [pc, #52]	; (800a4f8 <tcp_remove_listener+0x4c>)
 800a4c2:	480e      	ldr	r0, [pc, #56]	; (800a4fc <tcp_remove_listener+0x50>)
 800a4c4:	f008 ff86 	bl	80133d4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	e00a      	b.n	800a4e4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d102      	bne.n	800a4de <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	60fb      	str	r3, [r7, #12]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1f1      	bne.n	800a4ce <tcp_remove_listener+0x22>
    }
  }
}
 800a4ea:	bf00      	nop
 800a4ec:	bf00      	nop
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	080175ac 	.word	0x080175ac
 800a4f8:	08017634 	.word	0x08017634
 800a4fc:	080175f0 	.word	0x080175f0

0800a500 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d106      	bne.n	800a51c <tcp_listen_closed+0x1c>
 800a50e:	4b14      	ldr	r3, [pc, #80]	; (800a560 <tcp_listen_closed+0x60>)
 800a510:	f240 1211 	movw	r2, #273	; 0x111
 800a514:	4913      	ldr	r1, [pc, #76]	; (800a564 <tcp_listen_closed+0x64>)
 800a516:	4814      	ldr	r0, [pc, #80]	; (800a568 <tcp_listen_closed+0x68>)
 800a518:	f008 ff5c 	bl	80133d4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	7d1b      	ldrb	r3, [r3, #20]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d006      	beq.n	800a532 <tcp_listen_closed+0x32>
 800a524:	4b0e      	ldr	r3, [pc, #56]	; (800a560 <tcp_listen_closed+0x60>)
 800a526:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a52a:	4910      	ldr	r1, [pc, #64]	; (800a56c <tcp_listen_closed+0x6c>)
 800a52c:	480e      	ldr	r0, [pc, #56]	; (800a568 <tcp_listen_closed+0x68>)
 800a52e:	f008 ff51 	bl	80133d4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a532:	2301      	movs	r3, #1
 800a534:	60fb      	str	r3, [r7, #12]
 800a536:	e00b      	b.n	800a550 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a538:	4a0d      	ldr	r2, [pc, #52]	; (800a570 <tcp_listen_closed+0x70>)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	6879      	ldr	r1, [r7, #4]
 800a544:	4618      	mov	r0, r3
 800a546:	f7ff ffb1 	bl	800a4ac <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	3301      	adds	r3, #1
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2b03      	cmp	r3, #3
 800a554:	d9f0      	bls.n	800a538 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a556:	bf00      	nop
 800a558:	bf00      	nop
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	080175ac 	.word	0x080175ac
 800a564:	0801765c 	.word	0x0801765c
 800a568:	080175f0 	.word	0x080175f0
 800a56c:	08017668 	.word	0x08017668
 800a570:	08019578 	.word	0x08019578

0800a574 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a574:	b5b0      	push	{r4, r5, r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af04      	add	r7, sp, #16
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	460b      	mov	r3, r1
 800a57e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d106      	bne.n	800a594 <tcp_close_shutdown+0x20>
 800a586:	4b63      	ldr	r3, [pc, #396]	; (800a714 <tcp_close_shutdown+0x1a0>)
 800a588:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a58c:	4962      	ldr	r1, [pc, #392]	; (800a718 <tcp_close_shutdown+0x1a4>)
 800a58e:	4863      	ldr	r0, [pc, #396]	; (800a71c <tcp_close_shutdown+0x1a8>)
 800a590:	f008 ff20 	bl	80133d4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d066      	beq.n	800a668 <tcp_close_shutdown+0xf4>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	7d1b      	ldrb	r3, [r3, #20]
 800a59e:	2b04      	cmp	r3, #4
 800a5a0:	d003      	beq.n	800a5aa <tcp_close_shutdown+0x36>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	7d1b      	ldrb	r3, [r3, #20]
 800a5a6:	2b07      	cmp	r3, #7
 800a5a8:	d15e      	bne.n	800a668 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d104      	bne.n	800a5bc <tcp_close_shutdown+0x48>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5b6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a5ba:	d055      	beq.n	800a668 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	8b5b      	ldrh	r3, [r3, #26]
 800a5c0:	f003 0310 	and.w	r3, r3, #16
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d106      	bne.n	800a5d6 <tcp_close_shutdown+0x62>
 800a5c8:	4b52      	ldr	r3, [pc, #328]	; (800a714 <tcp_close_shutdown+0x1a0>)
 800a5ca:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a5ce:	4954      	ldr	r1, [pc, #336]	; (800a720 <tcp_close_shutdown+0x1ac>)
 800a5d0:	4852      	ldr	r0, [pc, #328]	; (800a71c <tcp_close_shutdown+0x1a8>)
 800a5d2:	f008 feff 	bl	80133d4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a5de:	687d      	ldr	r5, [r7, #4]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	8ad2      	ldrh	r2, [r2, #22]
 800a5e8:	6879      	ldr	r1, [r7, #4]
 800a5ea:	8b09      	ldrh	r1, [r1, #24]
 800a5ec:	9102      	str	r1, [sp, #8]
 800a5ee:	9201      	str	r2, [sp, #4]
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	462b      	mov	r3, r5
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f004 fe8d 	bl	800f318 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f001 f8c6 	bl	800b790 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a604:	4b47      	ldr	r3, [pc, #284]	; (800a724 <tcp_close_shutdown+0x1b0>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d105      	bne.n	800a61a <tcp_close_shutdown+0xa6>
 800a60e:	4b45      	ldr	r3, [pc, #276]	; (800a724 <tcp_close_shutdown+0x1b0>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	4a43      	ldr	r2, [pc, #268]	; (800a724 <tcp_close_shutdown+0x1b0>)
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	e013      	b.n	800a642 <tcp_close_shutdown+0xce>
 800a61a:	4b42      	ldr	r3, [pc, #264]	; (800a724 <tcp_close_shutdown+0x1b0>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	60fb      	str	r3, [r7, #12]
 800a620:	e00c      	b.n	800a63c <tcp_close_shutdown+0xc8>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d104      	bne.n	800a636 <tcp_close_shutdown+0xc2>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68da      	ldr	r2, [r3, #12]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	60da      	str	r2, [r3, #12]
 800a634:	e005      	b.n	800a642 <tcp_close_shutdown+0xce>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1ef      	bne.n	800a622 <tcp_close_shutdown+0xae>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	60da      	str	r2, [r3, #12]
 800a648:	4b37      	ldr	r3, [pc, #220]	; (800a728 <tcp_close_shutdown+0x1b4>)
 800a64a:	2201      	movs	r2, #1
 800a64c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a64e:	4b37      	ldr	r3, [pc, #220]	; (800a72c <tcp_close_shutdown+0x1b8>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	429a      	cmp	r2, r3
 800a656:	d102      	bne.n	800a65e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a658:	f003 fd5a 	bl	800e110 <tcp_trigger_input_pcb_close>
 800a65c:	e002      	b.n	800a664 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7ff fed6 	bl	800a410 <tcp_free>
      }
      return ERR_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	e050      	b.n	800a70a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	7d1b      	ldrb	r3, [r3, #20]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d03b      	beq.n	800a6e8 <tcp_close_shutdown+0x174>
 800a670:	2b02      	cmp	r3, #2
 800a672:	dc44      	bgt.n	800a6fe <tcp_close_shutdown+0x18a>
 800a674:	2b00      	cmp	r3, #0
 800a676:	d002      	beq.n	800a67e <tcp_close_shutdown+0x10a>
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d02a      	beq.n	800a6d2 <tcp_close_shutdown+0x15e>
 800a67c:	e03f      	b.n	800a6fe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	8adb      	ldrh	r3, [r3, #22]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d021      	beq.n	800a6ca <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a686:	4b2a      	ldr	r3, [pc, #168]	; (800a730 <tcp_close_shutdown+0x1bc>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d105      	bne.n	800a69c <tcp_close_shutdown+0x128>
 800a690:	4b27      	ldr	r3, [pc, #156]	; (800a730 <tcp_close_shutdown+0x1bc>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	4a26      	ldr	r2, [pc, #152]	; (800a730 <tcp_close_shutdown+0x1bc>)
 800a698:	6013      	str	r3, [r2, #0]
 800a69a:	e013      	b.n	800a6c4 <tcp_close_shutdown+0x150>
 800a69c:	4b24      	ldr	r3, [pc, #144]	; (800a730 <tcp_close_shutdown+0x1bc>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	60bb      	str	r3, [r7, #8]
 800a6a2:	e00c      	b.n	800a6be <tcp_close_shutdown+0x14a>
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d104      	bne.n	800a6b8 <tcp_close_shutdown+0x144>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	68da      	ldr	r2, [r3, #12]
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	60da      	str	r2, [r3, #12]
 800a6b6:	e005      	b.n	800a6c4 <tcp_close_shutdown+0x150>
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	60bb      	str	r3, [r7, #8]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1ef      	bne.n	800a6a4 <tcp_close_shutdown+0x130>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7ff fea0 	bl	800a410 <tcp_free>
      break;
 800a6d0:	e01a      	b.n	800a708 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff ff14 	bl	800a500 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a6d8:	6879      	ldr	r1, [r7, #4]
 800a6da:	4816      	ldr	r0, [pc, #88]	; (800a734 <tcp_close_shutdown+0x1c0>)
 800a6dc:	f001 f8a8 	bl	800b830 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7ff feb1 	bl	800a448 <tcp_free_listen>
      break;
 800a6e6:	e00f      	b.n	800a708 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a6e8:	6879      	ldr	r1, [r7, #4]
 800a6ea:	480e      	ldr	r0, [pc, #56]	; (800a724 <tcp_close_shutdown+0x1b0>)
 800a6ec:	f001 f8a0 	bl	800b830 <tcp_pcb_remove>
 800a6f0:	4b0d      	ldr	r3, [pc, #52]	; (800a728 <tcp_close_shutdown+0x1b4>)
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7ff fe8a 	bl	800a410 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a6fc:	e004      	b.n	800a708 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f81a 	bl	800a738 <tcp_close_shutdown_fin>
 800a704:	4603      	mov	r3, r0
 800a706:	e000      	b.n	800a70a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bdb0      	pop	{r4, r5, r7, pc}
 800a712:	bf00      	nop
 800a714:	080175ac 	.word	0x080175ac
 800a718:	08017680 	.word	0x08017680
 800a71c:	080175f0 	.word	0x080175f0
 800a720:	080176a0 	.word	0x080176a0
 800a724:	200090d8 	.word	0x200090d8
 800a728:	200090d4 	.word	0x200090d4
 800a72c:	200090ec 	.word	0x200090ec
 800a730:	200090e4 	.word	0x200090e4
 800a734:	200090e0 	.word	0x200090e0

0800a738 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d106      	bne.n	800a754 <tcp_close_shutdown_fin+0x1c>
 800a746:	4b2e      	ldr	r3, [pc, #184]	; (800a800 <tcp_close_shutdown_fin+0xc8>)
 800a748:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a74c:	492d      	ldr	r1, [pc, #180]	; (800a804 <tcp_close_shutdown_fin+0xcc>)
 800a74e:	482e      	ldr	r0, [pc, #184]	; (800a808 <tcp_close_shutdown_fin+0xd0>)
 800a750:	f008 fe40 	bl	80133d4 <iprintf>

  switch (pcb->state) {
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	7d1b      	ldrb	r3, [r3, #20]
 800a758:	2b07      	cmp	r3, #7
 800a75a:	d020      	beq.n	800a79e <tcp_close_shutdown_fin+0x66>
 800a75c:	2b07      	cmp	r3, #7
 800a75e:	dc2b      	bgt.n	800a7b8 <tcp_close_shutdown_fin+0x80>
 800a760:	2b03      	cmp	r3, #3
 800a762:	d002      	beq.n	800a76a <tcp_close_shutdown_fin+0x32>
 800a764:	2b04      	cmp	r3, #4
 800a766:	d00d      	beq.n	800a784 <tcp_close_shutdown_fin+0x4c>
 800a768:	e026      	b.n	800a7b8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f003 fee2 	bl	800e534 <tcp_send_fin>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d11f      	bne.n	800a7bc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2205      	movs	r2, #5
 800a780:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a782:	e01b      	b.n	800a7bc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f003 fed5 	bl	800e534 <tcp_send_fin>
 800a78a:	4603      	mov	r3, r0
 800a78c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a78e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d114      	bne.n	800a7c0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2205      	movs	r2, #5
 800a79a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a79c:	e010      	b.n	800a7c0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f003 fec8 	bl	800e534 <tcp_send_fin>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a7a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d109      	bne.n	800a7c4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2209      	movs	r2, #9
 800a7b4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a7b6:	e005      	b.n	800a7c4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	e01c      	b.n	800a7f6 <tcp_close_shutdown_fin+0xbe>
      break;
 800a7bc:	bf00      	nop
 800a7be:	e002      	b.n	800a7c6 <tcp_close_shutdown_fin+0x8e>
      break;
 800a7c0:	bf00      	nop
 800a7c2:	e000      	b.n	800a7c6 <tcp_close_shutdown_fin+0x8e>
      break;
 800a7c4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a7c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d103      	bne.n	800a7d6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f003 ffee 	bl	800e7b0 <tcp_output>
 800a7d4:	e00d      	b.n	800a7f2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a7d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7de:	d108      	bne.n	800a7f2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	8b5b      	ldrh	r3, [r3, #26]
 800a7e4:	f043 0308 	orr.w	r3, r3, #8
 800a7e8:	b29a      	uxth	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	e001      	b.n	800a7f6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a7f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	080175ac 	.word	0x080175ac
 800a804:	0801765c 	.word	0x0801765c
 800a808:	080175f0 	.word	0x080175f0

0800a80c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d109      	bne.n	800a82e <tcp_close+0x22>
 800a81a:	4b0f      	ldr	r3, [pc, #60]	; (800a858 <tcp_close+0x4c>)
 800a81c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a820:	490e      	ldr	r1, [pc, #56]	; (800a85c <tcp_close+0x50>)
 800a822:	480f      	ldr	r0, [pc, #60]	; (800a860 <tcp_close+0x54>)
 800a824:	f008 fdd6 	bl	80133d4 <iprintf>
 800a828:	f06f 030f 	mvn.w	r3, #15
 800a82c:	e00f      	b.n	800a84e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	7d1b      	ldrb	r3, [r3, #20]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d006      	beq.n	800a844 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	8b5b      	ldrh	r3, [r3, #26]
 800a83a:	f043 0310 	orr.w	r3, r3, #16
 800a83e:	b29a      	uxth	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a844:	2101      	movs	r1, #1
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7ff fe94 	bl	800a574 <tcp_close_shutdown>
 800a84c:	4603      	mov	r3, r0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	080175ac 	.word	0x080175ac
 800a85c:	080176bc 	.word	0x080176bc
 800a860:	080175f0 	.word	0x080175f0

0800a864 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b08e      	sub	sp, #56	; 0x38
 800a868:	af04      	add	r7, sp, #16
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d107      	bne.n	800a884 <tcp_abandon+0x20>
 800a874:	4b52      	ldr	r3, [pc, #328]	; (800a9c0 <tcp_abandon+0x15c>)
 800a876:	f240 223d 	movw	r2, #573	; 0x23d
 800a87a:	4952      	ldr	r1, [pc, #328]	; (800a9c4 <tcp_abandon+0x160>)
 800a87c:	4852      	ldr	r0, [pc, #328]	; (800a9c8 <tcp_abandon+0x164>)
 800a87e:	f008 fda9 	bl	80133d4 <iprintf>
 800a882:	e099      	b.n	800a9b8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	7d1b      	ldrb	r3, [r3, #20]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d106      	bne.n	800a89a <tcp_abandon+0x36>
 800a88c:	4b4c      	ldr	r3, [pc, #304]	; (800a9c0 <tcp_abandon+0x15c>)
 800a88e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a892:	494e      	ldr	r1, [pc, #312]	; (800a9cc <tcp_abandon+0x168>)
 800a894:	484c      	ldr	r0, [pc, #304]	; (800a9c8 <tcp_abandon+0x164>)
 800a896:	f008 fd9d 	bl	80133d4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	7d1b      	ldrb	r3, [r3, #20]
 800a89e:	2b0a      	cmp	r3, #10
 800a8a0:	d107      	bne.n	800a8b2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a8a2:	6879      	ldr	r1, [r7, #4]
 800a8a4:	484a      	ldr	r0, [pc, #296]	; (800a9d0 <tcp_abandon+0x16c>)
 800a8a6:	f000 ffc3 	bl	800b830 <tcp_pcb_remove>
    tcp_free(pcb);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7ff fdb0 	bl	800a410 <tcp_free>
 800a8b0:	e082      	b.n	800a9b8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8be:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8cc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	7d1b      	ldrb	r3, [r3, #20]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d126      	bne.n	800a92a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	8adb      	ldrh	r3, [r3, #22]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d02e      	beq.n	800a942 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a8e4:	4b3b      	ldr	r3, [pc, #236]	; (800a9d4 <tcp_abandon+0x170>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d105      	bne.n	800a8fa <tcp_abandon+0x96>
 800a8ee:	4b39      	ldr	r3, [pc, #228]	; (800a9d4 <tcp_abandon+0x170>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	4a37      	ldr	r2, [pc, #220]	; (800a9d4 <tcp_abandon+0x170>)
 800a8f6:	6013      	str	r3, [r2, #0]
 800a8f8:	e013      	b.n	800a922 <tcp_abandon+0xbe>
 800a8fa:	4b36      	ldr	r3, [pc, #216]	; (800a9d4 <tcp_abandon+0x170>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	61fb      	str	r3, [r7, #28]
 800a900:	e00c      	b.n	800a91c <tcp_abandon+0xb8>
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d104      	bne.n	800a916 <tcp_abandon+0xb2>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	68da      	ldr	r2, [r3, #12]
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	60da      	str	r2, [r3, #12]
 800a914:	e005      	b.n	800a922 <tcp_abandon+0xbe>
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	61fb      	str	r3, [r7, #28]
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1ef      	bne.n	800a902 <tcp_abandon+0x9e>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	60da      	str	r2, [r3, #12]
 800a928:	e00b      	b.n	800a942 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	8adb      	ldrh	r3, [r3, #22]
 800a932:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	4828      	ldr	r0, [pc, #160]	; (800a9d8 <tcp_abandon+0x174>)
 800a938:	f000 ff7a 	bl	800b830 <tcp_pcb_remove>
 800a93c:	4b27      	ldr	r3, [pc, #156]	; (800a9dc <tcp_abandon+0x178>)
 800a93e:	2201      	movs	r2, #1
 800a940:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a946:	2b00      	cmp	r3, #0
 800a948:	d004      	beq.n	800a954 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a94e:	4618      	mov	r0, r3
 800a950:	f000 fd1c 	bl	800b38c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d004      	beq.n	800a966 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fd13 	bl	800b38c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d004      	beq.n	800a978 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a972:	4618      	mov	r0, r3
 800a974:	f000 fd0a 	bl	800b38c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00e      	beq.n	800a99c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3304      	adds	r3, #4
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	8b12      	ldrh	r2, [r2, #24]
 800a988:	9202      	str	r2, [sp, #8]
 800a98a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a98c:	9201      	str	r2, [sp, #4]
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	460b      	mov	r3, r1
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	69b9      	ldr	r1, [r7, #24]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f004 fcbe 	bl	800f318 <tcp_rst>
    }
    last_state = pcb->state;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	7d1b      	ldrb	r3, [r3, #20]
 800a9a0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7ff fd34 	bl	800a410 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d004      	beq.n	800a9b8 <tcp_abandon+0x154>
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	f06f 010c 	mvn.w	r1, #12
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	4798      	blx	r3
  }
}
 800a9b8:	3728      	adds	r7, #40	; 0x28
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	080175ac 	.word	0x080175ac
 800a9c4:	080176f0 	.word	0x080176f0
 800a9c8:	080175f0 	.word	0x080175f0
 800a9cc:	0801770c 	.word	0x0801770c
 800a9d0:	200090e8 	.word	0x200090e8
 800a9d4:	200090e4 	.word	0x200090e4
 800a9d8:	200090d8 	.word	0x200090d8
 800a9dc:	200090d4 	.word	0x200090d4

0800a9e0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7ff ff3a 	bl	800a864 <tcp_abandon>
}
 800a9f0:	bf00      	nop
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d106      	bne.n	800aa14 <tcp_update_rcv_ann_wnd+0x1c>
 800aa06:	4b25      	ldr	r3, [pc, #148]	; (800aa9c <tcp_update_rcv_ann_wnd+0xa4>)
 800aa08:	f240 32a6 	movw	r2, #934	; 0x3a6
 800aa0c:	4924      	ldr	r1, [pc, #144]	; (800aaa0 <tcp_update_rcv_ann_wnd+0xa8>)
 800aa0e:	4825      	ldr	r0, [pc, #148]	; (800aaa4 <tcp_update_rcv_ann_wnd+0xac>)
 800aa10:	f008 fce0 	bl	80133d4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800aa1c:	4413      	add	r3, r2
 800aa1e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800aa28:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800aa2c:	bf28      	it	cs
 800aa2e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800aa32:	b292      	uxth	r2, r2
 800aa34:	4413      	add	r3, r2
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	db08      	blt.n	800aa50 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	e020      	b.n	800aa92 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	dd03      	ble.n	800aa66 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aa64:	e014      	b.n	800aa90 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa78:	d306      	bcc.n	800aa88 <tcp_update_rcv_ann_wnd+0x90>
 800aa7a:	4b08      	ldr	r3, [pc, #32]	; (800aa9c <tcp_update_rcv_ann_wnd+0xa4>)
 800aa7c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800aa80:	4909      	ldr	r1, [pc, #36]	; (800aaa8 <tcp_update_rcv_ann_wnd+0xb0>)
 800aa82:	4808      	ldr	r0, [pc, #32]	; (800aaa4 <tcp_update_rcv_ann_wnd+0xac>)
 800aa84:	f008 fca6 	bl	80133d4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800aa90:	2300      	movs	r3, #0
  }
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	080175ac 	.word	0x080175ac
 800aaa0:	08017808 	.word	0x08017808
 800aaa4:	080175f0 	.word	0x080175f0
 800aaa8:	0801782c 	.word	0x0801782c

0800aaac <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d107      	bne.n	800aace <tcp_recved+0x22>
 800aabe:	4b1f      	ldr	r3, [pc, #124]	; (800ab3c <tcp_recved+0x90>)
 800aac0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800aac4:	491e      	ldr	r1, [pc, #120]	; (800ab40 <tcp_recved+0x94>)
 800aac6:	481f      	ldr	r0, [pc, #124]	; (800ab44 <tcp_recved+0x98>)
 800aac8:	f008 fc84 	bl	80133d4 <iprintf>
 800aacc:	e032      	b.n	800ab34 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	7d1b      	ldrb	r3, [r3, #20]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d106      	bne.n	800aae4 <tcp_recved+0x38>
 800aad6:	4b19      	ldr	r3, [pc, #100]	; (800ab3c <tcp_recved+0x90>)
 800aad8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800aadc:	491a      	ldr	r1, [pc, #104]	; (800ab48 <tcp_recved+0x9c>)
 800aade:	4819      	ldr	r0, [pc, #100]	; (800ab44 <tcp_recved+0x98>)
 800aae0:	f008 fc78 	bl	80133d4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aae8:	887b      	ldrh	r3, [r7, #2]
 800aaea:	4413      	add	r3, r2
 800aaec:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800aaee:	89fb      	ldrh	r3, [r7, #14]
 800aaf0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aaf4:	d804      	bhi.n	800ab00 <tcp_recved+0x54>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aafa:	89fa      	ldrh	r2, [r7, #14]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d204      	bcs.n	800ab0a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ab06:	851a      	strh	r2, [r3, #40]	; 0x28
 800ab08:	e002      	b.n	800ab10 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	89fa      	ldrh	r2, [r7, #14]
 800ab0e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7ff ff71 	bl	800a9f8 <tcp_update_rcv_ann_wnd>
 800ab16:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ab1e:	d309      	bcc.n	800ab34 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	8b5b      	ldrh	r3, [r3, #26]
 800ab24:	f043 0302 	orr.w	r3, r3, #2
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f003 fe3e 	bl	800e7b0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	080175ac 	.word	0x080175ac
 800ab40:	08017848 	.word	0x08017848
 800ab44:	080175f0 	.word	0x080175f0
 800ab48:	08017860 	.word	0x08017860

0800ab4c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ab4c:	b5b0      	push	{r4, r5, r7, lr}
 800ab4e:	b090      	sub	sp, #64	; 0x40
 800ab50:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ab58:	4b94      	ldr	r3, [pc, #592]	; (800adac <tcp_slowtmr+0x260>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	4a93      	ldr	r2, [pc, #588]	; (800adac <tcp_slowtmr+0x260>)
 800ab60:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ab62:	4b93      	ldr	r3, [pc, #588]	; (800adb0 <tcp_slowtmr+0x264>)
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	3301      	adds	r3, #1
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	4b91      	ldr	r3, [pc, #580]	; (800adb0 <tcp_slowtmr+0x264>)
 800ab6c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ab72:	4b90      	ldr	r3, [pc, #576]	; (800adb4 <tcp_slowtmr+0x268>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ab78:	e29f      	b.n	800b0ba <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ab7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7c:	7d1b      	ldrb	r3, [r3, #20]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d106      	bne.n	800ab90 <tcp_slowtmr+0x44>
 800ab82:	4b8d      	ldr	r3, [pc, #564]	; (800adb8 <tcp_slowtmr+0x26c>)
 800ab84:	f240 42be 	movw	r2, #1214	; 0x4be
 800ab88:	498c      	ldr	r1, [pc, #560]	; (800adbc <tcp_slowtmr+0x270>)
 800ab8a:	488d      	ldr	r0, [pc, #564]	; (800adc0 <tcp_slowtmr+0x274>)
 800ab8c:	f008 fc22 	bl	80133d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ab90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab92:	7d1b      	ldrb	r3, [r3, #20]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d106      	bne.n	800aba6 <tcp_slowtmr+0x5a>
 800ab98:	4b87      	ldr	r3, [pc, #540]	; (800adb8 <tcp_slowtmr+0x26c>)
 800ab9a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ab9e:	4989      	ldr	r1, [pc, #548]	; (800adc4 <tcp_slowtmr+0x278>)
 800aba0:	4887      	ldr	r0, [pc, #540]	; (800adc0 <tcp_slowtmr+0x274>)
 800aba2:	f008 fc17 	bl	80133d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba8:	7d1b      	ldrb	r3, [r3, #20]
 800abaa:	2b0a      	cmp	r3, #10
 800abac:	d106      	bne.n	800abbc <tcp_slowtmr+0x70>
 800abae:	4b82      	ldr	r3, [pc, #520]	; (800adb8 <tcp_slowtmr+0x26c>)
 800abb0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800abb4:	4984      	ldr	r1, [pc, #528]	; (800adc8 <tcp_slowtmr+0x27c>)
 800abb6:	4882      	ldr	r0, [pc, #520]	; (800adc0 <tcp_slowtmr+0x274>)
 800abb8:	f008 fc0c 	bl	80133d4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800abbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbe:	7f9a      	ldrb	r2, [r3, #30]
 800abc0:	4b7b      	ldr	r3, [pc, #492]	; (800adb0 <tcp_slowtmr+0x264>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d105      	bne.n	800abd4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800abc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800abcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800abd2:	e272      	b.n	800b0ba <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800abd4:	4b76      	ldr	r3, [pc, #472]	; (800adb0 <tcp_slowtmr+0x264>)
 800abd6:	781a      	ldrb	r2, [r3, #0]
 800abd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abda:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800abe2:	2300      	movs	r3, #0
 800abe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800abe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abea:	7d1b      	ldrb	r3, [r3, #20]
 800abec:	2b02      	cmp	r3, #2
 800abee:	d10a      	bne.n	800ac06 <tcp_slowtmr+0xba>
 800abf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abf6:	2b05      	cmp	r3, #5
 800abf8:	d905      	bls.n	800ac06 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800abfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abfe:	3301      	adds	r3, #1
 800ac00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac04:	e11e      	b.n	800ae44 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ac06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac0c:	2b0b      	cmp	r3, #11
 800ac0e:	d905      	bls.n	800ac1c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ac10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac14:	3301      	adds	r3, #1
 800ac16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac1a:	e113      	b.n	800ae44 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d075      	beq.n	800ad12 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ac26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d006      	beq.n	800ac3c <tcp_slowtmr+0xf0>
 800ac2e:	4b62      	ldr	r3, [pc, #392]	; (800adb8 <tcp_slowtmr+0x26c>)
 800ac30:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ac34:	4965      	ldr	r1, [pc, #404]	; (800adcc <tcp_slowtmr+0x280>)
 800ac36:	4862      	ldr	r0, [pc, #392]	; (800adc0 <tcp_slowtmr+0x274>)
 800ac38:	f008 fbcc 	bl	80133d4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d106      	bne.n	800ac52 <tcp_slowtmr+0x106>
 800ac44:	4b5c      	ldr	r3, [pc, #368]	; (800adb8 <tcp_slowtmr+0x26c>)
 800ac46:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ac4a:	4961      	ldr	r1, [pc, #388]	; (800add0 <tcp_slowtmr+0x284>)
 800ac4c:	485c      	ldr	r0, [pc, #368]	; (800adc0 <tcp_slowtmr+0x274>)
 800ac4e:	f008 fbc1 	bl	80133d4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ac52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac54:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ac58:	2b0b      	cmp	r3, #11
 800ac5a:	d905      	bls.n	800ac68 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ac5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac60:	3301      	adds	r3, #1
 800ac62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac66:	e0ed      	b.n	800ae44 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ac68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	4a58      	ldr	r2, [pc, #352]	; (800add4 <tcp_slowtmr+0x288>)
 800ac72:	5cd3      	ldrb	r3, [r2, r3]
 800ac74:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ac76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ac7c:	7c7a      	ldrb	r2, [r7, #17]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d907      	bls.n	800ac92 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ac82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ac88:	3301      	adds	r3, #1
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ac92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ac98:	7c7a      	ldrb	r2, [r7, #17]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	f200 80d2 	bhi.w	800ae44 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800aca0:	2301      	movs	r3, #1
 800aca2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800aca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d108      	bne.n	800acc0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800acae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acb0:	f004 fc26 	bl	800f500 <tcp_zero_window_probe>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d014      	beq.n	800ace4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800acba:	2300      	movs	r3, #0
 800acbc:	623b      	str	r3, [r7, #32]
 800acbe:	e011      	b.n	800ace4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800acc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800acc6:	4619      	mov	r1, r3
 800acc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acca:	f003 faeb 	bl	800e2a4 <tcp_split_unsent_seg>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d107      	bne.n	800ace4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800acd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acd6:	f003 fd6b 	bl	800e7b0 <tcp_output>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d101      	bne.n	800ace4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ace4:	6a3b      	ldr	r3, [r7, #32]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f000 80ac 	beq.w	800ae44 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acee:	2200      	movs	r2, #0
 800acf0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800acf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800acfa:	2b06      	cmp	r3, #6
 800acfc:	f200 80a2 	bhi.w	800ae44 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ad00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ad06:	3301      	adds	r3, #1
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ad10:	e098      	b.n	800ae44 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ad12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	db0f      	blt.n	800ad3c <tcp_slowtmr+0x1f0>
 800ad1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ad22:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d008      	beq.n	800ad3c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	3301      	adds	r3, #1
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	b21a      	sxth	r2, r3
 800ad38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ad3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ad42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad44:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	db7b      	blt.n	800ae44 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ad4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad4e:	f004 f821 	bl	800ed94 <tcp_rexmit_rto_prepare>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d007      	beq.n	800ad68 <tcp_slowtmr+0x21c>
 800ad58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d171      	bne.n	800ae44 <tcp_slowtmr+0x2f8>
 800ad60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d06d      	beq.n	800ae44 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ad68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6a:	7d1b      	ldrb	r3, [r3, #20]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d03a      	beq.n	800ade6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ad70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad76:	2b0c      	cmp	r3, #12
 800ad78:	bf28      	it	cs
 800ad7a:	230c      	movcs	r3, #12
 800ad7c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ad7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad80:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ad84:	10db      	asrs	r3, r3, #3
 800ad86:	b21b      	sxth	r3, r3
 800ad88:	461a      	mov	r2, r3
 800ad8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ad90:	4413      	add	r3, r2
 800ad92:	7efa      	ldrb	r2, [r7, #27]
 800ad94:	4910      	ldr	r1, [pc, #64]	; (800add8 <tcp_slowtmr+0x28c>)
 800ad96:	5c8a      	ldrb	r2, [r1, r2]
 800ad98:	4093      	lsls	r3, r2
 800ad9a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ada2:	4293      	cmp	r3, r2
 800ada4:	dc1a      	bgt.n	800addc <tcp_slowtmr+0x290>
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	b21a      	sxth	r2, r3
 800adaa:	e019      	b.n	800ade0 <tcp_slowtmr+0x294>
 800adac:	200090dc 	.word	0x200090dc
 800adb0:	200002ba 	.word	0x200002ba
 800adb4:	200090d8 	.word	0x200090d8
 800adb8:	080175ac 	.word	0x080175ac
 800adbc:	080178f0 	.word	0x080178f0
 800adc0:	080175f0 	.word	0x080175f0
 800adc4:	0801791c 	.word	0x0801791c
 800adc8:	08017948 	.word	0x08017948
 800adcc:	08017978 	.word	0x08017978
 800add0:	080179ac 	.word	0x080179ac
 800add4:	08019570 	.word	0x08019570
 800add8:	08019560 	.word	0x08019560
 800addc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ade0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	2200      	movs	r2, #0
 800adea:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800adf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800adf8:	4293      	cmp	r3, r2
 800adfa:	bf28      	it	cs
 800adfc:	4613      	movcs	r3, r2
 800adfe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ae00:	8a7b      	ldrh	r3, [r7, #18]
 800ae02:	085b      	lsrs	r3, r3, #1
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ae0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ae12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae16:	005b      	lsls	r3, r3, #1
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d206      	bcs.n	800ae2c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ae1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae22:	005b      	lsls	r3, r3, #1
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ae2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ae30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ae36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ae3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae40:	f004 f818 	bl	800ee74 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ae44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae46:	7d1b      	ldrb	r3, [r3, #20]
 800ae48:	2b06      	cmp	r3, #6
 800ae4a:	d111      	bne.n	800ae70 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ae4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4e:	8b5b      	ldrh	r3, [r3, #26]
 800ae50:	f003 0310 	and.w	r3, r3, #16
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00b      	beq.n	800ae70 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae58:	4b9d      	ldr	r3, [pc, #628]	; (800b0d0 <tcp_slowtmr+0x584>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5e:	6a1b      	ldr	r3, [r3, #32]
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	2b28      	cmp	r3, #40	; 0x28
 800ae64:	d904      	bls.n	800ae70 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ae66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ae70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae72:	7a5b      	ldrb	r3, [r3, #9]
 800ae74:	f003 0308 	and.w	r3, r3, #8
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d04c      	beq.n	800af16 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ae7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ae80:	2b04      	cmp	r3, #4
 800ae82:	d003      	beq.n	800ae8c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ae84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae86:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ae88:	2b07      	cmp	r3, #7
 800ae8a:	d144      	bne.n	800af16 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae8c:	4b90      	ldr	r3, [pc, #576]	; (800b0d0 <tcp_slowtmr+0x584>)
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ae96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae9c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800aea0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800aea4:	498b      	ldr	r1, [pc, #556]	; (800b0d4 <tcp_slowtmr+0x588>)
 800aea6:	fba1 1303 	umull	r1, r3, r1, r3
 800aeaa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d90a      	bls.n	800aec6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800aeb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800aeba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aebe:	3301      	adds	r3, #1
 800aec0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aec4:	e027      	b.n	800af16 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aec6:	4b82      	ldr	r3, [pc, #520]	; (800b0d0 <tcp_slowtmr+0x584>)
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800aed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800aed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800aedc:	4618      	mov	r0, r3
 800aede:	4b7e      	ldr	r3, [pc, #504]	; (800b0d8 <tcp_slowtmr+0x58c>)
 800aee0:	fb03 f300 	mul.w	r3, r3, r0
 800aee4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800aee6:	497b      	ldr	r1, [pc, #492]	; (800b0d4 <tcp_slowtmr+0x588>)
 800aee8:	fba1 1303 	umull	r1, r3, r1, r3
 800aeec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d911      	bls.n	800af16 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800aef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aef4:	f004 fac4 	bl	800f480 <tcp_keepalive>
 800aef8:	4603      	mov	r3, r0
 800aefa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800aefe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800af02:	2b00      	cmp	r3, #0
 800af04:	d107      	bne.n	800af16 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800af06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af08:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800af0c:	3301      	adds	r3, #1
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af12:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800af16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d011      	beq.n	800af42 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800af1e:	4b6c      	ldr	r3, [pc, #432]	; (800b0d0 <tcp_slowtmr+0x584>)
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	1ad2      	subs	r2, r2, r3
 800af28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800af2e:	4619      	mov	r1, r3
 800af30:	460b      	mov	r3, r1
 800af32:	005b      	lsls	r3, r3, #1
 800af34:	440b      	add	r3, r1
 800af36:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800af38:	429a      	cmp	r2, r3
 800af3a:	d302      	bcc.n	800af42 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800af3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af3e:	f000 fddb 	bl	800baf8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800af42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af44:	7d1b      	ldrb	r3, [r3, #20]
 800af46:	2b03      	cmp	r3, #3
 800af48:	d10b      	bne.n	800af62 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af4a:	4b61      	ldr	r3, [pc, #388]	; (800b0d0 <tcp_slowtmr+0x584>)
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	2b28      	cmp	r3, #40	; 0x28
 800af56:	d904      	bls.n	800af62 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800af58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af5c:	3301      	adds	r3, #1
 800af5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800af62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af64:	7d1b      	ldrb	r3, [r3, #20]
 800af66:	2b09      	cmp	r3, #9
 800af68:	d10b      	bne.n	800af82 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800af6a:	4b59      	ldr	r3, [pc, #356]	; (800b0d0 <tcp_slowtmr+0x584>)
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	2bf0      	cmp	r3, #240	; 0xf0
 800af76:	d904      	bls.n	800af82 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800af78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af7c:	3301      	adds	r3, #1
 800af7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800af82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af86:	2b00      	cmp	r3, #0
 800af88:	d060      	beq.n	800b04c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800af8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af90:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800af92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af94:	f000 fbfc 	bl	800b790 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800af98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d010      	beq.n	800afc0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800af9e:	4b4f      	ldr	r3, [pc, #316]	; (800b0dc <tcp_slowtmr+0x590>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d106      	bne.n	800afb6 <tcp_slowtmr+0x46a>
 800afa8:	4b4d      	ldr	r3, [pc, #308]	; (800b0e0 <tcp_slowtmr+0x594>)
 800afaa:	f240 526d 	movw	r2, #1389	; 0x56d
 800afae:	494d      	ldr	r1, [pc, #308]	; (800b0e4 <tcp_slowtmr+0x598>)
 800afb0:	484d      	ldr	r0, [pc, #308]	; (800b0e8 <tcp_slowtmr+0x59c>)
 800afb2:	f008 fa0f 	bl	80133d4 <iprintf>
        prev->next = pcb->next;
 800afb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb8:	68da      	ldr	r2, [r3, #12]
 800afba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbc:	60da      	str	r2, [r3, #12]
 800afbe:	e00f      	b.n	800afe0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800afc0:	4b46      	ldr	r3, [pc, #280]	; (800b0dc <tcp_slowtmr+0x590>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d006      	beq.n	800afd8 <tcp_slowtmr+0x48c>
 800afca:	4b45      	ldr	r3, [pc, #276]	; (800b0e0 <tcp_slowtmr+0x594>)
 800afcc:	f240 5271 	movw	r2, #1393	; 0x571
 800afd0:	4946      	ldr	r1, [pc, #280]	; (800b0ec <tcp_slowtmr+0x5a0>)
 800afd2:	4845      	ldr	r0, [pc, #276]	; (800b0e8 <tcp_slowtmr+0x59c>)
 800afd4:	f008 f9fe 	bl	80133d4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800afd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	4a3f      	ldr	r2, [pc, #252]	; (800b0dc <tcp_slowtmr+0x590>)
 800afde:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800afe0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d013      	beq.n	800b010 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800afe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800afec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800aff0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800aff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff4:	3304      	adds	r3, #4
 800aff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aff8:	8ad2      	ldrh	r2, [r2, #22]
 800affa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800affc:	8b09      	ldrh	r1, [r1, #24]
 800affe:	9102      	str	r1, [sp, #8]
 800b000:	9201      	str	r2, [sp, #4]
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	462b      	mov	r3, r5
 800b006:	4622      	mov	r2, r4
 800b008:	4601      	mov	r1, r0
 800b00a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b00c:	f004 f984 	bl	800f318 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b018:	7d1b      	ldrb	r3, [r3, #20]
 800b01a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b026:	6838      	ldr	r0, [r7, #0]
 800b028:	f7ff f9f2 	bl	800a410 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b02c:	4b30      	ldr	r3, [pc, #192]	; (800b0f0 <tcp_slowtmr+0x5a4>)
 800b02e:	2200      	movs	r2, #0
 800b030:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d004      	beq.n	800b042 <tcp_slowtmr+0x4f6>
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f06f 010c 	mvn.w	r1, #12
 800b03e:	68b8      	ldr	r0, [r7, #8]
 800b040:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b042:	4b2b      	ldr	r3, [pc, #172]	; (800b0f0 <tcp_slowtmr+0x5a4>)
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d037      	beq.n	800b0ba <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b04a:	e590      	b.n	800ab6e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b058:	7f1b      	ldrb	r3, [r3, #28]
 800b05a:	3301      	adds	r3, #1
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b060:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b064:	7f1a      	ldrb	r2, [r3, #28]
 800b066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b068:	7f5b      	ldrb	r3, [r3, #29]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d325      	bcc.n	800b0ba <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b070:	2200      	movs	r2, #0
 800b072:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b074:	4b1e      	ldr	r3, [pc, #120]	; (800b0f0 <tcp_slowtmr+0x5a4>)
 800b076:	2200      	movs	r2, #0
 800b078:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00b      	beq.n	800b09c <tcp_slowtmr+0x550>
 800b084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b08a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b08c:	6912      	ldr	r2, [r2, #16]
 800b08e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b090:	4610      	mov	r0, r2
 800b092:	4798      	blx	r3
 800b094:	4603      	mov	r3, r0
 800b096:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b09a:	e002      	b.n	800b0a2 <tcp_slowtmr+0x556>
 800b09c:	2300      	movs	r3, #0
 800b09e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b0a2:	4b13      	ldr	r3, [pc, #76]	; (800b0f0 <tcp_slowtmr+0x5a4>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d000      	beq.n	800b0ac <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800b0aa:	e560      	b.n	800ab6e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b0ac:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d102      	bne.n	800b0ba <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b0b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0b6:	f003 fb7b 	bl	800e7b0 <tcp_output>
  while (pcb != NULL) {
 800b0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f47f ad5c 	bne.w	800ab7a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b0c6:	4b0b      	ldr	r3, [pc, #44]	; (800b0f4 <tcp_slowtmr+0x5a8>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b0cc:	e067      	b.n	800b19e <tcp_slowtmr+0x652>
 800b0ce:	bf00      	nop
 800b0d0:	200090dc 	.word	0x200090dc
 800b0d4:	10624dd3 	.word	0x10624dd3
 800b0d8:	000124f8 	.word	0x000124f8
 800b0dc:	200090d8 	.word	0x200090d8
 800b0e0:	080175ac 	.word	0x080175ac
 800b0e4:	080179e4 	.word	0x080179e4
 800b0e8:	080175f0 	.word	0x080175f0
 800b0ec:	08017a10 	.word	0x08017a10
 800b0f0:	200090d4 	.word	0x200090d4
 800b0f4:	200090e8 	.word	0x200090e8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fa:	7d1b      	ldrb	r3, [r3, #20]
 800b0fc:	2b0a      	cmp	r3, #10
 800b0fe:	d006      	beq.n	800b10e <tcp_slowtmr+0x5c2>
 800b100:	4b2b      	ldr	r3, [pc, #172]	; (800b1b0 <tcp_slowtmr+0x664>)
 800b102:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b106:	492b      	ldr	r1, [pc, #172]	; (800b1b4 <tcp_slowtmr+0x668>)
 800b108:	482b      	ldr	r0, [pc, #172]	; (800b1b8 <tcp_slowtmr+0x66c>)
 800b10a:	f008 f963 	bl	80133d4 <iprintf>
    pcb_remove = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b114:	4b29      	ldr	r3, [pc, #164]	; (800b1bc <tcp_slowtmr+0x670>)
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11a:	6a1b      	ldr	r3, [r3, #32]
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	2bf0      	cmp	r3, #240	; 0xf0
 800b120:	d904      	bls.n	800b12c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b126:	3301      	adds	r3, #1
 800b128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b130:	2b00      	cmp	r3, #0
 800b132:	d02f      	beq.n	800b194 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b134:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b136:	f000 fb2b 	bl	800b790 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d010      	beq.n	800b162 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b140:	4b1f      	ldr	r3, [pc, #124]	; (800b1c0 <tcp_slowtmr+0x674>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b146:	429a      	cmp	r2, r3
 800b148:	d106      	bne.n	800b158 <tcp_slowtmr+0x60c>
 800b14a:	4b19      	ldr	r3, [pc, #100]	; (800b1b0 <tcp_slowtmr+0x664>)
 800b14c:	f240 52af 	movw	r2, #1455	; 0x5af
 800b150:	491c      	ldr	r1, [pc, #112]	; (800b1c4 <tcp_slowtmr+0x678>)
 800b152:	4819      	ldr	r0, [pc, #100]	; (800b1b8 <tcp_slowtmr+0x66c>)
 800b154:	f008 f93e 	bl	80133d4 <iprintf>
        prev->next = pcb->next;
 800b158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15a:	68da      	ldr	r2, [r3, #12]
 800b15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15e:	60da      	str	r2, [r3, #12]
 800b160:	e00f      	b.n	800b182 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b162:	4b17      	ldr	r3, [pc, #92]	; (800b1c0 <tcp_slowtmr+0x674>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b168:	429a      	cmp	r2, r3
 800b16a:	d006      	beq.n	800b17a <tcp_slowtmr+0x62e>
 800b16c:	4b10      	ldr	r3, [pc, #64]	; (800b1b0 <tcp_slowtmr+0x664>)
 800b16e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b172:	4915      	ldr	r1, [pc, #84]	; (800b1c8 <tcp_slowtmr+0x67c>)
 800b174:	4810      	ldr	r0, [pc, #64]	; (800b1b8 <tcp_slowtmr+0x66c>)
 800b176:	f008 f92d 	bl	80133d4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	4a10      	ldr	r2, [pc, #64]	; (800b1c0 <tcp_slowtmr+0x674>)
 800b180:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b184:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b18c:	69f8      	ldr	r0, [r7, #28]
 800b18e:	f7ff f93f 	bl	800a410 <tcp_free>
 800b192:	e004      	b.n	800b19e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b196:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1a9      	bne.n	800b0f8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800b1a4:	bf00      	nop
 800b1a6:	bf00      	nop
 800b1a8:	3730      	adds	r7, #48	; 0x30
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bdb0      	pop	{r4, r5, r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	080175ac 	.word	0x080175ac
 800b1b4:	08017a3c 	.word	0x08017a3c
 800b1b8:	080175f0 	.word	0x080175f0
 800b1bc:	200090dc 	.word	0x200090dc
 800b1c0:	200090e8 	.word	0x200090e8
 800b1c4:	08017a6c 	.word	0x08017a6c
 800b1c8:	08017a94 	.word	0x08017a94

0800b1cc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b1d2:	4b2d      	ldr	r3, [pc, #180]	; (800b288 <tcp_fasttmr+0xbc>)
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	b2da      	uxtb	r2, r3
 800b1da:	4b2b      	ldr	r3, [pc, #172]	; (800b288 <tcp_fasttmr+0xbc>)
 800b1dc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b1de:	4b2b      	ldr	r3, [pc, #172]	; (800b28c <tcp_fasttmr+0xc0>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b1e4:	e048      	b.n	800b278 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	7f9a      	ldrb	r2, [r3, #30]
 800b1ea:	4b27      	ldr	r3, [pc, #156]	; (800b288 <tcp_fasttmr+0xbc>)
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d03f      	beq.n	800b272 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b1f2:	4b25      	ldr	r3, [pc, #148]	; (800b288 <tcp_fasttmr+0xbc>)
 800b1f4:	781a      	ldrb	r2, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	8b5b      	ldrh	r3, [r3, #26]
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	2b00      	cmp	r3, #0
 800b204:	d010      	beq.n	800b228 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	8b5b      	ldrh	r3, [r3, #26]
 800b20a:	f043 0302 	orr.w	r3, r3, #2
 800b20e:	b29a      	uxth	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f003 facb 	bl	800e7b0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	8b5b      	ldrh	r3, [r3, #26]
 800b21e:	f023 0303 	bic.w	r3, r3, #3
 800b222:	b29a      	uxth	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	8b5b      	ldrh	r3, [r3, #26]
 800b22c:	f003 0308 	and.w	r3, r3, #8
 800b230:	2b00      	cmp	r3, #0
 800b232:	d009      	beq.n	800b248 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	8b5b      	ldrh	r3, [r3, #26]
 800b238:	f023 0308 	bic.w	r3, r3, #8
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f7ff fa78 	bl	800a738 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00a      	beq.n	800b26c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b256:	4b0e      	ldr	r3, [pc, #56]	; (800b290 <tcp_fasttmr+0xc4>)
 800b258:	2200      	movs	r2, #0
 800b25a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 f819 	bl	800b294 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b262:	4b0b      	ldr	r3, [pc, #44]	; (800b290 <tcp_fasttmr+0xc4>)
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d000      	beq.n	800b26c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b26a:	e7b8      	b.n	800b1de <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	607b      	str	r3, [r7, #4]
 800b270:	e002      	b.n	800b278 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1b3      	bne.n	800b1e6 <tcp_fasttmr+0x1a>
    }
  }
}
 800b27e:	bf00      	nop
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	200002ba 	.word	0x200002ba
 800b28c:	200090d8 	.word	0x200090d8
 800b290:	200090d4 	.word	0x200090d4

0800b294 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b294:	b590      	push	{r4, r7, lr}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d109      	bne.n	800b2b6 <tcp_process_refused_data+0x22>
 800b2a2:	4b37      	ldr	r3, [pc, #220]	; (800b380 <tcp_process_refused_data+0xec>)
 800b2a4:	f240 6209 	movw	r2, #1545	; 0x609
 800b2a8:	4936      	ldr	r1, [pc, #216]	; (800b384 <tcp_process_refused_data+0xf0>)
 800b2aa:	4837      	ldr	r0, [pc, #220]	; (800b388 <tcp_process_refused_data+0xf4>)
 800b2ac:	f008 f892 	bl	80133d4 <iprintf>
 800b2b0:	f06f 030f 	mvn.w	r3, #15
 800b2b4:	e060      	b.n	800b378 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2ba:	7b5b      	ldrb	r3, [r3, #13]
 800b2bc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2c2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00b      	beq.n	800b2ec <tcp_process_refused_data+0x58>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6918      	ldr	r0, [r3, #16]
 800b2de:	2300      	movs	r3, #0
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	6879      	ldr	r1, [r7, #4]
 800b2e4:	47a0      	blx	r4
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	73fb      	strb	r3, [r7, #15]
 800b2ea:	e007      	b.n	800b2fc <tcp_process_refused_data+0x68>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	6879      	ldr	r1, [r7, #4]
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	f000 f8a4 	bl	800b440 <tcp_recv_null>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b2fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d12a      	bne.n	800b35a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b304:	7bbb      	ldrb	r3, [r7, #14]
 800b306:	f003 0320 	and.w	r3, r3, #32
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d033      	beq.n	800b376 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b312:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b316:	d005      	beq.n	800b324 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b31c:	3301      	adds	r3, #1
 800b31e:	b29a      	uxth	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00b      	beq.n	800b346 <tcp_process_refused_data+0xb2>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6918      	ldr	r0, [r3, #16]
 800b338:	2300      	movs	r3, #0
 800b33a:	2200      	movs	r2, #0
 800b33c:	6879      	ldr	r1, [r7, #4]
 800b33e:	47a0      	blx	r4
 800b340:	4603      	mov	r3, r0
 800b342:	73fb      	strb	r3, [r7, #15]
 800b344:	e001      	b.n	800b34a <tcp_process_refused_data+0xb6>
 800b346:	2300      	movs	r3, #0
 800b348:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b34a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b34e:	f113 0f0d 	cmn.w	r3, #13
 800b352:	d110      	bne.n	800b376 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b354:	f06f 030c 	mvn.w	r3, #12
 800b358:	e00e      	b.n	800b378 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b35a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b35e:	f113 0f0d 	cmn.w	r3, #13
 800b362:	d102      	bne.n	800b36a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b364:	f06f 030c 	mvn.w	r3, #12
 800b368:	e006      	b.n	800b378 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b370:	f06f 0304 	mvn.w	r3, #4
 800b374:	e000      	b.n	800b378 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd90      	pop	{r4, r7, pc}
 800b380:	080175ac 	.word	0x080175ac
 800b384:	08017abc 	.word	0x08017abc
 800b388:	080175f0 	.word	0x080175f0

0800b38c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b394:	e007      	b.n	800b3a6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 f80a 	bl	800b3b6 <tcp_seg_free>
    seg = next;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1f4      	bne.n	800b396 <tcp_segs_free+0xa>
  }
}
 800b3ac:	bf00      	nop
 800b3ae:	bf00      	nop
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b082      	sub	sp, #8
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00c      	beq.n	800b3de <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d004      	beq.n	800b3d6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7fe fcdb 	bl	8009d8c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	2003      	movs	r0, #3
 800b3da:	f7fd fec5 	bl	8009168 <memp_free>
  }
}
 800b3de:	bf00      	nop
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
	...

0800b3e8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d106      	bne.n	800b404 <tcp_seg_copy+0x1c>
 800b3f6:	4b0f      	ldr	r3, [pc, #60]	; (800b434 <tcp_seg_copy+0x4c>)
 800b3f8:	f240 6282 	movw	r2, #1666	; 0x682
 800b3fc:	490e      	ldr	r1, [pc, #56]	; (800b438 <tcp_seg_copy+0x50>)
 800b3fe:	480f      	ldr	r0, [pc, #60]	; (800b43c <tcp_seg_copy+0x54>)
 800b400:	f007 ffe8 	bl	80133d4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b404:	2003      	movs	r0, #3
 800b406:	f7fd fe63 	bl	80090d0 <memp_malloc>
 800b40a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d101      	bne.n	800b416 <tcp_seg_copy+0x2e>
    return NULL;
 800b412:	2300      	movs	r3, #0
 800b414:	e00a      	b.n	800b42c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b416:	2210      	movs	r2, #16
 800b418:	6879      	ldr	r1, [r7, #4]
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f007 fa96 	bl	801294c <memcpy>
  pbuf_ref(cseg->p);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	4618      	mov	r0, r3
 800b426:	f7fe fd51 	bl	8009ecc <pbuf_ref>
  return cseg;
 800b42a:	68fb      	ldr	r3, [r7, #12]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	080175ac 	.word	0x080175ac
 800b438:	08017b00 	.word	0x08017b00
 800b43c:	080175f0 	.word	0x080175f0

0800b440 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d109      	bne.n	800b468 <tcp_recv_null+0x28>
 800b454:	4b12      	ldr	r3, [pc, #72]	; (800b4a0 <tcp_recv_null+0x60>)
 800b456:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b45a:	4912      	ldr	r1, [pc, #72]	; (800b4a4 <tcp_recv_null+0x64>)
 800b45c:	4812      	ldr	r0, [pc, #72]	; (800b4a8 <tcp_recv_null+0x68>)
 800b45e:	f007 ffb9 	bl	80133d4 <iprintf>
 800b462:	f06f 030f 	mvn.w	r3, #15
 800b466:	e016      	b.n	800b496 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d009      	beq.n	800b482 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	891b      	ldrh	r3, [r3, #8]
 800b472:	4619      	mov	r1, r3
 800b474:	68b8      	ldr	r0, [r7, #8]
 800b476:	f7ff fb19 	bl	800aaac <tcp_recved>
    pbuf_free(p);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f7fe fc86 	bl	8009d8c <pbuf_free>
 800b480:	e008      	b.n	800b494 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d104      	bne.n	800b494 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b48a:	68b8      	ldr	r0, [r7, #8]
 800b48c:	f7ff f9be 	bl	800a80c <tcp_close>
 800b490:	4603      	mov	r3, r0
 800b492:	e000      	b.n	800b496 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	080175ac 	.word	0x080175ac
 800b4a4:	08017b1c 	.word	0x08017b1c
 800b4a8:	080175f0 	.word	0x080175f0

0800b4ac <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b4b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	db01      	blt.n	800b4c2 <tcp_kill_prio+0x16>
 800b4be:	79fb      	ldrb	r3, [r7, #7]
 800b4c0:	e000      	b.n	800b4c4 <tcp_kill_prio+0x18>
 800b4c2:	237f      	movs	r3, #127	; 0x7f
 800b4c4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b4c6:	7afb      	ldrb	r3, [r7, #11]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d034      	beq.n	800b536 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b4cc:	7afb      	ldrb	r3, [r7, #11]
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4da:	4b19      	ldr	r3, [pc, #100]	; (800b540 <tcp_kill_prio+0x94>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	617b      	str	r3, [r7, #20]
 800b4e0:	e01f      	b.n	800b522 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	7d5b      	ldrb	r3, [r3, #21]
 800b4e6:	7afa      	ldrb	r2, [r7, #11]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d80c      	bhi.n	800b506 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b4f0:	7afa      	ldrb	r2, [r7, #11]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d112      	bne.n	800b51c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b4f6:	4b13      	ldr	r3, [pc, #76]	; (800b544 <tcp_kill_prio+0x98>)
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	6a1b      	ldr	r3, [r3, #32]
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	429a      	cmp	r2, r3
 800b504:	d80a      	bhi.n	800b51c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b506:	4b0f      	ldr	r3, [pc, #60]	; (800b544 <tcp_kill_prio+0x98>)
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	6a1b      	ldr	r3, [r3, #32]
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	7d5b      	ldrb	r3, [r3, #21]
 800b51a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	617b      	str	r3, [r7, #20]
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1dc      	bne.n	800b4e2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d004      	beq.n	800b538 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b52e:	6938      	ldr	r0, [r7, #16]
 800b530:	f7ff fa56 	bl	800a9e0 <tcp_abort>
 800b534:	e000      	b.n	800b538 <tcp_kill_prio+0x8c>
    return;
 800b536:	bf00      	nop
  }
}
 800b538:	3718      	adds	r7, #24
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	200090d8 	.word	0x200090d8
 800b544:	200090dc 	.word	0x200090dc

0800b548 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b086      	sub	sp, #24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b552:	79fb      	ldrb	r3, [r7, #7]
 800b554:	2b08      	cmp	r3, #8
 800b556:	d009      	beq.n	800b56c <tcp_kill_state+0x24>
 800b558:	79fb      	ldrb	r3, [r7, #7]
 800b55a:	2b09      	cmp	r3, #9
 800b55c:	d006      	beq.n	800b56c <tcp_kill_state+0x24>
 800b55e:	4b1a      	ldr	r3, [pc, #104]	; (800b5c8 <tcp_kill_state+0x80>)
 800b560:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b564:	4919      	ldr	r1, [pc, #100]	; (800b5cc <tcp_kill_state+0x84>)
 800b566:	481a      	ldr	r0, [pc, #104]	; (800b5d0 <tcp_kill_state+0x88>)
 800b568:	f007 ff34 	bl	80133d4 <iprintf>

  inactivity = 0;
 800b56c:	2300      	movs	r3, #0
 800b56e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b570:	2300      	movs	r3, #0
 800b572:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b574:	4b17      	ldr	r3, [pc, #92]	; (800b5d4 <tcp_kill_state+0x8c>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	617b      	str	r3, [r7, #20]
 800b57a:	e017      	b.n	800b5ac <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	7d1b      	ldrb	r3, [r3, #20]
 800b580:	79fa      	ldrb	r2, [r7, #7]
 800b582:	429a      	cmp	r2, r3
 800b584:	d10f      	bne.n	800b5a6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b586:	4b14      	ldr	r3, [pc, #80]	; (800b5d8 <tcp_kill_state+0x90>)
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	6a1b      	ldr	r3, [r3, #32]
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	429a      	cmp	r2, r3
 800b594:	d807      	bhi.n	800b5a6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b596:	4b10      	ldr	r3, [pc, #64]	; (800b5d8 <tcp_kill_state+0x90>)
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	6a1b      	ldr	r3, [r3, #32]
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	617b      	str	r3, [r7, #20]
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d1e4      	bne.n	800b57c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d003      	beq.n	800b5c0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	6938      	ldr	r0, [r7, #16]
 800b5bc:	f7ff f952 	bl	800a864 <tcp_abandon>
  }
}
 800b5c0:	bf00      	nop
 800b5c2:	3718      	adds	r7, #24
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	080175ac 	.word	0x080175ac
 800b5cc:	08017b38 	.word	0x08017b38
 800b5d0:	080175f0 	.word	0x080175f0
 800b5d4:	200090d8 	.word	0x200090d8
 800b5d8:	200090dc 	.word	0x200090dc

0800b5dc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5ea:	4b12      	ldr	r3, [pc, #72]	; (800b634 <tcp_kill_timewait+0x58>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	60fb      	str	r3, [r7, #12]
 800b5f0:	e012      	b.n	800b618 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b5f2:	4b11      	ldr	r3, [pc, #68]	; (800b638 <tcp_kill_timewait+0x5c>)
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d807      	bhi.n	800b612 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b602:	4b0d      	ldr	r3, [pc, #52]	; (800b638 <tcp_kill_timewait+0x5c>)
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	6a1b      	ldr	r3, [r3, #32]
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1e9      	bne.n	800b5f2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b624:	68b8      	ldr	r0, [r7, #8]
 800b626:	f7ff f9db 	bl	800a9e0 <tcp_abort>
  }
}
 800b62a:	bf00      	nop
 800b62c:	3710      	adds	r7, #16
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	200090e8 	.word	0x200090e8
 800b638:	200090dc 	.word	0x200090dc

0800b63c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b642:	4b10      	ldr	r3, [pc, #64]	; (800b684 <tcp_handle_closepend+0x48>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b648:	e014      	b.n	800b674 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	8b5b      	ldrh	r3, [r3, #26]
 800b654:	f003 0308 	and.w	r3, r3, #8
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d009      	beq.n	800b670 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	8b5b      	ldrh	r3, [r3, #26]
 800b660:	f023 0308 	bic.w	r3, r3, #8
 800b664:	b29a      	uxth	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff f864 	bl	800a738 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1e7      	bne.n	800b64a <tcp_handle_closepend+0xe>
  }
}
 800b67a:	bf00      	nop
 800b67c:	bf00      	nop
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	200090d8 	.word	0x200090d8

0800b688 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	4603      	mov	r3, r0
 800b690:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b692:	2001      	movs	r0, #1
 800b694:	f7fd fd1c 	bl	80090d0 <memp_malloc>
 800b698:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d126      	bne.n	800b6ee <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b6a0:	f7ff ffcc 	bl	800b63c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b6a4:	f7ff ff9a 	bl	800b5dc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b6a8:	2001      	movs	r0, #1
 800b6aa:	f7fd fd11 	bl	80090d0 <memp_malloc>
 800b6ae:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d11b      	bne.n	800b6ee <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b6b6:	2009      	movs	r0, #9
 800b6b8:	f7ff ff46 	bl	800b548 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b6bc:	2001      	movs	r0, #1
 800b6be:	f7fd fd07 	bl	80090d0 <memp_malloc>
 800b6c2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d111      	bne.n	800b6ee <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b6ca:	2008      	movs	r0, #8
 800b6cc:	f7ff ff3c 	bl	800b548 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	f7fd fcfd 	bl	80090d0 <memp_malloc>
 800b6d6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d107      	bne.n	800b6ee <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b6de:	79fb      	ldrb	r3, [r7, #7]
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7ff fee3 	bl	800b4ac <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	f7fd fcf2 	bl	80090d0 <memp_malloc>
 800b6ec:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d03f      	beq.n	800b774 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b6f4:	229c      	movs	r2, #156	; 0x9c
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f007 f94f 	bl	801299c <memset>
    pcb->prio = prio;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	79fa      	ldrb	r2, [r7, #7]
 800b702:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b70a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b714:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	22ff      	movs	r2, #255	; 0xff
 800b722:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b72a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2206      	movs	r2, #6
 800b730:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2206      	movs	r2, #6
 800b738:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b740:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2201      	movs	r2, #1
 800b746:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b74a:	4b0d      	ldr	r3, [pc, #52]	; (800b780 <tcp_alloc+0xf8>)
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b752:	4b0c      	ldr	r3, [pc, #48]	; (800b784 <tcp_alloc+0xfc>)
 800b754:	781a      	ldrb	r2, [r3, #0]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b760:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	4a08      	ldr	r2, [pc, #32]	; (800b788 <tcp_alloc+0x100>)
 800b768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	4a07      	ldr	r2, [pc, #28]	; (800b78c <tcp_alloc+0x104>)
 800b770:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b774:	68fb      	ldr	r3, [r7, #12]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	200090dc 	.word	0x200090dc
 800b784:	200002ba 	.word	0x200002ba
 800b788:	0800b441 	.word	0x0800b441
 800b78c:	006ddd00 	.word	0x006ddd00

0800b790 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d107      	bne.n	800b7ae <tcp_pcb_purge+0x1e>
 800b79e:	4b21      	ldr	r3, [pc, #132]	; (800b824 <tcp_pcb_purge+0x94>)
 800b7a0:	f640 0251 	movw	r2, #2129	; 0x851
 800b7a4:	4920      	ldr	r1, [pc, #128]	; (800b828 <tcp_pcb_purge+0x98>)
 800b7a6:	4821      	ldr	r0, [pc, #132]	; (800b82c <tcp_pcb_purge+0x9c>)
 800b7a8:	f007 fe14 	bl	80133d4 <iprintf>
 800b7ac:	e037      	b.n	800b81e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	7d1b      	ldrb	r3, [r3, #20]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d033      	beq.n	800b81e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b7ba:	2b0a      	cmp	r3, #10
 800b7bc:	d02f      	beq.n	800b81e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d02b      	beq.n	800b81e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d007      	beq.n	800b7de <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7fe fada 	bl	8009d8c <pbuf_free>
      pcb->refused_data = NULL;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d002      	beq.n	800b7ec <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f986 	bl	800baf8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7f2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7ff fdc7 	bl	800b38c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b802:	4618      	mov	r0, r3
 800b804:	f7ff fdc2 	bl	800b38c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	66da      	str	r2, [r3, #108]	; 0x6c
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b81e:	3708      	adds	r7, #8
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	080175ac 	.word	0x080175ac
 800b828:	08017bf8 	.word	0x08017bf8
 800b82c:	080175f0 	.word	0x080175f0

0800b830 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d106      	bne.n	800b84e <tcp_pcb_remove+0x1e>
 800b840:	4b3e      	ldr	r3, [pc, #248]	; (800b93c <tcp_pcb_remove+0x10c>)
 800b842:	f640 0283 	movw	r2, #2179	; 0x883
 800b846:	493e      	ldr	r1, [pc, #248]	; (800b940 <tcp_pcb_remove+0x110>)
 800b848:	483e      	ldr	r0, [pc, #248]	; (800b944 <tcp_pcb_remove+0x114>)
 800b84a:	f007 fdc3 	bl	80133d4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d106      	bne.n	800b862 <tcp_pcb_remove+0x32>
 800b854:	4b39      	ldr	r3, [pc, #228]	; (800b93c <tcp_pcb_remove+0x10c>)
 800b856:	f640 0284 	movw	r2, #2180	; 0x884
 800b85a:	493b      	ldr	r1, [pc, #236]	; (800b948 <tcp_pcb_remove+0x118>)
 800b85c:	4839      	ldr	r0, [pc, #228]	; (800b944 <tcp_pcb_remove+0x114>)
 800b85e:	f007 fdb9 	bl	80133d4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	683a      	ldr	r2, [r7, #0]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d105      	bne.n	800b878 <tcp_pcb_remove+0x48>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68da      	ldr	r2, [r3, #12]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	601a      	str	r2, [r3, #0]
 800b876:	e013      	b.n	800b8a0 <tcp_pcb_remove+0x70>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	60fb      	str	r3, [r7, #12]
 800b87e:	e00c      	b.n	800b89a <tcp_pcb_remove+0x6a>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	683a      	ldr	r2, [r7, #0]
 800b886:	429a      	cmp	r2, r3
 800b888:	d104      	bne.n	800b894 <tcp_pcb_remove+0x64>
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	68da      	ldr	r2, [r3, #12]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	60da      	str	r2, [r3, #12]
 800b892:	e005      	b.n	800b8a0 <tcp_pcb_remove+0x70>
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	60fb      	str	r3, [r7, #12]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1ef      	bne.n	800b880 <tcp_pcb_remove+0x50>
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b8a6:	6838      	ldr	r0, [r7, #0]
 800b8a8:	f7ff ff72 	bl	800b790 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	7d1b      	ldrb	r3, [r3, #20]
 800b8b0:	2b0a      	cmp	r3, #10
 800b8b2:	d013      	beq.n	800b8dc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d00f      	beq.n	800b8dc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	8b5b      	ldrh	r3, [r3, #26]
 800b8c0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d009      	beq.n	800b8dc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	8b5b      	ldrh	r3, [r3, #26]
 800b8cc:	f043 0302 	orr.w	r3, r3, #2
 800b8d0:	b29a      	uxth	r2, r3
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b8d6:	6838      	ldr	r0, [r7, #0]
 800b8d8:	f002 ff6a 	bl	800e7b0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	7d1b      	ldrb	r3, [r3, #20]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d020      	beq.n	800b926 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d006      	beq.n	800b8fa <tcp_pcb_remove+0xca>
 800b8ec:	4b13      	ldr	r3, [pc, #76]	; (800b93c <tcp_pcb_remove+0x10c>)
 800b8ee:	f640 0293 	movw	r2, #2195	; 0x893
 800b8f2:	4916      	ldr	r1, [pc, #88]	; (800b94c <tcp_pcb_remove+0x11c>)
 800b8f4:	4813      	ldr	r0, [pc, #76]	; (800b944 <tcp_pcb_remove+0x114>)
 800b8f6:	f007 fd6d 	bl	80133d4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d006      	beq.n	800b910 <tcp_pcb_remove+0xe0>
 800b902:	4b0e      	ldr	r3, [pc, #56]	; (800b93c <tcp_pcb_remove+0x10c>)
 800b904:	f640 0294 	movw	r2, #2196	; 0x894
 800b908:	4911      	ldr	r1, [pc, #68]	; (800b950 <tcp_pcb_remove+0x120>)
 800b90a:	480e      	ldr	r0, [pc, #56]	; (800b944 <tcp_pcb_remove+0x114>)
 800b90c:	f007 fd62 	bl	80133d4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b914:	2b00      	cmp	r3, #0
 800b916:	d006      	beq.n	800b926 <tcp_pcb_remove+0xf6>
 800b918:	4b08      	ldr	r3, [pc, #32]	; (800b93c <tcp_pcb_remove+0x10c>)
 800b91a:	f640 0296 	movw	r2, #2198	; 0x896
 800b91e:	490d      	ldr	r1, [pc, #52]	; (800b954 <tcp_pcb_remove+0x124>)
 800b920:	4808      	ldr	r0, [pc, #32]	; (800b944 <tcp_pcb_remove+0x114>)
 800b922:	f007 fd57 	bl	80133d4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	2200      	movs	r2, #0
 800b92a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	2200      	movs	r2, #0
 800b930:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b932:	bf00      	nop
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	080175ac 	.word	0x080175ac
 800b940:	08017c14 	.word	0x08017c14
 800b944:	080175f0 	.word	0x080175f0
 800b948:	08017c30 	.word	0x08017c30
 800b94c:	08017c50 	.word	0x08017c50
 800b950:	08017c68 	.word	0x08017c68
 800b954:	08017c84 	.word	0x08017c84

0800b958 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d106      	bne.n	800b974 <tcp_next_iss+0x1c>
 800b966:	4b0a      	ldr	r3, [pc, #40]	; (800b990 <tcp_next_iss+0x38>)
 800b968:	f640 02af 	movw	r2, #2223	; 0x8af
 800b96c:	4909      	ldr	r1, [pc, #36]	; (800b994 <tcp_next_iss+0x3c>)
 800b96e:	480a      	ldr	r0, [pc, #40]	; (800b998 <tcp_next_iss+0x40>)
 800b970:	f007 fd30 	bl	80133d4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b974:	4b09      	ldr	r3, [pc, #36]	; (800b99c <tcp_next_iss+0x44>)
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	4b09      	ldr	r3, [pc, #36]	; (800b9a0 <tcp_next_iss+0x48>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4413      	add	r3, r2
 800b97e:	4a07      	ldr	r2, [pc, #28]	; (800b99c <tcp_next_iss+0x44>)
 800b980:	6013      	str	r3, [r2, #0]
  return iss;
 800b982:	4b06      	ldr	r3, [pc, #24]	; (800b99c <tcp_next_iss+0x44>)
 800b984:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b986:	4618      	mov	r0, r3
 800b988:	3708      	adds	r7, #8
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	080175ac 	.word	0x080175ac
 800b994:	08017c9c 	.word	0x08017c9c
 800b998:	080175f0 	.word	0x080175f0
 800b99c:	20000044 	.word	0x20000044
 800b9a0:	200090dc 	.word	0x200090dc

0800b9a4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
 800b9b0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d106      	bne.n	800b9c6 <tcp_eff_send_mss_netif+0x22>
 800b9b8:	4b14      	ldr	r3, [pc, #80]	; (800ba0c <tcp_eff_send_mss_netif+0x68>)
 800b9ba:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b9be:	4914      	ldr	r1, [pc, #80]	; (800ba10 <tcp_eff_send_mss_netif+0x6c>)
 800b9c0:	4814      	ldr	r0, [pc, #80]	; (800ba14 <tcp_eff_send_mss_netif+0x70>)
 800b9c2:	f007 fd07 	bl	80133d4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d101      	bne.n	800b9d0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b9cc:	89fb      	ldrh	r3, [r7, #14]
 800b9ce:	e019      	b.n	800ba04 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9d4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b9d6:	8afb      	ldrh	r3, [r7, #22]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d012      	beq.n	800ba02 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b9dc:	2328      	movs	r3, #40	; 0x28
 800b9de:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b9e0:	8afa      	ldrh	r2, [r7, #22]
 800b9e2:	8abb      	ldrh	r3, [r7, #20]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d904      	bls.n	800b9f2 <tcp_eff_send_mss_netif+0x4e>
 800b9e8:	8afa      	ldrh	r2, [r7, #22]
 800b9ea:	8abb      	ldrh	r3, [r7, #20]
 800b9ec:	1ad3      	subs	r3, r2, r3
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	e000      	b.n	800b9f4 <tcp_eff_send_mss_netif+0x50>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b9f6:	8a7a      	ldrh	r2, [r7, #18]
 800b9f8:	89fb      	ldrh	r3, [r7, #14]
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	bf28      	it	cs
 800b9fe:	4613      	movcs	r3, r2
 800ba00:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ba02:	89fb      	ldrh	r3, [r7, #14]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3718      	adds	r7, #24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	080175ac 	.word	0x080175ac
 800ba10:	08017cb8 	.word	0x08017cb8
 800ba14:	080175f0 	.word	0x080175f0

0800ba18 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d119      	bne.n	800ba60 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ba2c:	4b10      	ldr	r3, [pc, #64]	; (800ba70 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ba2e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ba32:	4910      	ldr	r1, [pc, #64]	; (800ba74 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ba34:	4810      	ldr	r0, [pc, #64]	; (800ba78 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ba36:	f007 fccd 	bl	80133d4 <iprintf>

  while (pcb != NULL) {
 800ba3a:	e011      	b.n	800ba60 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d108      	bne.n	800ba5a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f7fe ffc6 	bl	800a9e0 <tcp_abort>
      pcb = next;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	60fb      	str	r3, [r7, #12]
 800ba58:	e002      	b.n	800ba60 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1ea      	bne.n	800ba3c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ba66:	bf00      	nop
 800ba68:	bf00      	nop
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	080175ac 	.word	0x080175ac
 800ba74:	08017ce0 	.word	0x08017ce0
 800ba78:	080175f0 	.word	0x080175f0

0800ba7c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d02a      	beq.n	800bae2 <tcp_netif_ip_addr_changed+0x66>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d026      	beq.n	800bae2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ba94:	4b15      	ldr	r3, [pc, #84]	; (800baec <tcp_netif_ip_addr_changed+0x70>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4619      	mov	r1, r3
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f7ff ffbc 	bl	800ba18 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800baa0:	4b13      	ldr	r3, [pc, #76]	; (800baf0 <tcp_netif_ip_addr_changed+0x74>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4619      	mov	r1, r3
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7ff ffb6 	bl	800ba18 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d017      	beq.n	800bae2 <tcp_netif_ip_addr_changed+0x66>
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d013      	beq.n	800bae2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800baba:	4b0e      	ldr	r3, [pc, #56]	; (800baf4 <tcp_netif_ip_addr_changed+0x78>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	60fb      	str	r3, [r7, #12]
 800bac0:	e00c      	b.n	800badc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d103      	bne.n	800bad6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	60fb      	str	r3, [r7, #12]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1ef      	bne.n	800bac2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800bae2:	bf00      	nop
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	200090d8 	.word	0x200090d8
 800baf0:	200090e4 	.word	0x200090e4
 800baf4:	200090e0 	.word	0x200090e0

0800baf8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d007      	beq.n	800bb18 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff fc3d 	bl	800b38c <tcp_segs_free>
    pcb->ooseq = NULL;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800bb18:	bf00      	nop
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800bb20:	b590      	push	{r4, r7, lr}
 800bb22:	b08d      	sub	sp, #52	; 0x34
 800bb24:	af04      	add	r7, sp, #16
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d105      	bne.n	800bb3c <tcp_input+0x1c>
 800bb30:	4b9b      	ldr	r3, [pc, #620]	; (800bda0 <tcp_input+0x280>)
 800bb32:	2283      	movs	r2, #131	; 0x83
 800bb34:	499b      	ldr	r1, [pc, #620]	; (800bda4 <tcp_input+0x284>)
 800bb36:	489c      	ldr	r0, [pc, #624]	; (800bda8 <tcp_input+0x288>)
 800bb38:	f007 fc4c 	bl	80133d4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	4a9a      	ldr	r2, [pc, #616]	; (800bdac <tcp_input+0x28c>)
 800bb42:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	895b      	ldrh	r3, [r3, #10]
 800bb48:	2b13      	cmp	r3, #19
 800bb4a:	f240 83c4 	bls.w	800c2d6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bb4e:	4b98      	ldr	r3, [pc, #608]	; (800bdb0 <tcp_input+0x290>)
 800bb50:	695b      	ldr	r3, [r3, #20]
 800bb52:	4a97      	ldr	r2, [pc, #604]	; (800bdb0 <tcp_input+0x290>)
 800bb54:	6812      	ldr	r2, [r2, #0]
 800bb56:	4611      	mov	r1, r2
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f005 ff61 	bl	8011a20 <ip4_addr_isbroadcast_u32>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f040 83ba 	bne.w	800c2da <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800bb66:	4b92      	ldr	r3, [pc, #584]	; (800bdb0 <tcp_input+0x290>)
 800bb68:	695b      	ldr	r3, [r3, #20]
 800bb6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bb6e:	2be0      	cmp	r3, #224	; 0xe0
 800bb70:	f000 83b3 	beq.w	800c2da <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800bb74:	4b8d      	ldr	r3, [pc, #564]	; (800bdac <tcp_input+0x28c>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	899b      	ldrh	r3, [r3, #12]
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fc fe51 	bl	8008824 <lwip_htons>
 800bb82:	4603      	mov	r3, r0
 800bb84:	0b1b      	lsrs	r3, r3, #12
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bb8e:	7cbb      	ldrb	r3, [r7, #18]
 800bb90:	2b13      	cmp	r3, #19
 800bb92:	f240 83a4 	bls.w	800c2de <tcp_input+0x7be>
 800bb96:	7cbb      	ldrb	r3, [r7, #18]
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	891b      	ldrh	r3, [r3, #8]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	f200 839d 	bhi.w	800c2de <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bba4:	7cbb      	ldrb	r3, [r7, #18]
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	3b14      	subs	r3, #20
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	4b81      	ldr	r3, [pc, #516]	; (800bdb4 <tcp_input+0x294>)
 800bbae:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800bbb0:	4b81      	ldr	r3, [pc, #516]	; (800bdb8 <tcp_input+0x298>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	895a      	ldrh	r2, [r3, #10]
 800bbba:	7cbb      	ldrb	r3, [r7, #18]
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d309      	bcc.n	800bbd6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800bbc2:	4b7c      	ldr	r3, [pc, #496]	; (800bdb4 <tcp_input+0x294>)
 800bbc4:	881a      	ldrh	r2, [r3, #0]
 800bbc6:	4b7d      	ldr	r3, [pc, #500]	; (800bdbc <tcp_input+0x29c>)
 800bbc8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bbca:	7cbb      	ldrb	r3, [r7, #18]
 800bbcc:	4619      	mov	r1, r3
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f7fe f856 	bl	8009c80 <pbuf_remove_header>
 800bbd4:	e04e      	b.n	800bc74 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d105      	bne.n	800bbea <tcp_input+0xca>
 800bbde:	4b70      	ldr	r3, [pc, #448]	; (800bda0 <tcp_input+0x280>)
 800bbe0:	22c2      	movs	r2, #194	; 0xc2
 800bbe2:	4977      	ldr	r1, [pc, #476]	; (800bdc0 <tcp_input+0x2a0>)
 800bbe4:	4870      	ldr	r0, [pc, #448]	; (800bda8 <tcp_input+0x288>)
 800bbe6:	f007 fbf5 	bl	80133d4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800bbea:	2114      	movs	r1, #20
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f7fe f847 	bl	8009c80 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	895a      	ldrh	r2, [r3, #10]
 800bbf6:	4b71      	ldr	r3, [pc, #452]	; (800bdbc <tcp_input+0x29c>)
 800bbf8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bbfa:	4b6e      	ldr	r3, [pc, #440]	; (800bdb4 <tcp_input+0x294>)
 800bbfc:	881a      	ldrh	r2, [r3, #0]
 800bbfe:	4b6f      	ldr	r3, [pc, #444]	; (800bdbc <tcp_input+0x29c>)
 800bc00:	881b      	ldrh	r3, [r3, #0]
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800bc06:	4b6d      	ldr	r3, [pc, #436]	; (800bdbc <tcp_input+0x29c>)
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f7fe f837 	bl	8009c80 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	895b      	ldrh	r3, [r3, #10]
 800bc18:	8a3a      	ldrh	r2, [r7, #16]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	f200 8361 	bhi.w	800c2e2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	4a64      	ldr	r2, [pc, #400]	; (800bdb8 <tcp_input+0x298>)
 800bc28:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	8a3a      	ldrh	r2, [r7, #16]
 800bc30:	4611      	mov	r1, r2
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fe f824 	bl	8009c80 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	891a      	ldrh	r2, [r3, #8]
 800bc3c:	8a3b      	ldrh	r3, [r7, #16]
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	895b      	ldrh	r3, [r3, #10]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d005      	beq.n	800bc5a <tcp_input+0x13a>
 800bc4e:	4b54      	ldr	r3, [pc, #336]	; (800bda0 <tcp_input+0x280>)
 800bc50:	22df      	movs	r2, #223	; 0xdf
 800bc52:	495c      	ldr	r1, [pc, #368]	; (800bdc4 <tcp_input+0x2a4>)
 800bc54:	4854      	ldr	r0, [pc, #336]	; (800bda8 <tcp_input+0x288>)
 800bc56:	f007 fbbd 	bl	80133d4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	891a      	ldrh	r2, [r3, #8]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	891b      	ldrh	r3, [r3, #8]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d005      	beq.n	800bc74 <tcp_input+0x154>
 800bc68:	4b4d      	ldr	r3, [pc, #308]	; (800bda0 <tcp_input+0x280>)
 800bc6a:	22e0      	movs	r2, #224	; 0xe0
 800bc6c:	4956      	ldr	r1, [pc, #344]	; (800bdc8 <tcp_input+0x2a8>)
 800bc6e:	484e      	ldr	r0, [pc, #312]	; (800bda8 <tcp_input+0x288>)
 800bc70:	f007 fbb0 	bl	80133d4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bc74:	4b4d      	ldr	r3, [pc, #308]	; (800bdac <tcp_input+0x28c>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	881b      	ldrh	r3, [r3, #0]
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	4a4b      	ldr	r2, [pc, #300]	; (800bdac <tcp_input+0x28c>)
 800bc7e:	6814      	ldr	r4, [r2, #0]
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7fc fdcf 	bl	8008824 <lwip_htons>
 800bc86:	4603      	mov	r3, r0
 800bc88:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bc8a:	4b48      	ldr	r3, [pc, #288]	; (800bdac <tcp_input+0x28c>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	885b      	ldrh	r3, [r3, #2]
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	4a46      	ldr	r2, [pc, #280]	; (800bdac <tcp_input+0x28c>)
 800bc94:	6814      	ldr	r4, [r2, #0]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7fc fdc4 	bl	8008824 <lwip_htons>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bca0:	4b42      	ldr	r3, [pc, #264]	; (800bdac <tcp_input+0x28c>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	4a41      	ldr	r2, [pc, #260]	; (800bdac <tcp_input+0x28c>)
 800bca8:	6814      	ldr	r4, [r2, #0]
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7fc fdcf 	bl	800884e <lwip_htonl>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	6063      	str	r3, [r4, #4]
 800bcb4:	6863      	ldr	r3, [r4, #4]
 800bcb6:	4a45      	ldr	r2, [pc, #276]	; (800bdcc <tcp_input+0x2ac>)
 800bcb8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bcba:	4b3c      	ldr	r3, [pc, #240]	; (800bdac <tcp_input+0x28c>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	4a3a      	ldr	r2, [pc, #232]	; (800bdac <tcp_input+0x28c>)
 800bcc2:	6814      	ldr	r4, [r2, #0]
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7fc fdc2 	bl	800884e <lwip_htonl>
 800bcca:	4603      	mov	r3, r0
 800bccc:	60a3      	str	r3, [r4, #8]
 800bcce:	68a3      	ldr	r3, [r4, #8]
 800bcd0:	4a3f      	ldr	r2, [pc, #252]	; (800bdd0 <tcp_input+0x2b0>)
 800bcd2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bcd4:	4b35      	ldr	r3, [pc, #212]	; (800bdac <tcp_input+0x28c>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	89db      	ldrh	r3, [r3, #14]
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	4a33      	ldr	r2, [pc, #204]	; (800bdac <tcp_input+0x28c>)
 800bcde:	6814      	ldr	r4, [r2, #0]
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7fc fd9f 	bl	8008824 <lwip_htons>
 800bce6:	4603      	mov	r3, r0
 800bce8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800bcea:	4b30      	ldr	r3, [pc, #192]	; (800bdac <tcp_input+0x28c>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	899b      	ldrh	r3, [r3, #12]
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7fc fd96 	bl	8008824 <lwip_htons>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd00:	b2da      	uxtb	r2, r3
 800bd02:	4b34      	ldr	r3, [pc, #208]	; (800bdd4 <tcp_input+0x2b4>)
 800bd04:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	891a      	ldrh	r2, [r3, #8]
 800bd0a:	4b33      	ldr	r3, [pc, #204]	; (800bdd8 <tcp_input+0x2b8>)
 800bd0c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800bd0e:	4b31      	ldr	r3, [pc, #196]	; (800bdd4 <tcp_input+0x2b4>)
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	f003 0303 	and.w	r3, r3, #3
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d00c      	beq.n	800bd34 <tcp_input+0x214>
    tcplen++;
 800bd1a:	4b2f      	ldr	r3, [pc, #188]	; (800bdd8 <tcp_input+0x2b8>)
 800bd1c:	881b      	ldrh	r3, [r3, #0]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	4b2d      	ldr	r3, [pc, #180]	; (800bdd8 <tcp_input+0x2b8>)
 800bd24:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	891a      	ldrh	r2, [r3, #8]
 800bd2a:	4b2b      	ldr	r3, [pc, #172]	; (800bdd8 <tcp_input+0x2b8>)
 800bd2c:	881b      	ldrh	r3, [r3, #0]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	f200 82d9 	bhi.w	800c2e6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800bd34:	2300      	movs	r3, #0
 800bd36:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd38:	4b28      	ldr	r3, [pc, #160]	; (800bddc <tcp_input+0x2bc>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	61fb      	str	r3, [r7, #28]
 800bd3e:	e09d      	b.n	800be7c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	7d1b      	ldrb	r3, [r3, #20]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d105      	bne.n	800bd54 <tcp_input+0x234>
 800bd48:	4b15      	ldr	r3, [pc, #84]	; (800bda0 <tcp_input+0x280>)
 800bd4a:	22fb      	movs	r2, #251	; 0xfb
 800bd4c:	4924      	ldr	r1, [pc, #144]	; (800bde0 <tcp_input+0x2c0>)
 800bd4e:	4816      	ldr	r0, [pc, #88]	; (800bda8 <tcp_input+0x288>)
 800bd50:	f007 fb40 	bl	80133d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	7d1b      	ldrb	r3, [r3, #20]
 800bd58:	2b0a      	cmp	r3, #10
 800bd5a:	d105      	bne.n	800bd68 <tcp_input+0x248>
 800bd5c:	4b10      	ldr	r3, [pc, #64]	; (800bda0 <tcp_input+0x280>)
 800bd5e:	22fc      	movs	r2, #252	; 0xfc
 800bd60:	4920      	ldr	r1, [pc, #128]	; (800bde4 <tcp_input+0x2c4>)
 800bd62:	4811      	ldr	r0, [pc, #68]	; (800bda8 <tcp_input+0x288>)
 800bd64:	f007 fb36 	bl	80133d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	7d1b      	ldrb	r3, [r3, #20]
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d105      	bne.n	800bd7c <tcp_input+0x25c>
 800bd70:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <tcp_input+0x280>)
 800bd72:	22fd      	movs	r2, #253	; 0xfd
 800bd74:	491c      	ldr	r1, [pc, #112]	; (800bde8 <tcp_input+0x2c8>)
 800bd76:	480c      	ldr	r0, [pc, #48]	; (800bda8 <tcp_input+0x288>)
 800bd78:	f007 fb2c 	bl	80133d4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	7a1b      	ldrb	r3, [r3, #8]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d033      	beq.n	800bdec <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	7a1a      	ldrb	r2, [r3, #8]
 800bd88:	4b09      	ldr	r3, [pc, #36]	; (800bdb0 <tcp_input+0x290>)
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd90:	3301      	adds	r3, #1
 800bd92:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d029      	beq.n	800bdec <tcp_input+0x2cc>
      prev = pcb;
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	61bb      	str	r3, [r7, #24]
      continue;
 800bd9c:	e06b      	b.n	800be76 <tcp_input+0x356>
 800bd9e:	bf00      	nop
 800bda0:	08017d14 	.word	0x08017d14
 800bda4:	08017d48 	.word	0x08017d48
 800bda8:	08017d60 	.word	0x08017d60
 800bdac:	200002cc 	.word	0x200002cc
 800bdb0:	200039d4 	.word	0x200039d4
 800bdb4:	200002d0 	.word	0x200002d0
 800bdb8:	200002d4 	.word	0x200002d4
 800bdbc:	200002d2 	.word	0x200002d2
 800bdc0:	08017d88 	.word	0x08017d88
 800bdc4:	08017d98 	.word	0x08017d98
 800bdc8:	08017da4 	.word	0x08017da4
 800bdcc:	200002dc 	.word	0x200002dc
 800bdd0:	200002e0 	.word	0x200002e0
 800bdd4:	200002e8 	.word	0x200002e8
 800bdd8:	200002e6 	.word	0x200002e6
 800bddc:	200090d8 	.word	0x200090d8
 800bde0:	08017dc4 	.word	0x08017dc4
 800bde4:	08017dec 	.word	0x08017dec
 800bde8:	08017e18 	.word	0x08017e18
    }

    if (pcb->remote_port == tcphdr->src &&
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	8b1a      	ldrh	r2, [r3, #24]
 800bdf0:	4b94      	ldr	r3, [pc, #592]	; (800c044 <tcp_input+0x524>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d13a      	bne.n	800be72 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	8ada      	ldrh	r2, [r3, #22]
 800be00:	4b90      	ldr	r3, [pc, #576]	; (800c044 <tcp_input+0x524>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	885b      	ldrh	r3, [r3, #2]
 800be06:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800be08:	429a      	cmp	r2, r3
 800be0a:	d132      	bne.n	800be72 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	685a      	ldr	r2, [r3, #4]
 800be10:	4b8d      	ldr	r3, [pc, #564]	; (800c048 <tcp_input+0x528>)
 800be12:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800be14:	429a      	cmp	r2, r3
 800be16:	d12c      	bne.n	800be72 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	4b8a      	ldr	r3, [pc, #552]	; (800c048 <tcp_input+0x528>)
 800be1e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800be20:	429a      	cmp	r2, r3
 800be22:	d126      	bne.n	800be72 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	69fa      	ldr	r2, [r7, #28]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d106      	bne.n	800be3c <tcp_input+0x31c>
 800be2e:	4b87      	ldr	r3, [pc, #540]	; (800c04c <tcp_input+0x52c>)
 800be30:	f240 120d 	movw	r2, #269	; 0x10d
 800be34:	4986      	ldr	r1, [pc, #536]	; (800c050 <tcp_input+0x530>)
 800be36:	4887      	ldr	r0, [pc, #540]	; (800c054 <tcp_input+0x534>)
 800be38:	f007 facc 	bl	80133d4 <iprintf>
      if (prev != NULL) {
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00a      	beq.n	800be58 <tcp_input+0x338>
        prev->next = pcb->next;
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	68da      	ldr	r2, [r3, #12]
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800be4a:	4b83      	ldr	r3, [pc, #524]	; (800c058 <tcp_input+0x538>)
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800be52:	4a81      	ldr	r2, [pc, #516]	; (800c058 <tcp_input+0x538>)
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	69fa      	ldr	r2, [r7, #28]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d111      	bne.n	800be86 <tcp_input+0x366>
 800be62:	4b7a      	ldr	r3, [pc, #488]	; (800c04c <tcp_input+0x52c>)
 800be64:	f240 1215 	movw	r2, #277	; 0x115
 800be68:	497c      	ldr	r1, [pc, #496]	; (800c05c <tcp_input+0x53c>)
 800be6a:	487a      	ldr	r0, [pc, #488]	; (800c054 <tcp_input+0x534>)
 800be6c:	f007 fab2 	bl	80133d4 <iprintf>
      break;
 800be70:	e009      	b.n	800be86 <tcp_input+0x366>
    }
    prev = pcb;
 800be72:	69fb      	ldr	r3, [r7, #28]
 800be74:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	61fb      	str	r3, [r7, #28]
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f47f af5e 	bne.w	800bd40 <tcp_input+0x220>
 800be84:	e000      	b.n	800be88 <tcp_input+0x368>
      break;
 800be86:	bf00      	nop
  }

  if (pcb == NULL) {
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f040 8095 	bne.w	800bfba <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800be90:	4b73      	ldr	r3, [pc, #460]	; (800c060 <tcp_input+0x540>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	61fb      	str	r3, [r7, #28]
 800be96:	e03f      	b.n	800bf18 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	7d1b      	ldrb	r3, [r3, #20]
 800be9c:	2b0a      	cmp	r3, #10
 800be9e:	d006      	beq.n	800beae <tcp_input+0x38e>
 800bea0:	4b6a      	ldr	r3, [pc, #424]	; (800c04c <tcp_input+0x52c>)
 800bea2:	f240 121f 	movw	r2, #287	; 0x11f
 800bea6:	496f      	ldr	r1, [pc, #444]	; (800c064 <tcp_input+0x544>)
 800bea8:	486a      	ldr	r0, [pc, #424]	; (800c054 <tcp_input+0x534>)
 800beaa:	f007 fa93 	bl	80133d4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	7a1b      	ldrb	r3, [r3, #8]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d009      	beq.n	800beca <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	7a1a      	ldrb	r2, [r3, #8]
 800beba:	4b63      	ldr	r3, [pc, #396]	; (800c048 <tcp_input+0x528>)
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bec2:	3301      	adds	r3, #1
 800bec4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d122      	bne.n	800bf10 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	8b1a      	ldrh	r2, [r3, #24]
 800bece:	4b5d      	ldr	r3, [pc, #372]	; (800c044 <tcp_input+0x524>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	881b      	ldrh	r3, [r3, #0]
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d11b      	bne.n	800bf12 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	8ada      	ldrh	r2, [r3, #22]
 800bede:	4b59      	ldr	r3, [pc, #356]	; (800c044 <tcp_input+0x524>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	885b      	ldrh	r3, [r3, #2]
 800bee4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d113      	bne.n	800bf12 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	685a      	ldr	r2, [r3, #4]
 800beee:	4b56      	ldr	r3, [pc, #344]	; (800c048 <tcp_input+0x528>)
 800bef0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d10d      	bne.n	800bf12 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	4b53      	ldr	r3, [pc, #332]	; (800c048 <tcp_input+0x528>)
 800befc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800befe:	429a      	cmp	r2, r3
 800bf00:	d107      	bne.n	800bf12 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800bf02:	69f8      	ldr	r0, [r7, #28]
 800bf04:	f000 fb54 	bl	800c5b0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f7fd ff3f 	bl	8009d8c <pbuf_free>
        return;
 800bf0e:	e1f0      	b.n	800c2f2 <tcp_input+0x7d2>
        continue;
 800bf10:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	61fb      	str	r3, [r7, #28]
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1bc      	bne.n	800be98 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bf22:	4b51      	ldr	r3, [pc, #324]	; (800c068 <tcp_input+0x548>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	617b      	str	r3, [r7, #20]
 800bf28:	e02a      	b.n	800bf80 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	7a1b      	ldrb	r3, [r3, #8]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00c      	beq.n	800bf4c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	7a1a      	ldrb	r2, [r3, #8]
 800bf36:	4b44      	ldr	r3, [pc, #272]	; (800c048 <tcp_input+0x528>)
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf3e:	3301      	adds	r3, #1
 800bf40:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d002      	beq.n	800bf4c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	61bb      	str	r3, [r7, #24]
        continue;
 800bf4a:	e016      	b.n	800bf7a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	8ada      	ldrh	r2, [r3, #22]
 800bf50:	4b3c      	ldr	r3, [pc, #240]	; (800c044 <tcp_input+0x524>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	885b      	ldrh	r3, [r3, #2]
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d10c      	bne.n	800bf76 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	4b39      	ldr	r3, [pc, #228]	; (800c048 <tcp_input+0x528>)
 800bf62:	695b      	ldr	r3, [r3, #20]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d00f      	beq.n	800bf88 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00d      	beq.n	800bf8a <tcp_input+0x46a>
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d009      	beq.n	800bf8a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	617b      	str	r3, [r7, #20]
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d1d1      	bne.n	800bf2a <tcp_input+0x40a>
 800bf86:	e000      	b.n	800bf8a <tcp_input+0x46a>
            break;
 800bf88:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d014      	beq.n	800bfba <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00a      	beq.n	800bfac <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	68da      	ldr	r2, [r3, #12]
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bf9e:	4b32      	ldr	r3, [pc, #200]	; (800c068 <tcp_input+0x548>)
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bfa6:	4a30      	ldr	r2, [pc, #192]	; (800c068 <tcp_input+0x548>)
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bfac:	6978      	ldr	r0, [r7, #20]
 800bfae:	f000 fa01 	bl	800c3b4 <tcp_listen_input>
      }
      pbuf_free(p);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7fd feea 	bl	8009d8c <pbuf_free>
      return;
 800bfb8:	e19b      	b.n	800c2f2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f000 8160 	beq.w	800c282 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bfc2:	4b2a      	ldr	r3, [pc, #168]	; (800c06c <tcp_input+0x54c>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	891a      	ldrh	r2, [r3, #8]
 800bfcc:	4b27      	ldr	r3, [pc, #156]	; (800c06c <tcp_input+0x54c>)
 800bfce:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bfd0:	4a26      	ldr	r2, [pc, #152]	; (800c06c <tcp_input+0x54c>)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bfd6:	4b1b      	ldr	r3, [pc, #108]	; (800c044 <tcp_input+0x524>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a24      	ldr	r2, [pc, #144]	; (800c06c <tcp_input+0x54c>)
 800bfdc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bfde:	4b24      	ldr	r3, [pc, #144]	; (800c070 <tcp_input+0x550>)
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bfe4:	4b23      	ldr	r3, [pc, #140]	; (800c074 <tcp_input+0x554>)
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bfea:	4b23      	ldr	r3, [pc, #140]	; (800c078 <tcp_input+0x558>)
 800bfec:	2200      	movs	r2, #0
 800bfee:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bff0:	4b22      	ldr	r3, [pc, #136]	; (800c07c <tcp_input+0x55c>)
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	f003 0308 	and.w	r3, r3, #8
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d006      	beq.n	800c00a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	7b5b      	ldrb	r3, [r3, #13]
 800c000:	f043 0301 	orr.w	r3, r3, #1
 800c004:	b2da      	uxtb	r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d038      	beq.n	800c084 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c012:	69f8      	ldr	r0, [r7, #28]
 800c014:	f7ff f93e 	bl	800b294 <tcp_process_refused_data>
 800c018:	4603      	mov	r3, r0
 800c01a:	f113 0f0d 	cmn.w	r3, #13
 800c01e:	d007      	beq.n	800c030 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c024:	2b00      	cmp	r3, #0
 800c026:	d02d      	beq.n	800c084 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c028:	4b15      	ldr	r3, [pc, #84]	; (800c080 <tcp_input+0x560>)
 800c02a:	881b      	ldrh	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d029      	beq.n	800c084 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c034:	2b00      	cmp	r3, #0
 800c036:	f040 8104 	bne.w	800c242 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c03a:	69f8      	ldr	r0, [r7, #28]
 800c03c:	f003 f9be 	bl	800f3bc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c040:	e0ff      	b.n	800c242 <tcp_input+0x722>
 800c042:	bf00      	nop
 800c044:	200002cc 	.word	0x200002cc
 800c048:	200039d4 	.word	0x200039d4
 800c04c:	08017d14 	.word	0x08017d14
 800c050:	08017e40 	.word	0x08017e40
 800c054:	08017d60 	.word	0x08017d60
 800c058:	200090d8 	.word	0x200090d8
 800c05c:	08017e6c 	.word	0x08017e6c
 800c060:	200090e8 	.word	0x200090e8
 800c064:	08017e98 	.word	0x08017e98
 800c068:	200090e0 	.word	0x200090e0
 800c06c:	200002bc 	.word	0x200002bc
 800c070:	200002ec 	.word	0x200002ec
 800c074:	200002e9 	.word	0x200002e9
 800c078:	200002e4 	.word	0x200002e4
 800c07c:	200002e8 	.word	0x200002e8
 800c080:	200002e6 	.word	0x200002e6
      }
    }
    tcp_input_pcb = pcb;
 800c084:	4a9c      	ldr	r2, [pc, #624]	; (800c2f8 <tcp_input+0x7d8>)
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c08a:	69f8      	ldr	r0, [r7, #28]
 800c08c:	f000 fb0a 	bl	800c6a4 <tcp_process>
 800c090:	4603      	mov	r3, r0
 800c092:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c094:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c098:	f113 0f0d 	cmn.w	r3, #13
 800c09c:	f000 80d3 	beq.w	800c246 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800c0a0:	4b96      	ldr	r3, [pc, #600]	; (800c2fc <tcp_input+0x7dc>)
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	f003 0308 	and.w	r3, r3, #8
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d015      	beq.n	800c0d8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d008      	beq.n	800c0c8 <tcp_input+0x5a8>
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0bc:	69fa      	ldr	r2, [r7, #28]
 800c0be:	6912      	ldr	r2, [r2, #16]
 800c0c0:	f06f 010d 	mvn.w	r1, #13
 800c0c4:	4610      	mov	r0, r2
 800c0c6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c0c8:	69f9      	ldr	r1, [r7, #28]
 800c0ca:	488d      	ldr	r0, [pc, #564]	; (800c300 <tcp_input+0x7e0>)
 800c0cc:	f7ff fbb0 	bl	800b830 <tcp_pcb_remove>
        tcp_free(pcb);
 800c0d0:	69f8      	ldr	r0, [r7, #28]
 800c0d2:	f7fe f99d 	bl	800a410 <tcp_free>
 800c0d6:	e0c1      	b.n	800c25c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c0dc:	4b89      	ldr	r3, [pc, #548]	; (800c304 <tcp_input+0x7e4>)
 800c0de:	881b      	ldrh	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d01d      	beq.n	800c120 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c0e4:	4b87      	ldr	r3, [pc, #540]	; (800c304 <tcp_input+0x7e4>)
 800c0e6:	881b      	ldrh	r3, [r3, #0]
 800c0e8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d00a      	beq.n	800c10a <tcp_input+0x5ea>
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0fa:	69fa      	ldr	r2, [r7, #28]
 800c0fc:	6910      	ldr	r0, [r2, #16]
 800c0fe:	89fa      	ldrh	r2, [r7, #14]
 800c100:	69f9      	ldr	r1, [r7, #28]
 800c102:	4798      	blx	r3
 800c104:	4603      	mov	r3, r0
 800c106:	74fb      	strb	r3, [r7, #19]
 800c108:	e001      	b.n	800c10e <tcp_input+0x5ee>
 800c10a:	2300      	movs	r3, #0
 800c10c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c10e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c112:	f113 0f0d 	cmn.w	r3, #13
 800c116:	f000 8098 	beq.w	800c24a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c11a:	4b7a      	ldr	r3, [pc, #488]	; (800c304 <tcp_input+0x7e4>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c120:	69f8      	ldr	r0, [r7, #28]
 800c122:	f000 f907 	bl	800c334 <tcp_input_delayed_close>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f040 8090 	bne.w	800c24e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c12e:	4b76      	ldr	r3, [pc, #472]	; (800c308 <tcp_input+0x7e8>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d041      	beq.n	800c1ba <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d006      	beq.n	800c14c <tcp_input+0x62c>
 800c13e:	4b73      	ldr	r3, [pc, #460]	; (800c30c <tcp_input+0x7ec>)
 800c140:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c144:	4972      	ldr	r1, [pc, #456]	; (800c310 <tcp_input+0x7f0>)
 800c146:	4873      	ldr	r0, [pc, #460]	; (800c314 <tcp_input+0x7f4>)
 800c148:	f007 f944 	bl	80133d4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	8b5b      	ldrh	r3, [r3, #26]
 800c150:	f003 0310 	and.w	r3, r3, #16
 800c154:	2b00      	cmp	r3, #0
 800c156:	d008      	beq.n	800c16a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c158:	4b6b      	ldr	r3, [pc, #428]	; (800c308 <tcp_input+0x7e8>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7fd fe15 	bl	8009d8c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c162:	69f8      	ldr	r0, [r7, #28]
 800c164:	f7fe fc3c 	bl	800a9e0 <tcp_abort>
            goto aborted;
 800c168:	e078      	b.n	800c25c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00c      	beq.n	800c18e <tcp_input+0x66e>
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	6918      	ldr	r0, [r3, #16]
 800c17e:	4b62      	ldr	r3, [pc, #392]	; (800c308 <tcp_input+0x7e8>)
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	2300      	movs	r3, #0
 800c184:	69f9      	ldr	r1, [r7, #28]
 800c186:	47a0      	blx	r4
 800c188:	4603      	mov	r3, r0
 800c18a:	74fb      	strb	r3, [r7, #19]
 800c18c:	e008      	b.n	800c1a0 <tcp_input+0x680>
 800c18e:	4b5e      	ldr	r3, [pc, #376]	; (800c308 <tcp_input+0x7e8>)
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	2300      	movs	r3, #0
 800c194:	69f9      	ldr	r1, [r7, #28]
 800c196:	2000      	movs	r0, #0
 800c198:	f7ff f952 	bl	800b440 <tcp_recv_null>
 800c19c:	4603      	mov	r3, r0
 800c19e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c1a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c1a4:	f113 0f0d 	cmn.w	r3, #13
 800c1a8:	d053      	beq.n	800c252 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c1aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d003      	beq.n	800c1ba <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c1b2:	4b55      	ldr	r3, [pc, #340]	; (800c308 <tcp_input+0x7e8>)
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c1ba:	4b50      	ldr	r3, [pc, #320]	; (800c2fc <tcp_input+0x7dc>)
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	f003 0320 	and.w	r3, r3, #32
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d030      	beq.n	800c228 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d009      	beq.n	800c1e2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1d2:	7b5a      	ldrb	r2, [r3, #13]
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1d8:	f042 0220 	orr.w	r2, r2, #32
 800c1dc:	b2d2      	uxtb	r2, r2
 800c1de:	735a      	strb	r2, [r3, #13]
 800c1e0:	e022      	b.n	800c228 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c1ea:	d005      	beq.n	800c1f8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00b      	beq.n	800c21a <tcp_input+0x6fa>
 800c202:	69fb      	ldr	r3, [r7, #28]
 800c204:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c208:	69fb      	ldr	r3, [r7, #28]
 800c20a:	6918      	ldr	r0, [r3, #16]
 800c20c:	2300      	movs	r3, #0
 800c20e:	2200      	movs	r2, #0
 800c210:	69f9      	ldr	r1, [r7, #28]
 800c212:	47a0      	blx	r4
 800c214:	4603      	mov	r3, r0
 800c216:	74fb      	strb	r3, [r7, #19]
 800c218:	e001      	b.n	800c21e <tcp_input+0x6fe>
 800c21a:	2300      	movs	r3, #0
 800c21c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c21e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c222:	f113 0f0d 	cmn.w	r3, #13
 800c226:	d016      	beq.n	800c256 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c228:	4b33      	ldr	r3, [pc, #204]	; (800c2f8 <tcp_input+0x7d8>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c22e:	69f8      	ldr	r0, [r7, #28]
 800c230:	f000 f880 	bl	800c334 <tcp_input_delayed_close>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10f      	bne.n	800c25a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c23a:	69f8      	ldr	r0, [r7, #28]
 800c23c:	f002 fab8 	bl	800e7b0 <tcp_output>
 800c240:	e00c      	b.n	800c25c <tcp_input+0x73c>
        goto aborted;
 800c242:	bf00      	nop
 800c244:	e00a      	b.n	800c25c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c246:	bf00      	nop
 800c248:	e008      	b.n	800c25c <tcp_input+0x73c>
              goto aborted;
 800c24a:	bf00      	nop
 800c24c:	e006      	b.n	800c25c <tcp_input+0x73c>
          goto aborted;
 800c24e:	bf00      	nop
 800c250:	e004      	b.n	800c25c <tcp_input+0x73c>
            goto aborted;
 800c252:	bf00      	nop
 800c254:	e002      	b.n	800c25c <tcp_input+0x73c>
              goto aborted;
 800c256:	bf00      	nop
 800c258:	e000      	b.n	800c25c <tcp_input+0x73c>
          goto aborted;
 800c25a:	bf00      	nop
    tcp_input_pcb = NULL;
 800c25c:	4b26      	ldr	r3, [pc, #152]	; (800c2f8 <tcp_input+0x7d8>)
 800c25e:	2200      	movs	r2, #0
 800c260:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c262:	4b29      	ldr	r3, [pc, #164]	; (800c308 <tcp_input+0x7e8>)
 800c264:	2200      	movs	r2, #0
 800c266:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c268:	4b2b      	ldr	r3, [pc, #172]	; (800c318 <tcp_input+0x7f8>)
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d03f      	beq.n	800c2f0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800c270:	4b29      	ldr	r3, [pc, #164]	; (800c318 <tcp_input+0x7f8>)
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	4618      	mov	r0, r3
 800c276:	f7fd fd89 	bl	8009d8c <pbuf_free>
      inseg.p = NULL;
 800c27a:	4b27      	ldr	r3, [pc, #156]	; (800c318 <tcp_input+0x7f8>)
 800c27c:	2200      	movs	r2, #0
 800c27e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c280:	e036      	b.n	800c2f0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c282:	4b26      	ldr	r3, [pc, #152]	; (800c31c <tcp_input+0x7fc>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	899b      	ldrh	r3, [r3, #12]
 800c288:	b29b      	uxth	r3, r3
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fc faca 	bl	8008824 <lwip_htons>
 800c290:	4603      	mov	r3, r0
 800c292:	b2db      	uxtb	r3, r3
 800c294:	f003 0304 	and.w	r3, r3, #4
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d118      	bne.n	800c2ce <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c29c:	4b20      	ldr	r3, [pc, #128]	; (800c320 <tcp_input+0x800>)
 800c29e:	6819      	ldr	r1, [r3, #0]
 800c2a0:	4b20      	ldr	r3, [pc, #128]	; (800c324 <tcp_input+0x804>)
 800c2a2:	881b      	ldrh	r3, [r3, #0]
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	4b20      	ldr	r3, [pc, #128]	; (800c328 <tcp_input+0x808>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2ac:	4b1b      	ldr	r3, [pc, #108]	; (800c31c <tcp_input+0x7fc>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2b0:	885b      	ldrh	r3, [r3, #2]
 800c2b2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2b4:	4a19      	ldr	r2, [pc, #100]	; (800c31c <tcp_input+0x7fc>)
 800c2b6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2b8:	8812      	ldrh	r2, [r2, #0]
 800c2ba:	b292      	uxth	r2, r2
 800c2bc:	9202      	str	r2, [sp, #8]
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	4b1a      	ldr	r3, [pc, #104]	; (800c32c <tcp_input+0x80c>)
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	4b1a      	ldr	r3, [pc, #104]	; (800c330 <tcp_input+0x810>)
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	2000      	movs	r0, #0
 800c2ca:	f003 f825 	bl	800f318 <tcp_rst>
    pbuf_free(p);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7fd fd5c 	bl	8009d8c <pbuf_free>
  return;
 800c2d4:	e00c      	b.n	800c2f0 <tcp_input+0x7d0>
    goto dropped;
 800c2d6:	bf00      	nop
 800c2d8:	e006      	b.n	800c2e8 <tcp_input+0x7c8>
    goto dropped;
 800c2da:	bf00      	nop
 800c2dc:	e004      	b.n	800c2e8 <tcp_input+0x7c8>
    goto dropped;
 800c2de:	bf00      	nop
 800c2e0:	e002      	b.n	800c2e8 <tcp_input+0x7c8>
      goto dropped;
 800c2e2:	bf00      	nop
 800c2e4:	e000      	b.n	800c2e8 <tcp_input+0x7c8>
      goto dropped;
 800c2e6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f7fd fd4f 	bl	8009d8c <pbuf_free>
 800c2ee:	e000      	b.n	800c2f2 <tcp_input+0x7d2>
  return;
 800c2f0:	bf00      	nop
}
 800c2f2:	3724      	adds	r7, #36	; 0x24
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd90      	pop	{r4, r7, pc}
 800c2f8:	200090ec 	.word	0x200090ec
 800c2fc:	200002e9 	.word	0x200002e9
 800c300:	200090d8 	.word	0x200090d8
 800c304:	200002e4 	.word	0x200002e4
 800c308:	200002ec 	.word	0x200002ec
 800c30c:	08017d14 	.word	0x08017d14
 800c310:	08017ec8 	.word	0x08017ec8
 800c314:	08017d60 	.word	0x08017d60
 800c318:	200002bc 	.word	0x200002bc
 800c31c:	200002cc 	.word	0x200002cc
 800c320:	200002e0 	.word	0x200002e0
 800c324:	200002e6 	.word	0x200002e6
 800c328:	200002dc 	.word	0x200002dc
 800c32c:	200039e4 	.word	0x200039e4
 800c330:	200039e8 	.word	0x200039e8

0800c334 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d106      	bne.n	800c350 <tcp_input_delayed_close+0x1c>
 800c342:	4b17      	ldr	r3, [pc, #92]	; (800c3a0 <tcp_input_delayed_close+0x6c>)
 800c344:	f240 225a 	movw	r2, #602	; 0x25a
 800c348:	4916      	ldr	r1, [pc, #88]	; (800c3a4 <tcp_input_delayed_close+0x70>)
 800c34a:	4817      	ldr	r0, [pc, #92]	; (800c3a8 <tcp_input_delayed_close+0x74>)
 800c34c:	f007 f842 	bl	80133d4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c350:	4b16      	ldr	r3, [pc, #88]	; (800c3ac <tcp_input_delayed_close+0x78>)
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	f003 0310 	and.w	r3, r3, #16
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d01c      	beq.n	800c396 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	8b5b      	ldrh	r3, [r3, #26]
 800c360:	f003 0310 	and.w	r3, r3, #16
 800c364:	2b00      	cmp	r3, #0
 800c366:	d10d      	bne.n	800c384 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d008      	beq.n	800c384 <tcp_input_delayed_close+0x50>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	6912      	ldr	r2, [r2, #16]
 800c37c:	f06f 010e 	mvn.w	r1, #14
 800c380:	4610      	mov	r0, r2
 800c382:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c384:	6879      	ldr	r1, [r7, #4]
 800c386:	480a      	ldr	r0, [pc, #40]	; (800c3b0 <tcp_input_delayed_close+0x7c>)
 800c388:	f7ff fa52 	bl	800b830 <tcp_pcb_remove>
    tcp_free(pcb);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7fe f83f 	bl	800a410 <tcp_free>
    return 1;
 800c392:	2301      	movs	r3, #1
 800c394:	e000      	b.n	800c398 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c396:	2300      	movs	r3, #0
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3708      	adds	r7, #8
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	08017d14 	.word	0x08017d14
 800c3a4:	08017ee4 	.word	0x08017ee4
 800c3a8:	08017d60 	.word	0x08017d60
 800c3ac:	200002e9 	.word	0x200002e9
 800c3b0:	200090d8 	.word	0x200090d8

0800c3b4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c3b4:	b590      	push	{r4, r7, lr}
 800c3b6:	b08b      	sub	sp, #44	; 0x2c
 800c3b8:	af04      	add	r7, sp, #16
 800c3ba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c3bc:	4b6f      	ldr	r3, [pc, #444]	; (800c57c <tcp_listen_input+0x1c8>)
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	f003 0304 	and.w	r3, r3, #4
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f040 80d2 	bne.w	800c56e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d106      	bne.n	800c3de <tcp_listen_input+0x2a>
 800c3d0:	4b6b      	ldr	r3, [pc, #428]	; (800c580 <tcp_listen_input+0x1cc>)
 800c3d2:	f240 2281 	movw	r2, #641	; 0x281
 800c3d6:	496b      	ldr	r1, [pc, #428]	; (800c584 <tcp_listen_input+0x1d0>)
 800c3d8:	486b      	ldr	r0, [pc, #428]	; (800c588 <tcp_listen_input+0x1d4>)
 800c3da:	f006 fffb 	bl	80133d4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c3de:	4b67      	ldr	r3, [pc, #412]	; (800c57c <tcp_listen_input+0x1c8>)
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	f003 0310 	and.w	r3, r3, #16
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d019      	beq.n	800c41e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3ea:	4b68      	ldr	r3, [pc, #416]	; (800c58c <tcp_listen_input+0x1d8>)
 800c3ec:	6819      	ldr	r1, [r3, #0]
 800c3ee:	4b68      	ldr	r3, [pc, #416]	; (800c590 <tcp_listen_input+0x1dc>)
 800c3f0:	881b      	ldrh	r3, [r3, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	4b67      	ldr	r3, [pc, #412]	; (800c594 <tcp_listen_input+0x1e0>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3fa:	4b67      	ldr	r3, [pc, #412]	; (800c598 <tcp_listen_input+0x1e4>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3fe:	885b      	ldrh	r3, [r3, #2]
 800c400:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c402:	4a65      	ldr	r2, [pc, #404]	; (800c598 <tcp_listen_input+0x1e4>)
 800c404:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c406:	8812      	ldrh	r2, [r2, #0]
 800c408:	b292      	uxth	r2, r2
 800c40a:	9202      	str	r2, [sp, #8]
 800c40c:	9301      	str	r3, [sp, #4]
 800c40e:	4b63      	ldr	r3, [pc, #396]	; (800c59c <tcp_listen_input+0x1e8>)
 800c410:	9300      	str	r3, [sp, #0]
 800c412:	4b63      	ldr	r3, [pc, #396]	; (800c5a0 <tcp_listen_input+0x1ec>)
 800c414:	4602      	mov	r2, r0
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f002 ff7e 	bl	800f318 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c41c:	e0a9      	b.n	800c572 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c41e:	4b57      	ldr	r3, [pc, #348]	; (800c57c <tcp_listen_input+0x1c8>)
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	f003 0302 	and.w	r3, r3, #2
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 80a3 	beq.w	800c572 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	7d5b      	ldrb	r3, [r3, #21]
 800c430:	4618      	mov	r0, r3
 800c432:	f7ff f929 	bl	800b688 <tcp_alloc>
 800c436:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d111      	bne.n	800c462 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	699b      	ldr	r3, [r3, #24]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00a      	beq.n	800c45c <tcp_listen_input+0xa8>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	699b      	ldr	r3, [r3, #24]
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	6910      	ldr	r0, [r2, #16]
 800c44e:	f04f 32ff 	mov.w	r2, #4294967295
 800c452:	2100      	movs	r1, #0
 800c454:	4798      	blx	r3
 800c456:	4603      	mov	r3, r0
 800c458:	73bb      	strb	r3, [r7, #14]
      return;
 800c45a:	e08b      	b.n	800c574 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c45c:	23f0      	movs	r3, #240	; 0xf0
 800c45e:	73bb      	strb	r3, [r7, #14]
      return;
 800c460:	e088      	b.n	800c574 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c462:	4b50      	ldr	r3, [pc, #320]	; (800c5a4 <tcp_listen_input+0x1f0>)
 800c464:	695a      	ldr	r2, [r3, #20]
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c46a:	4b4e      	ldr	r3, [pc, #312]	; (800c5a4 <tcp_listen_input+0x1f0>)
 800c46c:	691a      	ldr	r2, [r3, #16]
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	8ada      	ldrh	r2, [r3, #22]
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c47a:	4b47      	ldr	r3, [pc, #284]	; (800c598 <tcp_listen_input+0x1e4>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	881b      	ldrh	r3, [r3, #0]
 800c480:	b29a      	uxth	r2, r3
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	2203      	movs	r2, #3
 800c48a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c48c:	4b41      	ldr	r3, [pc, #260]	; (800c594 <tcp_listen_input+0x1e0>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	1c5a      	adds	r2, r3, #1
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c49e:	6978      	ldr	r0, [r7, #20]
 800c4a0:	f7ff fa5a 	bl	800b958 <tcp_next_iss>
 800c4a4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	693a      	ldr	r2, [r7, #16]
 800c4aa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	693a      	ldr	r2, [r7, #16]
 800c4b0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	693a      	ldr	r2, [r7, #16]
 800c4b6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	693a      	ldr	r2, [r7, #16]
 800c4bc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c4be:	4b35      	ldr	r3, [pc, #212]	; (800c594 <tcp_listen_input+0x1e0>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	1e5a      	subs	r2, r3, #1
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	691a      	ldr	r2, [r3, #16]
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	7a5b      	ldrb	r3, [r3, #9]
 800c4da:	f003 030c 	and.w	r3, r3, #12
 800c4de:	b2da      	uxtb	r2, r3
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	7a1a      	ldrb	r2, [r3, #8]
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c4ec:	4b2e      	ldr	r3, [pc, #184]	; (800c5a8 <tcp_listen_input+0x1f4>)
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	60da      	str	r2, [r3, #12]
 800c4f4:	4a2c      	ldr	r2, [pc, #176]	; (800c5a8 <tcp_listen_input+0x1f4>)
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	6013      	str	r3, [r2, #0]
 800c4fa:	f003 f8cf 	bl	800f69c <tcp_timer_needed>
 800c4fe:	4b2b      	ldr	r3, [pc, #172]	; (800c5ac <tcp_listen_input+0x1f8>)
 800c500:	2201      	movs	r2, #1
 800c502:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c504:	6978      	ldr	r0, [r7, #20]
 800c506:	f001 fd8d 	bl	800e024 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c50a:	4b23      	ldr	r3, [pc, #140]	; (800c598 <tcp_listen_input+0x1e4>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	89db      	ldrh	r3, [r3, #14]
 800c510:	b29a      	uxth	r2, r3
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	3304      	adds	r3, #4
 800c52c:	4618      	mov	r0, r3
 800c52e:	f004 ffe1 	bl	80114f4 <ip4_route>
 800c532:	4601      	mov	r1, r0
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	3304      	adds	r3, #4
 800c538:	461a      	mov	r2, r3
 800c53a:	4620      	mov	r0, r4
 800c53c:	f7ff fa32 	bl	800b9a4 <tcp_eff_send_mss_netif>
 800c540:	4603      	mov	r3, r0
 800c542:	461a      	mov	r2, r3
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c548:	2112      	movs	r1, #18
 800c54a:	6978      	ldr	r0, [r7, #20]
 800c54c:	f002 f842 	bl	800e5d4 <tcp_enqueue_flags>
 800c550:	4603      	mov	r3, r0
 800c552:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d004      	beq.n	800c566 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c55c:	2100      	movs	r1, #0
 800c55e:	6978      	ldr	r0, [r7, #20]
 800c560:	f7fe f980 	bl	800a864 <tcp_abandon>
      return;
 800c564:	e006      	b.n	800c574 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c566:	6978      	ldr	r0, [r7, #20]
 800c568:	f002 f922 	bl	800e7b0 <tcp_output>
  return;
 800c56c:	e001      	b.n	800c572 <tcp_listen_input+0x1be>
    return;
 800c56e:	bf00      	nop
 800c570:	e000      	b.n	800c574 <tcp_listen_input+0x1c0>
  return;
 800c572:	bf00      	nop
}
 800c574:	371c      	adds	r7, #28
 800c576:	46bd      	mov	sp, r7
 800c578:	bd90      	pop	{r4, r7, pc}
 800c57a:	bf00      	nop
 800c57c:	200002e8 	.word	0x200002e8
 800c580:	08017d14 	.word	0x08017d14
 800c584:	08017f0c 	.word	0x08017f0c
 800c588:	08017d60 	.word	0x08017d60
 800c58c:	200002e0 	.word	0x200002e0
 800c590:	200002e6 	.word	0x200002e6
 800c594:	200002dc 	.word	0x200002dc
 800c598:	200002cc 	.word	0x200002cc
 800c59c:	200039e4 	.word	0x200039e4
 800c5a0:	200039e8 	.word	0x200039e8
 800c5a4:	200039d4 	.word	0x200039d4
 800c5a8:	200090d8 	.word	0x200090d8
 800c5ac:	200090d4 	.word	0x200090d4

0800c5b0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af04      	add	r7, sp, #16
 800c5b6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c5b8:	4b2f      	ldr	r3, [pc, #188]	; (800c678 <tcp_timewait_input+0xc8>)
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	f003 0304 	and.w	r3, r3, #4
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d153      	bne.n	800c66c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d106      	bne.n	800c5d8 <tcp_timewait_input+0x28>
 800c5ca:	4b2c      	ldr	r3, [pc, #176]	; (800c67c <tcp_timewait_input+0xcc>)
 800c5cc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c5d0:	492b      	ldr	r1, [pc, #172]	; (800c680 <tcp_timewait_input+0xd0>)
 800c5d2:	482c      	ldr	r0, [pc, #176]	; (800c684 <tcp_timewait_input+0xd4>)
 800c5d4:	f006 fefe 	bl	80133d4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c5d8:	4b27      	ldr	r3, [pc, #156]	; (800c678 <tcp_timewait_input+0xc8>)
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	f003 0302 	and.w	r3, r3, #2
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d02a      	beq.n	800c63a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c5e4:	4b28      	ldr	r3, [pc, #160]	; (800c688 <tcp_timewait_input+0xd8>)
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	db2d      	blt.n	800c64e <tcp_timewait_input+0x9e>
 800c5f2:	4b25      	ldr	r3, [pc, #148]	; (800c688 <tcp_timewait_input+0xd8>)
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fa:	6879      	ldr	r1, [r7, #4]
 800c5fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c5fe:	440b      	add	r3, r1
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	dc23      	bgt.n	800c64e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c606:	4b21      	ldr	r3, [pc, #132]	; (800c68c <tcp_timewait_input+0xdc>)
 800c608:	6819      	ldr	r1, [r3, #0]
 800c60a:	4b21      	ldr	r3, [pc, #132]	; (800c690 <tcp_timewait_input+0xe0>)
 800c60c:	881b      	ldrh	r3, [r3, #0]
 800c60e:	461a      	mov	r2, r3
 800c610:	4b1d      	ldr	r3, [pc, #116]	; (800c688 <tcp_timewait_input+0xd8>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c616:	4b1f      	ldr	r3, [pc, #124]	; (800c694 <tcp_timewait_input+0xe4>)
 800c618:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c61a:	885b      	ldrh	r3, [r3, #2]
 800c61c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c61e:	4a1d      	ldr	r2, [pc, #116]	; (800c694 <tcp_timewait_input+0xe4>)
 800c620:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c622:	8812      	ldrh	r2, [r2, #0]
 800c624:	b292      	uxth	r2, r2
 800c626:	9202      	str	r2, [sp, #8]
 800c628:	9301      	str	r3, [sp, #4]
 800c62a:	4b1b      	ldr	r3, [pc, #108]	; (800c698 <tcp_timewait_input+0xe8>)
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	4b1b      	ldr	r3, [pc, #108]	; (800c69c <tcp_timewait_input+0xec>)
 800c630:	4602      	mov	r2, r0
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f002 fe70 	bl	800f318 <tcp_rst>
      return;
 800c638:	e01b      	b.n	800c672 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c63a:	4b0f      	ldr	r3, [pc, #60]	; (800c678 <tcp_timewait_input+0xc8>)
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	f003 0301 	and.w	r3, r3, #1
 800c642:	2b00      	cmp	r3, #0
 800c644:	d003      	beq.n	800c64e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c646:	4b16      	ldr	r3, [pc, #88]	; (800c6a0 <tcp_timewait_input+0xf0>)
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c64e:	4b10      	ldr	r3, [pc, #64]	; (800c690 <tcp_timewait_input+0xe0>)
 800c650:	881b      	ldrh	r3, [r3, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d00c      	beq.n	800c670 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	8b5b      	ldrh	r3, [r3, #26]
 800c65a:	f043 0302 	orr.w	r3, r3, #2
 800c65e:	b29a      	uxth	r2, r3
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f002 f8a3 	bl	800e7b0 <tcp_output>
  }
  return;
 800c66a:	e001      	b.n	800c670 <tcp_timewait_input+0xc0>
    return;
 800c66c:	bf00      	nop
 800c66e:	e000      	b.n	800c672 <tcp_timewait_input+0xc2>
  return;
 800c670:	bf00      	nop
}
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	200002e8 	.word	0x200002e8
 800c67c:	08017d14 	.word	0x08017d14
 800c680:	08017f2c 	.word	0x08017f2c
 800c684:	08017d60 	.word	0x08017d60
 800c688:	200002dc 	.word	0x200002dc
 800c68c:	200002e0 	.word	0x200002e0
 800c690:	200002e6 	.word	0x200002e6
 800c694:	200002cc 	.word	0x200002cc
 800c698:	200039e4 	.word	0x200039e4
 800c69c:	200039e8 	.word	0x200039e8
 800c6a0:	200090dc 	.word	0x200090dc

0800c6a4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c6a4:	b590      	push	{r4, r7, lr}
 800c6a6:	b08d      	sub	sp, #52	; 0x34
 800c6a8:	af04      	add	r7, sp, #16
 800c6aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d106      	bne.n	800c6c8 <tcp_process+0x24>
 800c6ba:	4ba5      	ldr	r3, [pc, #660]	; (800c950 <tcp_process+0x2ac>)
 800c6bc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c6c0:	49a4      	ldr	r1, [pc, #656]	; (800c954 <tcp_process+0x2b0>)
 800c6c2:	48a5      	ldr	r0, [pc, #660]	; (800c958 <tcp_process+0x2b4>)
 800c6c4:	f006 fe86 	bl	80133d4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c6c8:	4ba4      	ldr	r3, [pc, #656]	; (800c95c <tcp_process+0x2b8>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	f003 0304 	and.w	r3, r3, #4
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d04e      	beq.n	800c772 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	7d1b      	ldrb	r3, [r3, #20]
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d108      	bne.n	800c6ee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c6e0:	4b9f      	ldr	r3, [pc, #636]	; (800c960 <tcp_process+0x2bc>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d123      	bne.n	800c730 <tcp_process+0x8c>
        acceptable = 1;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	76fb      	strb	r3, [r7, #27]
 800c6ec:	e020      	b.n	800c730 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6f2:	4b9c      	ldr	r3, [pc, #624]	; (800c964 <tcp_process+0x2c0>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d102      	bne.n	800c700 <tcp_process+0x5c>
        acceptable = 1;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	76fb      	strb	r3, [r7, #27]
 800c6fe:	e017      	b.n	800c730 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c700:	4b98      	ldr	r3, [pc, #608]	; (800c964 <tcp_process+0x2c0>)
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c708:	1ad3      	subs	r3, r2, r3
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	db10      	blt.n	800c730 <tcp_process+0x8c>
 800c70e:	4b95      	ldr	r3, [pc, #596]	; (800c964 <tcp_process+0x2c0>)
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c716:	6879      	ldr	r1, [r7, #4]
 800c718:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c71a:	440b      	add	r3, r1
 800c71c:	1ad3      	subs	r3, r2, r3
 800c71e:	2b00      	cmp	r3, #0
 800c720:	dc06      	bgt.n	800c730 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	8b5b      	ldrh	r3, [r3, #26]
 800c726:	f043 0302 	orr.w	r3, r3, #2
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c730:	7efb      	ldrb	r3, [r7, #27]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d01b      	beq.n	800c76e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	7d1b      	ldrb	r3, [r3, #20]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d106      	bne.n	800c74c <tcp_process+0xa8>
 800c73e:	4b84      	ldr	r3, [pc, #528]	; (800c950 <tcp_process+0x2ac>)
 800c740:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c744:	4988      	ldr	r1, [pc, #544]	; (800c968 <tcp_process+0x2c4>)
 800c746:	4884      	ldr	r0, [pc, #528]	; (800c958 <tcp_process+0x2b4>)
 800c748:	f006 fe44 	bl	80133d4 <iprintf>
      recv_flags |= TF_RESET;
 800c74c:	4b87      	ldr	r3, [pc, #540]	; (800c96c <tcp_process+0x2c8>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	f043 0308 	orr.w	r3, r3, #8
 800c754:	b2da      	uxtb	r2, r3
 800c756:	4b85      	ldr	r3, [pc, #532]	; (800c96c <tcp_process+0x2c8>)
 800c758:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	8b5b      	ldrh	r3, [r3, #26]
 800c75e:	f023 0301 	bic.w	r3, r3, #1
 800c762:	b29a      	uxth	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c768:	f06f 030d 	mvn.w	r3, #13
 800c76c:	e37a      	b.n	800ce64 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c76e:	2300      	movs	r3, #0
 800c770:	e378      	b.n	800ce64 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c772:	4b7a      	ldr	r3, [pc, #488]	; (800c95c <tcp_process+0x2b8>)
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	f003 0302 	and.w	r3, r3, #2
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d010      	beq.n	800c7a0 <tcp_process+0xfc>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	7d1b      	ldrb	r3, [r3, #20]
 800c782:	2b02      	cmp	r3, #2
 800c784:	d00c      	beq.n	800c7a0 <tcp_process+0xfc>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	7d1b      	ldrb	r3, [r3, #20]
 800c78a:	2b03      	cmp	r3, #3
 800c78c:	d008      	beq.n	800c7a0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	8b5b      	ldrh	r3, [r3, #26]
 800c792:	f043 0302 	orr.w	r3, r3, #2
 800c796:	b29a      	uxth	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c79c:	2300      	movs	r3, #0
 800c79e:	e361      	b.n	800ce64 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	8b5b      	ldrh	r3, [r3, #26]
 800c7a4:	f003 0310 	and.w	r3, r3, #16
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d103      	bne.n	800c7b4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c7ac:	4b70      	ldr	r3, [pc, #448]	; (800c970 <tcp_process+0x2cc>)
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f001 fc2d 	bl	800e024 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	7d1b      	ldrb	r3, [r3, #20]
 800c7ce:	3b02      	subs	r3, #2
 800c7d0:	2b07      	cmp	r3, #7
 800c7d2:	f200 8337 	bhi.w	800ce44 <tcp_process+0x7a0>
 800c7d6:	a201      	add	r2, pc, #4	; (adr r2, 800c7dc <tcp_process+0x138>)
 800c7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7dc:	0800c7fd 	.word	0x0800c7fd
 800c7e0:	0800ca2d 	.word	0x0800ca2d
 800c7e4:	0800cba5 	.word	0x0800cba5
 800c7e8:	0800cbcf 	.word	0x0800cbcf
 800c7ec:	0800ccf3 	.word	0x0800ccf3
 800c7f0:	0800cba5 	.word	0x0800cba5
 800c7f4:	0800cd7f 	.word	0x0800cd7f
 800c7f8:	0800ce0f 	.word	0x0800ce0f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c7fc:	4b57      	ldr	r3, [pc, #348]	; (800c95c <tcp_process+0x2b8>)
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	f003 0310 	and.w	r3, r3, #16
 800c804:	2b00      	cmp	r3, #0
 800c806:	f000 80e4 	beq.w	800c9d2 <tcp_process+0x32e>
 800c80a:	4b54      	ldr	r3, [pc, #336]	; (800c95c <tcp_process+0x2b8>)
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	f003 0302 	and.w	r3, r3, #2
 800c812:	2b00      	cmp	r3, #0
 800c814:	f000 80dd 	beq.w	800c9d2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c81c:	1c5a      	adds	r2, r3, #1
 800c81e:	4b50      	ldr	r3, [pc, #320]	; (800c960 <tcp_process+0x2bc>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	429a      	cmp	r2, r3
 800c824:	f040 80d5 	bne.w	800c9d2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c828:	4b4e      	ldr	r3, [pc, #312]	; (800c964 <tcp_process+0x2c0>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	1c5a      	adds	r2, r3, #1
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c83a:	4b49      	ldr	r3, [pc, #292]	; (800c960 <tcp_process+0x2bc>)
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c842:	4b4c      	ldr	r3, [pc, #304]	; (800c974 <tcp_process+0x2d0>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	89db      	ldrh	r3, [r3, #14]
 800c848:	b29a      	uxth	r2, r3
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c85c:	4b41      	ldr	r3, [pc, #260]	; (800c964 <tcp_process+0x2c0>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	1e5a      	subs	r2, r3, #1
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2204      	movs	r2, #4
 800c86a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	3304      	adds	r3, #4
 800c874:	4618      	mov	r0, r3
 800c876:	f004 fe3d 	bl	80114f4 <ip4_route>
 800c87a:	4601      	mov	r1, r0
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	3304      	adds	r3, #4
 800c880:	461a      	mov	r2, r3
 800c882:	4620      	mov	r0, r4
 800c884:	f7ff f88e 	bl	800b9a4 <tcp_eff_send_mss_netif>
 800c888:	4603      	mov	r3, r0
 800c88a:	461a      	mov	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c894:	009a      	lsls	r2, r3, #2
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c89a:	005b      	lsls	r3, r3, #1
 800c89c:	f241 111c 	movw	r1, #4380	; 0x111c
 800c8a0:	428b      	cmp	r3, r1
 800c8a2:	bf38      	it	cc
 800c8a4:	460b      	movcc	r3, r1
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d204      	bcs.n	800c8b4 <tcp_process+0x210>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8ae:	009b      	lsls	r3, r3, #2
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	e00d      	b.n	800c8d0 <tcp_process+0x22c>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	f241 121c 	movw	r2, #4380	; 0x111c
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d904      	bls.n	800c8cc <tcp_process+0x228>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8c6:	005b      	lsls	r3, r3, #1
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	e001      	b.n	800c8d0 <tcp_process+0x22c>
 800c8cc:	f241 131c 	movw	r3, #4380	; 0x111c
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d106      	bne.n	800c8ee <tcp_process+0x24a>
 800c8e0:	4b1b      	ldr	r3, [pc, #108]	; (800c950 <tcp_process+0x2ac>)
 800c8e2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c8e6:	4924      	ldr	r1, [pc, #144]	; (800c978 <tcp_process+0x2d4>)
 800c8e8:	481b      	ldr	r0, [pc, #108]	; (800c958 <tcp_process+0x2b4>)
 800c8ea:	f006 fd73 	bl	80133d4 <iprintf>
        --pcb->snd_queuelen;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	b29a      	uxth	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c902:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d111      	bne.n	800c92e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c90e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d106      	bne.n	800c924 <tcp_process+0x280>
 800c916:	4b0e      	ldr	r3, [pc, #56]	; (800c950 <tcp_process+0x2ac>)
 800c918:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c91c:	4917      	ldr	r1, [pc, #92]	; (800c97c <tcp_process+0x2d8>)
 800c91e:	480e      	ldr	r0, [pc, #56]	; (800c958 <tcp_process+0x2b4>)
 800c920:	f006 fd58 	bl	80133d4 <iprintf>
          pcb->unsent = rseg->next;
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	66da      	str	r2, [r3, #108]	; 0x6c
 800c92c:	e003      	b.n	800c936 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c936:	69f8      	ldr	r0, [r7, #28]
 800c938:	f7fe fd3d 	bl	800b3b6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c940:	2b00      	cmp	r3, #0
 800c942:	d11d      	bne.n	800c980 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c94a:	861a      	strh	r2, [r3, #48]	; 0x30
 800c94c:	e01f      	b.n	800c98e <tcp_process+0x2ea>
 800c94e:	bf00      	nop
 800c950:	08017d14 	.word	0x08017d14
 800c954:	08017f4c 	.word	0x08017f4c
 800c958:	08017d60 	.word	0x08017d60
 800c95c:	200002e8 	.word	0x200002e8
 800c960:	200002e0 	.word	0x200002e0
 800c964:	200002dc 	.word	0x200002dc
 800c968:	08017f68 	.word	0x08017f68
 800c96c:	200002e9 	.word	0x200002e9
 800c970:	200090dc 	.word	0x200090dc
 800c974:	200002cc 	.word	0x200002cc
 800c978:	08017f88 	.word	0x08017f88
 800c97c:	08017fa0 	.word	0x08017fa0
        } else {
          pcb->rtime = 0;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2200      	movs	r2, #0
 800c98a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00a      	beq.n	800c9ae <tcp_process+0x30a>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	6910      	ldr	r0, [r2, #16]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	6879      	ldr	r1, [r7, #4]
 800c9a6:	4798      	blx	r3
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	76bb      	strb	r3, [r7, #26]
 800c9ac:	e001      	b.n	800c9b2 <tcp_process+0x30e>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c9b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c9b6:	f113 0f0d 	cmn.w	r3, #13
 800c9ba:	d102      	bne.n	800c9c2 <tcp_process+0x31e>
          return ERR_ABRT;
 800c9bc:	f06f 030c 	mvn.w	r3, #12
 800c9c0:	e250      	b.n	800ce64 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	8b5b      	ldrh	r3, [r3, #26]
 800c9c6:	f043 0302 	orr.w	r3, r3, #2
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c9d0:	e23a      	b.n	800ce48 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c9d2:	4b9d      	ldr	r3, [pc, #628]	; (800cc48 <tcp_process+0x5a4>)
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	f003 0310 	and.w	r3, r3, #16
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	f000 8234 	beq.w	800ce48 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9e0:	4b9a      	ldr	r3, [pc, #616]	; (800cc4c <tcp_process+0x5a8>)
 800c9e2:	6819      	ldr	r1, [r3, #0]
 800c9e4:	4b9a      	ldr	r3, [pc, #616]	; (800cc50 <tcp_process+0x5ac>)
 800c9e6:	881b      	ldrh	r3, [r3, #0]
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	4b9a      	ldr	r3, [pc, #616]	; (800cc54 <tcp_process+0x5b0>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9f0:	4b99      	ldr	r3, [pc, #612]	; (800cc58 <tcp_process+0x5b4>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9f4:	885b      	ldrh	r3, [r3, #2]
 800c9f6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9f8:	4a97      	ldr	r2, [pc, #604]	; (800cc58 <tcp_process+0x5b4>)
 800c9fa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9fc:	8812      	ldrh	r2, [r2, #0]
 800c9fe:	b292      	uxth	r2, r2
 800ca00:	9202      	str	r2, [sp, #8]
 800ca02:	9301      	str	r3, [sp, #4]
 800ca04:	4b95      	ldr	r3, [pc, #596]	; (800cc5c <tcp_process+0x5b8>)
 800ca06:	9300      	str	r3, [sp, #0]
 800ca08:	4b95      	ldr	r3, [pc, #596]	; (800cc60 <tcp_process+0x5bc>)
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f002 fc83 	bl	800f318 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca18:	2b05      	cmp	r3, #5
 800ca1a:	f200 8215 	bhi.w	800ce48 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f002 fa4d 	bl	800eec4 <tcp_rexmit_rto>
      break;
 800ca2a:	e20d      	b.n	800ce48 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ca2c:	4b86      	ldr	r3, [pc, #536]	; (800cc48 <tcp_process+0x5a4>)
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	f003 0310 	and.w	r3, r3, #16
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f000 80a1 	beq.w	800cb7c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ca3a:	4b84      	ldr	r3, [pc, #528]	; (800cc4c <tcp_process+0x5a8>)
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca42:	1ad3      	subs	r3, r2, r3
 800ca44:	3b01      	subs	r3, #1
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	db7e      	blt.n	800cb48 <tcp_process+0x4a4>
 800ca4a:	4b80      	ldr	r3, [pc, #512]	; (800cc4c <tcp_process+0x5a8>)
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca52:	1ad3      	subs	r3, r2, r3
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	dc77      	bgt.n	800cb48 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2204      	movs	r2, #4
 800ca5c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d102      	bne.n	800ca6c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ca66:	23fa      	movs	r3, #250	; 0xfa
 800ca68:	76bb      	strb	r3, [r7, #26]
 800ca6a:	e01d      	b.n	800caa8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca70:	699b      	ldr	r3, [r3, #24]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d106      	bne.n	800ca84 <tcp_process+0x3e0>
 800ca76:	4b7b      	ldr	r3, [pc, #492]	; (800cc64 <tcp_process+0x5c0>)
 800ca78:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ca7c:	497a      	ldr	r1, [pc, #488]	; (800cc68 <tcp_process+0x5c4>)
 800ca7e:	487b      	ldr	r0, [pc, #492]	; (800cc6c <tcp_process+0x5c8>)
 800ca80:	f006 fca8 	bl	80133d4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca88:	699b      	ldr	r3, [r3, #24]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00a      	beq.n	800caa4 <tcp_process+0x400>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca92:	699b      	ldr	r3, [r3, #24]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	6910      	ldr	r0, [r2, #16]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	6879      	ldr	r1, [r7, #4]
 800ca9c:	4798      	blx	r3
 800ca9e:	4603      	mov	r3, r0
 800caa0:	76bb      	strb	r3, [r7, #26]
 800caa2:	e001      	b.n	800caa8 <tcp_process+0x404>
 800caa4:	23f0      	movs	r3, #240	; 0xf0
 800caa6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800caa8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00a      	beq.n	800cac6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800cab0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cab4:	f113 0f0d 	cmn.w	r3, #13
 800cab8:	d002      	beq.n	800cac0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7fd ff90 	bl	800a9e0 <tcp_abort>
            }
            return ERR_ABRT;
 800cac0:	f06f 030c 	mvn.w	r3, #12
 800cac4:	e1ce      	b.n	800ce64 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 fae0 	bl	800d08c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800cacc:	4b68      	ldr	r3, [pc, #416]	; (800cc70 <tcp_process+0x5cc>)
 800cace:	881b      	ldrh	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d005      	beq.n	800cae0 <tcp_process+0x43c>
            recv_acked--;
 800cad4:	4b66      	ldr	r3, [pc, #408]	; (800cc70 <tcp_process+0x5cc>)
 800cad6:	881b      	ldrh	r3, [r3, #0]
 800cad8:	3b01      	subs	r3, #1
 800cada:	b29a      	uxth	r2, r3
 800cadc:	4b64      	ldr	r3, [pc, #400]	; (800cc70 <tcp_process+0x5cc>)
 800cade:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cae4:	009a      	lsls	r2, r3, #2
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800caea:	005b      	lsls	r3, r3, #1
 800caec:	f241 111c 	movw	r1, #4380	; 0x111c
 800caf0:	428b      	cmp	r3, r1
 800caf2:	bf38      	it	cc
 800caf4:	460b      	movcc	r3, r1
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d204      	bcs.n	800cb04 <tcp_process+0x460>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	e00d      	b.n	800cb20 <tcp_process+0x47c>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb08:	005b      	lsls	r3, r3, #1
 800cb0a:	f241 121c 	movw	r2, #4380	; 0x111c
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d904      	bls.n	800cb1c <tcp_process+0x478>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb16:	005b      	lsls	r3, r3, #1
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	e001      	b.n	800cb20 <tcp_process+0x47c>
 800cb1c:	f241 131c 	movw	r3, #4380	; 0x111c
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800cb26:	4b53      	ldr	r3, [pc, #332]	; (800cc74 <tcp_process+0x5d0>)
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	f003 0320 	and.w	r3, r3, #32
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d037      	beq.n	800cba2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	8b5b      	ldrh	r3, [r3, #26]
 800cb36:	f043 0302 	orr.w	r3, r3, #2
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2207      	movs	r2, #7
 800cb44:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800cb46:	e02c      	b.n	800cba2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb48:	4b40      	ldr	r3, [pc, #256]	; (800cc4c <tcp_process+0x5a8>)
 800cb4a:	6819      	ldr	r1, [r3, #0]
 800cb4c:	4b40      	ldr	r3, [pc, #256]	; (800cc50 <tcp_process+0x5ac>)
 800cb4e:	881b      	ldrh	r3, [r3, #0]
 800cb50:	461a      	mov	r2, r3
 800cb52:	4b40      	ldr	r3, [pc, #256]	; (800cc54 <tcp_process+0x5b0>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb58:	4b3f      	ldr	r3, [pc, #252]	; (800cc58 <tcp_process+0x5b4>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb5c:	885b      	ldrh	r3, [r3, #2]
 800cb5e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb60:	4a3d      	ldr	r2, [pc, #244]	; (800cc58 <tcp_process+0x5b4>)
 800cb62:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb64:	8812      	ldrh	r2, [r2, #0]
 800cb66:	b292      	uxth	r2, r2
 800cb68:	9202      	str	r2, [sp, #8]
 800cb6a:	9301      	str	r3, [sp, #4]
 800cb6c:	4b3b      	ldr	r3, [pc, #236]	; (800cc5c <tcp_process+0x5b8>)
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	4b3b      	ldr	r3, [pc, #236]	; (800cc60 <tcp_process+0x5bc>)
 800cb72:	4602      	mov	r2, r0
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f002 fbcf 	bl	800f318 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800cb7a:	e167      	b.n	800ce4c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800cb7c:	4b32      	ldr	r3, [pc, #200]	; (800cc48 <tcp_process+0x5a4>)
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	f003 0302 	and.w	r3, r3, #2
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f000 8161 	beq.w	800ce4c <tcp_process+0x7a8>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8e:	1e5a      	subs	r2, r3, #1
 800cb90:	4b30      	ldr	r3, [pc, #192]	; (800cc54 <tcp_process+0x5b0>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	f040 8159 	bne.w	800ce4c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f002 f9b4 	bl	800ef08 <tcp_rexmit>
      break;
 800cba0:	e154      	b.n	800ce4c <tcp_process+0x7a8>
 800cba2:	e153      	b.n	800ce4c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 fa71 	bl	800d08c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800cbaa:	4b32      	ldr	r3, [pc, #200]	; (800cc74 <tcp_process+0x5d0>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	f003 0320 	and.w	r3, r3, #32
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	f000 814c 	beq.w	800ce50 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	8b5b      	ldrh	r3, [r3, #26]
 800cbbc:	f043 0302 	orr.w	r3, r3, #2
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2207      	movs	r2, #7
 800cbca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cbcc:	e140      	b.n	800ce50 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 fa5c 	bl	800d08c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cbd4:	4b27      	ldr	r3, [pc, #156]	; (800cc74 <tcp_process+0x5d0>)
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	f003 0320 	and.w	r3, r3, #32
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d071      	beq.n	800ccc4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cbe0:	4b19      	ldr	r3, [pc, #100]	; (800cc48 <tcp_process+0x5a4>)
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	f003 0310 	and.w	r3, r3, #16
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d060      	beq.n	800ccae <tcp_process+0x60a>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cbf0:	4b16      	ldr	r3, [pc, #88]	; (800cc4c <tcp_process+0x5a8>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d15a      	bne.n	800ccae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d156      	bne.n	800ccae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	8b5b      	ldrh	r3, [r3, #26]
 800cc04:	f043 0302 	orr.w	r3, r3, #2
 800cc08:	b29a      	uxth	r2, r3
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7fe fdbe 	bl	800b790 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800cc14:	4b18      	ldr	r3, [pc, #96]	; (800cc78 <tcp_process+0x5d4>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d105      	bne.n	800cc2a <tcp_process+0x586>
 800cc1e:	4b16      	ldr	r3, [pc, #88]	; (800cc78 <tcp_process+0x5d4>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	4a14      	ldr	r2, [pc, #80]	; (800cc78 <tcp_process+0x5d4>)
 800cc26:	6013      	str	r3, [r2, #0]
 800cc28:	e02e      	b.n	800cc88 <tcp_process+0x5e4>
 800cc2a:	4b13      	ldr	r3, [pc, #76]	; (800cc78 <tcp_process+0x5d4>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	617b      	str	r3, [r7, #20]
 800cc30:	e027      	b.n	800cc82 <tcp_process+0x5de>
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d11f      	bne.n	800cc7c <tcp_process+0x5d8>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	68da      	ldr	r2, [r3, #12]
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	60da      	str	r2, [r3, #12]
 800cc44:	e020      	b.n	800cc88 <tcp_process+0x5e4>
 800cc46:	bf00      	nop
 800cc48:	200002e8 	.word	0x200002e8
 800cc4c:	200002e0 	.word	0x200002e0
 800cc50:	200002e6 	.word	0x200002e6
 800cc54:	200002dc 	.word	0x200002dc
 800cc58:	200002cc 	.word	0x200002cc
 800cc5c:	200039e4 	.word	0x200039e4
 800cc60:	200039e8 	.word	0x200039e8
 800cc64:	08017d14 	.word	0x08017d14
 800cc68:	08017fb4 	.word	0x08017fb4
 800cc6c:	08017d60 	.word	0x08017d60
 800cc70:	200002e4 	.word	0x200002e4
 800cc74:	200002e9 	.word	0x200002e9
 800cc78:	200090d8 	.word	0x200090d8
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	617b      	str	r3, [r7, #20]
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1d4      	bne.n	800cc32 <tcp_process+0x58e>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	60da      	str	r2, [r3, #12]
 800cc8e:	4b77      	ldr	r3, [pc, #476]	; (800ce6c <tcp_process+0x7c8>)
 800cc90:	2201      	movs	r2, #1
 800cc92:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	220a      	movs	r2, #10
 800cc98:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800cc9a:	4b75      	ldr	r3, [pc, #468]	; (800ce70 <tcp_process+0x7cc>)
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	60da      	str	r2, [r3, #12]
 800cca2:	4a73      	ldr	r2, [pc, #460]	; (800ce70 <tcp_process+0x7cc>)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6013      	str	r3, [r2, #0]
 800cca8:	f002 fcf8 	bl	800f69c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ccac:	e0d2      	b.n	800ce54 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	8b5b      	ldrh	r3, [r3, #26]
 800ccb2:	f043 0302 	orr.w	r3, r3, #2
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2208      	movs	r2, #8
 800ccc0:	751a      	strb	r2, [r3, #20]
      break;
 800ccc2:	e0c7      	b.n	800ce54 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ccc4:	4b6b      	ldr	r3, [pc, #428]	; (800ce74 <tcp_process+0x7d0>)
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	f003 0310 	and.w	r3, r3, #16
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f000 80c1 	beq.w	800ce54 <tcp_process+0x7b0>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ccd6:	4b68      	ldr	r3, [pc, #416]	; (800ce78 <tcp_process+0x7d4>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	f040 80ba 	bne.w	800ce54 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f040 80b5 	bne.w	800ce54 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2206      	movs	r2, #6
 800ccee:	751a      	strb	r2, [r3, #20]
      break;
 800ccf0:	e0b0      	b.n	800ce54 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 f9ca 	bl	800d08c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ccf8:	4b60      	ldr	r3, [pc, #384]	; (800ce7c <tcp_process+0x7d8>)
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	f003 0320 	and.w	r3, r3, #32
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f000 80a9 	beq.w	800ce58 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	8b5b      	ldrh	r3, [r3, #26]
 800cd0a:	f043 0302 	orr.w	r3, r3, #2
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7fe fd3b 	bl	800b790 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cd1a:	4b59      	ldr	r3, [pc, #356]	; (800ce80 <tcp_process+0x7dc>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d105      	bne.n	800cd30 <tcp_process+0x68c>
 800cd24:	4b56      	ldr	r3, [pc, #344]	; (800ce80 <tcp_process+0x7dc>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	4a55      	ldr	r2, [pc, #340]	; (800ce80 <tcp_process+0x7dc>)
 800cd2c:	6013      	str	r3, [r2, #0]
 800cd2e:	e013      	b.n	800cd58 <tcp_process+0x6b4>
 800cd30:	4b53      	ldr	r3, [pc, #332]	; (800ce80 <tcp_process+0x7dc>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	613b      	str	r3, [r7, #16]
 800cd36:	e00c      	b.n	800cd52 <tcp_process+0x6ae>
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d104      	bne.n	800cd4c <tcp_process+0x6a8>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	68da      	ldr	r2, [r3, #12]
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	60da      	str	r2, [r3, #12]
 800cd4a:	e005      	b.n	800cd58 <tcp_process+0x6b4>
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	613b      	str	r3, [r7, #16]
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d1ef      	bne.n	800cd38 <tcp_process+0x694>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	60da      	str	r2, [r3, #12]
 800cd5e:	4b43      	ldr	r3, [pc, #268]	; (800ce6c <tcp_process+0x7c8>)
 800cd60:	2201      	movs	r2, #1
 800cd62:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	220a      	movs	r2, #10
 800cd68:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cd6a:	4b41      	ldr	r3, [pc, #260]	; (800ce70 <tcp_process+0x7cc>)
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	60da      	str	r2, [r3, #12]
 800cd72:	4a3f      	ldr	r2, [pc, #252]	; (800ce70 <tcp_process+0x7cc>)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6013      	str	r3, [r2, #0]
 800cd78:	f002 fc90 	bl	800f69c <tcp_timer_needed>
      }
      break;
 800cd7c:	e06c      	b.n	800ce58 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 f984 	bl	800d08c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cd84:	4b3b      	ldr	r3, [pc, #236]	; (800ce74 <tcp_process+0x7d0>)
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	f003 0310 	and.w	r3, r3, #16
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d065      	beq.n	800ce5c <tcp_process+0x7b8>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd94:	4b38      	ldr	r3, [pc, #224]	; (800ce78 <tcp_process+0x7d4>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d15f      	bne.n	800ce5c <tcp_process+0x7b8>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d15b      	bne.n	800ce5c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7fe fcf3 	bl	800b790 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cdaa:	4b35      	ldr	r3, [pc, #212]	; (800ce80 <tcp_process+0x7dc>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d105      	bne.n	800cdc0 <tcp_process+0x71c>
 800cdb4:	4b32      	ldr	r3, [pc, #200]	; (800ce80 <tcp_process+0x7dc>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	4a31      	ldr	r2, [pc, #196]	; (800ce80 <tcp_process+0x7dc>)
 800cdbc:	6013      	str	r3, [r2, #0]
 800cdbe:	e013      	b.n	800cde8 <tcp_process+0x744>
 800cdc0:	4b2f      	ldr	r3, [pc, #188]	; (800ce80 <tcp_process+0x7dc>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	60fb      	str	r3, [r7, #12]
 800cdc6:	e00c      	b.n	800cde2 <tcp_process+0x73e>
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d104      	bne.n	800cddc <tcp_process+0x738>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	68da      	ldr	r2, [r3, #12]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	60da      	str	r2, [r3, #12]
 800cdda:	e005      	b.n	800cde8 <tcp_process+0x744>
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	60fb      	str	r3, [r7, #12]
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d1ef      	bne.n	800cdc8 <tcp_process+0x724>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	60da      	str	r2, [r3, #12]
 800cdee:	4b1f      	ldr	r3, [pc, #124]	; (800ce6c <tcp_process+0x7c8>)
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	220a      	movs	r2, #10
 800cdf8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cdfa:	4b1d      	ldr	r3, [pc, #116]	; (800ce70 <tcp_process+0x7cc>)
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	60da      	str	r2, [r3, #12]
 800ce02:	4a1b      	ldr	r2, [pc, #108]	; (800ce70 <tcp_process+0x7cc>)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6013      	str	r3, [r2, #0]
 800ce08:	f002 fc48 	bl	800f69c <tcp_timer_needed>
      }
      break;
 800ce0c:	e026      	b.n	800ce5c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f93c 	bl	800d08c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ce14:	4b17      	ldr	r3, [pc, #92]	; (800ce74 <tcp_process+0x7d0>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	f003 0310 	and.w	r3, r3, #16
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d01f      	beq.n	800ce60 <tcp_process+0x7bc>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce24:	4b14      	ldr	r3, [pc, #80]	; (800ce78 <tcp_process+0x7d4>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d119      	bne.n	800ce60 <tcp_process+0x7bc>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d115      	bne.n	800ce60 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ce34:	4b11      	ldr	r3, [pc, #68]	; (800ce7c <tcp_process+0x7d8>)
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	f043 0310 	orr.w	r3, r3, #16
 800ce3c:	b2da      	uxtb	r2, r3
 800ce3e:	4b0f      	ldr	r3, [pc, #60]	; (800ce7c <tcp_process+0x7d8>)
 800ce40:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ce42:	e00d      	b.n	800ce60 <tcp_process+0x7bc>
    default:
      break;
 800ce44:	bf00      	nop
 800ce46:	e00c      	b.n	800ce62 <tcp_process+0x7be>
      break;
 800ce48:	bf00      	nop
 800ce4a:	e00a      	b.n	800ce62 <tcp_process+0x7be>
      break;
 800ce4c:	bf00      	nop
 800ce4e:	e008      	b.n	800ce62 <tcp_process+0x7be>
      break;
 800ce50:	bf00      	nop
 800ce52:	e006      	b.n	800ce62 <tcp_process+0x7be>
      break;
 800ce54:	bf00      	nop
 800ce56:	e004      	b.n	800ce62 <tcp_process+0x7be>
      break;
 800ce58:	bf00      	nop
 800ce5a:	e002      	b.n	800ce62 <tcp_process+0x7be>
      break;
 800ce5c:	bf00      	nop
 800ce5e:	e000      	b.n	800ce62 <tcp_process+0x7be>
      break;
 800ce60:	bf00      	nop
  }
  return ERR_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3724      	adds	r7, #36	; 0x24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd90      	pop	{r4, r7, pc}
 800ce6c:	200090d4 	.word	0x200090d4
 800ce70:	200090e8 	.word	0x200090e8
 800ce74:	200002e8 	.word	0x200002e8
 800ce78:	200002e0 	.word	0x200002e0
 800ce7c:	200002e9 	.word	0x200002e9
 800ce80:	200090d8 	.word	0x200090d8

0800ce84 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ce84:	b590      	push	{r4, r7, lr}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d106      	bne.n	800cea2 <tcp_oos_insert_segment+0x1e>
 800ce94:	4b3b      	ldr	r3, [pc, #236]	; (800cf84 <tcp_oos_insert_segment+0x100>)
 800ce96:	f240 421f 	movw	r2, #1055	; 0x41f
 800ce9a:	493b      	ldr	r1, [pc, #236]	; (800cf88 <tcp_oos_insert_segment+0x104>)
 800ce9c:	483b      	ldr	r0, [pc, #236]	; (800cf8c <tcp_oos_insert_segment+0x108>)
 800ce9e:	f006 fa99 	bl	80133d4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	68db      	ldr	r3, [r3, #12]
 800cea6:	899b      	ldrh	r3, [r3, #12]
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fb fcba 	bl	8008824 <lwip_htons>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	f003 0301 	and.w	r3, r3, #1
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d028      	beq.n	800cf0e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800cebc:	6838      	ldr	r0, [r7, #0]
 800cebe:	f7fe fa65 	bl	800b38c <tcp_segs_free>
    next = NULL;
 800cec2:	2300      	movs	r3, #0
 800cec4:	603b      	str	r3, [r7, #0]
 800cec6:	e056      	b.n	800cf76 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	899b      	ldrh	r3, [r3, #12]
 800cece:	b29b      	uxth	r3, r3
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7fb fca7 	bl	8008824 <lwip_htons>
 800ced6:	4603      	mov	r3, r0
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	f003 0301 	and.w	r3, r3, #1
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00d      	beq.n	800cefe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	899b      	ldrh	r3, [r3, #12]
 800cee8:	b29c      	uxth	r4, r3
 800ceea:	2001      	movs	r0, #1
 800ceec:	f7fb fc9a 	bl	8008824 <lwip_htons>
 800cef0:	4603      	mov	r3, r0
 800cef2:	461a      	mov	r2, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	4322      	orrs	r2, r4
 800cefa:	b292      	uxth	r2, r2
 800cefc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800cf08:	68f8      	ldr	r0, [r7, #12]
 800cf0a:	f7fe fa54 	bl	800b3b6 <tcp_seg_free>
    while (next &&
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00e      	beq.n	800cf32 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	891b      	ldrh	r3, [r3, #8]
 800cf18:	461a      	mov	r2, r3
 800cf1a:	4b1d      	ldr	r3, [pc, #116]	; (800cf90 <tcp_oos_insert_segment+0x10c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	441a      	add	r2, r3
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	68db      	ldr	r3, [r3, #12]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	6839      	ldr	r1, [r7, #0]
 800cf28:	8909      	ldrh	r1, [r1, #8]
 800cf2a:	440b      	add	r3, r1
 800cf2c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	daca      	bge.n	800cec8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d01e      	beq.n	800cf76 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	891b      	ldrh	r3, [r3, #8]
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	4b14      	ldr	r3, [pc, #80]	; (800cf90 <tcp_oos_insert_segment+0x10c>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	441a      	add	r2, r3
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	dd12      	ble.n	800cf76 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	4b0d      	ldr	r3, [pc, #52]	; (800cf90 <tcp_oos_insert_segment+0x10c>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	1ad3      	subs	r3, r2, r3
 800cf60:	b29a      	uxth	r2, r3
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	685a      	ldr	r2, [r3, #4]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	891b      	ldrh	r3, [r3, #8]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	4610      	mov	r0, r2
 800cf72:	f7fc fd85 	bl	8009a80 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	683a      	ldr	r2, [r7, #0]
 800cf7a:	601a      	str	r2, [r3, #0]
}
 800cf7c:	bf00      	nop
 800cf7e:	3714      	adds	r7, #20
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd90      	pop	{r4, r7, pc}
 800cf84:	08017d14 	.word	0x08017d14
 800cf88:	08017fd4 	.word	0x08017fd4
 800cf8c:	08017d60 	.word	0x08017d60
 800cf90:	200002dc 	.word	0x200002dc

0800cf94 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cf94:	b5b0      	push	{r4, r5, r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	607a      	str	r2, [r7, #4]
 800cfa0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cfa2:	e03e      	b.n	800d022 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fc ff72 	bl	8009e9c <pbuf_clen>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cfc2:	8a7a      	ldrh	r2, [r7, #18]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d906      	bls.n	800cfd6 <tcp_free_acked_segments+0x42>
 800cfc8:	4b2a      	ldr	r3, [pc, #168]	; (800d074 <tcp_free_acked_segments+0xe0>)
 800cfca:	f240 4257 	movw	r2, #1111	; 0x457
 800cfce:	492a      	ldr	r1, [pc, #168]	; (800d078 <tcp_free_acked_segments+0xe4>)
 800cfd0:	482a      	ldr	r0, [pc, #168]	; (800d07c <tcp_free_acked_segments+0xe8>)
 800cfd2:	f006 f9ff 	bl	80133d4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800cfdc:	8a7b      	ldrh	r3, [r7, #18]
 800cfde:	1ad3      	subs	r3, r2, r3
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	891a      	ldrh	r2, [r3, #8]
 800cfec:	4b24      	ldr	r3, [pc, #144]	; (800d080 <tcp_free_acked_segments+0xec>)
 800cfee:	881b      	ldrh	r3, [r3, #0]
 800cff0:	4413      	add	r3, r2
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	4b22      	ldr	r3, [pc, #136]	; (800d080 <tcp_free_acked_segments+0xec>)
 800cff6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800cff8:	6978      	ldr	r0, [r7, #20]
 800cffa:	f7fe f9dc 	bl	800b3b6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00c      	beq.n	800d022 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d109      	bne.n	800d022 <tcp_free_acked_segments+0x8e>
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d106      	bne.n	800d022 <tcp_free_acked_segments+0x8e>
 800d014:	4b17      	ldr	r3, [pc, #92]	; (800d074 <tcp_free_acked_segments+0xe0>)
 800d016:	f240 4261 	movw	r2, #1121	; 0x461
 800d01a:	491a      	ldr	r1, [pc, #104]	; (800d084 <tcp_free_acked_segments+0xf0>)
 800d01c:	4817      	ldr	r0, [pc, #92]	; (800d07c <tcp_free_acked_segments+0xe8>)
 800d01e:	f006 f9d9 	bl	80133d4 <iprintf>
  while (seg_list != NULL &&
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d020      	beq.n	800d06a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fb fc0d 	bl	800884e <lwip_htonl>
 800d034:	4604      	mov	r4, r0
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	891b      	ldrh	r3, [r3, #8]
 800d03a:	461d      	mov	r5, r3
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	899b      	ldrh	r3, [r3, #12]
 800d042:	b29b      	uxth	r3, r3
 800d044:	4618      	mov	r0, r3
 800d046:	f7fb fbed 	bl	8008824 <lwip_htons>
 800d04a:	4603      	mov	r3, r0
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	f003 0303 	and.w	r3, r3, #3
 800d052:	2b00      	cmp	r3, #0
 800d054:	d001      	beq.n	800d05a <tcp_free_acked_segments+0xc6>
 800d056:	2301      	movs	r3, #1
 800d058:	e000      	b.n	800d05c <tcp_free_acked_segments+0xc8>
 800d05a:	2300      	movs	r3, #0
 800d05c:	442b      	add	r3, r5
 800d05e:	18e2      	adds	r2, r4, r3
 800d060:	4b09      	ldr	r3, [pc, #36]	; (800d088 <tcp_free_acked_segments+0xf4>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d066:	2b00      	cmp	r3, #0
 800d068:	dd9c      	ble.n	800cfa4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d06a:	68bb      	ldr	r3, [r7, #8]
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3718      	adds	r7, #24
 800d070:	46bd      	mov	sp, r7
 800d072:	bdb0      	pop	{r4, r5, r7, pc}
 800d074:	08017d14 	.word	0x08017d14
 800d078:	08017ffc 	.word	0x08017ffc
 800d07c:	08017d60 	.word	0x08017d60
 800d080:	200002e4 	.word	0x200002e4
 800d084:	08018024 	.word	0x08018024
 800d088:	200002e0 	.word	0x200002e0

0800d08c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d08c:	b5b0      	push	{r4, r5, r7, lr}
 800d08e:	b094      	sub	sp, #80	; 0x50
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d094:	2300      	movs	r3, #0
 800d096:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d106      	bne.n	800d0ac <tcp_receive+0x20>
 800d09e:	4ba6      	ldr	r3, [pc, #664]	; (800d338 <tcp_receive+0x2ac>)
 800d0a0:	f240 427b 	movw	r2, #1147	; 0x47b
 800d0a4:	49a5      	ldr	r1, [pc, #660]	; (800d33c <tcp_receive+0x2b0>)
 800d0a6:	48a6      	ldr	r0, [pc, #664]	; (800d340 <tcp_receive+0x2b4>)
 800d0a8:	f006 f994 	bl	80133d4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	7d1b      	ldrb	r3, [r3, #20]
 800d0b0:	2b03      	cmp	r3, #3
 800d0b2:	d806      	bhi.n	800d0c2 <tcp_receive+0x36>
 800d0b4:	4ba0      	ldr	r3, [pc, #640]	; (800d338 <tcp_receive+0x2ac>)
 800d0b6:	f240 427c 	movw	r2, #1148	; 0x47c
 800d0ba:	49a2      	ldr	r1, [pc, #648]	; (800d344 <tcp_receive+0x2b8>)
 800d0bc:	48a0      	ldr	r0, [pc, #640]	; (800d340 <tcp_receive+0x2b4>)
 800d0be:	f006 f989 	bl	80133d4 <iprintf>

  if (flags & TCP_ACK) {
 800d0c2:	4ba1      	ldr	r3, [pc, #644]	; (800d348 <tcp_receive+0x2bc>)
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	f003 0310 	and.w	r3, r3, #16
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	f000 8263 	beq.w	800d596 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0dc:	4413      	add	r3, r2
 800d0de:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0e4:	4b99      	ldr	r3, [pc, #612]	; (800d34c <tcp_receive+0x2c0>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	db1b      	blt.n	800d126 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0f2:	4b96      	ldr	r3, [pc, #600]	; (800d34c <tcp_receive+0x2c0>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d106      	bne.n	800d108 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d0fe:	4b94      	ldr	r3, [pc, #592]	; (800d350 <tcp_receive+0x2c4>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	1ad3      	subs	r3, r2, r3
 800d104:	2b00      	cmp	r3, #0
 800d106:	db0e      	blt.n	800d126 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d10c:	4b90      	ldr	r3, [pc, #576]	; (800d350 <tcp_receive+0x2c4>)
 800d10e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d110:	429a      	cmp	r2, r3
 800d112:	d125      	bne.n	800d160 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d114:	4b8f      	ldr	r3, [pc, #572]	; (800d354 <tcp_receive+0x2c8>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	89db      	ldrh	r3, [r3, #14]
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d122:	429a      	cmp	r2, r3
 800d124:	d91c      	bls.n	800d160 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d126:	4b8b      	ldr	r3, [pc, #556]	; (800d354 <tcp_receive+0x2c8>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	89db      	ldrh	r3, [r3, #14]
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d140:	429a      	cmp	r2, r3
 800d142:	d205      	bcs.n	800d150 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d150:	4b7e      	ldr	r3, [pc, #504]	; (800d34c <tcp_receive+0x2c0>)
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d158:	4b7d      	ldr	r3, [pc, #500]	; (800d350 <tcp_receive+0x2c4>)
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d160:	4b7b      	ldr	r3, [pc, #492]	; (800d350 <tcp_receive+0x2c4>)
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d168:	1ad3      	subs	r3, r2, r3
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	dc58      	bgt.n	800d220 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d16e:	4b7a      	ldr	r3, [pc, #488]	; (800d358 <tcp_receive+0x2cc>)
 800d170:	881b      	ldrh	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d14b      	bne.n	800d20e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d17a:	687a      	ldr	r2, [r7, #4]
 800d17c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d180:	4413      	add	r3, r2
 800d182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d184:	429a      	cmp	r2, r3
 800d186:	d142      	bne.n	800d20e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d18e:	2b00      	cmp	r3, #0
 800d190:	db3d      	blt.n	800d20e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d196:	4b6e      	ldr	r3, [pc, #440]	; (800d350 <tcp_receive+0x2c4>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d137      	bne.n	800d20e <tcp_receive+0x182>
              found_dupack = 1;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d1a8:	2bff      	cmp	r3, #255	; 0xff
 800d1aa:	d007      	beq.n	800d1bc <tcp_receive+0x130>
                ++pcb->dupacks;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	b2da      	uxtb	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d1c2:	2b03      	cmp	r3, #3
 800d1c4:	d91b      	bls.n	800d1fe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1d0:	4413      	add	r3, r2
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d30a      	bcc.n	800d1f4 <tcp_receive+0x168>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1e8:	4413      	add	r3, r2
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d1f2:	e004      	b.n	800d1fe <tcp_receive+0x172>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d204:	2b02      	cmp	r3, #2
 800d206:	d902      	bls.n	800d20e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f001 fee9 	bl	800efe0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d20e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d210:	2b00      	cmp	r3, #0
 800d212:	f040 8160 	bne.w	800d4d6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d21e:	e15a      	b.n	800d4d6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d220:	4b4b      	ldr	r3, [pc, #300]	; (800d350 <tcp_receive+0x2c4>)
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	3b01      	subs	r3, #1
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f2c0 814d 	blt.w	800d4cc <tcp_receive+0x440>
 800d232:	4b47      	ldr	r3, [pc, #284]	; (800d350 <tcp_receive+0x2c4>)
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d23a:	1ad3      	subs	r3, r2, r3
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	f300 8145 	bgt.w	800d4cc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	8b5b      	ldrh	r3, [r3, #26]
 800d246:	f003 0304 	and.w	r3, r3, #4
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d010      	beq.n	800d270 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	8b5b      	ldrh	r3, [r3, #26]
 800d252:	f023 0304 	bic.w	r3, r3, #4
 800d256:	b29a      	uxth	r2, r3
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d27e:	10db      	asrs	r3, r3, #3
 800d280:	b21b      	sxth	r3, r3
 800d282:	b29a      	uxth	r2, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	4413      	add	r3, r2
 800d28e:	b29b      	uxth	r3, r3
 800d290:	b21a      	sxth	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d298:	4b2d      	ldr	r3, [pc, #180]	; (800d350 <tcp_receive+0x2c4>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	b29a      	uxth	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	1ad3      	subs	r3, r2, r3
 800d2a6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d2b0:	4b27      	ldr	r3, [pc, #156]	; (800d350 <tcp_receive+0x2c4>)
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	7d1b      	ldrb	r3, [r3, #20]
 800d2bc:	2b03      	cmp	r3, #3
 800d2be:	f240 8096 	bls.w	800d3ee <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d244      	bcs.n	800d35c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	8b5b      	ldrh	r3, [r3, #26]
 800d2d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d001      	beq.n	800d2e2 <tcp_receive+0x256>
 800d2de:	2301      	movs	r3, #1
 800d2e0:	e000      	b.n	800d2e4 <tcp_receive+0x258>
 800d2e2:	2302      	movs	r3, #2
 800d2e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d2e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d2f2:	fb12 f303 	smulbb	r3, r2, r3
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	bf28      	it	cs
 800d2fe:	4613      	movcs	r3, r2
 800d300:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d308:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d30a:	4413      	add	r3, r2
 800d30c:	b29a      	uxth	r2, r3
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d314:	429a      	cmp	r2, r3
 800d316:	d309      	bcc.n	800d32c <tcp_receive+0x2a0>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d31e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d320:	4413      	add	r3, r2
 800d322:	b29a      	uxth	r2, r3
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d32a:	e060      	b.n	800d3ee <tcp_receive+0x362>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d332:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d336:	e05a      	b.n	800d3ee <tcp_receive+0x362>
 800d338:	08017d14 	.word	0x08017d14
 800d33c:	08018044 	.word	0x08018044
 800d340:	08017d60 	.word	0x08017d60
 800d344:	08018060 	.word	0x08018060
 800d348:	200002e8 	.word	0x200002e8
 800d34c:	200002dc 	.word	0x200002dc
 800d350:	200002e0 	.word	0x200002e0
 800d354:	200002cc 	.word	0x200002cc
 800d358:	200002e6 	.word	0x200002e6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d362:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d364:	4413      	add	r3, r2
 800d366:	b29a      	uxth	r2, r3
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d36e:	429a      	cmp	r2, r3
 800d370:	d309      	bcc.n	800d386 <tcp_receive+0x2fa>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d378:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d37a:	4413      	add	r3, r2
 800d37c:	b29a      	uxth	r2, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d384:	e004      	b.n	800d390 <tcp_receive+0x304>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d38c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d326      	bcc.n	800d3ee <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	b29a      	uxth	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3c0:	4413      	add	r3, r2
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d30a      	bcc.n	800d3e4 <tcp_receive+0x358>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3d8:	4413      	add	r3, r2
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d3e2:	e004      	b.n	800d3ee <tcp_receive+0x362>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3f6:	4a98      	ldr	r2, [pc, #608]	; (800d658 <tcp_receive+0x5cc>)
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7ff fdcb 	bl	800cf94 <tcp_free_acked_segments>
 800d3fe:	4602      	mov	r2, r0
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d40c:	4a93      	ldr	r2, [pc, #588]	; (800d65c <tcp_receive+0x5d0>)
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f7ff fdc0 	bl	800cf94 <tcp_free_acked_segments>
 800d414:	4602      	mov	r2, r0
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d104      	bne.n	800d42c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d428:	861a      	strh	r2, [r3, #48]	; 0x30
 800d42a:	e002      	b.n	800d432 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2200      	movs	r2, #0
 800d430:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2200      	movs	r2, #0
 800d436:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d103      	bne.n	800d448 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d44e:	4b84      	ldr	r3, [pc, #528]	; (800d660 <tcp_receive+0x5d4>)
 800d450:	881b      	ldrh	r3, [r3, #0]
 800d452:	4413      	add	r3, r2
 800d454:	b29a      	uxth	r2, r3
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	8b5b      	ldrh	r3, [r3, #26]
 800d460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d464:	2b00      	cmp	r3, #0
 800d466:	d035      	beq.n	800d4d4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d118      	bne.n	800d4a2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d474:	2b00      	cmp	r3, #0
 800d476:	d00c      	beq.n	800d492 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	4618      	mov	r0, r3
 800d486:	f7fb f9e2 	bl	800884e <lwip_htonl>
 800d48a:	4603      	mov	r3, r0
 800d48c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d48e:	2b00      	cmp	r3, #0
 800d490:	dc20      	bgt.n	800d4d4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	8b5b      	ldrh	r3, [r3, #26]
 800d496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d4a0:	e018      	b.n	800d4d4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7fb f9cd 	bl	800884e <lwip_htonl>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	1ae3      	subs	r3, r4, r3
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	dc0b      	bgt.n	800d4d4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	8b5b      	ldrh	r3, [r3, #26]
 800d4c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d4c4:	b29a      	uxth	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d4ca:	e003      	b.n	800d4d4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f001 ff75 	bl	800f3bc <tcp_send_empty_ack>
 800d4d2:	e000      	b.n	800d4d6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d4d4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d05b      	beq.n	800d596 <tcp_receive+0x50a>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4e2:	4b60      	ldr	r3, [pc, #384]	; (800d664 <tcp_receive+0x5d8>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	1ad3      	subs	r3, r2, r3
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	da54      	bge.n	800d596 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d4ec:	4b5e      	ldr	r3, [pc, #376]	; (800d668 <tcp_receive+0x5dc>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	1ad3      	subs	r3, r2, r3
 800d4fa:	b29b      	uxth	r3, r3
 800d4fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d500:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d50a:	10db      	asrs	r3, r3, #3
 800d50c:	b21b      	sxth	r3, r3
 800d50e:	b29b      	uxth	r3, r3
 800d510:	1ad3      	subs	r3, r2, r3
 800d512:	b29b      	uxth	r3, r3
 800d514:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d51e:	b29a      	uxth	r2, r3
 800d520:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d524:	4413      	add	r3, r2
 800d526:	b29b      	uxth	r3, r3
 800d528:	b21a      	sxth	r2, r3
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d52e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d532:	2b00      	cmp	r3, #0
 800d534:	da05      	bge.n	800d542 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800d536:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d53a:	425b      	negs	r3, r3
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d542:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d54c:	109b      	asrs	r3, r3, #2
 800d54e:	b21b      	sxth	r3, r3
 800d550:	b29b      	uxth	r3, r3
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	b29b      	uxth	r3, r3
 800d556:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d560:	b29a      	uxth	r2, r3
 800d562:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d566:	4413      	add	r3, r2
 800d568:	b29b      	uxth	r3, r3
 800d56a:	b21a      	sxth	r2, r3
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d576:	10db      	asrs	r3, r3, #3
 800d578:	b21b      	sxth	r3, r3
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d582:	b29b      	uxth	r3, r3
 800d584:	4413      	add	r3, r2
 800d586:	b29b      	uxth	r3, r3
 800d588:	b21a      	sxth	r2, r3
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d596:	4b35      	ldr	r3, [pc, #212]	; (800d66c <tcp_receive+0x5e0>)
 800d598:	881b      	ldrh	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	f000 84e1 	beq.w	800df62 <tcp_receive+0xed6>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	7d1b      	ldrb	r3, [r3, #20]
 800d5a4:	2b06      	cmp	r3, #6
 800d5a6:	f200 84dc 	bhi.w	800df62 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5ae:	4b30      	ldr	r3, [pc, #192]	; (800d670 <tcp_receive+0x5e4>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	3b01      	subs	r3, #1
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f2c0 808e 	blt.w	800d6d8 <tcp_receive+0x64c>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5c0:	4b2a      	ldr	r3, [pc, #168]	; (800d66c <tcp_receive+0x5e0>)
 800d5c2:	881b      	ldrh	r3, [r3, #0]
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	4b2a      	ldr	r3, [pc, #168]	; (800d670 <tcp_receive+0x5e4>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	440b      	add	r3, r1
 800d5cc:	1ad3      	subs	r3, r2, r3
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f300 8081 	bgt.w	800d6d8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d5d6:	4b27      	ldr	r3, [pc, #156]	; (800d674 <tcp_receive+0x5e8>)
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5e0:	4b23      	ldr	r3, [pc, #140]	; (800d670 <tcp_receive+0x5e4>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d5e8:	4b22      	ldr	r3, [pc, #136]	; (800d674 <tcp_receive+0x5e8>)
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d106      	bne.n	800d5fe <tcp_receive+0x572>
 800d5f0:	4b21      	ldr	r3, [pc, #132]	; (800d678 <tcp_receive+0x5ec>)
 800d5f2:	f240 5294 	movw	r2, #1428	; 0x594
 800d5f6:	4921      	ldr	r1, [pc, #132]	; (800d67c <tcp_receive+0x5f0>)
 800d5f8:	4821      	ldr	r0, [pc, #132]	; (800d680 <tcp_receive+0x5f4>)
 800d5fa:	f005 feeb 	bl	80133d4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d604:	4293      	cmp	r3, r2
 800d606:	d906      	bls.n	800d616 <tcp_receive+0x58a>
 800d608:	4b1b      	ldr	r3, [pc, #108]	; (800d678 <tcp_receive+0x5ec>)
 800d60a:	f240 5295 	movw	r2, #1429	; 0x595
 800d60e:	491d      	ldr	r1, [pc, #116]	; (800d684 <tcp_receive+0x5f8>)
 800d610:	481b      	ldr	r0, [pc, #108]	; (800d680 <tcp_receive+0x5f4>)
 800d612:	f005 fedf 	bl	80133d4 <iprintf>
      off = (u16_t)off32;
 800d616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d618:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d61c:	4b15      	ldr	r3, [pc, #84]	; (800d674 <tcp_receive+0x5e8>)
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	891b      	ldrh	r3, [r3, #8]
 800d622:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d626:	429a      	cmp	r2, r3
 800d628:	d906      	bls.n	800d638 <tcp_receive+0x5ac>
 800d62a:	4b13      	ldr	r3, [pc, #76]	; (800d678 <tcp_receive+0x5ec>)
 800d62c:	f240 5297 	movw	r2, #1431	; 0x597
 800d630:	4915      	ldr	r1, [pc, #84]	; (800d688 <tcp_receive+0x5fc>)
 800d632:	4813      	ldr	r0, [pc, #76]	; (800d680 <tcp_receive+0x5f4>)
 800d634:	f005 fece 	bl	80133d4 <iprintf>
      inseg.len -= off;
 800d638:	4b0e      	ldr	r3, [pc, #56]	; (800d674 <tcp_receive+0x5e8>)
 800d63a:	891a      	ldrh	r2, [r3, #8]
 800d63c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d640:	1ad3      	subs	r3, r2, r3
 800d642:	b29a      	uxth	r2, r3
 800d644:	4b0b      	ldr	r3, [pc, #44]	; (800d674 <tcp_receive+0x5e8>)
 800d646:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d648:	4b0a      	ldr	r3, [pc, #40]	; (800d674 <tcp_receive+0x5e8>)
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	891a      	ldrh	r2, [r3, #8]
 800d64e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d656:	e029      	b.n	800d6ac <tcp_receive+0x620>
 800d658:	0801807c 	.word	0x0801807c
 800d65c:	08018084 	.word	0x08018084
 800d660:	200002e4 	.word	0x200002e4
 800d664:	200002e0 	.word	0x200002e0
 800d668:	200090dc 	.word	0x200090dc
 800d66c:	200002e6 	.word	0x200002e6
 800d670:	200002dc 	.word	0x200002dc
 800d674:	200002bc 	.word	0x200002bc
 800d678:	08017d14 	.word	0x08017d14
 800d67c:	0801808c 	.word	0x0801808c
 800d680:	08017d60 	.word	0x08017d60
 800d684:	0801809c 	.word	0x0801809c
 800d688:	080180ac 	.word	0x080180ac
        off -= p->len;
 800d68c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d68e:	895b      	ldrh	r3, [r3, #10]
 800d690:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d694:	1ad3      	subs	r3, r2, r3
 800d696:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d69a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d69c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d69e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d6a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d6a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6ae:	895b      	ldrh	r3, [r3, #10]
 800d6b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d8e9      	bhi.n	800d68c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d6b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d6bc:	4619      	mov	r1, r3
 800d6be:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d6c0:	f7fc fade 	bl	8009c80 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c8:	4a91      	ldr	r2, [pc, #580]	; (800d910 <tcp_receive+0x884>)
 800d6ca:	6013      	str	r3, [r2, #0]
 800d6cc:	4b91      	ldr	r3, [pc, #580]	; (800d914 <tcp_receive+0x888>)
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	4a8f      	ldr	r2, [pc, #572]	; (800d910 <tcp_receive+0x884>)
 800d6d2:	6812      	ldr	r2, [r2, #0]
 800d6d4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d6d6:	e00d      	b.n	800d6f4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d6d8:	4b8d      	ldr	r3, [pc, #564]	; (800d910 <tcp_receive+0x884>)
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e0:	1ad3      	subs	r3, r2, r3
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	da06      	bge.n	800d6f4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	8b5b      	ldrh	r3, [r3, #26]
 800d6ea:	f043 0302 	orr.w	r3, r3, #2
 800d6ee:	b29a      	uxth	r2, r3
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d6f4:	4b86      	ldr	r3, [pc, #536]	; (800d910 <tcp_receive+0x884>)
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fc:	1ad3      	subs	r3, r2, r3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f2c0 842a 	blt.w	800df58 <tcp_receive+0xecc>
 800d704:	4b82      	ldr	r3, [pc, #520]	; (800d910 <tcp_receive+0x884>)
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70c:	6879      	ldr	r1, [r7, #4]
 800d70e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d710:	440b      	add	r3, r1
 800d712:	1ad3      	subs	r3, r2, r3
 800d714:	3301      	adds	r3, #1
 800d716:	2b00      	cmp	r3, #0
 800d718:	f300 841e 	bgt.w	800df58 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d720:	4b7b      	ldr	r3, [pc, #492]	; (800d910 <tcp_receive+0x884>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	429a      	cmp	r2, r3
 800d726:	f040 829a 	bne.w	800dc5e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d72a:	4b7a      	ldr	r3, [pc, #488]	; (800d914 <tcp_receive+0x888>)
 800d72c:	891c      	ldrh	r4, [r3, #8]
 800d72e:	4b79      	ldr	r3, [pc, #484]	; (800d914 <tcp_receive+0x888>)
 800d730:	68db      	ldr	r3, [r3, #12]
 800d732:	899b      	ldrh	r3, [r3, #12]
 800d734:	b29b      	uxth	r3, r3
 800d736:	4618      	mov	r0, r3
 800d738:	f7fb f874 	bl	8008824 <lwip_htons>
 800d73c:	4603      	mov	r3, r0
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	f003 0303 	and.w	r3, r3, #3
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <tcp_receive+0x6c0>
 800d748:	2301      	movs	r3, #1
 800d74a:	e000      	b.n	800d74e <tcp_receive+0x6c2>
 800d74c:	2300      	movs	r3, #0
 800d74e:	4423      	add	r3, r4
 800d750:	b29a      	uxth	r2, r3
 800d752:	4b71      	ldr	r3, [pc, #452]	; (800d918 <tcp_receive+0x88c>)
 800d754:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d75a:	4b6f      	ldr	r3, [pc, #444]	; (800d918 <tcp_receive+0x88c>)
 800d75c:	881b      	ldrh	r3, [r3, #0]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d275      	bcs.n	800d84e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d762:	4b6c      	ldr	r3, [pc, #432]	; (800d914 <tcp_receive+0x888>)
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	899b      	ldrh	r3, [r3, #12]
 800d768:	b29b      	uxth	r3, r3
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fb f85a 	bl	8008824 <lwip_htons>
 800d770:	4603      	mov	r3, r0
 800d772:	b2db      	uxtb	r3, r3
 800d774:	f003 0301 	and.w	r3, r3, #1
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d01f      	beq.n	800d7bc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d77c:	4b65      	ldr	r3, [pc, #404]	; (800d914 <tcp_receive+0x888>)
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	899b      	ldrh	r3, [r3, #12]
 800d782:	b29b      	uxth	r3, r3
 800d784:	b21b      	sxth	r3, r3
 800d786:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d78a:	b21c      	sxth	r4, r3
 800d78c:	4b61      	ldr	r3, [pc, #388]	; (800d914 <tcp_receive+0x888>)
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	899b      	ldrh	r3, [r3, #12]
 800d792:	b29b      	uxth	r3, r3
 800d794:	4618      	mov	r0, r3
 800d796:	f7fb f845 	bl	8008824 <lwip_htons>
 800d79a:	4603      	mov	r3, r0
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fb f83c 	bl	8008824 <lwip_htons>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	b21b      	sxth	r3, r3
 800d7b0:	4323      	orrs	r3, r4
 800d7b2:	b21a      	sxth	r2, r3
 800d7b4:	4b57      	ldr	r3, [pc, #348]	; (800d914 <tcp_receive+0x888>)
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	b292      	uxth	r2, r2
 800d7ba:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d7c0:	4b54      	ldr	r3, [pc, #336]	; (800d914 <tcp_receive+0x888>)
 800d7c2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d7c4:	4b53      	ldr	r3, [pc, #332]	; (800d914 <tcp_receive+0x888>)
 800d7c6:	68db      	ldr	r3, [r3, #12]
 800d7c8:	899b      	ldrh	r3, [r3, #12]
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fb f829 	bl	8008824 <lwip_htons>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	f003 0302 	and.w	r3, r3, #2
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d005      	beq.n	800d7ea <tcp_receive+0x75e>
            inseg.len -= 1;
 800d7de:	4b4d      	ldr	r3, [pc, #308]	; (800d914 <tcp_receive+0x888>)
 800d7e0:	891b      	ldrh	r3, [r3, #8]
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	b29a      	uxth	r2, r3
 800d7e6:	4b4b      	ldr	r3, [pc, #300]	; (800d914 <tcp_receive+0x888>)
 800d7e8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d7ea:	4b4a      	ldr	r3, [pc, #296]	; (800d914 <tcp_receive+0x888>)
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	4a49      	ldr	r2, [pc, #292]	; (800d914 <tcp_receive+0x888>)
 800d7f0:	8912      	ldrh	r2, [r2, #8]
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7fc f943 	bl	8009a80 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d7fa:	4b46      	ldr	r3, [pc, #280]	; (800d914 <tcp_receive+0x888>)
 800d7fc:	891c      	ldrh	r4, [r3, #8]
 800d7fe:	4b45      	ldr	r3, [pc, #276]	; (800d914 <tcp_receive+0x888>)
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	899b      	ldrh	r3, [r3, #12]
 800d804:	b29b      	uxth	r3, r3
 800d806:	4618      	mov	r0, r3
 800d808:	f7fb f80c 	bl	8008824 <lwip_htons>
 800d80c:	4603      	mov	r3, r0
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	f003 0303 	and.w	r3, r3, #3
 800d814:	2b00      	cmp	r3, #0
 800d816:	d001      	beq.n	800d81c <tcp_receive+0x790>
 800d818:	2301      	movs	r3, #1
 800d81a:	e000      	b.n	800d81e <tcp_receive+0x792>
 800d81c:	2300      	movs	r3, #0
 800d81e:	4423      	add	r3, r4
 800d820:	b29a      	uxth	r2, r3
 800d822:	4b3d      	ldr	r3, [pc, #244]	; (800d918 <tcp_receive+0x88c>)
 800d824:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d826:	4b3c      	ldr	r3, [pc, #240]	; (800d918 <tcp_receive+0x88c>)
 800d828:	881b      	ldrh	r3, [r3, #0]
 800d82a:	461a      	mov	r2, r3
 800d82c:	4b38      	ldr	r3, [pc, #224]	; (800d910 <tcp_receive+0x884>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	441a      	add	r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d836:	6879      	ldr	r1, [r7, #4]
 800d838:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d83a:	440b      	add	r3, r1
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d006      	beq.n	800d84e <tcp_receive+0x7c2>
 800d840:	4b36      	ldr	r3, [pc, #216]	; (800d91c <tcp_receive+0x890>)
 800d842:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d846:	4936      	ldr	r1, [pc, #216]	; (800d920 <tcp_receive+0x894>)
 800d848:	4836      	ldr	r0, [pc, #216]	; (800d924 <tcp_receive+0x898>)
 800d84a:	f005 fdc3 	bl	80133d4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d852:	2b00      	cmp	r3, #0
 800d854:	f000 80e7 	beq.w	800da26 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d858:	4b2e      	ldr	r3, [pc, #184]	; (800d914 <tcp_receive+0x888>)
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	899b      	ldrh	r3, [r3, #12]
 800d85e:	b29b      	uxth	r3, r3
 800d860:	4618      	mov	r0, r3
 800d862:	f7fa ffdf 	bl	8008824 <lwip_htons>
 800d866:	4603      	mov	r3, r0
 800d868:	b2db      	uxtb	r3, r3
 800d86a:	f003 0301 	and.w	r3, r3, #1
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d010      	beq.n	800d894 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d872:	e00a      	b.n	800d88a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d878:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f7fd fd96 	bl	800b3b6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1f0      	bne.n	800d874 <tcp_receive+0x7e8>
 800d892:	e0c8      	b.n	800da26 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d898:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d89a:	e052      	b.n	800d942 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	899b      	ldrh	r3, [r3, #12]
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7fa ffbd 	bl	8008824 <lwip_htons>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	f003 0301 	and.w	r3, r3, #1
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d03d      	beq.n	800d932 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d8b6:	4b17      	ldr	r3, [pc, #92]	; (800d914 <tcp_receive+0x888>)
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	899b      	ldrh	r3, [r3, #12]
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fa ffb0 	bl	8008824 <lwip_htons>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d130      	bne.n	800d932 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d8d0:	4b10      	ldr	r3, [pc, #64]	; (800d914 <tcp_receive+0x888>)
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	899b      	ldrh	r3, [r3, #12]
 800d8d6:	b29c      	uxth	r4, r3
 800d8d8:	2001      	movs	r0, #1
 800d8da:	f7fa ffa3 	bl	8008824 <lwip_htons>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	4b0c      	ldr	r3, [pc, #48]	; (800d914 <tcp_receive+0x888>)
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	4322      	orrs	r2, r4
 800d8e8:	b292      	uxth	r2, r2
 800d8ea:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d8ec:	4b09      	ldr	r3, [pc, #36]	; (800d914 <tcp_receive+0x888>)
 800d8ee:	891c      	ldrh	r4, [r3, #8]
 800d8f0:	4b08      	ldr	r3, [pc, #32]	; (800d914 <tcp_receive+0x888>)
 800d8f2:	68db      	ldr	r3, [r3, #12]
 800d8f4:	899b      	ldrh	r3, [r3, #12]
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fa ff93 	bl	8008824 <lwip_htons>
 800d8fe:	4603      	mov	r3, r0
 800d900:	b2db      	uxtb	r3, r3
 800d902:	f003 0303 	and.w	r3, r3, #3
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00e      	beq.n	800d928 <tcp_receive+0x89c>
 800d90a:	2301      	movs	r3, #1
 800d90c:	e00d      	b.n	800d92a <tcp_receive+0x89e>
 800d90e:	bf00      	nop
 800d910:	200002dc 	.word	0x200002dc
 800d914:	200002bc 	.word	0x200002bc
 800d918:	200002e6 	.word	0x200002e6
 800d91c:	08017d14 	.word	0x08017d14
 800d920:	080180bc 	.word	0x080180bc
 800d924:	08017d60 	.word	0x08017d60
 800d928:	2300      	movs	r3, #0
 800d92a:	4423      	add	r3, r4
 800d92c:	b29a      	uxth	r2, r3
 800d92e:	4b98      	ldr	r3, [pc, #608]	; (800db90 <tcp_receive+0xb04>)
 800d930:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d934:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d93c:	6938      	ldr	r0, [r7, #16]
 800d93e:	f7fd fd3a 	bl	800b3b6 <tcp_seg_free>
            while (next &&
 800d942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00e      	beq.n	800d966 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d948:	4b91      	ldr	r3, [pc, #580]	; (800db90 <tcp_receive+0xb04>)
 800d94a:	881b      	ldrh	r3, [r3, #0]
 800d94c:	461a      	mov	r2, r3
 800d94e:	4b91      	ldr	r3, [pc, #580]	; (800db94 <tcp_receive+0xb08>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	441a      	add	r2, r3
 800d954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d95c:	8909      	ldrh	r1, [r1, #8]
 800d95e:	440b      	add	r3, r1
 800d960:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d962:	2b00      	cmp	r3, #0
 800d964:	da9a      	bge.n	800d89c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d059      	beq.n	800da20 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800d96c:	4b88      	ldr	r3, [pc, #544]	; (800db90 <tcp_receive+0xb04>)
 800d96e:	881b      	ldrh	r3, [r3, #0]
 800d970:	461a      	mov	r2, r3
 800d972:	4b88      	ldr	r3, [pc, #544]	; (800db94 <tcp_receive+0xb08>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	441a      	add	r2, r3
 800d978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d980:	2b00      	cmp	r3, #0
 800d982:	dd4d      	ble.n	800da20 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	4b81      	ldr	r3, [pc, #516]	; (800db94 <tcp_receive+0xb08>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	b29b      	uxth	r3, r3
 800d992:	1ad3      	subs	r3, r2, r3
 800d994:	b29a      	uxth	r2, r3
 800d996:	4b80      	ldr	r3, [pc, #512]	; (800db98 <tcp_receive+0xb0c>)
 800d998:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d99a:	4b7f      	ldr	r3, [pc, #508]	; (800db98 <tcp_receive+0xb0c>)
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	899b      	ldrh	r3, [r3, #12]
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fa ff3e 	bl	8008824 <lwip_htons>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	f003 0302 	and.w	r3, r3, #2
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d005      	beq.n	800d9c0 <tcp_receive+0x934>
                inseg.len -= 1;
 800d9b4:	4b78      	ldr	r3, [pc, #480]	; (800db98 <tcp_receive+0xb0c>)
 800d9b6:	891b      	ldrh	r3, [r3, #8]
 800d9b8:	3b01      	subs	r3, #1
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	4b76      	ldr	r3, [pc, #472]	; (800db98 <tcp_receive+0xb0c>)
 800d9be:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d9c0:	4b75      	ldr	r3, [pc, #468]	; (800db98 <tcp_receive+0xb0c>)
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	4a74      	ldr	r2, [pc, #464]	; (800db98 <tcp_receive+0xb0c>)
 800d9c6:	8912      	ldrh	r2, [r2, #8]
 800d9c8:	4611      	mov	r1, r2
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fc f858 	bl	8009a80 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d9d0:	4b71      	ldr	r3, [pc, #452]	; (800db98 <tcp_receive+0xb0c>)
 800d9d2:	891c      	ldrh	r4, [r3, #8]
 800d9d4:	4b70      	ldr	r3, [pc, #448]	; (800db98 <tcp_receive+0xb0c>)
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	899b      	ldrh	r3, [r3, #12]
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7fa ff21 	bl	8008824 <lwip_htons>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	f003 0303 	and.w	r3, r3, #3
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <tcp_receive+0x966>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	e000      	b.n	800d9f4 <tcp_receive+0x968>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	4423      	add	r3, r4
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	4b65      	ldr	r3, [pc, #404]	; (800db90 <tcp_receive+0xb04>)
 800d9fa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d9fc:	4b64      	ldr	r3, [pc, #400]	; (800db90 <tcp_receive+0xb04>)
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	461a      	mov	r2, r3
 800da02:	4b64      	ldr	r3, [pc, #400]	; (800db94 <tcp_receive+0xb08>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	441a      	add	r2, r3
 800da08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d006      	beq.n	800da20 <tcp_receive+0x994>
 800da12:	4b62      	ldr	r3, [pc, #392]	; (800db9c <tcp_receive+0xb10>)
 800da14:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800da18:	4961      	ldr	r1, [pc, #388]	; (800dba0 <tcp_receive+0xb14>)
 800da1a:	4862      	ldr	r0, [pc, #392]	; (800dba4 <tcp_receive+0xb18>)
 800da1c:	f005 fcda 	bl	80133d4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da24:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800da26:	4b5a      	ldr	r3, [pc, #360]	; (800db90 <tcp_receive+0xb04>)
 800da28:	881b      	ldrh	r3, [r3, #0]
 800da2a:	461a      	mov	r2, r3
 800da2c:	4b59      	ldr	r3, [pc, #356]	; (800db94 <tcp_receive+0xb08>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	441a      	add	r2, r3
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800da3a:	4b55      	ldr	r3, [pc, #340]	; (800db90 <tcp_receive+0xb04>)
 800da3c:	881b      	ldrh	r3, [r3, #0]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d206      	bcs.n	800da50 <tcp_receive+0x9c4>
 800da42:	4b56      	ldr	r3, [pc, #344]	; (800db9c <tcp_receive+0xb10>)
 800da44:	f240 6207 	movw	r2, #1543	; 0x607
 800da48:	4957      	ldr	r1, [pc, #348]	; (800dba8 <tcp_receive+0xb1c>)
 800da4a:	4856      	ldr	r0, [pc, #344]	; (800dba4 <tcp_receive+0xb18>)
 800da4c:	f005 fcc2 	bl	80133d4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800da54:	4b4e      	ldr	r3, [pc, #312]	; (800db90 <tcp_receive+0xb04>)
 800da56:	881b      	ldrh	r3, [r3, #0]
 800da58:	1ad3      	subs	r3, r2, r3
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f7fc ffc9 	bl	800a9f8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800da66:	4b4c      	ldr	r3, [pc, #304]	; (800db98 <tcp_receive+0xb0c>)
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	891b      	ldrh	r3, [r3, #8]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d006      	beq.n	800da7e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800da70:	4b49      	ldr	r3, [pc, #292]	; (800db98 <tcp_receive+0xb0c>)
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	4a4d      	ldr	r2, [pc, #308]	; (800dbac <tcp_receive+0xb20>)
 800da76:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800da78:	4b47      	ldr	r3, [pc, #284]	; (800db98 <tcp_receive+0xb0c>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800da7e:	4b46      	ldr	r3, [pc, #280]	; (800db98 <tcp_receive+0xb0c>)
 800da80:	68db      	ldr	r3, [r3, #12]
 800da82:	899b      	ldrh	r3, [r3, #12]
 800da84:	b29b      	uxth	r3, r3
 800da86:	4618      	mov	r0, r3
 800da88:	f7fa fecc 	bl	8008824 <lwip_htons>
 800da8c:	4603      	mov	r3, r0
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	f003 0301 	and.w	r3, r3, #1
 800da94:	2b00      	cmp	r3, #0
 800da96:	f000 80b8 	beq.w	800dc0a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800da9a:	4b45      	ldr	r3, [pc, #276]	; (800dbb0 <tcp_receive+0xb24>)
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	f043 0320 	orr.w	r3, r3, #32
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	4b42      	ldr	r3, [pc, #264]	; (800dbb0 <tcp_receive+0xb24>)
 800daa6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800daa8:	e0af      	b.n	800dc0a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daae:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dab4:	68db      	ldr	r3, [r3, #12]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	4a36      	ldr	r2, [pc, #216]	; (800db94 <tcp_receive+0xb08>)
 800daba:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	891b      	ldrh	r3, [r3, #8]
 800dac0:	461c      	mov	r4, r3
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	899b      	ldrh	r3, [r3, #12]
 800dac8:	b29b      	uxth	r3, r3
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fa feaa 	bl	8008824 <lwip_htons>
 800dad0:	4603      	mov	r3, r0
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	f003 0303 	and.w	r3, r3, #3
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <tcp_receive+0xa54>
 800dadc:	2301      	movs	r3, #1
 800dade:	e000      	b.n	800dae2 <tcp_receive+0xa56>
 800dae0:	2300      	movs	r3, #0
 800dae2:	191a      	adds	r2, r3, r4
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae8:	441a      	add	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800daf2:	461c      	mov	r4, r3
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	891b      	ldrh	r3, [r3, #8]
 800daf8:	461d      	mov	r5, r3
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	68db      	ldr	r3, [r3, #12]
 800dafe:	899b      	ldrh	r3, [r3, #12]
 800db00:	b29b      	uxth	r3, r3
 800db02:	4618      	mov	r0, r3
 800db04:	f7fa fe8e 	bl	8008824 <lwip_htons>
 800db08:	4603      	mov	r3, r0
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	f003 0303 	and.w	r3, r3, #3
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <tcp_receive+0xa8c>
 800db14:	2301      	movs	r3, #1
 800db16:	e000      	b.n	800db1a <tcp_receive+0xa8e>
 800db18:	2300      	movs	r3, #0
 800db1a:	442b      	add	r3, r5
 800db1c:	429c      	cmp	r4, r3
 800db1e:	d206      	bcs.n	800db2e <tcp_receive+0xaa2>
 800db20:	4b1e      	ldr	r3, [pc, #120]	; (800db9c <tcp_receive+0xb10>)
 800db22:	f240 622b 	movw	r2, #1579	; 0x62b
 800db26:	4923      	ldr	r1, [pc, #140]	; (800dbb4 <tcp_receive+0xb28>)
 800db28:	481e      	ldr	r0, [pc, #120]	; (800dba4 <tcp_receive+0xb18>)
 800db2a:	f005 fc53 	bl	80133d4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	891b      	ldrh	r3, [r3, #8]
 800db32:	461c      	mov	r4, r3
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	899b      	ldrh	r3, [r3, #12]
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7fa fe71 	bl	8008824 <lwip_htons>
 800db42:	4603      	mov	r3, r0
 800db44:	b2db      	uxtb	r3, r3
 800db46:	f003 0303 	and.w	r3, r3, #3
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d001      	beq.n	800db52 <tcp_receive+0xac6>
 800db4e:	2301      	movs	r3, #1
 800db50:	e000      	b.n	800db54 <tcp_receive+0xac8>
 800db52:	2300      	movs	r3, #0
 800db54:	1919      	adds	r1, r3, r4
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800db5a:	b28b      	uxth	r3, r1
 800db5c:	1ad3      	subs	r3, r2, r3
 800db5e:	b29a      	uxth	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7fc ff47 	bl	800a9f8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	891b      	ldrh	r3, [r3, #8]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d028      	beq.n	800dbc6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800db74:	4b0d      	ldr	r3, [pc, #52]	; (800dbac <tcp_receive+0xb20>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d01d      	beq.n	800dbb8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800db7c:	4b0b      	ldr	r3, [pc, #44]	; (800dbac <tcp_receive+0xb20>)
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	4619      	mov	r1, r3
 800db86:	4610      	mov	r0, r2
 800db88:	f7fc f9c2 	bl	8009f10 <pbuf_cat>
 800db8c:	e018      	b.n	800dbc0 <tcp_receive+0xb34>
 800db8e:	bf00      	nop
 800db90:	200002e6 	.word	0x200002e6
 800db94:	200002dc 	.word	0x200002dc
 800db98:	200002bc 	.word	0x200002bc
 800db9c:	08017d14 	.word	0x08017d14
 800dba0:	080180f4 	.word	0x080180f4
 800dba4:	08017d60 	.word	0x08017d60
 800dba8:	08018130 	.word	0x08018130
 800dbac:	200002ec 	.word	0x200002ec
 800dbb0:	200002e9 	.word	0x200002e9
 800dbb4:	08018150 	.word	0x08018150
            } else {
              recv_data = cseg->p;
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	4a70      	ldr	r2, [pc, #448]	; (800dd80 <tcp_receive+0xcf4>)
 800dbbe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	899b      	ldrh	r3, [r3, #12]
 800dbcc:	b29b      	uxth	r3, r3
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fa fe28 	bl	8008824 <lwip_htons>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	f003 0301 	and.w	r3, r3, #1
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00d      	beq.n	800dbfc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800dbe0:	4b68      	ldr	r3, [pc, #416]	; (800dd84 <tcp_receive+0xcf8>)
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	f043 0320 	orr.w	r3, r3, #32
 800dbe8:	b2da      	uxtb	r2, r3
 800dbea:	4b66      	ldr	r3, [pc, #408]	; (800dd84 <tcp_receive+0xcf8>)
 800dbec:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	7d1b      	ldrb	r3, [r3, #20]
 800dbf2:	2b04      	cmp	r3, #4
 800dbf4:	d102      	bne.n	800dbfc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2207      	movs	r2, #7
 800dbfa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800dc04:	68b8      	ldr	r0, [r7, #8]
 800dc06:	f7fd fbd6 	bl	800b3b6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d008      	beq.n	800dc24 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	685a      	ldr	r2, [r3, #4]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	f43f af43 	beq.w	800daaa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	8b5b      	ldrh	r3, [r3, #26]
 800dc28:	f003 0301 	and.w	r3, r3, #1
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d00e      	beq.n	800dc4e <tcp_receive+0xbc2>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	8b5b      	ldrh	r3, [r3, #26]
 800dc34:	f023 0301 	bic.w	r3, r3, #1
 800dc38:	b29a      	uxth	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	835a      	strh	r2, [r3, #26]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	8b5b      	ldrh	r3, [r3, #26]
 800dc42:	f043 0302 	orr.w	r3, r3, #2
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800dc4c:	e188      	b.n	800df60 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	8b5b      	ldrh	r3, [r3, #26]
 800dc52:	f043 0301 	orr.w	r3, r3, #1
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800dc5c:	e180      	b.n	800df60 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d106      	bne.n	800dc74 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800dc66:	4848      	ldr	r0, [pc, #288]	; (800dd88 <tcp_receive+0xcfc>)
 800dc68:	f7fd fbbe 	bl	800b3e8 <tcp_seg_copy>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	675a      	str	r2, [r3, #116]	; 0x74
 800dc72:	e16d      	b.n	800df50 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800dc74:	2300      	movs	r3, #0
 800dc76:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc7c:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc7e:	e157      	b.n	800df30 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800dc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc82:	68db      	ldr	r3, [r3, #12]
 800dc84:	685a      	ldr	r2, [r3, #4]
 800dc86:	4b41      	ldr	r3, [pc, #260]	; (800dd8c <tcp_receive+0xd00>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d11d      	bne.n	800dcca <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800dc8e:	4b3e      	ldr	r3, [pc, #248]	; (800dd88 <tcp_receive+0xcfc>)
 800dc90:	891a      	ldrh	r2, [r3, #8]
 800dc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc94:	891b      	ldrh	r3, [r3, #8]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	f240 814f 	bls.w	800df3a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dc9c:	483a      	ldr	r0, [pc, #232]	; (800dd88 <tcp_receive+0xcfc>)
 800dc9e:	f7fd fba3 	bl	800b3e8 <tcp_seg_copy>
 800dca2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f000 8149 	beq.w	800df3e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800dcac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d003      	beq.n	800dcba <tcp_receive+0xc2e>
                    prev->next = cseg;
 800dcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb4:	697a      	ldr	r2, [r7, #20]
 800dcb6:	601a      	str	r2, [r3, #0]
 800dcb8:	e002      	b.n	800dcc0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	697a      	ldr	r2, [r7, #20]
 800dcbe:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800dcc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dcc2:	6978      	ldr	r0, [r7, #20]
 800dcc4:	f7ff f8de 	bl	800ce84 <tcp_oos_insert_segment>
                }
                break;
 800dcc8:	e139      	b.n	800df3e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800dcca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d117      	bne.n	800dd00 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800dcd0:	4b2e      	ldr	r3, [pc, #184]	; (800dd8c <tcp_receive+0xd00>)
 800dcd2:	681a      	ldr	r2, [r3, #0]
 800dcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd6:	68db      	ldr	r3, [r3, #12]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	1ad3      	subs	r3, r2, r3
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	da57      	bge.n	800dd90 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dce0:	4829      	ldr	r0, [pc, #164]	; (800dd88 <tcp_receive+0xcfc>)
 800dce2:	f7fd fb81 	bl	800b3e8 <tcp_seg_copy>
 800dce6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	f000 8129 	beq.w	800df42 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	69ba      	ldr	r2, [r7, #24]
 800dcf4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800dcf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dcf8:	69b8      	ldr	r0, [r7, #24]
 800dcfa:	f7ff f8c3 	bl	800ce84 <tcp_oos_insert_segment>
                  }
                  break;
 800dcfe:	e120      	b.n	800df42 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800dd00:	4b22      	ldr	r3, [pc, #136]	; (800dd8c <tcp_receive+0xd00>)
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd06:	68db      	ldr	r3, [r3, #12]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	1ad3      	subs	r3, r2, r3
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	db3e      	blt.n	800dd90 <tcp_receive+0xd04>
 800dd12:	4b1e      	ldr	r3, [pc, #120]	; (800dd8c <tcp_receive+0xd00>)
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	1ad3      	subs	r3, r2, r3
 800dd1e:	3301      	adds	r3, #1
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	dc35      	bgt.n	800dd90 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dd24:	4818      	ldr	r0, [pc, #96]	; (800dd88 <tcp_receive+0xcfc>)
 800dd26:	f7fd fb5f 	bl	800b3e8 <tcp_seg_copy>
 800dd2a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800dd2c:	69fb      	ldr	r3, [r7, #28]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	f000 8109 	beq.w	800df46 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800dd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd3c:	8912      	ldrh	r2, [r2, #8]
 800dd3e:	441a      	add	r2, r3
 800dd40:	4b12      	ldr	r3, [pc, #72]	; (800dd8c <tcp_receive+0xd00>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	dd12      	ble.n	800dd70 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800dd4a:	4b10      	ldr	r3, [pc, #64]	; (800dd8c <tcp_receive+0xd00>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	b29a      	uxth	r2, r3
 800dd5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd5e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800dd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd62:	685a      	ldr	r2, [r3, #4]
 800dd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd66:	891b      	ldrh	r3, [r3, #8]
 800dd68:	4619      	mov	r1, r3
 800dd6a:	4610      	mov	r0, r2
 800dd6c:	f7fb fe88 	bl	8009a80 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800dd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd72:	69fa      	ldr	r2, [r7, #28]
 800dd74:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800dd76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dd78:	69f8      	ldr	r0, [r7, #28]
 800dd7a:	f7ff f883 	bl	800ce84 <tcp_oos_insert_segment>
                  }
                  break;
 800dd7e:	e0e2      	b.n	800df46 <tcp_receive+0xeba>
 800dd80:	200002ec 	.word	0x200002ec
 800dd84:	200002e9 	.word	0x200002e9
 800dd88:	200002bc 	.word	0x200002bc
 800dd8c:	200002dc 	.word	0x200002dc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800dd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd92:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800dd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f040 80c6 	bne.w	800df2a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800dd9e:	4b80      	ldr	r3, [pc, #512]	; (800dfa0 <tcp_receive+0xf14>)
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	f340 80bd 	ble.w	800df2a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ddb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	899b      	ldrh	r3, [r3, #12]
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7fa fd33 	bl	8008824 <lwip_htons>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	f003 0301 	and.w	r3, r3, #1
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f040 80bf 	bne.w	800df4a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ddcc:	4875      	ldr	r0, [pc, #468]	; (800dfa4 <tcp_receive+0xf18>)
 800ddce:	f7fd fb0b 	bl	800b3e8 <tcp_seg_copy>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ddd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	f000 80b6 	beq.w	800df4e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800dde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddea:	8912      	ldrh	r2, [r2, #8]
 800ddec:	441a      	add	r2, r3
 800ddee:	4b6c      	ldr	r3, [pc, #432]	; (800dfa0 <tcp_receive+0xf14>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	dd12      	ble.n	800de1e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ddf8:	4b69      	ldr	r3, [pc, #420]	; (800dfa0 <tcp_receive+0xf14>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	b29b      	uxth	r3, r3
 800de06:	1ad3      	subs	r3, r2, r3
 800de08:	b29a      	uxth	r2, r3
 800de0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800de0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de10:	685a      	ldr	r2, [r3, #4]
 800de12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de14:	891b      	ldrh	r3, [r3, #8]
 800de16:	4619      	mov	r1, r3
 800de18:	4610      	mov	r0, r2
 800de1a:	f7fb fe31 	bl	8009a80 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800de1e:	4b62      	ldr	r3, [pc, #392]	; (800dfa8 <tcp_receive+0xf1c>)
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	461a      	mov	r2, r3
 800de24:	4b5e      	ldr	r3, [pc, #376]	; (800dfa0 <tcp_receive+0xf14>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	441a      	add	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de2e:	6879      	ldr	r1, [r7, #4]
 800de30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800de32:	440b      	add	r3, r1
 800de34:	1ad3      	subs	r3, r2, r3
 800de36:	2b00      	cmp	r3, #0
 800de38:	f340 8089 	ble.w	800df4e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800de3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	899b      	ldrh	r3, [r3, #12]
 800de44:	b29b      	uxth	r3, r3
 800de46:	4618      	mov	r0, r3
 800de48:	f7fa fcec 	bl	8008824 <lwip_htons>
 800de4c:	4603      	mov	r3, r0
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	f003 0301 	and.w	r3, r3, #1
 800de54:	2b00      	cmp	r3, #0
 800de56:	d022      	beq.n	800de9e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800de58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	899b      	ldrh	r3, [r3, #12]
 800de60:	b29b      	uxth	r3, r3
 800de62:	b21b      	sxth	r3, r3
 800de64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800de68:	b21c      	sxth	r4, r3
 800de6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	899b      	ldrh	r3, [r3, #12]
 800de72:	b29b      	uxth	r3, r3
 800de74:	4618      	mov	r0, r3
 800de76:	f7fa fcd5 	bl	8008824 <lwip_htons>
 800de7a:	4603      	mov	r3, r0
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	b29b      	uxth	r3, r3
 800de80:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800de84:	b29b      	uxth	r3, r3
 800de86:	4618      	mov	r0, r3
 800de88:	f7fa fccc 	bl	8008824 <lwip_htons>
 800de8c:	4603      	mov	r3, r0
 800de8e:	b21b      	sxth	r3, r3
 800de90:	4323      	orrs	r3, r4
 800de92:	b21a      	sxth	r2, r3
 800de94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	b292      	uxth	r2, r2
 800de9c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea2:	b29a      	uxth	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dea8:	4413      	add	r3, r2
 800deaa:	b299      	uxth	r1, r3
 800deac:	4b3c      	ldr	r3, [pc, #240]	; (800dfa0 <tcp_receive+0xf14>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	1a8a      	subs	r2, r1, r2
 800deb8:	b292      	uxth	r2, r2
 800deba:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800debc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	685a      	ldr	r2, [r3, #4]
 800dec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	891b      	ldrh	r3, [r3, #8]
 800dec8:	4619      	mov	r1, r3
 800deca:	4610      	mov	r0, r2
 800decc:	f7fb fdd8 	bl	8009a80 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ded0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	891c      	ldrh	r4, [r3, #8]
 800ded6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	899b      	ldrh	r3, [r3, #12]
 800dede:	b29b      	uxth	r3, r3
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7fa fc9f 	bl	8008824 <lwip_htons>
 800dee6:	4603      	mov	r3, r0
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	f003 0303 	and.w	r3, r3, #3
 800deee:	2b00      	cmp	r3, #0
 800def0:	d001      	beq.n	800def6 <tcp_receive+0xe6a>
 800def2:	2301      	movs	r3, #1
 800def4:	e000      	b.n	800def8 <tcp_receive+0xe6c>
 800def6:	2300      	movs	r3, #0
 800def8:	4423      	add	r3, r4
 800defa:	b29a      	uxth	r2, r3
 800defc:	4b2a      	ldr	r3, [pc, #168]	; (800dfa8 <tcp_receive+0xf1c>)
 800defe:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800df00:	4b29      	ldr	r3, [pc, #164]	; (800dfa8 <tcp_receive+0xf1c>)
 800df02:	881b      	ldrh	r3, [r3, #0]
 800df04:	461a      	mov	r2, r3
 800df06:	4b26      	ldr	r3, [pc, #152]	; (800dfa0 <tcp_receive+0xf14>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	441a      	add	r2, r3
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df10:	6879      	ldr	r1, [r7, #4]
 800df12:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800df14:	440b      	add	r3, r1
 800df16:	429a      	cmp	r2, r3
 800df18:	d019      	beq.n	800df4e <tcp_receive+0xec2>
 800df1a:	4b24      	ldr	r3, [pc, #144]	; (800dfac <tcp_receive+0xf20>)
 800df1c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800df20:	4923      	ldr	r1, [pc, #140]	; (800dfb0 <tcp_receive+0xf24>)
 800df22:	4824      	ldr	r0, [pc, #144]	; (800dfb4 <tcp_receive+0xf28>)
 800df24:	f005 fa56 	bl	80133d4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800df28:	e011      	b.n	800df4e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800df2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	63bb      	str	r3, [r7, #56]	; 0x38
 800df30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df32:	2b00      	cmp	r3, #0
 800df34:	f47f aea4 	bne.w	800dc80 <tcp_receive+0xbf4>
 800df38:	e00a      	b.n	800df50 <tcp_receive+0xec4>
                break;
 800df3a:	bf00      	nop
 800df3c:	e008      	b.n	800df50 <tcp_receive+0xec4>
                break;
 800df3e:	bf00      	nop
 800df40:	e006      	b.n	800df50 <tcp_receive+0xec4>
                  break;
 800df42:	bf00      	nop
 800df44:	e004      	b.n	800df50 <tcp_receive+0xec4>
                  break;
 800df46:	bf00      	nop
 800df48:	e002      	b.n	800df50 <tcp_receive+0xec4>
                  break;
 800df4a:	bf00      	nop
 800df4c:	e000      	b.n	800df50 <tcp_receive+0xec4>
                break;
 800df4e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f001 fa33 	bl	800f3bc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800df56:	e003      	b.n	800df60 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f001 fa2f 	bl	800f3bc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800df5e:	e01a      	b.n	800df96 <tcp_receive+0xf0a>
 800df60:	e019      	b.n	800df96 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800df62:	4b0f      	ldr	r3, [pc, #60]	; (800dfa0 <tcp_receive+0xf14>)
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df6a:	1ad3      	subs	r3, r2, r3
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	db0a      	blt.n	800df86 <tcp_receive+0xefa>
 800df70:	4b0b      	ldr	r3, [pc, #44]	; (800dfa0 <tcp_receive+0xf14>)
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df78:	6879      	ldr	r1, [r7, #4]
 800df7a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800df7c:	440b      	add	r3, r1
 800df7e:	1ad3      	subs	r3, r2, r3
 800df80:	3301      	adds	r3, #1
 800df82:	2b00      	cmp	r3, #0
 800df84:	dd07      	ble.n	800df96 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	8b5b      	ldrh	r3, [r3, #26]
 800df8a:	f043 0302 	orr.w	r3, r3, #2
 800df8e:	b29a      	uxth	r2, r3
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800df94:	e7ff      	b.n	800df96 <tcp_receive+0xf0a>
 800df96:	bf00      	nop
 800df98:	3750      	adds	r7, #80	; 0x50
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bdb0      	pop	{r4, r5, r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	200002dc 	.word	0x200002dc
 800dfa4:	200002bc 	.word	0x200002bc
 800dfa8:	200002e6 	.word	0x200002e6
 800dfac:	08017d14 	.word	0x08017d14
 800dfb0:	080180bc 	.word	0x080180bc
 800dfb4:	08017d60 	.word	0x08017d60

0800dfb8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800dfbe:	4b15      	ldr	r3, [pc, #84]	; (800e014 <tcp_get_next_optbyte+0x5c>)
 800dfc0:	881b      	ldrh	r3, [r3, #0]
 800dfc2:	1c5a      	adds	r2, r3, #1
 800dfc4:	b291      	uxth	r1, r2
 800dfc6:	4a13      	ldr	r2, [pc, #76]	; (800e014 <tcp_get_next_optbyte+0x5c>)
 800dfc8:	8011      	strh	r1, [r2, #0]
 800dfca:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800dfcc:	4b12      	ldr	r3, [pc, #72]	; (800e018 <tcp_get_next_optbyte+0x60>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d004      	beq.n	800dfde <tcp_get_next_optbyte+0x26>
 800dfd4:	4b11      	ldr	r3, [pc, #68]	; (800e01c <tcp_get_next_optbyte+0x64>)
 800dfd6:	881b      	ldrh	r3, [r3, #0]
 800dfd8:	88fa      	ldrh	r2, [r7, #6]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d208      	bcs.n	800dff0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800dfde:	4b10      	ldr	r3, [pc, #64]	; (800e020 <tcp_get_next_optbyte+0x68>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	3314      	adds	r3, #20
 800dfe4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800dfe6:	88fb      	ldrh	r3, [r7, #6]
 800dfe8:	683a      	ldr	r2, [r7, #0]
 800dfea:	4413      	add	r3, r2
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	e00b      	b.n	800e008 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800dff0:	88fb      	ldrh	r3, [r7, #6]
 800dff2:	b2da      	uxtb	r2, r3
 800dff4:	4b09      	ldr	r3, [pc, #36]	; (800e01c <tcp_get_next_optbyte+0x64>)
 800dff6:	881b      	ldrh	r3, [r3, #0]
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800dffe:	4b06      	ldr	r3, [pc, #24]	; (800e018 <tcp_get_next_optbyte+0x60>)
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	797b      	ldrb	r3, [r7, #5]
 800e004:	4413      	add	r3, r2
 800e006:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e008:	4618      	mov	r0, r3
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr
 800e014:	200002d8 	.word	0x200002d8
 800e018:	200002d4 	.word	0x200002d4
 800e01c:	200002d2 	.word	0x200002d2
 800e020:	200002cc 	.word	0x200002cc

0800e024 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d106      	bne.n	800e040 <tcp_parseopt+0x1c>
 800e032:	4b32      	ldr	r3, [pc, #200]	; (800e0fc <tcp_parseopt+0xd8>)
 800e034:	f240 727d 	movw	r2, #1917	; 0x77d
 800e038:	4931      	ldr	r1, [pc, #196]	; (800e100 <tcp_parseopt+0xdc>)
 800e03a:	4832      	ldr	r0, [pc, #200]	; (800e104 <tcp_parseopt+0xe0>)
 800e03c:	f005 f9ca 	bl	80133d4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e040:	4b31      	ldr	r3, [pc, #196]	; (800e108 <tcp_parseopt+0xe4>)
 800e042:	881b      	ldrh	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d055      	beq.n	800e0f4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e048:	4b30      	ldr	r3, [pc, #192]	; (800e10c <tcp_parseopt+0xe8>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	801a      	strh	r2, [r3, #0]
 800e04e:	e045      	b.n	800e0dc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e050:	f7ff ffb2 	bl	800dfb8 <tcp_get_next_optbyte>
 800e054:	4603      	mov	r3, r0
 800e056:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e058:	7bfb      	ldrb	r3, [r7, #15]
 800e05a:	2b02      	cmp	r3, #2
 800e05c:	d006      	beq.n	800e06c <tcp_parseopt+0x48>
 800e05e:	2b02      	cmp	r3, #2
 800e060:	dc2b      	bgt.n	800e0ba <tcp_parseopt+0x96>
 800e062:	2b00      	cmp	r3, #0
 800e064:	d041      	beq.n	800e0ea <tcp_parseopt+0xc6>
 800e066:	2b01      	cmp	r3, #1
 800e068:	d127      	bne.n	800e0ba <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e06a:	e037      	b.n	800e0dc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e06c:	f7ff ffa4 	bl	800dfb8 <tcp_get_next_optbyte>
 800e070:	4603      	mov	r3, r0
 800e072:	2b04      	cmp	r3, #4
 800e074:	d13b      	bne.n	800e0ee <tcp_parseopt+0xca>
 800e076:	4b25      	ldr	r3, [pc, #148]	; (800e10c <tcp_parseopt+0xe8>)
 800e078:	881b      	ldrh	r3, [r3, #0]
 800e07a:	3301      	adds	r3, #1
 800e07c:	4a22      	ldr	r2, [pc, #136]	; (800e108 <tcp_parseopt+0xe4>)
 800e07e:	8812      	ldrh	r2, [r2, #0]
 800e080:	4293      	cmp	r3, r2
 800e082:	da34      	bge.n	800e0ee <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e084:	f7ff ff98 	bl	800dfb8 <tcp_get_next_optbyte>
 800e088:	4603      	mov	r3, r0
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	021b      	lsls	r3, r3, #8
 800e08e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e090:	f7ff ff92 	bl	800dfb8 <tcp_get_next_optbyte>
 800e094:	4603      	mov	r3, r0
 800e096:	b29a      	uxth	r2, r3
 800e098:	89bb      	ldrh	r3, [r7, #12]
 800e09a:	4313      	orrs	r3, r2
 800e09c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e09e:	89bb      	ldrh	r3, [r7, #12]
 800e0a0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e0a4:	d804      	bhi.n	800e0b0 <tcp_parseopt+0x8c>
 800e0a6:	89bb      	ldrh	r3, [r7, #12]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d001      	beq.n	800e0b0 <tcp_parseopt+0x8c>
 800e0ac:	89ba      	ldrh	r2, [r7, #12]
 800e0ae:	e001      	b.n	800e0b4 <tcp_parseopt+0x90>
 800e0b0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e0b8:	e010      	b.n	800e0dc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e0ba:	f7ff ff7d 	bl	800dfb8 <tcp_get_next_optbyte>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e0c2:	7afb      	ldrb	r3, [r7, #11]
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d914      	bls.n	800e0f2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e0c8:	7afb      	ldrb	r3, [r7, #11]
 800e0ca:	b29a      	uxth	r2, r3
 800e0cc:	4b0f      	ldr	r3, [pc, #60]	; (800e10c <tcp_parseopt+0xe8>)
 800e0ce:	881b      	ldrh	r3, [r3, #0]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	3b02      	subs	r3, #2
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	4b0c      	ldr	r3, [pc, #48]	; (800e10c <tcp_parseopt+0xe8>)
 800e0da:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e0dc:	4b0b      	ldr	r3, [pc, #44]	; (800e10c <tcp_parseopt+0xe8>)
 800e0de:	881a      	ldrh	r2, [r3, #0]
 800e0e0:	4b09      	ldr	r3, [pc, #36]	; (800e108 <tcp_parseopt+0xe4>)
 800e0e2:	881b      	ldrh	r3, [r3, #0]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d3b3      	bcc.n	800e050 <tcp_parseopt+0x2c>
 800e0e8:	e004      	b.n	800e0f4 <tcp_parseopt+0xd0>
          return;
 800e0ea:	bf00      	nop
 800e0ec:	e002      	b.n	800e0f4 <tcp_parseopt+0xd0>
            return;
 800e0ee:	bf00      	nop
 800e0f0:	e000      	b.n	800e0f4 <tcp_parseopt+0xd0>
            return;
 800e0f2:	bf00      	nop
      }
    }
  }
}
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	08017d14 	.word	0x08017d14
 800e100:	08018178 	.word	0x08018178
 800e104:	08017d60 	.word	0x08017d60
 800e108:	200002d0 	.word	0x200002d0
 800e10c:	200002d8 	.word	0x200002d8

0800e110 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e110:	b480      	push	{r7}
 800e112:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e114:	4b05      	ldr	r3, [pc, #20]	; (800e12c <tcp_trigger_input_pcb_close+0x1c>)
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	f043 0310 	orr.w	r3, r3, #16
 800e11c:	b2da      	uxtb	r2, r3
 800e11e:	4b03      	ldr	r3, [pc, #12]	; (800e12c <tcp_trigger_input_pcb_close+0x1c>)
 800e120:	701a      	strb	r2, [r3, #0]
}
 800e122:	bf00      	nop
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr
 800e12c:	200002e9 	.word	0x200002e9

0800e130 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d00a      	beq.n	800e158 <tcp_route+0x28>
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	7a1b      	ldrb	r3, [r3, #8]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d006      	beq.n	800e158 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	7a1b      	ldrb	r3, [r3, #8]
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fb fabc 	bl	80096cc <netif_get_by_index>
 800e154:	4603      	mov	r3, r0
 800e156:	e003      	b.n	800e160 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f003 f9cb 	bl	80114f4 <ip4_route>
 800e15e:	4603      	mov	r3, r0
  }
}
 800e160:	4618      	mov	r0, r3
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e168:	b590      	push	{r4, r7, lr}
 800e16a:	b087      	sub	sp, #28
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	603b      	str	r3, [r7, #0]
 800e174:	4613      	mov	r3, r2
 800e176:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d105      	bne.n	800e18a <tcp_create_segment+0x22>
 800e17e:	4b44      	ldr	r3, [pc, #272]	; (800e290 <tcp_create_segment+0x128>)
 800e180:	22a3      	movs	r2, #163	; 0xa3
 800e182:	4944      	ldr	r1, [pc, #272]	; (800e294 <tcp_create_segment+0x12c>)
 800e184:	4844      	ldr	r0, [pc, #272]	; (800e298 <tcp_create_segment+0x130>)
 800e186:	f005 f925 	bl	80133d4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d105      	bne.n	800e19c <tcp_create_segment+0x34>
 800e190:	4b3f      	ldr	r3, [pc, #252]	; (800e290 <tcp_create_segment+0x128>)
 800e192:	22a4      	movs	r2, #164	; 0xa4
 800e194:	4941      	ldr	r1, [pc, #260]	; (800e29c <tcp_create_segment+0x134>)
 800e196:	4840      	ldr	r0, [pc, #256]	; (800e298 <tcp_create_segment+0x130>)
 800e198:	f005 f91c 	bl	80133d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e19c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	f003 0304 	and.w	r3, r3, #4
 800e1a8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e1aa:	2003      	movs	r0, #3
 800e1ac:	f7fa ff90 	bl	80090d0 <memp_malloc>
 800e1b0:	6138      	str	r0, [r7, #16]
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d104      	bne.n	800e1c2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e1b8:	68b8      	ldr	r0, [r7, #8]
 800e1ba:	f7fb fde7 	bl	8009d8c <pbuf_free>
    return NULL;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	e061      	b.n	800e286 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e1c8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	68ba      	ldr	r2, [r7, #8]
 800e1d4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	891a      	ldrh	r2, [r3, #8]
 800e1da:	7dfb      	ldrb	r3, [r7, #23]
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d205      	bcs.n	800e1ee <tcp_create_segment+0x86>
 800e1e2:	4b2b      	ldr	r3, [pc, #172]	; (800e290 <tcp_create_segment+0x128>)
 800e1e4:	22b0      	movs	r2, #176	; 0xb0
 800e1e6:	492e      	ldr	r1, [pc, #184]	; (800e2a0 <tcp_create_segment+0x138>)
 800e1e8:	482b      	ldr	r0, [pc, #172]	; (800e298 <tcp_create_segment+0x130>)
 800e1ea:	f005 f8f3 	bl	80133d4 <iprintf>
  seg->len = p->tot_len - optlen;
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	891a      	ldrh	r2, [r3, #8]
 800e1f2:	7dfb      	ldrb	r3, [r7, #23]
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	b29a      	uxth	r2, r3
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e1fe:	2114      	movs	r1, #20
 800e200:	68b8      	ldr	r0, [r7, #8]
 800e202:	f7fb fd2d 	bl	8009c60 <pbuf_add_header>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d004      	beq.n	800e216 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e20c:	6938      	ldr	r0, [r7, #16]
 800e20e:	f7fd f8d2 	bl	800b3b6 <tcp_seg_free>
    return NULL;
 800e212:	2300      	movs	r3, #0
 800e214:	e037      	b.n	800e286 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	685a      	ldr	r2, [r3, #4]
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	8ada      	ldrh	r2, [r3, #22]
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	68dc      	ldr	r4, [r3, #12]
 800e228:	4610      	mov	r0, r2
 800e22a:	f7fa fafb 	bl	8008824 <lwip_htons>
 800e22e:	4603      	mov	r3, r0
 800e230:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	8b1a      	ldrh	r2, [r3, #24]
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	68dc      	ldr	r4, [r3, #12]
 800e23a:	4610      	mov	r0, r2
 800e23c:	f7fa faf2 	bl	8008824 <lwip_htons>
 800e240:	4603      	mov	r3, r0
 800e242:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	68dc      	ldr	r4, [r3, #12]
 800e248:	6838      	ldr	r0, [r7, #0]
 800e24a:	f7fa fb00 	bl	800884e <lwip_htonl>
 800e24e:	4603      	mov	r3, r0
 800e250:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e252:	7dfb      	ldrb	r3, [r7, #23]
 800e254:	089b      	lsrs	r3, r3, #2
 800e256:	b2db      	uxtb	r3, r3
 800e258:	b29b      	uxth	r3, r3
 800e25a:	3305      	adds	r3, #5
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	031b      	lsls	r3, r3, #12
 800e260:	b29a      	uxth	r2, r3
 800e262:	79fb      	ldrb	r3, [r7, #7]
 800e264:	b29b      	uxth	r3, r3
 800e266:	4313      	orrs	r3, r2
 800e268:	b29a      	uxth	r2, r3
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	68dc      	ldr	r4, [r3, #12]
 800e26e:	4610      	mov	r0, r2
 800e270:	f7fa fad8 	bl	8008824 <lwip_htons>
 800e274:	4603      	mov	r3, r0
 800e276:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	2200      	movs	r2, #0
 800e27e:	749a      	strb	r2, [r3, #18]
 800e280:	2200      	movs	r2, #0
 800e282:	74da      	strb	r2, [r3, #19]
  return seg;
 800e284:	693b      	ldr	r3, [r7, #16]
}
 800e286:	4618      	mov	r0, r3
 800e288:	371c      	adds	r7, #28
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd90      	pop	{r4, r7, pc}
 800e28e:	bf00      	nop
 800e290:	08018194 	.word	0x08018194
 800e294:	080181c8 	.word	0x080181c8
 800e298:	080181e8 	.word	0x080181e8
 800e29c:	08018210 	.word	0x08018210
 800e2a0:	08018234 	.word	0x08018234

0800e2a4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e2a4:	b590      	push	{r4, r7, lr}
 800e2a6:	b08b      	sub	sp, #44	; 0x2c
 800e2a8:	af02      	add	r7, sp, #8
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	61fb      	str	r3, [r7, #28]
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d106      	bne.n	800e2d0 <tcp_split_unsent_seg+0x2c>
 800e2c2:	4b95      	ldr	r3, [pc, #596]	; (800e518 <tcp_split_unsent_seg+0x274>)
 800e2c4:	f240 324b 	movw	r2, #843	; 0x34b
 800e2c8:	4994      	ldr	r1, [pc, #592]	; (800e51c <tcp_split_unsent_seg+0x278>)
 800e2ca:	4895      	ldr	r0, [pc, #596]	; (800e520 <tcp_split_unsent_seg+0x27c>)
 800e2cc:	f005 f882 	bl	80133d4 <iprintf>

  useg = pcb->unsent;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2d4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d102      	bne.n	800e2e2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e2e0:	e116      	b.n	800e510 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e2e2:	887b      	ldrh	r3, [r7, #2]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d109      	bne.n	800e2fc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e2e8:	4b8b      	ldr	r3, [pc, #556]	; (800e518 <tcp_split_unsent_seg+0x274>)
 800e2ea:	f240 3253 	movw	r2, #851	; 0x353
 800e2ee:	498d      	ldr	r1, [pc, #564]	; (800e524 <tcp_split_unsent_seg+0x280>)
 800e2f0:	488b      	ldr	r0, [pc, #556]	; (800e520 <tcp_split_unsent_seg+0x27c>)
 800e2f2:	f005 f86f 	bl	80133d4 <iprintf>
    return ERR_VAL;
 800e2f6:	f06f 0305 	mvn.w	r3, #5
 800e2fa:	e109      	b.n	800e510 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	891b      	ldrh	r3, [r3, #8]
 800e300:	887a      	ldrh	r2, [r7, #2]
 800e302:	429a      	cmp	r2, r3
 800e304:	d301      	bcc.n	800e30a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e306:	2300      	movs	r3, #0
 800e308:	e102      	b.n	800e510 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e30e:	887a      	ldrh	r2, [r7, #2]
 800e310:	429a      	cmp	r2, r3
 800e312:	d906      	bls.n	800e322 <tcp_split_unsent_seg+0x7e>
 800e314:	4b80      	ldr	r3, [pc, #512]	; (800e518 <tcp_split_unsent_seg+0x274>)
 800e316:	f240 325b 	movw	r2, #859	; 0x35b
 800e31a:	4983      	ldr	r1, [pc, #524]	; (800e528 <tcp_split_unsent_seg+0x284>)
 800e31c:	4880      	ldr	r0, [pc, #512]	; (800e520 <tcp_split_unsent_seg+0x27c>)
 800e31e:	f005 f859 	bl	80133d4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	891b      	ldrh	r3, [r3, #8]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d106      	bne.n	800e338 <tcp_split_unsent_seg+0x94>
 800e32a:	4b7b      	ldr	r3, [pc, #492]	; (800e518 <tcp_split_unsent_seg+0x274>)
 800e32c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e330:	497e      	ldr	r1, [pc, #504]	; (800e52c <tcp_split_unsent_seg+0x288>)
 800e332:	487b      	ldr	r0, [pc, #492]	; (800e520 <tcp_split_unsent_seg+0x27c>)
 800e334:	f005 f84e 	bl	80133d4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	7a9b      	ldrb	r3, [r3, #10]
 800e33c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e33e:	7bfb      	ldrb	r3, [r7, #15]
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	b2db      	uxtb	r3, r3
 800e344:	f003 0304 	and.w	r3, r3, #4
 800e348:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	891a      	ldrh	r2, [r3, #8]
 800e34e:	887b      	ldrh	r3, [r7, #2]
 800e350:	1ad3      	subs	r3, r2, r3
 800e352:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e354:	7bbb      	ldrb	r3, [r7, #14]
 800e356:	b29a      	uxth	r2, r3
 800e358:	89bb      	ldrh	r3, [r7, #12]
 800e35a:	4413      	add	r3, r2
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e362:	4619      	mov	r1, r3
 800e364:	2036      	movs	r0, #54	; 0x36
 800e366:	f7fb fa2d 	bl	80097c4 <pbuf_alloc>
 800e36a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	f000 80b7 	beq.w	800e4e2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	685b      	ldr	r3, [r3, #4]
 800e378:	891a      	ldrh	r2, [r3, #8]
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	891b      	ldrh	r3, [r3, #8]
 800e37e:	1ad3      	subs	r3, r2, r3
 800e380:	b29a      	uxth	r2, r3
 800e382:	887b      	ldrh	r3, [r7, #2]
 800e384:	4413      	add	r3, r2
 800e386:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	6858      	ldr	r0, [r3, #4]
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	685a      	ldr	r2, [r3, #4]
 800e390:	7bbb      	ldrb	r3, [r7, #14]
 800e392:	18d1      	adds	r1, r2, r3
 800e394:	897b      	ldrh	r3, [r7, #10]
 800e396:	89ba      	ldrh	r2, [r7, #12]
 800e398:	f7fb fef2 	bl	800a180 <pbuf_copy_partial>
 800e39c:	4603      	mov	r3, r0
 800e39e:	461a      	mov	r2, r3
 800e3a0:	89bb      	ldrh	r3, [r7, #12]
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	f040 809f 	bne.w	800e4e6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	899b      	ldrh	r3, [r3, #12]
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fa fa37 	bl	8008824 <lwip_htons>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3be:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e3c4:	7efb      	ldrb	r3, [r7, #27]
 800e3c6:	f003 0308 	and.w	r3, r3, #8
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d007      	beq.n	800e3de <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e3ce:	7efb      	ldrb	r3, [r7, #27]
 800e3d0:	f023 0308 	bic.w	r3, r3, #8
 800e3d4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e3d6:	7ebb      	ldrb	r3, [r7, #26]
 800e3d8:	f043 0308 	orr.w	r3, r3, #8
 800e3dc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e3de:	7efb      	ldrb	r3, [r7, #27]
 800e3e0:	f003 0301 	and.w	r3, r3, #1
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d007      	beq.n	800e3f8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e3e8:	7efb      	ldrb	r3, [r7, #27]
 800e3ea:	f023 0301 	bic.w	r3, r3, #1
 800e3ee:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e3f0:	7ebb      	ldrb	r3, [r7, #26]
 800e3f2:	f043 0301 	orr.w	r3, r3, #1
 800e3f6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	68db      	ldr	r3, [r3, #12]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fa fa25 	bl	800884e <lwip_htonl>
 800e404:	4602      	mov	r2, r0
 800e406:	887b      	ldrh	r3, [r7, #2]
 800e408:	18d1      	adds	r1, r2, r3
 800e40a:	7eba      	ldrb	r2, [r7, #26]
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
 800e40e:	9300      	str	r3, [sp, #0]
 800e410:	460b      	mov	r3, r1
 800e412:	6939      	ldr	r1, [r7, #16]
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7ff fea7 	bl	800e168 <tcp_create_segment>
 800e41a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d063      	beq.n	800e4ea <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	4618      	mov	r0, r3
 800e428:	f7fb fd38 	bl	8009e9c <pbuf_clen>
 800e42c:	4603      	mov	r3, r0
 800e42e:	461a      	mov	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e436:	1a9b      	subs	r3, r3, r2
 800e438:	b29a      	uxth	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	6858      	ldr	r0, [r3, #4]
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	891a      	ldrh	r2, [r3, #8]
 800e44a:	89bb      	ldrh	r3, [r7, #12]
 800e44c:	1ad3      	subs	r3, r2, r3
 800e44e:	b29b      	uxth	r3, r3
 800e450:	4619      	mov	r1, r3
 800e452:	f7fb fb15 	bl	8009a80 <pbuf_realloc>
  useg->len -= remainder;
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	891a      	ldrh	r2, [r3, #8]
 800e45a:	89bb      	ldrh	r3, [r7, #12]
 800e45c:	1ad3      	subs	r3, r2, r3
 800e45e:	b29a      	uxth	r2, r3
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	899b      	ldrh	r3, [r3, #12]
 800e46a:	b29c      	uxth	r4, r3
 800e46c:	7efb      	ldrb	r3, [r7, #27]
 800e46e:	b29b      	uxth	r3, r3
 800e470:	4618      	mov	r0, r3
 800e472:	f7fa f9d7 	bl	8008824 <lwip_htons>
 800e476:	4603      	mov	r3, r0
 800e478:	461a      	mov	r2, r3
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	4322      	orrs	r2, r4
 800e480:	b292      	uxth	r2, r2
 800e482:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	4618      	mov	r0, r3
 800e48a:	f7fb fd07 	bl	8009e9c <pbuf_clen>
 800e48e:	4603      	mov	r3, r0
 800e490:	461a      	mov	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e498:	4413      	add	r3, r2
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fb fcf8 	bl	8009e9c <pbuf_clen>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e4b6:	4413      	add	r3, r2
 800e4b8:	b29a      	uxth	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	69fa      	ldr	r2, [r7, #28]
 800e4cc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d103      	bne.n	800e4de <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	e016      	b.n	800e510 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e4e2:	bf00      	nop
 800e4e4:	e002      	b.n	800e4ec <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e4e6:	bf00      	nop
 800e4e8:	e000      	b.n	800e4ec <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e4ea:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d006      	beq.n	800e500 <tcp_split_unsent_seg+0x25c>
 800e4f2:	4b09      	ldr	r3, [pc, #36]	; (800e518 <tcp_split_unsent_seg+0x274>)
 800e4f4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e4f8:	490d      	ldr	r1, [pc, #52]	; (800e530 <tcp_split_unsent_seg+0x28c>)
 800e4fa:	4809      	ldr	r0, [pc, #36]	; (800e520 <tcp_split_unsent_seg+0x27c>)
 800e4fc:	f004 ff6a 	bl	80133d4 <iprintf>
  if (p != NULL) {
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d002      	beq.n	800e50c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e506:	6938      	ldr	r0, [r7, #16]
 800e508:	f7fb fc40 	bl	8009d8c <pbuf_free>
  }

  return ERR_MEM;
 800e50c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e510:	4618      	mov	r0, r3
 800e512:	3724      	adds	r7, #36	; 0x24
 800e514:	46bd      	mov	sp, r7
 800e516:	bd90      	pop	{r4, r7, pc}
 800e518:	08018194 	.word	0x08018194
 800e51c:	08018528 	.word	0x08018528
 800e520:	080181e8 	.word	0x080181e8
 800e524:	0801854c 	.word	0x0801854c
 800e528:	08018570 	.word	0x08018570
 800e52c:	08018580 	.word	0x08018580
 800e530:	08018590 	.word	0x08018590

0800e534 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e534:	b590      	push	{r4, r7, lr}
 800e536:	b085      	sub	sp, #20
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d106      	bne.n	800e550 <tcp_send_fin+0x1c>
 800e542:	4b21      	ldr	r3, [pc, #132]	; (800e5c8 <tcp_send_fin+0x94>)
 800e544:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e548:	4920      	ldr	r1, [pc, #128]	; (800e5cc <tcp_send_fin+0x98>)
 800e54a:	4821      	ldr	r0, [pc, #132]	; (800e5d0 <tcp_send_fin+0x9c>)
 800e54c:	f004 ff42 	bl	80133d4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e554:	2b00      	cmp	r3, #0
 800e556:	d02e      	beq.n	800e5b6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e55c:	60fb      	str	r3, [r7, #12]
 800e55e:	e002      	b.n	800e566 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1f8      	bne.n	800e560 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	68db      	ldr	r3, [r3, #12]
 800e572:	899b      	ldrh	r3, [r3, #12]
 800e574:	b29b      	uxth	r3, r3
 800e576:	4618      	mov	r0, r3
 800e578:	f7fa f954 	bl	8008824 <lwip_htons>
 800e57c:	4603      	mov	r3, r0
 800e57e:	b2db      	uxtb	r3, r3
 800e580:	f003 0307 	and.w	r3, r3, #7
 800e584:	2b00      	cmp	r3, #0
 800e586:	d116      	bne.n	800e5b6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	899b      	ldrh	r3, [r3, #12]
 800e58e:	b29c      	uxth	r4, r3
 800e590:	2001      	movs	r0, #1
 800e592:	f7fa f947 	bl	8008824 <lwip_htons>
 800e596:	4603      	mov	r3, r0
 800e598:	461a      	mov	r2, r3
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	68db      	ldr	r3, [r3, #12]
 800e59e:	4322      	orrs	r2, r4
 800e5a0:	b292      	uxth	r2, r2
 800e5a2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	8b5b      	ldrh	r3, [r3, #26]
 800e5a8:	f043 0320 	orr.w	r3, r3, #32
 800e5ac:	b29a      	uxth	r2, r3
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	e004      	b.n	800e5c0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e5b6:	2101      	movs	r1, #1
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f000 f80b 	bl	800e5d4 <tcp_enqueue_flags>
 800e5be:	4603      	mov	r3, r0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3714      	adds	r7, #20
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd90      	pop	{r4, r7, pc}
 800e5c8:	08018194 	.word	0x08018194
 800e5cc:	0801859c 	.word	0x0801859c
 800e5d0:	080181e8 	.word	0x080181e8

0800e5d4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b08a      	sub	sp, #40	; 0x28
 800e5d8:	af02      	add	r7, sp, #8
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	460b      	mov	r3, r1
 800e5de:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e5e8:	78fb      	ldrb	r3, [r7, #3]
 800e5ea:	f003 0303 	and.w	r3, r3, #3
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d106      	bne.n	800e600 <tcp_enqueue_flags+0x2c>
 800e5f2:	4b67      	ldr	r3, [pc, #412]	; (800e790 <tcp_enqueue_flags+0x1bc>)
 800e5f4:	f240 4211 	movw	r2, #1041	; 0x411
 800e5f8:	4966      	ldr	r1, [pc, #408]	; (800e794 <tcp_enqueue_flags+0x1c0>)
 800e5fa:	4867      	ldr	r0, [pc, #412]	; (800e798 <tcp_enqueue_flags+0x1c4>)
 800e5fc:	f004 feea 	bl	80133d4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d106      	bne.n	800e614 <tcp_enqueue_flags+0x40>
 800e606:	4b62      	ldr	r3, [pc, #392]	; (800e790 <tcp_enqueue_flags+0x1bc>)
 800e608:	f240 4213 	movw	r2, #1043	; 0x413
 800e60c:	4963      	ldr	r1, [pc, #396]	; (800e79c <tcp_enqueue_flags+0x1c8>)
 800e60e:	4862      	ldr	r0, [pc, #392]	; (800e798 <tcp_enqueue_flags+0x1c4>)
 800e610:	f004 fee0 	bl	80133d4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e614:	78fb      	ldrb	r3, [r7, #3]
 800e616:	f003 0302 	and.w	r3, r3, #2
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d001      	beq.n	800e622 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e61e:	2301      	movs	r3, #1
 800e620:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e622:	7ffb      	ldrb	r3, [r7, #31]
 800e624:	009b      	lsls	r3, r3, #2
 800e626:	b2db      	uxtb	r3, r3
 800e628:	f003 0304 	and.w	r3, r3, #4
 800e62c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e62e:	7dfb      	ldrb	r3, [r7, #23]
 800e630:	b29b      	uxth	r3, r3
 800e632:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e636:	4619      	mov	r1, r3
 800e638:	2036      	movs	r0, #54	; 0x36
 800e63a:	f7fb f8c3 	bl	80097c4 <pbuf_alloc>
 800e63e:	6138      	str	r0, [r7, #16]
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d109      	bne.n	800e65a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	8b5b      	ldrh	r3, [r3, #26]
 800e64a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e64e:	b29a      	uxth	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e654:	f04f 33ff 	mov.w	r3, #4294967295
 800e658:	e095      	b.n	800e786 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	895a      	ldrh	r2, [r3, #10]
 800e65e:	7dfb      	ldrb	r3, [r7, #23]
 800e660:	b29b      	uxth	r3, r3
 800e662:	429a      	cmp	r2, r3
 800e664:	d206      	bcs.n	800e674 <tcp_enqueue_flags+0xa0>
 800e666:	4b4a      	ldr	r3, [pc, #296]	; (800e790 <tcp_enqueue_flags+0x1bc>)
 800e668:	f240 4239 	movw	r2, #1081	; 0x439
 800e66c:	494c      	ldr	r1, [pc, #304]	; (800e7a0 <tcp_enqueue_flags+0x1cc>)
 800e66e:	484a      	ldr	r0, [pc, #296]	; (800e798 <tcp_enqueue_flags+0x1c4>)
 800e670:	f004 feb0 	bl	80133d4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e678:	78fa      	ldrb	r2, [r7, #3]
 800e67a:	7ffb      	ldrb	r3, [r7, #31]
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	460b      	mov	r3, r1
 800e680:	6939      	ldr	r1, [r7, #16]
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f7ff fd70 	bl	800e168 <tcp_create_segment>
 800e688:	60f8      	str	r0, [r7, #12]
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d109      	bne.n	800e6a4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	8b5b      	ldrh	r3, [r3, #26]
 800e694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e698:	b29a      	uxth	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e69e:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a2:	e070      	b.n	800e786 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	f003 0303 	and.w	r3, r3, #3
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d006      	beq.n	800e6be <tcp_enqueue_flags+0xea>
 800e6b0:	4b37      	ldr	r3, [pc, #220]	; (800e790 <tcp_enqueue_flags+0x1bc>)
 800e6b2:	f240 4242 	movw	r2, #1090	; 0x442
 800e6b6:	493b      	ldr	r1, [pc, #236]	; (800e7a4 <tcp_enqueue_flags+0x1d0>)
 800e6b8:	4837      	ldr	r0, [pc, #220]	; (800e798 <tcp_enqueue_flags+0x1c4>)
 800e6ba:	f004 fe8b 	bl	80133d4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	891b      	ldrh	r3, [r3, #8]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d006      	beq.n	800e6d4 <tcp_enqueue_flags+0x100>
 800e6c6:	4b32      	ldr	r3, [pc, #200]	; (800e790 <tcp_enqueue_flags+0x1bc>)
 800e6c8:	f240 4243 	movw	r2, #1091	; 0x443
 800e6cc:	4936      	ldr	r1, [pc, #216]	; (800e7a8 <tcp_enqueue_flags+0x1d4>)
 800e6ce:	4832      	ldr	r0, [pc, #200]	; (800e798 <tcp_enqueue_flags+0x1c4>)
 800e6d0:	f004 fe80 	bl	80133d4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d103      	bne.n	800e6e4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	68fa      	ldr	r2, [r7, #12]
 800e6e0:	66da      	str	r2, [r3, #108]	; 0x6c
 800e6e2:	e00d      	b.n	800e700 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6e8:	61bb      	str	r3, [r7, #24]
 800e6ea:	e002      	b.n	800e6f2 <tcp_enqueue_flags+0x11e>
 800e6ec:	69bb      	ldr	r3, [r7, #24]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	61bb      	str	r3, [r7, #24]
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1f8      	bne.n	800e6ec <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e6fa:	69bb      	ldr	r3, [r7, #24]
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2200      	movs	r2, #0
 800e704:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e708:	78fb      	ldrb	r3, [r7, #3]
 800e70a:	f003 0302 	and.w	r3, r3, #2
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d104      	bne.n	800e71c <tcp_enqueue_flags+0x148>
 800e712:	78fb      	ldrb	r3, [r7, #3]
 800e714:	f003 0301 	and.w	r3, r3, #1
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d004      	beq.n	800e726 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e720:	1c5a      	adds	r2, r3, #1
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e726:	78fb      	ldrb	r3, [r7, #3]
 800e728:	f003 0301 	and.w	r3, r3, #1
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d006      	beq.n	800e73e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	8b5b      	ldrh	r3, [r3, #26]
 800e734:	f043 0320 	orr.w	r3, r3, #32
 800e738:	b29a      	uxth	r2, r3
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	4618      	mov	r0, r3
 800e744:	f7fb fbaa 	bl	8009e9c <pbuf_clen>
 800e748:	4603      	mov	r3, r0
 800e74a:	461a      	mov	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e752:	4413      	add	r3, r2
 800e754:	b29a      	uxth	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e762:	2b00      	cmp	r3, #0
 800e764:	d00e      	beq.n	800e784 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d10a      	bne.n	800e784 <tcp_enqueue_flags+0x1b0>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e772:	2b00      	cmp	r3, #0
 800e774:	d106      	bne.n	800e784 <tcp_enqueue_flags+0x1b0>
 800e776:	4b06      	ldr	r3, [pc, #24]	; (800e790 <tcp_enqueue_flags+0x1bc>)
 800e778:	f240 4265 	movw	r2, #1125	; 0x465
 800e77c:	490b      	ldr	r1, [pc, #44]	; (800e7ac <tcp_enqueue_flags+0x1d8>)
 800e77e:	4806      	ldr	r0, [pc, #24]	; (800e798 <tcp_enqueue_flags+0x1c4>)
 800e780:	f004 fe28 	bl	80133d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e784:	2300      	movs	r3, #0
}
 800e786:	4618      	mov	r0, r3
 800e788:	3720      	adds	r7, #32
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	08018194 	.word	0x08018194
 800e794:	080185b8 	.word	0x080185b8
 800e798:	080181e8 	.word	0x080181e8
 800e79c:	08018610 	.word	0x08018610
 800e7a0:	08018630 	.word	0x08018630
 800e7a4:	0801866c 	.word	0x0801866c
 800e7a8:	08018684 	.word	0x08018684
 800e7ac:	080186b0 	.word	0x080186b0

0800e7b0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e7b0:	b5b0      	push	{r4, r5, r7, lr}
 800e7b2:	b08a      	sub	sp, #40	; 0x28
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d106      	bne.n	800e7cc <tcp_output+0x1c>
 800e7be:	4b9e      	ldr	r3, [pc, #632]	; (800ea38 <tcp_output+0x288>)
 800e7c0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e7c4:	499d      	ldr	r1, [pc, #628]	; (800ea3c <tcp_output+0x28c>)
 800e7c6:	489e      	ldr	r0, [pc, #632]	; (800ea40 <tcp_output+0x290>)
 800e7c8:	f004 fe04 	bl	80133d4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	7d1b      	ldrb	r3, [r3, #20]
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d106      	bne.n	800e7e2 <tcp_output+0x32>
 800e7d4:	4b98      	ldr	r3, [pc, #608]	; (800ea38 <tcp_output+0x288>)
 800e7d6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e7da:	499a      	ldr	r1, [pc, #616]	; (800ea44 <tcp_output+0x294>)
 800e7dc:	4898      	ldr	r0, [pc, #608]	; (800ea40 <tcp_output+0x290>)
 800e7de:	f004 fdf9 	bl	80133d4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e7e2:	4b99      	ldr	r3, [pc, #612]	; (800ea48 <tcp_output+0x298>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	687a      	ldr	r2, [r7, #4]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d101      	bne.n	800e7f0 <tcp_output+0x40>
    return ERR_OK;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	e1ce      	b.n	800eb8e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	bf28      	it	cs
 800e800:	4613      	movcs	r3, r2
 800e802:	b29b      	uxth	r3, r3
 800e804:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e80a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d10b      	bne.n	800e82a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	8b5b      	ldrh	r3, [r3, #26]
 800e816:	f003 0302 	and.w	r3, r3, #2
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	f000 81aa 	beq.w	800eb74 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f000 fdcb 	bl	800f3bc <tcp_send_empty_ack>
 800e826:	4603      	mov	r3, r0
 800e828:	e1b1      	b.n	800eb8e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e82a:	6879      	ldr	r1, [r7, #4]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	3304      	adds	r3, #4
 800e830:	461a      	mov	r2, r3
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f7ff fc7c 	bl	800e130 <tcp_route>
 800e838:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d102      	bne.n	800e846 <tcp_output+0x96>
    return ERR_RTE;
 800e840:	f06f 0303 	mvn.w	r3, #3
 800e844:	e1a3      	b.n	800eb8e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d003      	beq.n	800e854 <tcp_output+0xa4>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d111      	bne.n	800e878 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d002      	beq.n	800e860 <tcp_output+0xb0>
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	3304      	adds	r3, #4
 800e85e:	e000      	b.n	800e862 <tcp_output+0xb2>
 800e860:	2300      	movs	r3, #0
 800e862:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d102      	bne.n	800e870 <tcp_output+0xc0>
      return ERR_RTE;
 800e86a:	f06f 0303 	mvn.w	r3, #3
 800e86e:	e18e      	b.n	800eb8e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	681a      	ldr	r2, [r3, #0]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	4618      	mov	r0, r3
 800e880:	f7f9 ffe5 	bl	800884e <lwip_htonl>
 800e884:	4602      	mov	r2, r0
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e88a:	1ad3      	subs	r3, r2, r3
 800e88c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e88e:	8912      	ldrh	r2, [r2, #8]
 800e890:	4413      	add	r3, r2
 800e892:	69ba      	ldr	r2, [r7, #24]
 800e894:	429a      	cmp	r2, r3
 800e896:	d227      	bcs.n	800e8e8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e89e:	461a      	mov	r2, r3
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d114      	bne.n	800e8d0 <tcp_output+0x120>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d110      	bne.n	800e8d0 <tcp_output+0x120>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d10b      	bne.n	800e8d0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	8b5b      	ldrh	r3, [r3, #26]
 800e8d4:	f003 0302 	and.w	r3, r3, #2
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f000 814d 	beq.w	800eb78 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 fd6c 	bl	800f3bc <tcp_send_empty_ack>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	e152      	b.n	800eb8e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8f4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e8f6:	6a3b      	ldr	r3, [r7, #32]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f000 811c 	beq.w	800eb36 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e8fe:	e002      	b.n	800e906 <tcp_output+0x156>
 800e900:	6a3b      	ldr	r3, [r7, #32]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	623b      	str	r3, [r7, #32]
 800e906:	6a3b      	ldr	r3, [r7, #32]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d1f8      	bne.n	800e900 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e90e:	e112      	b.n	800eb36 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	899b      	ldrh	r3, [r3, #12]
 800e916:	b29b      	uxth	r3, r3
 800e918:	4618      	mov	r0, r3
 800e91a:	f7f9 ff83 	bl	8008824 <lwip_htons>
 800e91e:	4603      	mov	r3, r0
 800e920:	b2db      	uxtb	r3, r3
 800e922:	f003 0304 	and.w	r3, r3, #4
 800e926:	2b00      	cmp	r3, #0
 800e928:	d006      	beq.n	800e938 <tcp_output+0x188>
 800e92a:	4b43      	ldr	r3, [pc, #268]	; (800ea38 <tcp_output+0x288>)
 800e92c:	f240 5236 	movw	r2, #1334	; 0x536
 800e930:	4946      	ldr	r1, [pc, #280]	; (800ea4c <tcp_output+0x29c>)
 800e932:	4843      	ldr	r0, [pc, #268]	; (800ea40 <tcp_output+0x290>)
 800e934:	f004 fd4e 	bl	80133d4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d01f      	beq.n	800e980 <tcp_output+0x1d0>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	8b5b      	ldrh	r3, [r3, #26]
 800e944:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d119      	bne.n	800e980 <tcp_output+0x1d0>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e950:	2b00      	cmp	r3, #0
 800e952:	d00b      	beq.n	800e96c <tcp_output+0x1bc>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d110      	bne.n	800e980 <tcp_output+0x1d0>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e962:	891a      	ldrh	r2, [r3, #8]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e968:	429a      	cmp	r2, r3
 800e96a:	d209      	bcs.n	800e980 <tcp_output+0x1d0>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e972:	2b00      	cmp	r3, #0
 800e974:	d004      	beq.n	800e980 <tcp_output+0x1d0>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e97c:	2b08      	cmp	r3, #8
 800e97e:	d901      	bls.n	800e984 <tcp_output+0x1d4>
 800e980:	2301      	movs	r3, #1
 800e982:	e000      	b.n	800e986 <tcp_output+0x1d6>
 800e984:	2300      	movs	r3, #0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d106      	bne.n	800e998 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	8b5b      	ldrh	r3, [r3, #26]
 800e98e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e992:	2b00      	cmp	r3, #0
 800e994:	f000 80e4 	beq.w	800eb60 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	7d1b      	ldrb	r3, [r3, #20]
 800e99c:	2b02      	cmp	r3, #2
 800e99e:	d00d      	beq.n	800e9bc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a2:	68db      	ldr	r3, [r3, #12]
 800e9a4:	899b      	ldrh	r3, [r3, #12]
 800e9a6:	b29c      	uxth	r4, r3
 800e9a8:	2010      	movs	r0, #16
 800e9aa:	f7f9 ff3b 	bl	8008824 <lwip_htons>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b4:	68db      	ldr	r3, [r3, #12]
 800e9b6:	4322      	orrs	r2, r4
 800e9b8:	b292      	uxth	r2, r2
 800e9ba:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e9bc:	697a      	ldr	r2, [r7, #20]
 800e9be:	6879      	ldr	r1, [r7, #4]
 800e9c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9c2:	f000 f909 	bl	800ebd8 <tcp_output_segment>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e9ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d009      	beq.n	800e9e6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	8b5b      	ldrh	r3, [r3, #26]
 800e9d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	835a      	strh	r2, [r3, #26]
      return err;
 800e9e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9e4:	e0d3      	b.n	800eb8e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	7d1b      	ldrb	r3, [r3, #20]
 800e9f2:	2b02      	cmp	r3, #2
 800e9f4:	d006      	beq.n	800ea04 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	8b5b      	ldrh	r3, [r3, #26]
 800e9fa:	f023 0303 	bic.w	r3, r3, #3
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ea04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7f9 ff1f 	bl	800884e <lwip_htonl>
 800ea10:	4604      	mov	r4, r0
 800ea12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea14:	891b      	ldrh	r3, [r3, #8]
 800ea16:	461d      	mov	r5, r3
 800ea18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1a:	68db      	ldr	r3, [r3, #12]
 800ea1c:	899b      	ldrh	r3, [r3, #12]
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7f9 feff 	bl	8008824 <lwip_htons>
 800ea26:	4603      	mov	r3, r0
 800ea28:	b2db      	uxtb	r3, r3
 800ea2a:	f003 0303 	and.w	r3, r3, #3
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d00e      	beq.n	800ea50 <tcp_output+0x2a0>
 800ea32:	2301      	movs	r3, #1
 800ea34:	e00d      	b.n	800ea52 <tcp_output+0x2a2>
 800ea36:	bf00      	nop
 800ea38:	08018194 	.word	0x08018194
 800ea3c:	080186d8 	.word	0x080186d8
 800ea40:	080181e8 	.word	0x080181e8
 800ea44:	080186f0 	.word	0x080186f0
 800ea48:	200090ec 	.word	0x200090ec
 800ea4c:	08018718 	.word	0x08018718
 800ea50:	2300      	movs	r3, #0
 800ea52:	442b      	add	r3, r5
 800ea54:	4423      	add	r3, r4
 800ea56:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	1ad3      	subs	r3, r2, r3
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	da02      	bge.n	800ea6a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	68ba      	ldr	r2, [r7, #8]
 800ea68:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ea6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6c:	891b      	ldrh	r3, [r3, #8]
 800ea6e:	461c      	mov	r4, r3
 800ea70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea72:	68db      	ldr	r3, [r3, #12]
 800ea74:	899b      	ldrh	r3, [r3, #12]
 800ea76:	b29b      	uxth	r3, r3
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7f9 fed3 	bl	8008824 <lwip_htons>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	f003 0303 	and.w	r3, r3, #3
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d001      	beq.n	800ea8e <tcp_output+0x2de>
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	e000      	b.n	800ea90 <tcp_output+0x2e0>
 800ea8e:	2300      	movs	r3, #0
 800ea90:	4423      	add	r3, r4
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d049      	beq.n	800eb2a <tcp_output+0x37a>
      seg->next = NULL;
 800ea96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea98:	2200      	movs	r2, #0
 800ea9a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d105      	bne.n	800eab0 <tcp_output+0x300>
        pcb->unacked = seg;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaa8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800eaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaac:	623b      	str	r3, [r7, #32]
 800eaae:	e03f      	b.n	800eb30 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800eab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7f9 fec9 	bl	800884e <lwip_htonl>
 800eabc:	4604      	mov	r4, r0
 800eabe:	6a3b      	ldr	r3, [r7, #32]
 800eac0:	68db      	ldr	r3, [r3, #12]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7f9 fec2 	bl	800884e <lwip_htonl>
 800eaca:	4603      	mov	r3, r0
 800eacc:	1ae3      	subs	r3, r4, r3
 800eace:	2b00      	cmp	r3, #0
 800ead0:	da24      	bge.n	800eb1c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	3370      	adds	r3, #112	; 0x70
 800ead6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ead8:	e002      	b.n	800eae0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d011      	beq.n	800eb0c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68db      	ldr	r3, [r3, #12]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7f9 feac 	bl	800884e <lwip_htonl>
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7f9 fea5 	bl	800884e <lwip_htonl>
 800eb04:	4603      	mov	r3, r0
 800eb06:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	dbe6      	blt.n	800eada <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb12:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb18:	601a      	str	r2, [r3, #0]
 800eb1a:	e009      	b.n	800eb30 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800eb1c:	6a3b      	ldr	r3, [r7, #32]
 800eb1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb20:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800eb22:	6a3b      	ldr	r3, [r7, #32]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	623b      	str	r3, [r7, #32]
 800eb28:	e002      	b.n	800eb30 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800eb2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb2c:	f7fc fc43 	bl	800b3b6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb34:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800eb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d012      	beq.n	800eb62 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800eb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7f9 fe83 	bl	800884e <lwip_htonl>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb4e:	1ad3      	subs	r3, r2, r3
 800eb50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb52:	8912      	ldrh	r2, [r2, #8]
 800eb54:	4413      	add	r3, r2
  while (seg != NULL &&
 800eb56:	69ba      	ldr	r2, [r7, #24]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	f4bf aed9 	bcs.w	800e910 <tcp_output+0x160>
 800eb5e:	e000      	b.n	800eb62 <tcp_output+0x3b2>
      break;
 800eb60:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d108      	bne.n	800eb7c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800eb72:	e004      	b.n	800eb7e <tcp_output+0x3ce>
    goto output_done;
 800eb74:	bf00      	nop
 800eb76:	e002      	b.n	800eb7e <tcp_output+0x3ce>
    goto output_done;
 800eb78:	bf00      	nop
 800eb7a:	e000      	b.n	800eb7e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800eb7c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	8b5b      	ldrh	r3, [r3, #26]
 800eb82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb86:	b29a      	uxth	r2, r3
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3728      	adds	r7, #40	; 0x28
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bdb0      	pop	{r4, r5, r7, pc}
 800eb96:	bf00      	nop

0800eb98 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d106      	bne.n	800ebb4 <tcp_output_segment_busy+0x1c>
 800eba6:	4b09      	ldr	r3, [pc, #36]	; (800ebcc <tcp_output_segment_busy+0x34>)
 800eba8:	f240 529a 	movw	r2, #1434	; 0x59a
 800ebac:	4908      	ldr	r1, [pc, #32]	; (800ebd0 <tcp_output_segment_busy+0x38>)
 800ebae:	4809      	ldr	r0, [pc, #36]	; (800ebd4 <tcp_output_segment_busy+0x3c>)
 800ebb0:	f004 fc10 	bl	80133d4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	7b9b      	ldrb	r3, [r3, #14]
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	d001      	beq.n	800ebc2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e000      	b.n	800ebc4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ebc2:	2300      	movs	r3, #0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3708      	adds	r7, #8
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}
 800ebcc:	08018194 	.word	0x08018194
 800ebd0:	08018730 	.word	0x08018730
 800ebd4:	080181e8 	.word	0x080181e8

0800ebd8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ebd8:	b5b0      	push	{r4, r5, r7, lr}
 800ebda:	b08c      	sub	sp, #48	; 0x30
 800ebdc:	af04      	add	r7, sp, #16
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d106      	bne.n	800ebf8 <tcp_output_segment+0x20>
 800ebea:	4b63      	ldr	r3, [pc, #396]	; (800ed78 <tcp_output_segment+0x1a0>)
 800ebec:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ebf0:	4962      	ldr	r1, [pc, #392]	; (800ed7c <tcp_output_segment+0x1a4>)
 800ebf2:	4863      	ldr	r0, [pc, #396]	; (800ed80 <tcp_output_segment+0x1a8>)
 800ebf4:	f004 fbee 	bl	80133d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d106      	bne.n	800ec0c <tcp_output_segment+0x34>
 800ebfe:	4b5e      	ldr	r3, [pc, #376]	; (800ed78 <tcp_output_segment+0x1a0>)
 800ec00:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ec04:	495f      	ldr	r1, [pc, #380]	; (800ed84 <tcp_output_segment+0x1ac>)
 800ec06:	485e      	ldr	r0, [pc, #376]	; (800ed80 <tcp_output_segment+0x1a8>)
 800ec08:	f004 fbe4 	bl	80133d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d106      	bne.n	800ec20 <tcp_output_segment+0x48>
 800ec12:	4b59      	ldr	r3, [pc, #356]	; (800ed78 <tcp_output_segment+0x1a0>)
 800ec14:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ec18:	495b      	ldr	r1, [pc, #364]	; (800ed88 <tcp_output_segment+0x1b0>)
 800ec1a:	4859      	ldr	r0, [pc, #356]	; (800ed80 <tcp_output_segment+0x1a8>)
 800ec1c:	f004 fbda 	bl	80133d4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ec20:	68f8      	ldr	r0, [r7, #12]
 800ec22:	f7ff ffb9 	bl	800eb98 <tcp_output_segment_busy>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d001      	beq.n	800ec30 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	e09f      	b.n	800ed70 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	68dc      	ldr	r4, [r3, #12]
 800ec38:	4610      	mov	r0, r2
 800ec3a:	f7f9 fe08 	bl	800884e <lwip_htonl>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	68dc      	ldr	r4, [r3, #12]
 800ec4a:	4610      	mov	r0, r2
 800ec4c:	f7f9 fdea 	bl	8008824 <lwip_htons>
 800ec50:	4603      	mov	r3, r0
 800ec52:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec58:	68ba      	ldr	r2, [r7, #8]
 800ec5a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ec5c:	441a      	add	r2, r3
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	68db      	ldr	r3, [r3, #12]
 800ec66:	3314      	adds	r3, #20
 800ec68:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	7a9b      	ldrb	r3, [r3, #10]
 800ec6e:	f003 0301 	and.w	r3, r3, #1
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d015      	beq.n	800eca2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	3304      	adds	r3, #4
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	6879      	ldr	r1, [r7, #4]
 800ec7e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ec82:	f7fc fe8f 	bl	800b9a4 <tcp_eff_send_mss_netif>
 800ec86:	4603      	mov	r3, r0
 800ec88:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ec8a:	8b7b      	ldrh	r3, [r7, #26]
 800ec8c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7f9 fddc 	bl	800884e <lwip_htonl>
 800ec96:	4602      	mov	r2, r0
 800ec98:	69fb      	ldr	r3, [r7, #28]
 800ec9a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ec9c:	69fb      	ldr	r3, [r7, #28]
 800ec9e:	3304      	adds	r3, #4
 800eca0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	da02      	bge.n	800ecb2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d10c      	bne.n	800ecd4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ecba:	4b34      	ldr	r3, [pc, #208]	; (800ed8c <tcp_output_segment+0x1b4>)
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	68db      	ldr	r3, [r3, #12]
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7f9 fdc0 	bl	800884e <lwip_htonl>
 800ecce:	4602      	mov	r2, r0
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	68da      	ldr	r2, [r3, #12]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	1ad3      	subs	r3, r2, r3
 800ece0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	685b      	ldr	r3, [r3, #4]
 800ece6:	8959      	ldrh	r1, [r3, #10]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	8b3a      	ldrh	r2, [r7, #24]
 800ecee:	1a8a      	subs	r2, r1, r2
 800ecf0:	b292      	uxth	r2, r2
 800ecf2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	8919      	ldrh	r1, [r3, #8]
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	8b3a      	ldrh	r2, [r7, #24]
 800ed00:	1a8a      	subs	r2, r1, r2
 800ed02:	b292      	uxth	r2, r2
 800ed04:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	685b      	ldr	r3, [r3, #4]
 800ed0a:	68fa      	ldr	r2, [r7, #12]
 800ed0c:	68d2      	ldr	r2, [r2, #12]
 800ed0e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	2200      	movs	r2, #0
 800ed16:	741a      	strb	r2, [r3, #16]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	f103 0214 	add.w	r2, r3, #20
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	7a9b      	ldrb	r3, [r3, #10]
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	f003 0304 	and.w	r3, r3, #4
 800ed2e:	4413      	add	r3, r2
 800ed30:	69fa      	ldr	r2, [r7, #28]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d006      	beq.n	800ed44 <tcp_output_segment+0x16c>
 800ed36:	4b10      	ldr	r3, [pc, #64]	; (800ed78 <tcp_output_segment+0x1a0>)
 800ed38:	f240 621c 	movw	r2, #1564	; 0x61c
 800ed3c:	4914      	ldr	r1, [pc, #80]	; (800ed90 <tcp_output_segment+0x1b8>)
 800ed3e:	4810      	ldr	r0, [pc, #64]	; (800ed80 <tcp_output_segment+0x1a8>)
 800ed40:	f004 fb48 	bl	80133d4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	6858      	ldr	r0, [r3, #4]
 800ed48:	68b9      	ldr	r1, [r7, #8]
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	1d1c      	adds	r4, r3, #4
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	7add      	ldrb	r5, [r3, #11]
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	7a9b      	ldrb	r3, [r3, #10]
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	9202      	str	r2, [sp, #8]
 800ed5a:	2206      	movs	r2, #6
 800ed5c:	9201      	str	r2, [sp, #4]
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	462b      	mov	r3, r5
 800ed62:	4622      	mov	r2, r4
 800ed64:	f002 fd84 	bl	8011870 <ip4_output_if>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ed6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3720      	adds	r7, #32
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bdb0      	pop	{r4, r5, r7, pc}
 800ed78:	08018194 	.word	0x08018194
 800ed7c:	08018758 	.word	0x08018758
 800ed80:	080181e8 	.word	0x080181e8
 800ed84:	08018778 	.word	0x08018778
 800ed88:	08018798 	.word	0x08018798
 800ed8c:	200090dc 	.word	0x200090dc
 800ed90:	080187bc 	.word	0x080187bc

0800ed94 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ed94:	b5b0      	push	{r4, r5, r7, lr}
 800ed96:	b084      	sub	sp, #16
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d106      	bne.n	800edb0 <tcp_rexmit_rto_prepare+0x1c>
 800eda2:	4b31      	ldr	r3, [pc, #196]	; (800ee68 <tcp_rexmit_rto_prepare+0xd4>)
 800eda4:	f240 6263 	movw	r2, #1635	; 0x663
 800eda8:	4930      	ldr	r1, [pc, #192]	; (800ee6c <tcp_rexmit_rto_prepare+0xd8>)
 800edaa:	4831      	ldr	r0, [pc, #196]	; (800ee70 <tcp_rexmit_rto_prepare+0xdc>)
 800edac:	f004 fb12 	bl	80133d4 <iprintf>

  if (pcb->unacked == NULL) {
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d102      	bne.n	800edbe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800edb8:	f06f 0305 	mvn.w	r3, #5
 800edbc:	e050      	b.n	800ee60 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edc2:	60fb      	str	r3, [r7, #12]
 800edc4:	e00b      	b.n	800edde <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800edc6:	68f8      	ldr	r0, [r7, #12]
 800edc8:	f7ff fee6 	bl	800eb98 <tcp_output_segment_busy>
 800edcc:	4603      	mov	r3, r0
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d002      	beq.n	800edd8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800edd2:	f06f 0305 	mvn.w	r3, #5
 800edd6:	e043      	b.n	800ee60 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	60fb      	str	r3, [r7, #12]
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1ef      	bne.n	800edc6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ede6:	68f8      	ldr	r0, [r7, #12]
 800ede8:	f7ff fed6 	bl	800eb98 <tcp_output_segment_busy>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d002      	beq.n	800edf8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800edf2:	f06f 0305 	mvn.w	r3, #5
 800edf6:	e033      	b.n	800ee60 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	8b5b      	ldrh	r3, [r3, #26]
 800ee12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7f9 fd13 	bl	800884e <lwip_htonl>
 800ee28:	4604      	mov	r4, r0
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	891b      	ldrh	r3, [r3, #8]
 800ee2e:	461d      	mov	r5, r3
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	68db      	ldr	r3, [r3, #12]
 800ee34:	899b      	ldrh	r3, [r3, #12]
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7f9 fcf3 	bl	8008824 <lwip_htons>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	f003 0303 	and.w	r3, r3, #3
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d001      	beq.n	800ee4e <tcp_rexmit_rto_prepare+0xba>
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	e000      	b.n	800ee50 <tcp_rexmit_rto_prepare+0xbc>
 800ee4e:	2300      	movs	r3, #0
 800ee50:	442b      	add	r3, r5
 800ee52:	18e2      	adds	r2, r4, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ee5e:	2300      	movs	r3, #0
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3710      	adds	r7, #16
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bdb0      	pop	{r4, r5, r7, pc}
 800ee68:	08018194 	.word	0x08018194
 800ee6c:	080187d0 	.word	0x080187d0
 800ee70:	080181e8 	.word	0x080181e8

0800ee74 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d106      	bne.n	800ee90 <tcp_rexmit_rto_commit+0x1c>
 800ee82:	4b0d      	ldr	r3, [pc, #52]	; (800eeb8 <tcp_rexmit_rto_commit+0x44>)
 800ee84:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ee88:	490c      	ldr	r1, [pc, #48]	; (800eebc <tcp_rexmit_rto_commit+0x48>)
 800ee8a:	480d      	ldr	r0, [pc, #52]	; (800eec0 <tcp_rexmit_rto_commit+0x4c>)
 800ee8c:	f004 faa2 	bl	80133d4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee96:	2bff      	cmp	r3, #255	; 0xff
 800ee98:	d007      	beq.n	800eeaa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eea0:	3301      	adds	r3, #1
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f7ff fc80 	bl	800e7b0 <tcp_output>
}
 800eeb0:	bf00      	nop
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	08018194 	.word	0x08018194
 800eebc:	080187f4 	.word	0x080187f4
 800eec0:	080181e8 	.word	0x080181e8

0800eec4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d106      	bne.n	800eee0 <tcp_rexmit_rto+0x1c>
 800eed2:	4b0a      	ldr	r3, [pc, #40]	; (800eefc <tcp_rexmit_rto+0x38>)
 800eed4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800eed8:	4909      	ldr	r1, [pc, #36]	; (800ef00 <tcp_rexmit_rto+0x3c>)
 800eeda:	480a      	ldr	r0, [pc, #40]	; (800ef04 <tcp_rexmit_rto+0x40>)
 800eedc:	f004 fa7a 	bl	80133d4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f7ff ff57 	bl	800ed94 <tcp_rexmit_rto_prepare>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d102      	bne.n	800eef2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f7ff ffc1 	bl	800ee74 <tcp_rexmit_rto_commit>
  }
}
 800eef2:	bf00      	nop
 800eef4:	3708      	adds	r7, #8
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	08018194 	.word	0x08018194
 800ef00:	08018818 	.word	0x08018818
 800ef04:	080181e8 	.word	0x080181e8

0800ef08 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ef08:	b590      	push	{r4, r7, lr}
 800ef0a:	b085      	sub	sp, #20
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d106      	bne.n	800ef24 <tcp_rexmit+0x1c>
 800ef16:	4b2f      	ldr	r3, [pc, #188]	; (800efd4 <tcp_rexmit+0xcc>)
 800ef18:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ef1c:	492e      	ldr	r1, [pc, #184]	; (800efd8 <tcp_rexmit+0xd0>)
 800ef1e:	482f      	ldr	r0, [pc, #188]	; (800efdc <tcp_rexmit+0xd4>)
 800ef20:	f004 fa58 	bl	80133d4 <iprintf>

  if (pcb->unacked == NULL) {
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d102      	bne.n	800ef32 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ef2c:	f06f 0305 	mvn.w	r3, #5
 800ef30:	e04c      	b.n	800efcc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef36:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ef38:	68b8      	ldr	r0, [r7, #8]
 800ef3a:	f7ff fe2d 	bl	800eb98 <tcp_output_segment_busy>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d002      	beq.n	800ef4a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ef44:	f06f 0305 	mvn.w	r3, #5
 800ef48:	e040      	b.n	800efcc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	336c      	adds	r3, #108	; 0x6c
 800ef56:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ef58:	e002      	b.n	800ef60 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d011      	beq.n	800ef8c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	68db      	ldr	r3, [r3, #12]
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7f9 fc6c 	bl	800884e <lwip_htonl>
 800ef76:	4604      	mov	r4, r0
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7f9 fc65 	bl	800884e <lwip_htonl>
 800ef84:	4603      	mov	r3, r0
 800ef86:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	dbe6      	blt.n	800ef5a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	68ba      	ldr	r2, [r7, #8]
 800ef98:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d103      	bne.n	800efaa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2200      	movs	r2, #0
 800efa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800efb0:	2bff      	cmp	r3, #255	; 0xff
 800efb2:	d007      	beq.n	800efc4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800efba:	3301      	adds	r3, #1
 800efbc:	b2da      	uxtb	r2, r3
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800efca:	2300      	movs	r3, #0
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3714      	adds	r7, #20
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd90      	pop	{r4, r7, pc}
 800efd4:	08018194 	.word	0x08018194
 800efd8:	08018834 	.word	0x08018834
 800efdc:	080181e8 	.word	0x080181e8

0800efe0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d106      	bne.n	800effc <tcp_rexmit_fast+0x1c>
 800efee:	4b2a      	ldr	r3, [pc, #168]	; (800f098 <tcp_rexmit_fast+0xb8>)
 800eff0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800eff4:	4929      	ldr	r1, [pc, #164]	; (800f09c <tcp_rexmit_fast+0xbc>)
 800eff6:	482a      	ldr	r0, [pc, #168]	; (800f0a0 <tcp_rexmit_fast+0xc0>)
 800eff8:	f004 f9ec 	bl	80133d4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f000:	2b00      	cmp	r3, #0
 800f002:	d044      	beq.n	800f08e <tcp_rexmit_fast+0xae>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	8b5b      	ldrh	r3, [r3, #26]
 800f008:	f003 0304 	and.w	r3, r3, #4
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d13e      	bne.n	800f08e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f7ff ff79 	bl	800ef08 <tcp_rexmit>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d138      	bne.n	800f08e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f028:	4293      	cmp	r3, r2
 800f02a:	bf28      	it	cs
 800f02c:	4613      	movcs	r3, r2
 800f02e:	b29b      	uxth	r3, r3
 800f030:	0fda      	lsrs	r2, r3, #31
 800f032:	4413      	add	r3, r2
 800f034:	105b      	asrs	r3, r3, #1
 800f036:	b29a      	uxth	r2, r3
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f044:	461a      	mov	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f04a:	005b      	lsls	r3, r3, #1
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d206      	bcs.n	800f05e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f054:	005b      	lsls	r3, r3, #1
 800f056:	b29a      	uxth	r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f068:	4619      	mov	r1, r3
 800f06a:	0049      	lsls	r1, r1, #1
 800f06c:	440b      	add	r3, r1
 800f06e:	b29b      	uxth	r3, r3
 800f070:	4413      	add	r3, r2
 800f072:	b29a      	uxth	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	8b5b      	ldrh	r3, [r3, #26]
 800f07e:	f043 0304 	orr.w	r3, r3, #4
 800f082:	b29a      	uxth	r2, r3
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2200      	movs	r2, #0
 800f08c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f08e:	bf00      	nop
 800f090:	3708      	adds	r7, #8
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	08018194 	.word	0x08018194
 800f09c:	0801884c 	.word	0x0801884c
 800f0a0:	080181e8 	.word	0x080181e8

0800f0a4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b086      	sub	sp, #24
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	607b      	str	r3, [r7, #4]
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	817b      	strh	r3, [r7, #10]
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f0b6:	897a      	ldrh	r2, [r7, #10]
 800f0b8:	893b      	ldrh	r3, [r7, #8]
 800f0ba:	4413      	add	r3, r2
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	3314      	adds	r3, #20
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	2022      	movs	r0, #34	; 0x22
 800f0ca:	f7fa fb7b 	bl	80097c4 <pbuf_alloc>
 800f0ce:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d04d      	beq.n	800f172 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f0d6:	897b      	ldrh	r3, [r7, #10]
 800f0d8:	3313      	adds	r3, #19
 800f0da:	697a      	ldr	r2, [r7, #20]
 800f0dc:	8952      	ldrh	r2, [r2, #10]
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	db06      	blt.n	800f0f0 <tcp_output_alloc_header_common+0x4c>
 800f0e2:	4b26      	ldr	r3, [pc, #152]	; (800f17c <tcp_output_alloc_header_common+0xd8>)
 800f0e4:	f240 7223 	movw	r2, #1827	; 0x723
 800f0e8:	4925      	ldr	r1, [pc, #148]	; (800f180 <tcp_output_alloc_header_common+0xdc>)
 800f0ea:	4826      	ldr	r0, [pc, #152]	; (800f184 <tcp_output_alloc_header_common+0xe0>)
 800f0ec:	f004 f972 	bl	80133d4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f0f6:	8c3b      	ldrh	r3, [r7, #32]
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7f9 fb93 	bl	8008824 <lwip_htons>
 800f0fe:	4603      	mov	r3, r0
 800f100:	461a      	mov	r2, r3
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f108:	4618      	mov	r0, r3
 800f10a:	f7f9 fb8b 	bl	8008824 <lwip_htons>
 800f10e:	4603      	mov	r3, r0
 800f110:	461a      	mov	r2, r3
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f11c:	68f8      	ldr	r0, [r7, #12]
 800f11e:	f7f9 fb96 	bl	800884e <lwip_htonl>
 800f122:	4602      	mov	r2, r0
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f128:	897b      	ldrh	r3, [r7, #10]
 800f12a:	089b      	lsrs	r3, r3, #2
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	3305      	adds	r3, #5
 800f130:	b29b      	uxth	r3, r3
 800f132:	031b      	lsls	r3, r3, #12
 800f134:	b29a      	uxth	r2, r3
 800f136:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	4313      	orrs	r3, r2
 800f13e:	b29b      	uxth	r3, r3
 800f140:	4618      	mov	r0, r3
 800f142:	f7f9 fb6f 	bl	8008824 <lwip_htons>
 800f146:	4603      	mov	r3, r0
 800f148:	461a      	mov	r2, r3
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f14e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f150:	4618      	mov	r0, r3
 800f152:	f7f9 fb67 	bl	8008824 <lwip_htons>
 800f156:	4603      	mov	r3, r0
 800f158:	461a      	mov	r2, r3
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	2200      	movs	r2, #0
 800f162:	741a      	strb	r2, [r3, #16]
 800f164:	2200      	movs	r2, #0
 800f166:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	2200      	movs	r2, #0
 800f16c:	749a      	strb	r2, [r3, #18]
 800f16e:	2200      	movs	r2, #0
 800f170:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f172:	697b      	ldr	r3, [r7, #20]
}
 800f174:	4618      	mov	r0, r3
 800f176:	3718      	adds	r7, #24
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	08018194 	.word	0x08018194
 800f180:	0801886c 	.word	0x0801886c
 800f184:	080181e8 	.word	0x080181e8

0800f188 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f188:	b5b0      	push	{r4, r5, r7, lr}
 800f18a:	b08a      	sub	sp, #40	; 0x28
 800f18c:	af04      	add	r7, sp, #16
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	607b      	str	r3, [r7, #4]
 800f192:	460b      	mov	r3, r1
 800f194:	817b      	strh	r3, [r7, #10]
 800f196:	4613      	mov	r3, r2
 800f198:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d106      	bne.n	800f1ae <tcp_output_alloc_header+0x26>
 800f1a0:	4b15      	ldr	r3, [pc, #84]	; (800f1f8 <tcp_output_alloc_header+0x70>)
 800f1a2:	f240 7242 	movw	r2, #1858	; 0x742
 800f1a6:	4915      	ldr	r1, [pc, #84]	; (800f1fc <tcp_output_alloc_header+0x74>)
 800f1a8:	4815      	ldr	r0, [pc, #84]	; (800f200 <tcp_output_alloc_header+0x78>)
 800f1aa:	f004 f913 	bl	80133d4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	8adb      	ldrh	r3, [r3, #22]
 800f1b6:	68fa      	ldr	r2, [r7, #12]
 800f1b8:	8b12      	ldrh	r2, [r2, #24]
 800f1ba:	68f9      	ldr	r1, [r7, #12]
 800f1bc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f1be:	893d      	ldrh	r5, [r7, #8]
 800f1c0:	897c      	ldrh	r4, [r7, #10]
 800f1c2:	9103      	str	r1, [sp, #12]
 800f1c4:	2110      	movs	r1, #16
 800f1c6:	9102      	str	r1, [sp, #8]
 800f1c8:	9201      	str	r2, [sp, #4]
 800f1ca:	9300      	str	r3, [sp, #0]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	462a      	mov	r2, r5
 800f1d0:	4621      	mov	r1, r4
 800f1d2:	f7ff ff67 	bl	800f0a4 <tcp_output_alloc_header_common>
 800f1d6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d006      	beq.n	800f1ec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e2:	68fa      	ldr	r2, [r7, #12]
 800f1e4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f1e6:	441a      	add	r2, r3
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f1ec:	697b      	ldr	r3, [r7, #20]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3718      	adds	r7, #24
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bdb0      	pop	{r4, r5, r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	08018194 	.word	0x08018194
 800f1fc:	0801889c 	.word	0x0801889c
 800f200:	080181e8 	.word	0x080181e8

0800f204 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b088      	sub	sp, #32
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	4611      	mov	r1, r2
 800f210:	461a      	mov	r2, r3
 800f212:	460b      	mov	r3, r1
 800f214:	71fb      	strb	r3, [r7, #7]
 800f216:	4613      	mov	r3, r2
 800f218:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f21a:	2300      	movs	r3, #0
 800f21c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d106      	bne.n	800f232 <tcp_output_fill_options+0x2e>
 800f224:	4b13      	ldr	r3, [pc, #76]	; (800f274 <tcp_output_fill_options+0x70>)
 800f226:	f240 7256 	movw	r2, #1878	; 0x756
 800f22a:	4913      	ldr	r1, [pc, #76]	; (800f278 <tcp_output_fill_options+0x74>)
 800f22c:	4813      	ldr	r0, [pc, #76]	; (800f27c <tcp_output_fill_options+0x78>)
 800f22e:	f004 f8d1 	bl	80133d4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	3314      	adds	r3, #20
 800f23c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f23e:	69bb      	ldr	r3, [r7, #24]
 800f240:	f103 0214 	add.w	r2, r3, #20
 800f244:	8bfb      	ldrh	r3, [r7, #30]
 800f246:	009b      	lsls	r3, r3, #2
 800f248:	4619      	mov	r1, r3
 800f24a:	79fb      	ldrb	r3, [r7, #7]
 800f24c:	009b      	lsls	r3, r3, #2
 800f24e:	f003 0304 	and.w	r3, r3, #4
 800f252:	440b      	add	r3, r1
 800f254:	4413      	add	r3, r2
 800f256:	697a      	ldr	r2, [r7, #20]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d006      	beq.n	800f26a <tcp_output_fill_options+0x66>
 800f25c:	4b05      	ldr	r3, [pc, #20]	; (800f274 <tcp_output_fill_options+0x70>)
 800f25e:	f240 7275 	movw	r2, #1909	; 0x775
 800f262:	4907      	ldr	r1, [pc, #28]	; (800f280 <tcp_output_fill_options+0x7c>)
 800f264:	4805      	ldr	r0, [pc, #20]	; (800f27c <tcp_output_fill_options+0x78>)
 800f266:	f004 f8b5 	bl	80133d4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f26a:	bf00      	nop
 800f26c:	3720      	adds	r7, #32
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
 800f272:	bf00      	nop
 800f274:	08018194 	.word	0x08018194
 800f278:	080188c4 	.word	0x080188c4
 800f27c:	080181e8 	.word	0x080181e8
 800f280:	080187bc 	.word	0x080187bc

0800f284 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b08a      	sub	sp, #40	; 0x28
 800f288:	af04      	add	r7, sp, #16
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	607a      	str	r2, [r7, #4]
 800f290:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d106      	bne.n	800f2a6 <tcp_output_control_segment+0x22>
 800f298:	4b1c      	ldr	r3, [pc, #112]	; (800f30c <tcp_output_control_segment+0x88>)
 800f29a:	f240 7287 	movw	r2, #1927	; 0x787
 800f29e:	491c      	ldr	r1, [pc, #112]	; (800f310 <tcp_output_control_segment+0x8c>)
 800f2a0:	481c      	ldr	r0, [pc, #112]	; (800f314 <tcp_output_control_segment+0x90>)
 800f2a2:	f004 f897 	bl	80133d4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f2a6:	683a      	ldr	r2, [r7, #0]
 800f2a8:	6879      	ldr	r1, [r7, #4]
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	f7fe ff40 	bl	800e130 <tcp_route>
 800f2b0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d102      	bne.n	800f2be <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f2b8:	23fc      	movs	r3, #252	; 0xfc
 800f2ba:	75fb      	strb	r3, [r7, #23]
 800f2bc:	e01c      	b.n	800f2f8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d006      	beq.n	800f2d2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	7adb      	ldrb	r3, [r3, #11]
 800f2c8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	7a9b      	ldrb	r3, [r3, #10]
 800f2ce:	757b      	strb	r3, [r7, #21]
 800f2d0:	e003      	b.n	800f2da <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f2d2:	23ff      	movs	r3, #255	; 0xff
 800f2d4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f2da:	7dba      	ldrb	r2, [r7, #22]
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	9302      	str	r3, [sp, #8]
 800f2e0:	2306      	movs	r3, #6
 800f2e2:	9301      	str	r3, [sp, #4]
 800f2e4:	7d7b      	ldrb	r3, [r7, #21]
 800f2e6:	9300      	str	r3, [sp, #0]
 800f2e8:	4613      	mov	r3, r2
 800f2ea:	683a      	ldr	r2, [r7, #0]
 800f2ec:	6879      	ldr	r1, [r7, #4]
 800f2ee:	68b8      	ldr	r0, [r7, #8]
 800f2f0:	f002 fabe 	bl	8011870 <ip4_output_if>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f2f8:	68b8      	ldr	r0, [r7, #8]
 800f2fa:	f7fa fd47 	bl	8009d8c <pbuf_free>
  return err;
 800f2fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f302:	4618      	mov	r0, r3
 800f304:	3718      	adds	r7, #24
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	08018194 	.word	0x08018194
 800f310:	080188ec 	.word	0x080188ec
 800f314:	080181e8 	.word	0x080181e8

0800f318 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f318:	b590      	push	{r4, r7, lr}
 800f31a:	b08b      	sub	sp, #44	; 0x2c
 800f31c:	af04      	add	r7, sp, #16
 800f31e:	60f8      	str	r0, [r7, #12]
 800f320:	60b9      	str	r1, [r7, #8]
 800f322:	607a      	str	r2, [r7, #4]
 800f324:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d106      	bne.n	800f33a <tcp_rst+0x22>
 800f32c:	4b1f      	ldr	r3, [pc, #124]	; (800f3ac <tcp_rst+0x94>)
 800f32e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f332:	491f      	ldr	r1, [pc, #124]	; (800f3b0 <tcp_rst+0x98>)
 800f334:	481f      	ldr	r0, [pc, #124]	; (800f3b4 <tcp_rst+0x9c>)
 800f336:	f004 f84d 	bl	80133d4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d106      	bne.n	800f34e <tcp_rst+0x36>
 800f340:	4b1a      	ldr	r3, [pc, #104]	; (800f3ac <tcp_rst+0x94>)
 800f342:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f346:	491c      	ldr	r1, [pc, #112]	; (800f3b8 <tcp_rst+0xa0>)
 800f348:	481a      	ldr	r0, [pc, #104]	; (800f3b4 <tcp_rst+0x9c>)
 800f34a:	f004 f843 	bl	80133d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f34e:	2300      	movs	r3, #0
 800f350:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f352:	f246 0308 	movw	r3, #24584	; 0x6008
 800f356:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f358:	7dfb      	ldrb	r3, [r7, #23]
 800f35a:	b29c      	uxth	r4, r3
 800f35c:	68b8      	ldr	r0, [r7, #8]
 800f35e:	f7f9 fa76 	bl	800884e <lwip_htonl>
 800f362:	4602      	mov	r2, r0
 800f364:	8abb      	ldrh	r3, [r7, #20]
 800f366:	9303      	str	r3, [sp, #12]
 800f368:	2314      	movs	r3, #20
 800f36a:	9302      	str	r3, [sp, #8]
 800f36c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f36e:	9301      	str	r3, [sp, #4]
 800f370:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f372:	9300      	str	r3, [sp, #0]
 800f374:	4613      	mov	r3, r2
 800f376:	2200      	movs	r2, #0
 800f378:	4621      	mov	r1, r4
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f7ff fe92 	bl	800f0a4 <tcp_output_alloc_header_common>
 800f380:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d00c      	beq.n	800f3a2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f388:	7dfb      	ldrb	r3, [r7, #23]
 800f38a:	2200      	movs	r2, #0
 800f38c:	6939      	ldr	r1, [r7, #16]
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f7ff ff38 	bl	800f204 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f396:	683a      	ldr	r2, [r7, #0]
 800f398:	6939      	ldr	r1, [r7, #16]
 800f39a:	68f8      	ldr	r0, [r7, #12]
 800f39c:	f7ff ff72 	bl	800f284 <tcp_output_control_segment>
 800f3a0:	e000      	b.n	800f3a4 <tcp_rst+0x8c>
    return;
 800f3a2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f3a4:	371c      	adds	r7, #28
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd90      	pop	{r4, r7, pc}
 800f3aa:	bf00      	nop
 800f3ac:	08018194 	.word	0x08018194
 800f3b0:	08018918 	.word	0x08018918
 800f3b4:	080181e8 	.word	0x080181e8
 800f3b8:	08018934 	.word	0x08018934

0800f3bc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f3bc:	b590      	push	{r4, r7, lr}
 800f3be:	b087      	sub	sp, #28
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d106      	bne.n	800f3e0 <tcp_send_empty_ack+0x24>
 800f3d2:	4b28      	ldr	r3, [pc, #160]	; (800f474 <tcp_send_empty_ack+0xb8>)
 800f3d4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f3d8:	4927      	ldr	r1, [pc, #156]	; (800f478 <tcp_send_empty_ack+0xbc>)
 800f3da:	4828      	ldr	r0, [pc, #160]	; (800f47c <tcp_send_empty_ack+0xc0>)
 800f3dc:	f003 fffa 	bl	80133d4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f3e0:	7dfb      	ldrb	r3, [r7, #23]
 800f3e2:	009b      	lsls	r3, r3, #2
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	f003 0304 	and.w	r3, r3, #4
 800f3ea:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f3ec:	7d7b      	ldrb	r3, [r7, #21]
 800f3ee:	b29c      	uxth	r4, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7f9 fa2a 	bl	800884e <lwip_htonl>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	4621      	mov	r1, r4
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f7ff fec1 	bl	800f188 <tcp_output_alloc_header>
 800f406:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d109      	bne.n	800f422 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	8b5b      	ldrh	r3, [r3, #26]
 800f412:	f043 0303 	orr.w	r3, r3, #3
 800f416:	b29a      	uxth	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f41c:	f06f 0301 	mvn.w	r3, #1
 800f420:	e023      	b.n	800f46a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f422:	7dbb      	ldrb	r3, [r7, #22]
 800f424:	7dfa      	ldrb	r2, [r7, #23]
 800f426:	6939      	ldr	r1, [r7, #16]
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f7ff feeb 	bl	800f204 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	3304      	adds	r3, #4
 800f434:	6939      	ldr	r1, [r7, #16]
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f7ff ff24 	bl	800f284 <tcp_output_control_segment>
 800f43c:	4603      	mov	r3, r0
 800f43e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d007      	beq.n	800f458 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	8b5b      	ldrh	r3, [r3, #26]
 800f44c:	f043 0303 	orr.w	r3, r3, #3
 800f450:	b29a      	uxth	r2, r3
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	835a      	strh	r2, [r3, #26]
 800f456:	e006      	b.n	800f466 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	8b5b      	ldrh	r3, [r3, #26]
 800f45c:	f023 0303 	bic.w	r3, r3, #3
 800f460:	b29a      	uxth	r2, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f466:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	371c      	adds	r7, #28
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd90      	pop	{r4, r7, pc}
 800f472:	bf00      	nop
 800f474:	08018194 	.word	0x08018194
 800f478:	08018950 	.word	0x08018950
 800f47c:	080181e8 	.word	0x080181e8

0800f480 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f480:	b590      	push	{r4, r7, lr}
 800f482:	b087      	sub	sp, #28
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f488:	2300      	movs	r3, #0
 800f48a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d106      	bne.n	800f4a0 <tcp_keepalive+0x20>
 800f492:	4b18      	ldr	r3, [pc, #96]	; (800f4f4 <tcp_keepalive+0x74>)
 800f494:	f640 0224 	movw	r2, #2084	; 0x824
 800f498:	4917      	ldr	r1, [pc, #92]	; (800f4f8 <tcp_keepalive+0x78>)
 800f49a:	4818      	ldr	r0, [pc, #96]	; (800f4fc <tcp_keepalive+0x7c>)
 800f49c:	f003 ff9a 	bl	80133d4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f4a0:	7dfb      	ldrb	r3, [r7, #23]
 800f4a2:	b29c      	uxth	r4, r3
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7f9 f9cf 	bl	800884e <lwip_htonl>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	4621      	mov	r1, r4
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f7ff fe66 	bl	800f188 <tcp_output_alloc_header>
 800f4bc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d102      	bne.n	800f4ca <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f4c8:	e010      	b.n	800f4ec <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f4ca:	7dfb      	ldrb	r3, [r7, #23]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	6939      	ldr	r1, [r7, #16]
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f7ff fe97 	bl	800f204 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f4d6:	687a      	ldr	r2, [r7, #4]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	3304      	adds	r3, #4
 800f4dc:	6939      	ldr	r1, [r7, #16]
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f7ff fed0 	bl	800f284 <tcp_output_control_segment>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f4e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	371c      	adds	r7, #28
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd90      	pop	{r4, r7, pc}
 800f4f4:	08018194 	.word	0x08018194
 800f4f8:	08018970 	.word	0x08018970
 800f4fc:	080181e8 	.word	0x080181e8

0800f500 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f500:	b590      	push	{r4, r7, lr}
 800f502:	b08b      	sub	sp, #44	; 0x2c
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f508:	2300      	movs	r3, #0
 800f50a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d106      	bne.n	800f522 <tcp_zero_window_probe+0x22>
 800f514:	4b4c      	ldr	r3, [pc, #304]	; (800f648 <tcp_zero_window_probe+0x148>)
 800f516:	f640 024f 	movw	r2, #2127	; 0x84f
 800f51a:	494c      	ldr	r1, [pc, #304]	; (800f64c <tcp_zero_window_probe+0x14c>)
 800f51c:	484c      	ldr	r0, [pc, #304]	; (800f650 <tcp_zero_window_probe+0x150>)
 800f51e:	f003 ff59 	bl	80133d4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f526:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f528:	6a3b      	ldr	r3, [r7, #32]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d101      	bne.n	800f532 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f52e:	2300      	movs	r3, #0
 800f530:	e086      	b.n	800f640 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f538:	2bff      	cmp	r3, #255	; 0xff
 800f53a:	d007      	beq.n	800f54c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f542:	3301      	adds	r3, #1
 800f544:	b2da      	uxtb	r2, r3
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f54c:	6a3b      	ldr	r3, [r7, #32]
 800f54e:	68db      	ldr	r3, [r3, #12]
 800f550:	899b      	ldrh	r3, [r3, #12]
 800f552:	b29b      	uxth	r3, r3
 800f554:	4618      	mov	r0, r3
 800f556:	f7f9 f965 	bl	8008824 <lwip_htons>
 800f55a:	4603      	mov	r3, r0
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	f003 0301 	and.w	r3, r3, #1
 800f562:	2b00      	cmp	r3, #0
 800f564:	d005      	beq.n	800f572 <tcp_zero_window_probe+0x72>
 800f566:	6a3b      	ldr	r3, [r7, #32]
 800f568:	891b      	ldrh	r3, [r3, #8]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d101      	bne.n	800f572 <tcp_zero_window_probe+0x72>
 800f56e:	2301      	movs	r3, #1
 800f570:	e000      	b.n	800f574 <tcp_zero_window_probe+0x74>
 800f572:	2300      	movs	r3, #0
 800f574:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f576:	7ffb      	ldrb	r3, [r7, #31]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	bf0c      	ite	eq
 800f57c:	2301      	moveq	r3, #1
 800f57e:	2300      	movne	r3, #0
 800f580:	b2db      	uxtb	r3, r3
 800f582:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f588:	b299      	uxth	r1, r3
 800f58a:	6a3b      	ldr	r3, [r7, #32]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	8bba      	ldrh	r2, [r7, #28]
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f7ff fdf8 	bl	800f188 <tcp_output_alloc_header>
 800f598:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d102      	bne.n	800f5a6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5a4:	e04c      	b.n	800f640 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f5ac:	7ffb      	ldrb	r3, [r7, #31]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d011      	beq.n	800f5d6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	899b      	ldrh	r3, [r3, #12]
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	b21b      	sxth	r3, r3
 800f5ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f5be:	b21c      	sxth	r4, r3
 800f5c0:	2011      	movs	r0, #17
 800f5c2:	f7f9 f92f 	bl	8008824 <lwip_htons>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	b21b      	sxth	r3, r3
 800f5ca:	4323      	orrs	r3, r4
 800f5cc:	b21b      	sxth	r3, r3
 800f5ce:	b29a      	uxth	r2, r3
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	819a      	strh	r2, [r3, #12]
 800f5d4:	e010      	b.n	800f5f8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f5d6:	69bb      	ldr	r3, [r7, #24]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	3314      	adds	r3, #20
 800f5dc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f5de:	6a3b      	ldr	r3, [r7, #32]
 800f5e0:	6858      	ldr	r0, [r3, #4]
 800f5e2:	6a3b      	ldr	r3, [r7, #32]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	891a      	ldrh	r2, [r3, #8]
 800f5e8:	6a3b      	ldr	r3, [r7, #32]
 800f5ea:	891b      	ldrh	r3, [r3, #8]
 800f5ec:	1ad3      	subs	r3, r2, r3
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	6939      	ldr	r1, [r7, #16]
 800f5f4:	f7fa fdc4 	bl	800a180 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f5f8:	6a3b      	ldr	r3, [r7, #32]
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7f9 f925 	bl	800884e <lwip_htonl>
 800f604:	4603      	mov	r3, r0
 800f606:	3301      	adds	r3, #1
 800f608:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	1ad3      	subs	r3, r2, r3
 800f612:	2b00      	cmp	r3, #0
 800f614:	da02      	bge.n	800f61c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	68fa      	ldr	r2, [r7, #12]
 800f61a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f620:	2200      	movs	r2, #0
 800f622:	69b9      	ldr	r1, [r7, #24]
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f7ff fded 	bl	800f204 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f62a:	687a      	ldr	r2, [r7, #4]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	3304      	adds	r3, #4
 800f630:	69b9      	ldr	r1, [r7, #24]
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f7ff fe26 	bl	800f284 <tcp_output_control_segment>
 800f638:	4603      	mov	r3, r0
 800f63a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f63c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f640:	4618      	mov	r0, r3
 800f642:	372c      	adds	r7, #44	; 0x2c
 800f644:	46bd      	mov	sp, r7
 800f646:	bd90      	pop	{r4, r7, pc}
 800f648:	08018194 	.word	0x08018194
 800f64c:	0801898c 	.word	0x0801898c
 800f650:	080181e8 	.word	0x080181e8

0800f654 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f65c:	f7fa ff10 	bl	800a480 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f660:	4b0a      	ldr	r3, [pc, #40]	; (800f68c <tcpip_tcp_timer+0x38>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d103      	bne.n	800f670 <tcpip_tcp_timer+0x1c>
 800f668:	4b09      	ldr	r3, [pc, #36]	; (800f690 <tcpip_tcp_timer+0x3c>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d005      	beq.n	800f67c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f670:	2200      	movs	r2, #0
 800f672:	4908      	ldr	r1, [pc, #32]	; (800f694 <tcpip_tcp_timer+0x40>)
 800f674:	20fa      	movs	r0, #250	; 0xfa
 800f676:	f000 f8f3 	bl	800f860 <sys_timeout>
 800f67a:	e003      	b.n	800f684 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f67c:	4b06      	ldr	r3, [pc, #24]	; (800f698 <tcpip_tcp_timer+0x44>)
 800f67e:	2200      	movs	r2, #0
 800f680:	601a      	str	r2, [r3, #0]
  }
}
 800f682:	bf00      	nop
 800f684:	bf00      	nop
 800f686:	3708      	adds	r7, #8
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	200090d8 	.word	0x200090d8
 800f690:	200090e8 	.word	0x200090e8
 800f694:	0800f655 	.word	0x0800f655
 800f698:	200002f8 	.word	0x200002f8

0800f69c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f6a0:	4b0a      	ldr	r3, [pc, #40]	; (800f6cc <tcp_timer_needed+0x30>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d10f      	bne.n	800f6c8 <tcp_timer_needed+0x2c>
 800f6a8:	4b09      	ldr	r3, [pc, #36]	; (800f6d0 <tcp_timer_needed+0x34>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d103      	bne.n	800f6b8 <tcp_timer_needed+0x1c>
 800f6b0:	4b08      	ldr	r3, [pc, #32]	; (800f6d4 <tcp_timer_needed+0x38>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d007      	beq.n	800f6c8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f6b8:	4b04      	ldr	r3, [pc, #16]	; (800f6cc <tcp_timer_needed+0x30>)
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f6be:	2200      	movs	r2, #0
 800f6c0:	4905      	ldr	r1, [pc, #20]	; (800f6d8 <tcp_timer_needed+0x3c>)
 800f6c2:	20fa      	movs	r0, #250	; 0xfa
 800f6c4:	f000 f8cc 	bl	800f860 <sys_timeout>
  }
}
 800f6c8:	bf00      	nop
 800f6ca:	bd80      	pop	{r7, pc}
 800f6cc:	200002f8 	.word	0x200002f8
 800f6d0:	200090d8 	.word	0x200090d8
 800f6d4:	200090e8 	.word	0x200090e8
 800f6d8:	0800f655 	.word	0x0800f655

0800f6dc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b086      	sub	sp, #24
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	60b9      	str	r1, [r7, #8]
 800f6e6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f6e8:	2006      	movs	r0, #6
 800f6ea:	f7f9 fcf1 	bl	80090d0 <memp_malloc>
 800f6ee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d109      	bne.n	800f70a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d151      	bne.n	800f7a0 <sys_timeout_abs+0xc4>
 800f6fc:	4b2a      	ldr	r3, [pc, #168]	; (800f7a8 <sys_timeout_abs+0xcc>)
 800f6fe:	22be      	movs	r2, #190	; 0xbe
 800f700:	492a      	ldr	r1, [pc, #168]	; (800f7ac <sys_timeout_abs+0xd0>)
 800f702:	482b      	ldr	r0, [pc, #172]	; (800f7b0 <sys_timeout_abs+0xd4>)
 800f704:	f003 fe66 	bl	80133d4 <iprintf>
    return;
 800f708:	e04a      	b.n	800f7a0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	2200      	movs	r2, #0
 800f70e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	68ba      	ldr	r2, [r7, #8]
 800f714:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	687a      	ldr	r2, [r7, #4]
 800f71a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	68fa      	ldr	r2, [r7, #12]
 800f720:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f722:	4b24      	ldr	r3, [pc, #144]	; (800f7b4 <sys_timeout_abs+0xd8>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d103      	bne.n	800f732 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f72a:	4a22      	ldr	r2, [pc, #136]	; (800f7b4 <sys_timeout_abs+0xd8>)
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	6013      	str	r3, [r2, #0]
    return;
 800f730:	e037      	b.n	800f7a2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	685a      	ldr	r2, [r3, #4]
 800f736:	4b1f      	ldr	r3, [pc, #124]	; (800f7b4 <sys_timeout_abs+0xd8>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	1ad3      	subs	r3, r2, r3
 800f73e:	0fdb      	lsrs	r3, r3, #31
 800f740:	f003 0301 	and.w	r3, r3, #1
 800f744:	b2db      	uxtb	r3, r3
 800f746:	2b00      	cmp	r3, #0
 800f748:	d007      	beq.n	800f75a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f74a:	4b1a      	ldr	r3, [pc, #104]	; (800f7b4 <sys_timeout_abs+0xd8>)
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f752:	4a18      	ldr	r2, [pc, #96]	; (800f7b4 <sys_timeout_abs+0xd8>)
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	6013      	str	r3, [r2, #0]
 800f758:	e023      	b.n	800f7a2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f75a:	4b16      	ldr	r3, [pc, #88]	; (800f7b4 <sys_timeout_abs+0xd8>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	617b      	str	r3, [r7, #20]
 800f760:	e01a      	b.n	800f798 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d00b      	beq.n	800f782 <sys_timeout_abs+0xa6>
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	685a      	ldr	r2, [r3, #4]
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	1ad3      	subs	r3, r2, r3
 800f776:	0fdb      	lsrs	r3, r3, #31
 800f778:	f003 0301 	and.w	r3, r3, #1
 800f77c:	b2db      	uxtb	r3, r3
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d007      	beq.n	800f792 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	681a      	ldr	r2, [r3, #0]
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	693a      	ldr	r2, [r7, #16]
 800f78e:	601a      	str	r2, [r3, #0]
        break;
 800f790:	e007      	b.n	800f7a2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	617b      	str	r3, [r7, #20]
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d1e1      	bne.n	800f762 <sys_timeout_abs+0x86>
 800f79e:	e000      	b.n	800f7a2 <sys_timeout_abs+0xc6>
    return;
 800f7a0:	bf00      	nop
      }
    }
  }
}
 800f7a2:	3718      	adds	r7, #24
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	080189b0 	.word	0x080189b0
 800f7ac:	080189e4 	.word	0x080189e4
 800f7b0:	08018a24 	.word	0x08018a24
 800f7b4:	200002f0 	.word	0x200002f0

0800f7b8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b086      	sub	sp, #24
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	4798      	blx	r3

  now = sys_now();
 800f7ca:	f7f8 ff9d 	bl	8008708 <sys_now>
 800f7ce:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	4b0f      	ldr	r3, [pc, #60]	; (800f814 <lwip_cyclic_timer+0x5c>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	4413      	add	r3, r2
 800f7da:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f7dc:	68fa      	ldr	r2, [r7, #12]
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	1ad3      	subs	r3, r2, r3
 800f7e2:	0fdb      	lsrs	r3, r3, #31
 800f7e4:	f003 0301 	and.w	r3, r3, #1
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d009      	beq.n	800f802 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	681a      	ldr	r2, [r3, #0]
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	4413      	add	r3, r2
 800f7f6:	687a      	ldr	r2, [r7, #4]
 800f7f8:	4907      	ldr	r1, [pc, #28]	; (800f818 <lwip_cyclic_timer+0x60>)
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7ff ff6e 	bl	800f6dc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f800:	e004      	b.n	800f80c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f802:	687a      	ldr	r2, [r7, #4]
 800f804:	4904      	ldr	r1, [pc, #16]	; (800f818 <lwip_cyclic_timer+0x60>)
 800f806:	68f8      	ldr	r0, [r7, #12]
 800f808:	f7ff ff68 	bl	800f6dc <sys_timeout_abs>
}
 800f80c:	bf00      	nop
 800f80e:	3718      	adds	r7, #24
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}
 800f814:	200002f4 	.word	0x200002f4
 800f818:	0800f7b9 	.word	0x0800f7b9

0800f81c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f822:	2301      	movs	r3, #1
 800f824:	607b      	str	r3, [r7, #4]
 800f826:	e00e      	b.n	800f846 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f828:	4a0b      	ldr	r2, [pc, #44]	; (800f858 <sys_timeouts_init+0x3c>)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	00db      	lsls	r3, r3, #3
 800f834:	4a08      	ldr	r2, [pc, #32]	; (800f858 <sys_timeouts_init+0x3c>)
 800f836:	4413      	add	r3, r2
 800f838:	461a      	mov	r2, r3
 800f83a:	4908      	ldr	r1, [pc, #32]	; (800f85c <sys_timeouts_init+0x40>)
 800f83c:	f000 f810 	bl	800f860 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	3301      	adds	r3, #1
 800f844:	607b      	str	r3, [r7, #4]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2b02      	cmp	r3, #2
 800f84a:	d9ed      	bls.n	800f828 <sys_timeouts_init+0xc>
  }
}
 800f84c:	bf00      	nop
 800f84e:	bf00      	nop
 800f850:	3708      	adds	r7, #8
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	08019588 	.word	0x08019588
 800f85c:	0800f7b9 	.word	0x0800f7b9

0800f860 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b086      	sub	sp, #24
 800f864:	af00      	add	r7, sp, #0
 800f866:	60f8      	str	r0, [r7, #12]
 800f868:	60b9      	str	r1, [r7, #8]
 800f86a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f872:	d306      	bcc.n	800f882 <sys_timeout+0x22>
 800f874:	4b0a      	ldr	r3, [pc, #40]	; (800f8a0 <sys_timeout+0x40>)
 800f876:	f240 1229 	movw	r2, #297	; 0x129
 800f87a:	490a      	ldr	r1, [pc, #40]	; (800f8a4 <sys_timeout+0x44>)
 800f87c:	480a      	ldr	r0, [pc, #40]	; (800f8a8 <sys_timeout+0x48>)
 800f87e:	f003 fda9 	bl	80133d4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f882:	f7f8 ff41 	bl	8008708 <sys_now>
 800f886:	4602      	mov	r2, r0
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	4413      	add	r3, r2
 800f88c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f88e:	687a      	ldr	r2, [r7, #4]
 800f890:	68b9      	ldr	r1, [r7, #8]
 800f892:	6978      	ldr	r0, [r7, #20]
 800f894:	f7ff ff22 	bl	800f6dc <sys_timeout_abs>
#endif
}
 800f898:	bf00      	nop
 800f89a:	3718      	adds	r7, #24
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	080189b0 	.word	0x080189b0
 800f8a4:	08018a4c 	.word	0x08018a4c
 800f8a8:	08018a24 	.word	0x08018a24

0800f8ac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f8b2:	f7f8 ff29 	bl	8008708 <sys_now>
 800f8b6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f8b8:	4b1a      	ldr	r3, [pc, #104]	; (800f924 <sys_check_timeouts+0x78>)
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d001      	beq.n	800f8c6 <sys_check_timeouts+0x1a>
 800f8c2:	f7f9 ff29 	bl	8009718 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f8c6:	4b18      	ldr	r3, [pc, #96]	; (800f928 <sys_check_timeouts+0x7c>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d022      	beq.n	800f918 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	685b      	ldr	r3, [r3, #4]
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	1ad3      	subs	r3, r2, r3
 800f8da:	0fdb      	lsrs	r3, r3, #31
 800f8dc:	f003 0301 	and.w	r3, r3, #1
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d11a      	bne.n	800f91c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4a0f      	ldr	r2, [pc, #60]	; (800f928 <sys_check_timeouts+0x7c>)
 800f8ec:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	689b      	ldr	r3, [r3, #8]
 800f8f2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	68db      	ldr	r3, [r3, #12]
 800f8f8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	685b      	ldr	r3, [r3, #4]
 800f8fe:	4a0b      	ldr	r2, [pc, #44]	; (800f92c <sys_check_timeouts+0x80>)
 800f900:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f902:	68b9      	ldr	r1, [r7, #8]
 800f904:	2006      	movs	r0, #6
 800f906:	f7f9 fc2f 	bl	8009168 <memp_free>
    if (handler != NULL) {
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d0d3      	beq.n	800f8b8 <sys_check_timeouts+0xc>
      handler(arg);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6838      	ldr	r0, [r7, #0]
 800f914:	4798      	blx	r3
  do {
 800f916:	e7cf      	b.n	800f8b8 <sys_check_timeouts+0xc>
      return;
 800f918:	bf00      	nop
 800f91a:	e000      	b.n	800f91e <sys_check_timeouts+0x72>
      return;
 800f91c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f91e:	3710      	adds	r7, #16
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}
 800f924:	200090d0 	.word	0x200090d0
 800f928:	200002f0 	.word	0x200002f0
 800f92c:	200002f4 	.word	0x200002f4

0800f930 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f934:	f003 fd66 	bl	8013404 <rand>
 800f938:	4603      	mov	r3, r0
 800f93a:	b29b      	uxth	r3, r3
 800f93c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f940:	b29b      	uxth	r3, r3
 800f942:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f946:	b29a      	uxth	r2, r3
 800f948:	4b01      	ldr	r3, [pc, #4]	; (800f950 <udp_init+0x20>)
 800f94a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f94c:	bf00      	nop
 800f94e:	bd80      	pop	{r7, pc}
 800f950:	20000048 	.word	0x20000048

0800f954 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f95a:	2300      	movs	r3, #0
 800f95c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f95e:	4b17      	ldr	r3, [pc, #92]	; (800f9bc <udp_new_port+0x68>)
 800f960:	881b      	ldrh	r3, [r3, #0]
 800f962:	1c5a      	adds	r2, r3, #1
 800f964:	b291      	uxth	r1, r2
 800f966:	4a15      	ldr	r2, [pc, #84]	; (800f9bc <udp_new_port+0x68>)
 800f968:	8011      	strh	r1, [r2, #0]
 800f96a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f96e:	4293      	cmp	r3, r2
 800f970:	d103      	bne.n	800f97a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f972:	4b12      	ldr	r3, [pc, #72]	; (800f9bc <udp_new_port+0x68>)
 800f974:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f978:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f97a:	4b11      	ldr	r3, [pc, #68]	; (800f9c0 <udp_new_port+0x6c>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	603b      	str	r3, [r7, #0]
 800f980:	e011      	b.n	800f9a6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	8a5a      	ldrh	r2, [r3, #18]
 800f986:	4b0d      	ldr	r3, [pc, #52]	; (800f9bc <udp_new_port+0x68>)
 800f988:	881b      	ldrh	r3, [r3, #0]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d108      	bne.n	800f9a0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f98e:	88fb      	ldrh	r3, [r7, #6]
 800f990:	3301      	adds	r3, #1
 800f992:	80fb      	strh	r3, [r7, #6]
 800f994:	88fb      	ldrh	r3, [r7, #6]
 800f996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f99a:	d3e0      	bcc.n	800f95e <udp_new_port+0xa>
        return 0;
 800f99c:	2300      	movs	r3, #0
 800f99e:	e007      	b.n	800f9b0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	68db      	ldr	r3, [r3, #12]
 800f9a4:	603b      	str	r3, [r7, #0]
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d1ea      	bne.n	800f982 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f9ac:	4b03      	ldr	r3, [pc, #12]	; (800f9bc <udp_new_port+0x68>)
 800f9ae:	881b      	ldrh	r3, [r3, #0]
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	370c      	adds	r7, #12
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr
 800f9bc:	20000048 	.word	0x20000048
 800f9c0:	200090f0 	.word	0x200090f0

0800f9c4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	60f8      	str	r0, [r7, #12]
 800f9cc:	60b9      	str	r1, [r7, #8]
 800f9ce:	4613      	mov	r3, r2
 800f9d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d105      	bne.n	800f9e4 <udp_input_local_match+0x20>
 800f9d8:	4b27      	ldr	r3, [pc, #156]	; (800fa78 <udp_input_local_match+0xb4>)
 800f9da:	2287      	movs	r2, #135	; 0x87
 800f9dc:	4927      	ldr	r1, [pc, #156]	; (800fa7c <udp_input_local_match+0xb8>)
 800f9de:	4828      	ldr	r0, [pc, #160]	; (800fa80 <udp_input_local_match+0xbc>)
 800f9e0:	f003 fcf8 	bl	80133d4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d105      	bne.n	800f9f6 <udp_input_local_match+0x32>
 800f9ea:	4b23      	ldr	r3, [pc, #140]	; (800fa78 <udp_input_local_match+0xb4>)
 800f9ec:	2288      	movs	r2, #136	; 0x88
 800f9ee:	4925      	ldr	r1, [pc, #148]	; (800fa84 <udp_input_local_match+0xc0>)
 800f9f0:	4823      	ldr	r0, [pc, #140]	; (800fa80 <udp_input_local_match+0xbc>)
 800f9f2:	f003 fcef 	bl	80133d4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	7a1b      	ldrb	r3, [r3, #8]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d00b      	beq.n	800fa16 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	7a1a      	ldrb	r2, [r3, #8]
 800fa02:	4b21      	ldr	r3, [pc, #132]	; (800fa88 <udp_input_local_match+0xc4>)
 800fa04:	685b      	ldr	r3, [r3, #4]
 800fa06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d001      	beq.n	800fa16 <udp_input_local_match+0x52>
    return 0;
 800fa12:	2300      	movs	r3, #0
 800fa14:	e02b      	b.n	800fa6e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800fa16:	79fb      	ldrb	r3, [r7, #7]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d018      	beq.n	800fa4e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d013      	beq.n	800fa4a <udp_input_local_match+0x86>
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d00f      	beq.n	800fa4a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fa2a:	4b17      	ldr	r3, [pc, #92]	; (800fa88 <udp_input_local_match+0xc4>)
 800fa2c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fa2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa32:	d00a      	beq.n	800fa4a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	4b13      	ldr	r3, [pc, #76]	; (800fa88 <udp_input_local_match+0xc4>)
 800fa3a:	695b      	ldr	r3, [r3, #20]
 800fa3c:	405a      	eors	r2, r3
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	3308      	adds	r3, #8
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d110      	bne.n	800fa6c <udp_input_local_match+0xa8>
          return 1;
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	e00f      	b.n	800fa6e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d009      	beq.n	800fa68 <udp_input_local_match+0xa4>
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d005      	beq.n	800fa68 <udp_input_local_match+0xa4>
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	681a      	ldr	r2, [r3, #0]
 800fa60:	4b09      	ldr	r3, [pc, #36]	; (800fa88 <udp_input_local_match+0xc4>)
 800fa62:	695b      	ldr	r3, [r3, #20]
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d101      	bne.n	800fa6c <udp_input_local_match+0xa8>
        return 1;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	e000      	b.n	800fa6e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800fa6c:	2300      	movs	r3, #0
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3710      	adds	r7, #16
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	08018a98 	.word	0x08018a98
 800fa7c:	08018ac8 	.word	0x08018ac8
 800fa80:	08018aec 	.word	0x08018aec
 800fa84:	08018b14 	.word	0x08018b14
 800fa88:	200039d4 	.word	0x200039d4

0800fa8c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800fa8c:	b590      	push	{r4, r7, lr}
 800fa8e:	b08d      	sub	sp, #52	; 0x34
 800fa90:	af02      	add	r7, sp, #8
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800fa96:	2300      	movs	r3, #0
 800fa98:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d105      	bne.n	800faac <udp_input+0x20>
 800faa0:	4b7c      	ldr	r3, [pc, #496]	; (800fc94 <udp_input+0x208>)
 800faa2:	22cf      	movs	r2, #207	; 0xcf
 800faa4:	497c      	ldr	r1, [pc, #496]	; (800fc98 <udp_input+0x20c>)
 800faa6:	487d      	ldr	r0, [pc, #500]	; (800fc9c <udp_input+0x210>)
 800faa8:	f003 fc94 	bl	80133d4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d105      	bne.n	800fabe <udp_input+0x32>
 800fab2:	4b78      	ldr	r3, [pc, #480]	; (800fc94 <udp_input+0x208>)
 800fab4:	22d0      	movs	r2, #208	; 0xd0
 800fab6:	497a      	ldr	r1, [pc, #488]	; (800fca0 <udp_input+0x214>)
 800fab8:	4878      	ldr	r0, [pc, #480]	; (800fc9c <udp_input+0x210>)
 800faba:	f003 fc8b 	bl	80133d4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	895b      	ldrh	r3, [r3, #10]
 800fac2:	2b07      	cmp	r3, #7
 800fac4:	d803      	bhi.n	800face <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f7fa f960 	bl	8009d8c <pbuf_free>
    goto end;
 800facc:	e0de      	b.n	800fc8c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	685b      	ldr	r3, [r3, #4]
 800fad2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800fad4:	4b73      	ldr	r3, [pc, #460]	; (800fca4 <udp_input+0x218>)
 800fad6:	695b      	ldr	r3, [r3, #20]
 800fad8:	4a72      	ldr	r2, [pc, #456]	; (800fca4 <udp_input+0x218>)
 800fada:	6812      	ldr	r2, [r2, #0]
 800fadc:	4611      	mov	r1, r2
 800fade:	4618      	mov	r0, r3
 800fae0:	f001 ff9e 	bl	8011a20 <ip4_addr_isbroadcast_u32>
 800fae4:	4603      	mov	r3, r0
 800fae6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	881b      	ldrh	r3, [r3, #0]
 800faec:	b29b      	uxth	r3, r3
 800faee:	4618      	mov	r0, r3
 800faf0:	f7f8 fe98 	bl	8008824 <lwip_htons>
 800faf4:	4603      	mov	r3, r0
 800faf6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	885b      	ldrh	r3, [r3, #2]
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7f8 fe90 	bl	8008824 <lwip_htons>
 800fb04:	4603      	mov	r3, r0
 800fb06:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800fb10:	2300      	movs	r3, #0
 800fb12:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb14:	4b64      	ldr	r3, [pc, #400]	; (800fca8 <udp_input+0x21c>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	627b      	str	r3, [r7, #36]	; 0x24
 800fb1a:	e054      	b.n	800fbc6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800fb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1e:	8a5b      	ldrh	r3, [r3, #18]
 800fb20:	89fa      	ldrh	r2, [r7, #14]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d14a      	bne.n	800fbbc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800fb26:	7cfb      	ldrb	r3, [r7, #19]
 800fb28:	461a      	mov	r2, r3
 800fb2a:	6839      	ldr	r1, [r7, #0]
 800fb2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb2e:	f7ff ff49 	bl	800f9c4 <udp_input_local_match>
 800fb32:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d041      	beq.n	800fbbc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800fb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3a:	7c1b      	ldrb	r3, [r3, #16]
 800fb3c:	f003 0304 	and.w	r3, r3, #4
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d11d      	bne.n	800fb80 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800fb44:	69fb      	ldr	r3, [r7, #28]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d102      	bne.n	800fb50 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800fb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4c:	61fb      	str	r3, [r7, #28]
 800fb4e:	e017      	b.n	800fb80 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800fb50:	7cfb      	ldrb	r3, [r7, #19]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d014      	beq.n	800fb80 <udp_input+0xf4>
 800fb56:	4b53      	ldr	r3, [pc, #332]	; (800fca4 <udp_input+0x218>)
 800fb58:	695b      	ldr	r3, [r3, #20]
 800fb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb5e:	d10f      	bne.n	800fb80 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	3304      	adds	r3, #4
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d008      	beq.n	800fb80 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800fb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb70:	681a      	ldr	r2, [r3, #0]
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	3304      	adds	r3, #4
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d101      	bne.n	800fb80 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800fb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800fb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb82:	8a9b      	ldrh	r3, [r3, #20]
 800fb84:	8a3a      	ldrh	r2, [r7, #16]
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d118      	bne.n	800fbbc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d005      	beq.n	800fb9e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800fb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb94:	685a      	ldr	r2, [r3, #4]
 800fb96:	4b43      	ldr	r3, [pc, #268]	; (800fca4 <udp_input+0x218>)
 800fb98:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d10e      	bne.n	800fbbc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fb9e:	6a3b      	ldr	r3, [r7, #32]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d014      	beq.n	800fbce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba6:	68da      	ldr	r2, [r3, #12]
 800fba8:	6a3b      	ldr	r3, [r7, #32]
 800fbaa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fbac:	4b3e      	ldr	r3, [pc, #248]	; (800fca8 <udp_input+0x21c>)
 800fbae:	681a      	ldr	r2, [r3, #0]
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fbb4:	4a3c      	ldr	r2, [pc, #240]	; (800fca8 <udp_input+0x21c>)
 800fbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fbba:	e008      	b.n	800fbce <udp_input+0x142>
      }
    }

    prev = pcb;
 800fbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbbe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	627b      	str	r3, [r7, #36]	; 0x24
 800fbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d1a7      	bne.n	800fb1c <udp_input+0x90>
 800fbcc:	e000      	b.n	800fbd0 <udp_input+0x144>
        break;
 800fbce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d101      	bne.n	800fbda <udp_input+0x14e>
    pcb = uncon_pcb;
 800fbd6:	69fb      	ldr	r3, [r7, #28]
 800fbd8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d002      	beq.n	800fbe6 <udp_input+0x15a>
    for_us = 1;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	76fb      	strb	r3, [r7, #27]
 800fbe4:	e00a      	b.n	800fbfc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	3304      	adds	r3, #4
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	4b2d      	ldr	r3, [pc, #180]	; (800fca4 <udp_input+0x218>)
 800fbee:	695b      	ldr	r3, [r3, #20]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	bf0c      	ite	eq
 800fbf4:	2301      	moveq	r3, #1
 800fbf6:	2300      	movne	r3, #0
 800fbf8:	b2db      	uxtb	r3, r3
 800fbfa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fbfc:	7efb      	ldrb	r3, [r7, #27]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d041      	beq.n	800fc86 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800fc02:	2108      	movs	r1, #8
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f7fa f83b 	bl	8009c80 <pbuf_remove_header>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d00a      	beq.n	800fc26 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800fc10:	4b20      	ldr	r3, [pc, #128]	; (800fc94 <udp_input+0x208>)
 800fc12:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800fc16:	4925      	ldr	r1, [pc, #148]	; (800fcac <udp_input+0x220>)
 800fc18:	4820      	ldr	r0, [pc, #128]	; (800fc9c <udp_input+0x210>)
 800fc1a:	f003 fbdb 	bl	80133d4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f7fa f8b4 	bl	8009d8c <pbuf_free>
      goto end;
 800fc24:	e032      	b.n	800fc8c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800fc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d012      	beq.n	800fc52 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2e:	699b      	ldr	r3, [r3, #24]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d00a      	beq.n	800fc4a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc36:	699c      	ldr	r4, [r3, #24]
 800fc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3a:	69d8      	ldr	r0, [r3, #28]
 800fc3c:	8a3b      	ldrh	r3, [r7, #16]
 800fc3e:	9300      	str	r3, [sp, #0]
 800fc40:	4b1b      	ldr	r3, [pc, #108]	; (800fcb0 <udp_input+0x224>)
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc46:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800fc48:	e021      	b.n	800fc8e <udp_input+0x202>
        pbuf_free(p);
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f7fa f89e 	bl	8009d8c <pbuf_free>
        goto end;
 800fc50:	e01c      	b.n	800fc8c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fc52:	7cfb      	ldrb	r3, [r7, #19]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d112      	bne.n	800fc7e <udp_input+0x1f2>
 800fc58:	4b12      	ldr	r3, [pc, #72]	; (800fca4 <udp_input+0x218>)
 800fc5a:	695b      	ldr	r3, [r3, #20]
 800fc5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc60:	2be0      	cmp	r3, #224	; 0xe0
 800fc62:	d00c      	beq.n	800fc7e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fc64:	4b0f      	ldr	r3, [pc, #60]	; (800fca4 <udp_input+0x218>)
 800fc66:	899b      	ldrh	r3, [r3, #12]
 800fc68:	3308      	adds	r3, #8
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	b21b      	sxth	r3, r3
 800fc6e:	4619      	mov	r1, r3
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f7fa f878 	bl	8009d66 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fc76:	2103      	movs	r1, #3
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f001 fbb1 	bl	80113e0 <icmp_dest_unreach>
      pbuf_free(p);
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f7fa f884 	bl	8009d8c <pbuf_free>
  return;
 800fc84:	e003      	b.n	800fc8e <udp_input+0x202>
    pbuf_free(p);
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f7fa f880 	bl	8009d8c <pbuf_free>
  return;
 800fc8c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fc8e:	372c      	adds	r7, #44	; 0x2c
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd90      	pop	{r4, r7, pc}
 800fc94:	08018a98 	.word	0x08018a98
 800fc98:	08018b3c 	.word	0x08018b3c
 800fc9c:	08018aec 	.word	0x08018aec
 800fca0:	08018b54 	.word	0x08018b54
 800fca4:	200039d4 	.word	0x200039d4
 800fca8:	200090f0 	.word	0x200090f0
 800fcac:	08018b70 	.word	0x08018b70
 800fcb0:	200039e4 	.word	0x200039e4

0800fcb4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d109      	bne.n	800fcd8 <udp_send+0x24>
 800fcc4:	4b11      	ldr	r3, [pc, #68]	; (800fd0c <udp_send+0x58>)
 800fcc6:	f240 12d5 	movw	r2, #469	; 0x1d5
 800fcca:	4911      	ldr	r1, [pc, #68]	; (800fd10 <udp_send+0x5c>)
 800fccc:	4811      	ldr	r0, [pc, #68]	; (800fd14 <udp_send+0x60>)
 800fcce:	f003 fb81 	bl	80133d4 <iprintf>
 800fcd2:	f06f 030f 	mvn.w	r3, #15
 800fcd6:	e015      	b.n	800fd04 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d109      	bne.n	800fcf2 <udp_send+0x3e>
 800fcde:	4b0b      	ldr	r3, [pc, #44]	; (800fd0c <udp_send+0x58>)
 800fce0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800fce4:	490c      	ldr	r1, [pc, #48]	; (800fd18 <udp_send+0x64>)
 800fce6:	480b      	ldr	r0, [pc, #44]	; (800fd14 <udp_send+0x60>)
 800fce8:	f003 fb74 	bl	80133d4 <iprintf>
 800fcec:	f06f 030f 	mvn.w	r3, #15
 800fcf0:	e008      	b.n	800fd04 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	1d1a      	adds	r2, r3, #4
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	8a9b      	ldrh	r3, [r3, #20]
 800fcfa:	6839      	ldr	r1, [r7, #0]
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f000 f80d 	bl	800fd1c <udp_sendto>
 800fd02:	4603      	mov	r3, r0
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3708      	adds	r7, #8
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	08018a98 	.word	0x08018a98
 800fd10:	08018b8c 	.word	0x08018b8c
 800fd14:	08018aec 	.word	0x08018aec
 800fd18:	08018ba4 	.word	0x08018ba4

0800fd1c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b088      	sub	sp, #32
 800fd20:	af02      	add	r7, sp, #8
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	60b9      	str	r1, [r7, #8]
 800fd26:	607a      	str	r2, [r7, #4]
 800fd28:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d109      	bne.n	800fd44 <udp_sendto+0x28>
 800fd30:	4b23      	ldr	r3, [pc, #140]	; (800fdc0 <udp_sendto+0xa4>)
 800fd32:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fd36:	4923      	ldr	r1, [pc, #140]	; (800fdc4 <udp_sendto+0xa8>)
 800fd38:	4823      	ldr	r0, [pc, #140]	; (800fdc8 <udp_sendto+0xac>)
 800fd3a:	f003 fb4b 	bl	80133d4 <iprintf>
 800fd3e:	f06f 030f 	mvn.w	r3, #15
 800fd42:	e038      	b.n	800fdb6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d109      	bne.n	800fd5e <udp_sendto+0x42>
 800fd4a:	4b1d      	ldr	r3, [pc, #116]	; (800fdc0 <udp_sendto+0xa4>)
 800fd4c:	f240 2219 	movw	r2, #537	; 0x219
 800fd50:	491e      	ldr	r1, [pc, #120]	; (800fdcc <udp_sendto+0xb0>)
 800fd52:	481d      	ldr	r0, [pc, #116]	; (800fdc8 <udp_sendto+0xac>)
 800fd54:	f003 fb3e 	bl	80133d4 <iprintf>
 800fd58:	f06f 030f 	mvn.w	r3, #15
 800fd5c:	e02b      	b.n	800fdb6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d109      	bne.n	800fd78 <udp_sendto+0x5c>
 800fd64:	4b16      	ldr	r3, [pc, #88]	; (800fdc0 <udp_sendto+0xa4>)
 800fd66:	f240 221a 	movw	r2, #538	; 0x21a
 800fd6a:	4919      	ldr	r1, [pc, #100]	; (800fdd0 <udp_sendto+0xb4>)
 800fd6c:	4816      	ldr	r0, [pc, #88]	; (800fdc8 <udp_sendto+0xac>)
 800fd6e:	f003 fb31 	bl	80133d4 <iprintf>
 800fd72:	f06f 030f 	mvn.w	r3, #15
 800fd76:	e01e      	b.n	800fdb6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	7a1b      	ldrb	r3, [r3, #8]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d006      	beq.n	800fd8e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	7a1b      	ldrb	r3, [r3, #8]
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7f9 fca1 	bl	80096cc <netif_get_by_index>
 800fd8a:	6178      	str	r0, [r7, #20]
 800fd8c:	e003      	b.n	800fd96 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f001 fbb0 	bl	80114f4 <ip4_route>
 800fd94:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d102      	bne.n	800fda2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800fd9c:	f06f 0303 	mvn.w	r3, #3
 800fda0:	e009      	b.n	800fdb6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800fda2:	887a      	ldrh	r2, [r7, #2]
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	4613      	mov	r3, r2
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	68b9      	ldr	r1, [r7, #8]
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	f000 f810 	bl	800fdd4 <udp_sendto_if>
 800fdb4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3718      	adds	r7, #24
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	08018a98 	.word	0x08018a98
 800fdc4:	08018bbc 	.word	0x08018bbc
 800fdc8:	08018aec 	.word	0x08018aec
 800fdcc:	08018bd4 	.word	0x08018bd4
 800fdd0:	08018bf0 	.word	0x08018bf0

0800fdd4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b088      	sub	sp, #32
 800fdd8:	af02      	add	r7, sp, #8
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	607a      	str	r2, [r7, #4]
 800fde0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d109      	bne.n	800fdfc <udp_sendto_if+0x28>
 800fde8:	4b2e      	ldr	r3, [pc, #184]	; (800fea4 <udp_sendto_if+0xd0>)
 800fdea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fdee:	492e      	ldr	r1, [pc, #184]	; (800fea8 <udp_sendto_if+0xd4>)
 800fdf0:	482e      	ldr	r0, [pc, #184]	; (800feac <udp_sendto_if+0xd8>)
 800fdf2:	f003 faef 	bl	80133d4 <iprintf>
 800fdf6:	f06f 030f 	mvn.w	r3, #15
 800fdfa:	e04f      	b.n	800fe9c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d109      	bne.n	800fe16 <udp_sendto_if+0x42>
 800fe02:	4b28      	ldr	r3, [pc, #160]	; (800fea4 <udp_sendto_if+0xd0>)
 800fe04:	f240 2281 	movw	r2, #641	; 0x281
 800fe08:	4929      	ldr	r1, [pc, #164]	; (800feb0 <udp_sendto_if+0xdc>)
 800fe0a:	4828      	ldr	r0, [pc, #160]	; (800feac <udp_sendto_if+0xd8>)
 800fe0c:	f003 fae2 	bl	80133d4 <iprintf>
 800fe10:	f06f 030f 	mvn.w	r3, #15
 800fe14:	e042      	b.n	800fe9c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d109      	bne.n	800fe30 <udp_sendto_if+0x5c>
 800fe1c:	4b21      	ldr	r3, [pc, #132]	; (800fea4 <udp_sendto_if+0xd0>)
 800fe1e:	f240 2282 	movw	r2, #642	; 0x282
 800fe22:	4924      	ldr	r1, [pc, #144]	; (800feb4 <udp_sendto_if+0xe0>)
 800fe24:	4821      	ldr	r0, [pc, #132]	; (800feac <udp_sendto_if+0xd8>)
 800fe26:	f003 fad5 	bl	80133d4 <iprintf>
 800fe2a:	f06f 030f 	mvn.w	r3, #15
 800fe2e:	e035      	b.n	800fe9c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800fe30:	6a3b      	ldr	r3, [r7, #32]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d109      	bne.n	800fe4a <udp_sendto_if+0x76>
 800fe36:	4b1b      	ldr	r3, [pc, #108]	; (800fea4 <udp_sendto_if+0xd0>)
 800fe38:	f240 2283 	movw	r2, #643	; 0x283
 800fe3c:	491e      	ldr	r1, [pc, #120]	; (800feb8 <udp_sendto_if+0xe4>)
 800fe3e:	481b      	ldr	r0, [pc, #108]	; (800feac <udp_sendto_if+0xd8>)
 800fe40:	f003 fac8 	bl	80133d4 <iprintf>
 800fe44:	f06f 030f 	mvn.w	r3, #15
 800fe48:	e028      	b.n	800fe9c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d009      	beq.n	800fe64 <udp_sendto_if+0x90>
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d005      	beq.n	800fe64 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fe60:	2be0      	cmp	r3, #224	; 0xe0
 800fe62:	d103      	bne.n	800fe6c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800fe64:	6a3b      	ldr	r3, [r7, #32]
 800fe66:	3304      	adds	r3, #4
 800fe68:	617b      	str	r3, [r7, #20]
 800fe6a:	e00b      	b.n	800fe84 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	6a3b      	ldr	r3, [r7, #32]
 800fe72:	3304      	adds	r3, #4
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d002      	beq.n	800fe80 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800fe7a:	f06f 0303 	mvn.w	r3, #3
 800fe7e:	e00d      	b.n	800fe9c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800fe84:	887a      	ldrh	r2, [r7, #2]
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	9301      	str	r3, [sp, #4]
 800fe8a:	6a3b      	ldr	r3, [r7, #32]
 800fe8c:	9300      	str	r3, [sp, #0]
 800fe8e:	4613      	mov	r3, r2
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	68b9      	ldr	r1, [r7, #8]
 800fe94:	68f8      	ldr	r0, [r7, #12]
 800fe96:	f000 f811 	bl	800febc <udp_sendto_if_src>
 800fe9a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3718      	adds	r7, #24
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	08018a98 	.word	0x08018a98
 800fea8:	08018c0c 	.word	0x08018c0c
 800feac:	08018aec 	.word	0x08018aec
 800feb0:	08018c28 	.word	0x08018c28
 800feb4:	08018c44 	.word	0x08018c44
 800feb8:	08018c64 	.word	0x08018c64

0800febc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b08c      	sub	sp, #48	; 0x30
 800fec0:	af04      	add	r7, sp, #16
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	607a      	str	r2, [r7, #4]
 800fec8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d109      	bne.n	800fee4 <udp_sendto_if_src+0x28>
 800fed0:	4b65      	ldr	r3, [pc, #404]	; (8010068 <udp_sendto_if_src+0x1ac>)
 800fed2:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fed6:	4965      	ldr	r1, [pc, #404]	; (801006c <udp_sendto_if_src+0x1b0>)
 800fed8:	4865      	ldr	r0, [pc, #404]	; (8010070 <udp_sendto_if_src+0x1b4>)
 800feda:	f003 fa7b 	bl	80133d4 <iprintf>
 800fede:	f06f 030f 	mvn.w	r3, #15
 800fee2:	e0bc      	b.n	801005e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d109      	bne.n	800fefe <udp_sendto_if_src+0x42>
 800feea:	4b5f      	ldr	r3, [pc, #380]	; (8010068 <udp_sendto_if_src+0x1ac>)
 800feec:	f240 22d2 	movw	r2, #722	; 0x2d2
 800fef0:	4960      	ldr	r1, [pc, #384]	; (8010074 <udp_sendto_if_src+0x1b8>)
 800fef2:	485f      	ldr	r0, [pc, #380]	; (8010070 <udp_sendto_if_src+0x1b4>)
 800fef4:	f003 fa6e 	bl	80133d4 <iprintf>
 800fef8:	f06f 030f 	mvn.w	r3, #15
 800fefc:	e0af      	b.n	801005e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d109      	bne.n	800ff18 <udp_sendto_if_src+0x5c>
 800ff04:	4b58      	ldr	r3, [pc, #352]	; (8010068 <udp_sendto_if_src+0x1ac>)
 800ff06:	f240 22d3 	movw	r2, #723	; 0x2d3
 800ff0a:	495b      	ldr	r1, [pc, #364]	; (8010078 <udp_sendto_if_src+0x1bc>)
 800ff0c:	4858      	ldr	r0, [pc, #352]	; (8010070 <udp_sendto_if_src+0x1b4>)
 800ff0e:	f003 fa61 	bl	80133d4 <iprintf>
 800ff12:	f06f 030f 	mvn.w	r3, #15
 800ff16:	e0a2      	b.n	801005e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800ff18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d109      	bne.n	800ff32 <udp_sendto_if_src+0x76>
 800ff1e:	4b52      	ldr	r3, [pc, #328]	; (8010068 <udp_sendto_if_src+0x1ac>)
 800ff20:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800ff24:	4955      	ldr	r1, [pc, #340]	; (801007c <udp_sendto_if_src+0x1c0>)
 800ff26:	4852      	ldr	r0, [pc, #328]	; (8010070 <udp_sendto_if_src+0x1b4>)
 800ff28:	f003 fa54 	bl	80133d4 <iprintf>
 800ff2c:	f06f 030f 	mvn.w	r3, #15
 800ff30:	e095      	b.n	801005e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800ff32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d109      	bne.n	800ff4c <udp_sendto_if_src+0x90>
 800ff38:	4b4b      	ldr	r3, [pc, #300]	; (8010068 <udp_sendto_if_src+0x1ac>)
 800ff3a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800ff3e:	4950      	ldr	r1, [pc, #320]	; (8010080 <udp_sendto_if_src+0x1c4>)
 800ff40:	484b      	ldr	r0, [pc, #300]	; (8010070 <udp_sendto_if_src+0x1b4>)
 800ff42:	f003 fa47 	bl	80133d4 <iprintf>
 800ff46:	f06f 030f 	mvn.w	r3, #15
 800ff4a:	e088      	b.n	801005e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	8a5b      	ldrh	r3, [r3, #18]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d10f      	bne.n	800ff74 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ff54:	68f9      	ldr	r1, [r7, #12]
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	8a5b      	ldrh	r3, [r3, #18]
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	68f8      	ldr	r0, [r7, #12]
 800ff5e:	f000 f893 	bl	8010088 <udp_bind>
 800ff62:	4603      	mov	r3, r0
 800ff64:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ff66:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d002      	beq.n	800ff74 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ff6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ff72:	e074      	b.n	801005e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	891b      	ldrh	r3, [r3, #8]
 800ff78:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800ff7c:	4293      	cmp	r3, r2
 800ff7e:	d902      	bls.n	800ff86 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800ff80:	f04f 33ff 	mov.w	r3, #4294967295
 800ff84:	e06b      	b.n	801005e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800ff86:	2108      	movs	r1, #8
 800ff88:	68b8      	ldr	r0, [r7, #8]
 800ff8a:	f7f9 fe69 	bl	8009c60 <pbuf_add_header>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d015      	beq.n	800ffc0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ff94:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ff98:	2108      	movs	r1, #8
 800ff9a:	2022      	movs	r0, #34	; 0x22
 800ff9c:	f7f9 fc12 	bl	80097c4 <pbuf_alloc>
 800ffa0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800ffa2:	69fb      	ldr	r3, [r7, #28]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d102      	bne.n	800ffae <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800ffa8:	f04f 33ff 	mov.w	r3, #4294967295
 800ffac:	e057      	b.n	801005e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	891b      	ldrh	r3, [r3, #8]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d006      	beq.n	800ffc4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800ffb6:	68b9      	ldr	r1, [r7, #8]
 800ffb8:	69f8      	ldr	r0, [r7, #28]
 800ffba:	f7f9 ffff 	bl	8009fbc <pbuf_chain>
 800ffbe:	e001      	b.n	800ffc4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ffc4:	69fb      	ldr	r3, [r7, #28]
 800ffc6:	895b      	ldrh	r3, [r3, #10]
 800ffc8:	2b07      	cmp	r3, #7
 800ffca:	d806      	bhi.n	800ffda <udp_sendto_if_src+0x11e>
 800ffcc:	4b26      	ldr	r3, [pc, #152]	; (8010068 <udp_sendto_if_src+0x1ac>)
 800ffce:	f240 320d 	movw	r2, #781	; 0x30d
 800ffd2:	492c      	ldr	r1, [pc, #176]	; (8010084 <udp_sendto_if_src+0x1c8>)
 800ffd4:	4826      	ldr	r0, [pc, #152]	; (8010070 <udp_sendto_if_src+0x1b4>)
 800ffd6:	f003 f9fd 	bl	80133d4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	8a5b      	ldrh	r3, [r3, #18]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7f8 fc1d 	bl	8008824 <lwip_htons>
 800ffea:	4603      	mov	r3, r0
 800ffec:	461a      	mov	r2, r3
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800fff2:	887b      	ldrh	r3, [r7, #2]
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7f8 fc15 	bl	8008824 <lwip_htons>
 800fffa:	4603      	mov	r3, r0
 800fffc:	461a      	mov	r2, r3
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	2200      	movs	r2, #0
 8010006:	719a      	strb	r2, [r3, #6]
 8010008:	2200      	movs	r2, #0
 801000a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801000c:	69fb      	ldr	r3, [r7, #28]
 801000e:	891b      	ldrh	r3, [r3, #8]
 8010010:	4618      	mov	r0, r3
 8010012:	f7f8 fc07 	bl	8008824 <lwip_htons>
 8010016:	4603      	mov	r3, r0
 8010018:	461a      	mov	r2, r3
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801001e:	2311      	movs	r3, #17
 8010020:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	7adb      	ldrb	r3, [r3, #11]
 8010026:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	7a9b      	ldrb	r3, [r3, #10]
 801002c:	7cb9      	ldrb	r1, [r7, #18]
 801002e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010030:	9202      	str	r2, [sp, #8]
 8010032:	7cfa      	ldrb	r2, [r7, #19]
 8010034:	9201      	str	r2, [sp, #4]
 8010036:	9300      	str	r3, [sp, #0]
 8010038:	460b      	mov	r3, r1
 801003a:	687a      	ldr	r2, [r7, #4]
 801003c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801003e:	69f8      	ldr	r0, [r7, #28]
 8010040:	f001 fc40 	bl	80118c4 <ip4_output_if_src>
 8010044:	4603      	mov	r3, r0
 8010046:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010048:	69fa      	ldr	r2, [r7, #28]
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	429a      	cmp	r2, r3
 801004e:	d004      	beq.n	801005a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010050:	69f8      	ldr	r0, [r7, #28]
 8010052:	f7f9 fe9b 	bl	8009d8c <pbuf_free>
    q = NULL;
 8010056:	2300      	movs	r3, #0
 8010058:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801005a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801005e:	4618      	mov	r0, r3
 8010060:	3720      	adds	r7, #32
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	08018a98 	.word	0x08018a98
 801006c:	08018c84 	.word	0x08018c84
 8010070:	08018aec 	.word	0x08018aec
 8010074:	08018ca4 	.word	0x08018ca4
 8010078:	08018cc4 	.word	0x08018cc4
 801007c:	08018ce8 	.word	0x08018ce8
 8010080:	08018d0c 	.word	0x08018d0c
 8010084:	08018d30 	.word	0x08018d30

08010088 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b086      	sub	sp, #24
 801008c:	af00      	add	r7, sp, #0
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	60b9      	str	r1, [r7, #8]
 8010092:	4613      	mov	r3, r2
 8010094:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d101      	bne.n	80100a0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801009c:	4b39      	ldr	r3, [pc, #228]	; (8010184 <udp_bind+0xfc>)
 801009e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d109      	bne.n	80100ba <udp_bind+0x32>
 80100a6:	4b38      	ldr	r3, [pc, #224]	; (8010188 <udp_bind+0x100>)
 80100a8:	f240 32b7 	movw	r2, #951	; 0x3b7
 80100ac:	4937      	ldr	r1, [pc, #220]	; (801018c <udp_bind+0x104>)
 80100ae:	4838      	ldr	r0, [pc, #224]	; (8010190 <udp_bind+0x108>)
 80100b0:	f003 f990 	bl	80133d4 <iprintf>
 80100b4:	f06f 030f 	mvn.w	r3, #15
 80100b8:	e060      	b.n	801017c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80100ba:	2300      	movs	r3, #0
 80100bc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80100be:	4b35      	ldr	r3, [pc, #212]	; (8010194 <udp_bind+0x10c>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	617b      	str	r3, [r7, #20]
 80100c4:	e009      	b.n	80100da <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80100c6:	68fa      	ldr	r2, [r7, #12]
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d102      	bne.n	80100d4 <udp_bind+0x4c>
      rebind = 1;
 80100ce:	2301      	movs	r3, #1
 80100d0:	74fb      	strb	r3, [r7, #19]
      break;
 80100d2:	e005      	b.n	80100e0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	617b      	str	r3, [r7, #20]
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d1f2      	bne.n	80100c6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80100e0:	88fb      	ldrh	r3, [r7, #6]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d109      	bne.n	80100fa <udp_bind+0x72>
    port = udp_new_port();
 80100e6:	f7ff fc35 	bl	800f954 <udp_new_port>
 80100ea:	4603      	mov	r3, r0
 80100ec:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80100ee:	88fb      	ldrh	r3, [r7, #6]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d12c      	bne.n	801014e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80100f4:	f06f 0307 	mvn.w	r3, #7
 80100f8:	e040      	b.n	801017c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80100fa:	4b26      	ldr	r3, [pc, #152]	; (8010194 <udp_bind+0x10c>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	617b      	str	r3, [r7, #20]
 8010100:	e022      	b.n	8010148 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010102:	68fa      	ldr	r2, [r7, #12]
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	429a      	cmp	r2, r3
 8010108:	d01b      	beq.n	8010142 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	8a5b      	ldrh	r3, [r3, #18]
 801010e:	88fa      	ldrh	r2, [r7, #6]
 8010110:	429a      	cmp	r2, r3
 8010112:	d116      	bne.n	8010142 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	681a      	ldr	r2, [r3, #0]
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801011c:	429a      	cmp	r2, r3
 801011e:	d00d      	beq.n	801013c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d00a      	beq.n	801013c <udp_bind+0xb4>
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d006      	beq.n	801013c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801012e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010130:	2b00      	cmp	r3, #0
 8010132:	d003      	beq.n	801013c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010134:	697b      	ldr	r3, [r7, #20]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d102      	bne.n	8010142 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801013c:	f06f 0307 	mvn.w	r3, #7
 8010140:	e01c      	b.n	801017c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	68db      	ldr	r3, [r3, #12]
 8010146:	617b      	str	r3, [r7, #20]
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d1d9      	bne.n	8010102 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d002      	beq.n	801015a <udp_bind+0xd2>
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	e000      	b.n	801015c <udp_bind+0xd4>
 801015a:	2300      	movs	r3, #0
 801015c:	68fa      	ldr	r2, [r7, #12]
 801015e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	88fa      	ldrh	r2, [r7, #6]
 8010164:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010166:	7cfb      	ldrb	r3, [r7, #19]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d106      	bne.n	801017a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801016c:	4b09      	ldr	r3, [pc, #36]	; (8010194 <udp_bind+0x10c>)
 801016e:	681a      	ldr	r2, [r3, #0]
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010174:	4a07      	ldr	r2, [pc, #28]	; (8010194 <udp_bind+0x10c>)
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801017a:	2300      	movs	r3, #0
}
 801017c:	4618      	mov	r0, r3
 801017e:	3718      	adds	r7, #24
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}
 8010184:	080195a0 	.word	0x080195a0
 8010188:	08018a98 	.word	0x08018a98
 801018c:	08018d60 	.word	0x08018d60
 8010190:	08018aec 	.word	0x08018aec
 8010194:	200090f0 	.word	0x200090f0

08010198 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b086      	sub	sp, #24
 801019c:	af00      	add	r7, sp, #0
 801019e:	60f8      	str	r0, [r7, #12]
 80101a0:	60b9      	str	r1, [r7, #8]
 80101a2:	4613      	mov	r3, r2
 80101a4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d109      	bne.n	80101c0 <udp_connect+0x28>
 80101ac:	4b2c      	ldr	r3, [pc, #176]	; (8010260 <udp_connect+0xc8>)
 80101ae:	f240 4235 	movw	r2, #1077	; 0x435
 80101b2:	492c      	ldr	r1, [pc, #176]	; (8010264 <udp_connect+0xcc>)
 80101b4:	482c      	ldr	r0, [pc, #176]	; (8010268 <udp_connect+0xd0>)
 80101b6:	f003 f90d 	bl	80133d4 <iprintf>
 80101ba:	f06f 030f 	mvn.w	r3, #15
 80101be:	e04b      	b.n	8010258 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d109      	bne.n	80101da <udp_connect+0x42>
 80101c6:	4b26      	ldr	r3, [pc, #152]	; (8010260 <udp_connect+0xc8>)
 80101c8:	f240 4236 	movw	r2, #1078	; 0x436
 80101cc:	4927      	ldr	r1, [pc, #156]	; (801026c <udp_connect+0xd4>)
 80101ce:	4826      	ldr	r0, [pc, #152]	; (8010268 <udp_connect+0xd0>)
 80101d0:	f003 f900 	bl	80133d4 <iprintf>
 80101d4:	f06f 030f 	mvn.w	r3, #15
 80101d8:	e03e      	b.n	8010258 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	8a5b      	ldrh	r3, [r3, #18]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d10f      	bne.n	8010202 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80101e2:	68f9      	ldr	r1, [r7, #12]
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	8a5b      	ldrh	r3, [r3, #18]
 80101e8:	461a      	mov	r2, r3
 80101ea:	68f8      	ldr	r0, [r7, #12]
 80101ec:	f7ff ff4c 	bl	8010088 <udp_bind>
 80101f0:	4603      	mov	r3, r0
 80101f2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80101f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d002      	beq.n	8010202 <udp_connect+0x6a>
      return err;
 80101fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010200:	e02a      	b.n	8010258 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d002      	beq.n	801020e <udp_connect+0x76>
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	e000      	b.n	8010210 <udp_connect+0x78>
 801020e:	2300      	movs	r3, #0
 8010210:	68fa      	ldr	r2, [r7, #12]
 8010212:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	88fa      	ldrh	r2, [r7, #6]
 8010218:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	7c1b      	ldrb	r3, [r3, #16]
 801021e:	f043 0304 	orr.w	r3, r3, #4
 8010222:	b2da      	uxtb	r2, r3
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010228:	4b11      	ldr	r3, [pc, #68]	; (8010270 <udp_connect+0xd8>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	617b      	str	r3, [r7, #20]
 801022e:	e008      	b.n	8010242 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010230:	68fa      	ldr	r2, [r7, #12]
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	429a      	cmp	r2, r3
 8010236:	d101      	bne.n	801023c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010238:	2300      	movs	r3, #0
 801023a:	e00d      	b.n	8010258 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	617b      	str	r3, [r7, #20]
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d1f3      	bne.n	8010230 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010248:	4b09      	ldr	r3, [pc, #36]	; (8010270 <udp_connect+0xd8>)
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010250:	4a07      	ldr	r2, [pc, #28]	; (8010270 <udp_connect+0xd8>)
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010256:	2300      	movs	r3, #0
}
 8010258:	4618      	mov	r0, r3
 801025a:	3718      	adds	r7, #24
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}
 8010260:	08018a98 	.word	0x08018a98
 8010264:	08018d78 	.word	0x08018d78
 8010268:	08018aec 	.word	0x08018aec
 801026c:	08018d94 	.word	0x08018d94
 8010270:	200090f0 	.word	0x200090f0

08010274 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b084      	sub	sp, #16
 8010278:	af00      	add	r7, sp, #0
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	60b9      	str	r1, [r7, #8]
 801027e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d107      	bne.n	8010296 <udp_recv+0x22>
 8010286:	4b08      	ldr	r3, [pc, #32]	; (80102a8 <udp_recv+0x34>)
 8010288:	f240 428a 	movw	r2, #1162	; 0x48a
 801028c:	4907      	ldr	r1, [pc, #28]	; (80102ac <udp_recv+0x38>)
 801028e:	4808      	ldr	r0, [pc, #32]	; (80102b0 <udp_recv+0x3c>)
 8010290:	f003 f8a0 	bl	80133d4 <iprintf>
 8010294:	e005      	b.n	80102a2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	68ba      	ldr	r2, [r7, #8]
 801029a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	61da      	str	r2, [r3, #28]
}
 80102a2:	3710      	adds	r7, #16
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}
 80102a8:	08018a98 	.word	0x08018a98
 80102ac:	08018dcc 	.word	0x08018dcc
 80102b0:	08018aec 	.word	0x08018aec

080102b4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80102ba:	2000      	movs	r0, #0
 80102bc:	f7f8 ff08 	bl	80090d0 <memp_malloc>
 80102c0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d007      	beq.n	80102d8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80102c8:	2220      	movs	r2, #32
 80102ca:	2100      	movs	r1, #0
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f002 fb65 	bl	801299c <memset>
    pcb->ttl = UDP_TTL;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	22ff      	movs	r2, #255	; 0xff
 80102d6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80102d8:	687b      	ldr	r3, [r7, #4]
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3708      	adds	r7, #8
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
	...

080102e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80102e4:	b480      	push	{r7}
 80102e6:	b085      	sub	sp, #20
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d01e      	beq.n	8010332 <udp_netif_ip_addr_changed+0x4e>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d01a      	beq.n	8010332 <udp_netif_ip_addr_changed+0x4e>
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d017      	beq.n	8010332 <udp_netif_ip_addr_changed+0x4e>
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d013      	beq.n	8010332 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801030a:	4b0d      	ldr	r3, [pc, #52]	; (8010340 <udp_netif_ip_addr_changed+0x5c>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	60fb      	str	r3, [r7, #12]
 8010310:	e00c      	b.n	801032c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	429a      	cmp	r2, r3
 801031c:	d103      	bne.n	8010326 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	681a      	ldr	r2, [r3, #0]
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	68db      	ldr	r3, [r3, #12]
 801032a:	60fb      	str	r3, [r7, #12]
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d1ef      	bne.n	8010312 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010332:	bf00      	nop
 8010334:	3714      	adds	r7, #20
 8010336:	46bd      	mov	sp, r7
 8010338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033c:	4770      	bx	lr
 801033e:	bf00      	nop
 8010340:	200090f0 	.word	0x200090f0

08010344 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b082      	sub	sp, #8
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801034c:	4915      	ldr	r1, [pc, #84]	; (80103a4 <etharp_free_entry+0x60>)
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	4613      	mov	r3, r2
 8010352:	005b      	lsls	r3, r3, #1
 8010354:	4413      	add	r3, r2
 8010356:	00db      	lsls	r3, r3, #3
 8010358:	440b      	add	r3, r1
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d013      	beq.n	8010388 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010360:	4910      	ldr	r1, [pc, #64]	; (80103a4 <etharp_free_entry+0x60>)
 8010362:	687a      	ldr	r2, [r7, #4]
 8010364:	4613      	mov	r3, r2
 8010366:	005b      	lsls	r3, r3, #1
 8010368:	4413      	add	r3, r2
 801036a:	00db      	lsls	r3, r3, #3
 801036c:	440b      	add	r3, r1
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4618      	mov	r0, r3
 8010372:	f7f9 fd0b 	bl	8009d8c <pbuf_free>
    arp_table[i].q = NULL;
 8010376:	490b      	ldr	r1, [pc, #44]	; (80103a4 <etharp_free_entry+0x60>)
 8010378:	687a      	ldr	r2, [r7, #4]
 801037a:	4613      	mov	r3, r2
 801037c:	005b      	lsls	r3, r3, #1
 801037e:	4413      	add	r3, r2
 8010380:	00db      	lsls	r3, r3, #3
 8010382:	440b      	add	r3, r1
 8010384:	2200      	movs	r2, #0
 8010386:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010388:	4906      	ldr	r1, [pc, #24]	; (80103a4 <etharp_free_entry+0x60>)
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	4613      	mov	r3, r2
 801038e:	005b      	lsls	r3, r3, #1
 8010390:	4413      	add	r3, r2
 8010392:	00db      	lsls	r3, r3, #3
 8010394:	440b      	add	r3, r1
 8010396:	3314      	adds	r3, #20
 8010398:	2200      	movs	r2, #0
 801039a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801039c:	bf00      	nop
 801039e:	3708      	adds	r7, #8
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}
 80103a4:	200002fc 	.word	0x200002fc

080103a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80103ae:	2300      	movs	r3, #0
 80103b0:	607b      	str	r3, [r7, #4]
 80103b2:	e096      	b.n	80104e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80103b4:	494f      	ldr	r1, [pc, #316]	; (80104f4 <etharp_tmr+0x14c>)
 80103b6:	687a      	ldr	r2, [r7, #4]
 80103b8:	4613      	mov	r3, r2
 80103ba:	005b      	lsls	r3, r3, #1
 80103bc:	4413      	add	r3, r2
 80103be:	00db      	lsls	r3, r3, #3
 80103c0:	440b      	add	r3, r1
 80103c2:	3314      	adds	r3, #20
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80103c8:	78fb      	ldrb	r3, [r7, #3]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	f000 8086 	beq.w	80104dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80103d0:	4948      	ldr	r1, [pc, #288]	; (80104f4 <etharp_tmr+0x14c>)
 80103d2:	687a      	ldr	r2, [r7, #4]
 80103d4:	4613      	mov	r3, r2
 80103d6:	005b      	lsls	r3, r3, #1
 80103d8:	4413      	add	r3, r2
 80103da:	00db      	lsls	r3, r3, #3
 80103dc:	440b      	add	r3, r1
 80103de:	3312      	adds	r3, #18
 80103e0:	881b      	ldrh	r3, [r3, #0]
 80103e2:	3301      	adds	r3, #1
 80103e4:	b298      	uxth	r0, r3
 80103e6:	4943      	ldr	r1, [pc, #268]	; (80104f4 <etharp_tmr+0x14c>)
 80103e8:	687a      	ldr	r2, [r7, #4]
 80103ea:	4613      	mov	r3, r2
 80103ec:	005b      	lsls	r3, r3, #1
 80103ee:	4413      	add	r3, r2
 80103f0:	00db      	lsls	r3, r3, #3
 80103f2:	440b      	add	r3, r1
 80103f4:	3312      	adds	r3, #18
 80103f6:	4602      	mov	r2, r0
 80103f8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80103fa:	493e      	ldr	r1, [pc, #248]	; (80104f4 <etharp_tmr+0x14c>)
 80103fc:	687a      	ldr	r2, [r7, #4]
 80103fe:	4613      	mov	r3, r2
 8010400:	005b      	lsls	r3, r3, #1
 8010402:	4413      	add	r3, r2
 8010404:	00db      	lsls	r3, r3, #3
 8010406:	440b      	add	r3, r1
 8010408:	3312      	adds	r3, #18
 801040a:	881b      	ldrh	r3, [r3, #0]
 801040c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010410:	d215      	bcs.n	801043e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010412:	4938      	ldr	r1, [pc, #224]	; (80104f4 <etharp_tmr+0x14c>)
 8010414:	687a      	ldr	r2, [r7, #4]
 8010416:	4613      	mov	r3, r2
 8010418:	005b      	lsls	r3, r3, #1
 801041a:	4413      	add	r3, r2
 801041c:	00db      	lsls	r3, r3, #3
 801041e:	440b      	add	r3, r1
 8010420:	3314      	adds	r3, #20
 8010422:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010424:	2b01      	cmp	r3, #1
 8010426:	d10e      	bne.n	8010446 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010428:	4932      	ldr	r1, [pc, #200]	; (80104f4 <etharp_tmr+0x14c>)
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	4613      	mov	r3, r2
 801042e:	005b      	lsls	r3, r3, #1
 8010430:	4413      	add	r3, r2
 8010432:	00db      	lsls	r3, r3, #3
 8010434:	440b      	add	r3, r1
 8010436:	3312      	adds	r3, #18
 8010438:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801043a:	2b04      	cmp	r3, #4
 801043c:	d903      	bls.n	8010446 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f7ff ff80 	bl	8010344 <etharp_free_entry>
 8010444:	e04a      	b.n	80104dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010446:	492b      	ldr	r1, [pc, #172]	; (80104f4 <etharp_tmr+0x14c>)
 8010448:	687a      	ldr	r2, [r7, #4]
 801044a:	4613      	mov	r3, r2
 801044c:	005b      	lsls	r3, r3, #1
 801044e:	4413      	add	r3, r2
 8010450:	00db      	lsls	r3, r3, #3
 8010452:	440b      	add	r3, r1
 8010454:	3314      	adds	r3, #20
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	2b03      	cmp	r3, #3
 801045a:	d10a      	bne.n	8010472 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801045c:	4925      	ldr	r1, [pc, #148]	; (80104f4 <etharp_tmr+0x14c>)
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	4613      	mov	r3, r2
 8010462:	005b      	lsls	r3, r3, #1
 8010464:	4413      	add	r3, r2
 8010466:	00db      	lsls	r3, r3, #3
 8010468:	440b      	add	r3, r1
 801046a:	3314      	adds	r3, #20
 801046c:	2204      	movs	r2, #4
 801046e:	701a      	strb	r2, [r3, #0]
 8010470:	e034      	b.n	80104dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010472:	4920      	ldr	r1, [pc, #128]	; (80104f4 <etharp_tmr+0x14c>)
 8010474:	687a      	ldr	r2, [r7, #4]
 8010476:	4613      	mov	r3, r2
 8010478:	005b      	lsls	r3, r3, #1
 801047a:	4413      	add	r3, r2
 801047c:	00db      	lsls	r3, r3, #3
 801047e:	440b      	add	r3, r1
 8010480:	3314      	adds	r3, #20
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	2b04      	cmp	r3, #4
 8010486:	d10a      	bne.n	801049e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010488:	491a      	ldr	r1, [pc, #104]	; (80104f4 <etharp_tmr+0x14c>)
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	4613      	mov	r3, r2
 801048e:	005b      	lsls	r3, r3, #1
 8010490:	4413      	add	r3, r2
 8010492:	00db      	lsls	r3, r3, #3
 8010494:	440b      	add	r3, r1
 8010496:	3314      	adds	r3, #20
 8010498:	2202      	movs	r2, #2
 801049a:	701a      	strb	r2, [r3, #0]
 801049c:	e01e      	b.n	80104dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801049e:	4915      	ldr	r1, [pc, #84]	; (80104f4 <etharp_tmr+0x14c>)
 80104a0:	687a      	ldr	r2, [r7, #4]
 80104a2:	4613      	mov	r3, r2
 80104a4:	005b      	lsls	r3, r3, #1
 80104a6:	4413      	add	r3, r2
 80104a8:	00db      	lsls	r3, r3, #3
 80104aa:	440b      	add	r3, r1
 80104ac:	3314      	adds	r3, #20
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	d113      	bne.n	80104dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80104b4:	490f      	ldr	r1, [pc, #60]	; (80104f4 <etharp_tmr+0x14c>)
 80104b6:	687a      	ldr	r2, [r7, #4]
 80104b8:	4613      	mov	r3, r2
 80104ba:	005b      	lsls	r3, r3, #1
 80104bc:	4413      	add	r3, r2
 80104be:	00db      	lsls	r3, r3, #3
 80104c0:	440b      	add	r3, r1
 80104c2:	3308      	adds	r3, #8
 80104c4:	6818      	ldr	r0, [r3, #0]
 80104c6:	687a      	ldr	r2, [r7, #4]
 80104c8:	4613      	mov	r3, r2
 80104ca:	005b      	lsls	r3, r3, #1
 80104cc:	4413      	add	r3, r2
 80104ce:	00db      	lsls	r3, r3, #3
 80104d0:	4a08      	ldr	r2, [pc, #32]	; (80104f4 <etharp_tmr+0x14c>)
 80104d2:	4413      	add	r3, r2
 80104d4:	3304      	adds	r3, #4
 80104d6:	4619      	mov	r1, r3
 80104d8:	f000 fe6e 	bl	80111b8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	3301      	adds	r3, #1
 80104e0:	607b      	str	r3, [r7, #4]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2b09      	cmp	r3, #9
 80104e6:	f77f af65 	ble.w	80103b4 <etharp_tmr+0xc>
      }
    }
  }
}
 80104ea:	bf00      	nop
 80104ec:	bf00      	nop
 80104ee:	3708      	adds	r7, #8
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	200002fc 	.word	0x200002fc

080104f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b08a      	sub	sp, #40	; 0x28
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	460b      	mov	r3, r1
 8010502:	607a      	str	r2, [r7, #4]
 8010504:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010506:	230a      	movs	r3, #10
 8010508:	84fb      	strh	r3, [r7, #38]	; 0x26
 801050a:	230a      	movs	r3, #10
 801050c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801050e:	230a      	movs	r3, #10
 8010510:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010512:	2300      	movs	r3, #0
 8010514:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010516:	230a      	movs	r3, #10
 8010518:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801051a:	2300      	movs	r3, #0
 801051c:	83bb      	strh	r3, [r7, #28]
 801051e:	2300      	movs	r3, #0
 8010520:	837b      	strh	r3, [r7, #26]
 8010522:	2300      	movs	r3, #0
 8010524:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010526:	2300      	movs	r3, #0
 8010528:	843b      	strh	r3, [r7, #32]
 801052a:	e0ae      	b.n	801068a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801052c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010530:	49a6      	ldr	r1, [pc, #664]	; (80107cc <etharp_find_entry+0x2d4>)
 8010532:	4613      	mov	r3, r2
 8010534:	005b      	lsls	r3, r3, #1
 8010536:	4413      	add	r3, r2
 8010538:	00db      	lsls	r3, r3, #3
 801053a:	440b      	add	r3, r1
 801053c:	3314      	adds	r3, #20
 801053e:	781b      	ldrb	r3, [r3, #0]
 8010540:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010542:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010546:	2b0a      	cmp	r3, #10
 8010548:	d105      	bne.n	8010556 <etharp_find_entry+0x5e>
 801054a:	7dfb      	ldrb	r3, [r7, #23]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d102      	bne.n	8010556 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010550:	8c3b      	ldrh	r3, [r7, #32]
 8010552:	847b      	strh	r3, [r7, #34]	; 0x22
 8010554:	e095      	b.n	8010682 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010556:	7dfb      	ldrb	r3, [r7, #23]
 8010558:	2b00      	cmp	r3, #0
 801055a:	f000 8092 	beq.w	8010682 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801055e:	7dfb      	ldrb	r3, [r7, #23]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d009      	beq.n	8010578 <etharp_find_entry+0x80>
 8010564:	7dfb      	ldrb	r3, [r7, #23]
 8010566:	2b01      	cmp	r3, #1
 8010568:	d806      	bhi.n	8010578 <etharp_find_entry+0x80>
 801056a:	4b99      	ldr	r3, [pc, #612]	; (80107d0 <etharp_find_entry+0x2d8>)
 801056c:	f240 1223 	movw	r2, #291	; 0x123
 8010570:	4998      	ldr	r1, [pc, #608]	; (80107d4 <etharp_find_entry+0x2dc>)
 8010572:	4899      	ldr	r0, [pc, #612]	; (80107d8 <etharp_find_entry+0x2e0>)
 8010574:	f002 ff2e 	bl	80133d4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d020      	beq.n	80105c0 <etharp_find_entry+0xc8>
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	6819      	ldr	r1, [r3, #0]
 8010582:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010586:	4891      	ldr	r0, [pc, #580]	; (80107cc <etharp_find_entry+0x2d4>)
 8010588:	4613      	mov	r3, r2
 801058a:	005b      	lsls	r3, r3, #1
 801058c:	4413      	add	r3, r2
 801058e:	00db      	lsls	r3, r3, #3
 8010590:	4403      	add	r3, r0
 8010592:	3304      	adds	r3, #4
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	4299      	cmp	r1, r3
 8010598:	d112      	bne.n	80105c0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00c      	beq.n	80105ba <etharp_find_entry+0xc2>
 80105a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105a4:	4989      	ldr	r1, [pc, #548]	; (80107cc <etharp_find_entry+0x2d4>)
 80105a6:	4613      	mov	r3, r2
 80105a8:	005b      	lsls	r3, r3, #1
 80105aa:	4413      	add	r3, r2
 80105ac:	00db      	lsls	r3, r3, #3
 80105ae:	440b      	add	r3, r1
 80105b0:	3308      	adds	r3, #8
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d102      	bne.n	80105c0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80105ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80105be:	e100      	b.n	80107c2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80105c0:	7dfb      	ldrb	r3, [r7, #23]
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d140      	bne.n	8010648 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80105c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105ca:	4980      	ldr	r1, [pc, #512]	; (80107cc <etharp_find_entry+0x2d4>)
 80105cc:	4613      	mov	r3, r2
 80105ce:	005b      	lsls	r3, r3, #1
 80105d0:	4413      	add	r3, r2
 80105d2:	00db      	lsls	r3, r3, #3
 80105d4:	440b      	add	r3, r1
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d01a      	beq.n	8010612 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80105dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105e0:	497a      	ldr	r1, [pc, #488]	; (80107cc <etharp_find_entry+0x2d4>)
 80105e2:	4613      	mov	r3, r2
 80105e4:	005b      	lsls	r3, r3, #1
 80105e6:	4413      	add	r3, r2
 80105e8:	00db      	lsls	r3, r3, #3
 80105ea:	440b      	add	r3, r1
 80105ec:	3312      	adds	r3, #18
 80105ee:	881b      	ldrh	r3, [r3, #0]
 80105f0:	8bba      	ldrh	r2, [r7, #28]
 80105f2:	429a      	cmp	r2, r3
 80105f4:	d845      	bhi.n	8010682 <etharp_find_entry+0x18a>
            old_queue = i;
 80105f6:	8c3b      	ldrh	r3, [r7, #32]
 80105f8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80105fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105fe:	4973      	ldr	r1, [pc, #460]	; (80107cc <etharp_find_entry+0x2d4>)
 8010600:	4613      	mov	r3, r2
 8010602:	005b      	lsls	r3, r3, #1
 8010604:	4413      	add	r3, r2
 8010606:	00db      	lsls	r3, r3, #3
 8010608:	440b      	add	r3, r1
 801060a:	3312      	adds	r3, #18
 801060c:	881b      	ldrh	r3, [r3, #0]
 801060e:	83bb      	strh	r3, [r7, #28]
 8010610:	e037      	b.n	8010682 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010612:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010616:	496d      	ldr	r1, [pc, #436]	; (80107cc <etharp_find_entry+0x2d4>)
 8010618:	4613      	mov	r3, r2
 801061a:	005b      	lsls	r3, r3, #1
 801061c:	4413      	add	r3, r2
 801061e:	00db      	lsls	r3, r3, #3
 8010620:	440b      	add	r3, r1
 8010622:	3312      	adds	r3, #18
 8010624:	881b      	ldrh	r3, [r3, #0]
 8010626:	8b7a      	ldrh	r2, [r7, #26]
 8010628:	429a      	cmp	r2, r3
 801062a:	d82a      	bhi.n	8010682 <etharp_find_entry+0x18a>
            old_pending = i;
 801062c:	8c3b      	ldrh	r3, [r7, #32]
 801062e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010630:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010634:	4965      	ldr	r1, [pc, #404]	; (80107cc <etharp_find_entry+0x2d4>)
 8010636:	4613      	mov	r3, r2
 8010638:	005b      	lsls	r3, r3, #1
 801063a:	4413      	add	r3, r2
 801063c:	00db      	lsls	r3, r3, #3
 801063e:	440b      	add	r3, r1
 8010640:	3312      	adds	r3, #18
 8010642:	881b      	ldrh	r3, [r3, #0]
 8010644:	837b      	strh	r3, [r7, #26]
 8010646:	e01c      	b.n	8010682 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010648:	7dfb      	ldrb	r3, [r7, #23]
 801064a:	2b01      	cmp	r3, #1
 801064c:	d919      	bls.n	8010682 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801064e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010652:	495e      	ldr	r1, [pc, #376]	; (80107cc <etharp_find_entry+0x2d4>)
 8010654:	4613      	mov	r3, r2
 8010656:	005b      	lsls	r3, r3, #1
 8010658:	4413      	add	r3, r2
 801065a:	00db      	lsls	r3, r3, #3
 801065c:	440b      	add	r3, r1
 801065e:	3312      	adds	r3, #18
 8010660:	881b      	ldrh	r3, [r3, #0]
 8010662:	8b3a      	ldrh	r2, [r7, #24]
 8010664:	429a      	cmp	r2, r3
 8010666:	d80c      	bhi.n	8010682 <etharp_find_entry+0x18a>
            old_stable = i;
 8010668:	8c3b      	ldrh	r3, [r7, #32]
 801066a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801066c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010670:	4956      	ldr	r1, [pc, #344]	; (80107cc <etharp_find_entry+0x2d4>)
 8010672:	4613      	mov	r3, r2
 8010674:	005b      	lsls	r3, r3, #1
 8010676:	4413      	add	r3, r2
 8010678:	00db      	lsls	r3, r3, #3
 801067a:	440b      	add	r3, r1
 801067c:	3312      	adds	r3, #18
 801067e:	881b      	ldrh	r3, [r3, #0]
 8010680:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010682:	8c3b      	ldrh	r3, [r7, #32]
 8010684:	3301      	adds	r3, #1
 8010686:	b29b      	uxth	r3, r3
 8010688:	843b      	strh	r3, [r7, #32]
 801068a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801068e:	2b09      	cmp	r3, #9
 8010690:	f77f af4c 	ble.w	801052c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010694:	7afb      	ldrb	r3, [r7, #11]
 8010696:	f003 0302 	and.w	r3, r3, #2
 801069a:	2b00      	cmp	r3, #0
 801069c:	d108      	bne.n	80106b0 <etharp_find_entry+0x1b8>
 801069e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80106a2:	2b0a      	cmp	r3, #10
 80106a4:	d107      	bne.n	80106b6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80106a6:	7afb      	ldrb	r3, [r7, #11]
 80106a8:	f003 0301 	and.w	r3, r3, #1
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d102      	bne.n	80106b6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80106b0:	f04f 33ff 	mov.w	r3, #4294967295
 80106b4:	e085      	b.n	80107c2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80106b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80106ba:	2b09      	cmp	r3, #9
 80106bc:	dc02      	bgt.n	80106c4 <etharp_find_entry+0x1cc>
    i = empty;
 80106be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80106c0:	843b      	strh	r3, [r7, #32]
 80106c2:	e039      	b.n	8010738 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80106c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80106c8:	2b09      	cmp	r3, #9
 80106ca:	dc14      	bgt.n	80106f6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80106cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80106ce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80106d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106d4:	493d      	ldr	r1, [pc, #244]	; (80107cc <etharp_find_entry+0x2d4>)
 80106d6:	4613      	mov	r3, r2
 80106d8:	005b      	lsls	r3, r3, #1
 80106da:	4413      	add	r3, r2
 80106dc:	00db      	lsls	r3, r3, #3
 80106de:	440b      	add	r3, r1
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d018      	beq.n	8010718 <etharp_find_entry+0x220>
 80106e6:	4b3a      	ldr	r3, [pc, #232]	; (80107d0 <etharp_find_entry+0x2d8>)
 80106e8:	f240 126d 	movw	r2, #365	; 0x16d
 80106ec:	493b      	ldr	r1, [pc, #236]	; (80107dc <etharp_find_entry+0x2e4>)
 80106ee:	483a      	ldr	r0, [pc, #232]	; (80107d8 <etharp_find_entry+0x2e0>)
 80106f0:	f002 fe70 	bl	80133d4 <iprintf>
 80106f4:	e010      	b.n	8010718 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80106f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80106fa:	2b09      	cmp	r3, #9
 80106fc:	dc02      	bgt.n	8010704 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80106fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010700:	843b      	strh	r3, [r7, #32]
 8010702:	e009      	b.n	8010718 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010704:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010708:	2b09      	cmp	r3, #9
 801070a:	dc02      	bgt.n	8010712 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801070c:	8bfb      	ldrh	r3, [r7, #30]
 801070e:	843b      	strh	r3, [r7, #32]
 8010710:	e002      	b.n	8010718 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010712:	f04f 33ff 	mov.w	r3, #4294967295
 8010716:	e054      	b.n	80107c2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010718:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801071c:	2b09      	cmp	r3, #9
 801071e:	dd06      	ble.n	801072e <etharp_find_entry+0x236>
 8010720:	4b2b      	ldr	r3, [pc, #172]	; (80107d0 <etharp_find_entry+0x2d8>)
 8010722:	f240 127f 	movw	r2, #383	; 0x17f
 8010726:	492e      	ldr	r1, [pc, #184]	; (80107e0 <etharp_find_entry+0x2e8>)
 8010728:	482b      	ldr	r0, [pc, #172]	; (80107d8 <etharp_find_entry+0x2e0>)
 801072a:	f002 fe53 	bl	80133d4 <iprintf>
    etharp_free_entry(i);
 801072e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010732:	4618      	mov	r0, r3
 8010734:	f7ff fe06 	bl	8010344 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010738:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801073c:	2b09      	cmp	r3, #9
 801073e:	dd06      	ble.n	801074e <etharp_find_entry+0x256>
 8010740:	4b23      	ldr	r3, [pc, #140]	; (80107d0 <etharp_find_entry+0x2d8>)
 8010742:	f240 1283 	movw	r2, #387	; 0x183
 8010746:	4926      	ldr	r1, [pc, #152]	; (80107e0 <etharp_find_entry+0x2e8>)
 8010748:	4823      	ldr	r0, [pc, #140]	; (80107d8 <etharp_find_entry+0x2e0>)
 801074a:	f002 fe43 	bl	80133d4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801074e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010752:	491e      	ldr	r1, [pc, #120]	; (80107cc <etharp_find_entry+0x2d4>)
 8010754:	4613      	mov	r3, r2
 8010756:	005b      	lsls	r3, r3, #1
 8010758:	4413      	add	r3, r2
 801075a:	00db      	lsls	r3, r3, #3
 801075c:	440b      	add	r3, r1
 801075e:	3314      	adds	r3, #20
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d006      	beq.n	8010774 <etharp_find_entry+0x27c>
 8010766:	4b1a      	ldr	r3, [pc, #104]	; (80107d0 <etharp_find_entry+0x2d8>)
 8010768:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801076c:	491d      	ldr	r1, [pc, #116]	; (80107e4 <etharp_find_entry+0x2ec>)
 801076e:	481a      	ldr	r0, [pc, #104]	; (80107d8 <etharp_find_entry+0x2e0>)
 8010770:	f002 fe30 	bl	80133d4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d00b      	beq.n	8010792 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801077a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	6819      	ldr	r1, [r3, #0]
 8010782:	4812      	ldr	r0, [pc, #72]	; (80107cc <etharp_find_entry+0x2d4>)
 8010784:	4613      	mov	r3, r2
 8010786:	005b      	lsls	r3, r3, #1
 8010788:	4413      	add	r3, r2
 801078a:	00db      	lsls	r3, r3, #3
 801078c:	4403      	add	r3, r0
 801078e:	3304      	adds	r3, #4
 8010790:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010792:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010796:	490d      	ldr	r1, [pc, #52]	; (80107cc <etharp_find_entry+0x2d4>)
 8010798:	4613      	mov	r3, r2
 801079a:	005b      	lsls	r3, r3, #1
 801079c:	4413      	add	r3, r2
 801079e:	00db      	lsls	r3, r3, #3
 80107a0:	440b      	add	r3, r1
 80107a2:	3312      	adds	r3, #18
 80107a4:	2200      	movs	r2, #0
 80107a6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80107a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80107ac:	4907      	ldr	r1, [pc, #28]	; (80107cc <etharp_find_entry+0x2d4>)
 80107ae:	4613      	mov	r3, r2
 80107b0:	005b      	lsls	r3, r3, #1
 80107b2:	4413      	add	r3, r2
 80107b4:	00db      	lsls	r3, r3, #3
 80107b6:	440b      	add	r3, r1
 80107b8:	3308      	adds	r3, #8
 80107ba:	687a      	ldr	r2, [r7, #4]
 80107bc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80107be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3728      	adds	r7, #40	; 0x28
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	200002fc 	.word	0x200002fc
 80107d0:	08018dfc 	.word	0x08018dfc
 80107d4:	08018e34 	.word	0x08018e34
 80107d8:	08018e74 	.word	0x08018e74
 80107dc:	08018e9c 	.word	0x08018e9c
 80107e0:	08018eb4 	.word	0x08018eb4
 80107e4:	08018ec8 	.word	0x08018ec8

080107e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b088      	sub	sp, #32
 80107ec:	af02      	add	r7, sp, #8
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	60b9      	str	r1, [r7, #8]
 80107f2:	607a      	str	r2, [r7, #4]
 80107f4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80107fc:	2b06      	cmp	r3, #6
 80107fe:	d006      	beq.n	801080e <etharp_update_arp_entry+0x26>
 8010800:	4b48      	ldr	r3, [pc, #288]	; (8010924 <etharp_update_arp_entry+0x13c>)
 8010802:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010806:	4948      	ldr	r1, [pc, #288]	; (8010928 <etharp_update_arp_entry+0x140>)
 8010808:	4848      	ldr	r0, [pc, #288]	; (801092c <etharp_update_arp_entry+0x144>)
 801080a:	f002 fde3 	bl	80133d4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d012      	beq.n	801083a <etharp_update_arp_entry+0x52>
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d00e      	beq.n	801083a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	68f9      	ldr	r1, [r7, #12]
 8010822:	4618      	mov	r0, r3
 8010824:	f001 f8fc 	bl	8011a20 <ip4_addr_isbroadcast_u32>
 8010828:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801082a:	2b00      	cmp	r3, #0
 801082c:	d105      	bne.n	801083a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010836:	2be0      	cmp	r3, #224	; 0xe0
 8010838:	d102      	bne.n	8010840 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801083a:	f06f 030f 	mvn.w	r3, #15
 801083e:	e06c      	b.n	801091a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010840:	78fb      	ldrb	r3, [r7, #3]
 8010842:	68fa      	ldr	r2, [r7, #12]
 8010844:	4619      	mov	r1, r3
 8010846:	68b8      	ldr	r0, [r7, #8]
 8010848:	f7ff fe56 	bl	80104f8 <etharp_find_entry>
 801084c:	4603      	mov	r3, r0
 801084e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010850:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010854:	2b00      	cmp	r3, #0
 8010856:	da02      	bge.n	801085e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010858:	8afb      	ldrh	r3, [r7, #22]
 801085a:	b25b      	sxtb	r3, r3
 801085c:	e05d      	b.n	801091a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801085e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010862:	4933      	ldr	r1, [pc, #204]	; (8010930 <etharp_update_arp_entry+0x148>)
 8010864:	4613      	mov	r3, r2
 8010866:	005b      	lsls	r3, r3, #1
 8010868:	4413      	add	r3, r2
 801086a:	00db      	lsls	r3, r3, #3
 801086c:	440b      	add	r3, r1
 801086e:	3314      	adds	r3, #20
 8010870:	2202      	movs	r2, #2
 8010872:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010874:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010878:	492d      	ldr	r1, [pc, #180]	; (8010930 <etharp_update_arp_entry+0x148>)
 801087a:	4613      	mov	r3, r2
 801087c:	005b      	lsls	r3, r3, #1
 801087e:	4413      	add	r3, r2
 8010880:	00db      	lsls	r3, r3, #3
 8010882:	440b      	add	r3, r1
 8010884:	3308      	adds	r3, #8
 8010886:	68fa      	ldr	r2, [r7, #12]
 8010888:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801088a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801088e:	4613      	mov	r3, r2
 8010890:	005b      	lsls	r3, r3, #1
 8010892:	4413      	add	r3, r2
 8010894:	00db      	lsls	r3, r3, #3
 8010896:	3308      	adds	r3, #8
 8010898:	4a25      	ldr	r2, [pc, #148]	; (8010930 <etharp_update_arp_entry+0x148>)
 801089a:	4413      	add	r3, r2
 801089c:	3304      	adds	r3, #4
 801089e:	2206      	movs	r2, #6
 80108a0:	6879      	ldr	r1, [r7, #4]
 80108a2:	4618      	mov	r0, r3
 80108a4:	f002 f852 	bl	801294c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80108a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80108ac:	4920      	ldr	r1, [pc, #128]	; (8010930 <etharp_update_arp_entry+0x148>)
 80108ae:	4613      	mov	r3, r2
 80108b0:	005b      	lsls	r3, r3, #1
 80108b2:	4413      	add	r3, r2
 80108b4:	00db      	lsls	r3, r3, #3
 80108b6:	440b      	add	r3, r1
 80108b8:	3312      	adds	r3, #18
 80108ba:	2200      	movs	r2, #0
 80108bc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80108be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80108c2:	491b      	ldr	r1, [pc, #108]	; (8010930 <etharp_update_arp_entry+0x148>)
 80108c4:	4613      	mov	r3, r2
 80108c6:	005b      	lsls	r3, r3, #1
 80108c8:	4413      	add	r3, r2
 80108ca:	00db      	lsls	r3, r3, #3
 80108cc:	440b      	add	r3, r1
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d021      	beq.n	8010918 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80108d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80108d8:	4915      	ldr	r1, [pc, #84]	; (8010930 <etharp_update_arp_entry+0x148>)
 80108da:	4613      	mov	r3, r2
 80108dc:	005b      	lsls	r3, r3, #1
 80108de:	4413      	add	r3, r2
 80108e0:	00db      	lsls	r3, r3, #3
 80108e2:	440b      	add	r3, r1
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80108e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80108ec:	4910      	ldr	r1, [pc, #64]	; (8010930 <etharp_update_arp_entry+0x148>)
 80108ee:	4613      	mov	r3, r2
 80108f0:	005b      	lsls	r3, r3, #1
 80108f2:	4413      	add	r3, r2
 80108f4:	00db      	lsls	r3, r3, #3
 80108f6:	440b      	add	r3, r1
 80108f8:	2200      	movs	r2, #0
 80108fa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010902:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010906:	9300      	str	r3, [sp, #0]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6939      	ldr	r1, [r7, #16]
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f001 ff8f 	bl	8012830 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010912:	6938      	ldr	r0, [r7, #16]
 8010914:	f7f9 fa3a 	bl	8009d8c <pbuf_free>
  }
  return ERR_OK;
 8010918:	2300      	movs	r3, #0
}
 801091a:	4618      	mov	r0, r3
 801091c:	3718      	adds	r7, #24
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}
 8010922:	bf00      	nop
 8010924:	08018dfc 	.word	0x08018dfc
 8010928:	08018ef4 	.word	0x08018ef4
 801092c:	08018e74 	.word	0x08018e74
 8010930:	200002fc 	.word	0x200002fc

08010934 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b084      	sub	sp, #16
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801093c:	2300      	movs	r3, #0
 801093e:	60fb      	str	r3, [r7, #12]
 8010940:	e01e      	b.n	8010980 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010942:	4913      	ldr	r1, [pc, #76]	; (8010990 <etharp_cleanup_netif+0x5c>)
 8010944:	68fa      	ldr	r2, [r7, #12]
 8010946:	4613      	mov	r3, r2
 8010948:	005b      	lsls	r3, r3, #1
 801094a:	4413      	add	r3, r2
 801094c:	00db      	lsls	r3, r3, #3
 801094e:	440b      	add	r3, r1
 8010950:	3314      	adds	r3, #20
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010956:	7afb      	ldrb	r3, [r7, #11]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d00e      	beq.n	801097a <etharp_cleanup_netif+0x46>
 801095c:	490c      	ldr	r1, [pc, #48]	; (8010990 <etharp_cleanup_netif+0x5c>)
 801095e:	68fa      	ldr	r2, [r7, #12]
 8010960:	4613      	mov	r3, r2
 8010962:	005b      	lsls	r3, r3, #1
 8010964:	4413      	add	r3, r2
 8010966:	00db      	lsls	r3, r3, #3
 8010968:	440b      	add	r3, r1
 801096a:	3308      	adds	r3, #8
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	687a      	ldr	r2, [r7, #4]
 8010970:	429a      	cmp	r2, r3
 8010972:	d102      	bne.n	801097a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010974:	68f8      	ldr	r0, [r7, #12]
 8010976:	f7ff fce5 	bl	8010344 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	3301      	adds	r3, #1
 801097e:	60fb      	str	r3, [r7, #12]
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2b09      	cmp	r3, #9
 8010984:	dddd      	ble.n	8010942 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010986:	bf00      	nop
 8010988:	bf00      	nop
 801098a:	3710      	adds	r7, #16
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	200002fc 	.word	0x200002fc

08010994 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010994:	b5b0      	push	{r4, r5, r7, lr}
 8010996:	b08a      	sub	sp, #40	; 0x28
 8010998:	af04      	add	r7, sp, #16
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d107      	bne.n	80109b4 <etharp_input+0x20>
 80109a4:	4b3d      	ldr	r3, [pc, #244]	; (8010a9c <etharp_input+0x108>)
 80109a6:	f240 228a 	movw	r2, #650	; 0x28a
 80109aa:	493d      	ldr	r1, [pc, #244]	; (8010aa0 <etharp_input+0x10c>)
 80109ac:	483d      	ldr	r0, [pc, #244]	; (8010aa4 <etharp_input+0x110>)
 80109ae:	f002 fd11 	bl	80133d4 <iprintf>
 80109b2:	e06f      	b.n	8010a94 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	685b      	ldr	r3, [r3, #4]
 80109b8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	881b      	ldrh	r3, [r3, #0]
 80109be:	b29b      	uxth	r3, r3
 80109c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109c4:	d10c      	bne.n	80109e0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80109ca:	2b06      	cmp	r3, #6
 80109cc:	d108      	bne.n	80109e0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80109d2:	2b04      	cmp	r3, #4
 80109d4:	d104      	bne.n	80109e0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	885b      	ldrh	r3, [r3, #2]
 80109da:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80109dc:	2b08      	cmp	r3, #8
 80109de:	d003      	beq.n	80109e8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f7f9 f9d3 	bl	8009d8c <pbuf_free>
    return;
 80109e6:	e055      	b.n	8010a94 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	330e      	adds	r3, #14
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	3318      	adds	r3, #24
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	3304      	adds	r3, #4
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d102      	bne.n	8010a08 <etharp_input+0x74>
    for_us = 0;
 8010a02:	2300      	movs	r3, #0
 8010a04:	75fb      	strb	r3, [r7, #23]
 8010a06:	e009      	b.n	8010a1c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010a08:	68ba      	ldr	r2, [r7, #8]
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	3304      	adds	r3, #4
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	bf0c      	ite	eq
 8010a14:	2301      	moveq	r3, #1
 8010a16:	2300      	movne	r3, #0
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	f103 0208 	add.w	r2, r3, #8
 8010a22:	7dfb      	ldrb	r3, [r7, #23]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d001      	beq.n	8010a2c <etharp_input+0x98>
 8010a28:	2301      	movs	r3, #1
 8010a2a:	e000      	b.n	8010a2e <etharp_input+0x9a>
 8010a2c:	2302      	movs	r3, #2
 8010a2e:	f107 010c 	add.w	r1, r7, #12
 8010a32:	6838      	ldr	r0, [r7, #0]
 8010a34:	f7ff fed8 	bl	80107e8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	88db      	ldrh	r3, [r3, #6]
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a42:	d003      	beq.n	8010a4c <etharp_input+0xb8>
 8010a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a48:	d01e      	beq.n	8010a88 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010a4a:	e020      	b.n	8010a8e <etharp_input+0xfa>
      if (for_us) {
 8010a4c:	7dfb      	ldrb	r3, [r7, #23]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d01c      	beq.n	8010a8c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010a68:	693a      	ldr	r2, [r7, #16]
 8010a6a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010a6c:	2102      	movs	r1, #2
 8010a6e:	9103      	str	r1, [sp, #12]
 8010a70:	f107 010c 	add.w	r1, r7, #12
 8010a74:	9102      	str	r1, [sp, #8]
 8010a76:	9201      	str	r2, [sp, #4]
 8010a78:	9300      	str	r3, [sp, #0]
 8010a7a:	462b      	mov	r3, r5
 8010a7c:	4622      	mov	r2, r4
 8010a7e:	4601      	mov	r1, r0
 8010a80:	6838      	ldr	r0, [r7, #0]
 8010a82:	f000 faeb 	bl	801105c <etharp_raw>
      break;
 8010a86:	e001      	b.n	8010a8c <etharp_input+0xf8>
      break;
 8010a88:	bf00      	nop
 8010a8a:	e000      	b.n	8010a8e <etharp_input+0xfa>
      break;
 8010a8c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f7f9 f97c 	bl	8009d8c <pbuf_free>
}
 8010a94:	3718      	adds	r7, #24
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bdb0      	pop	{r4, r5, r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	08018dfc 	.word	0x08018dfc
 8010aa0:	08018f4c 	.word	0x08018f4c
 8010aa4:	08018e74 	.word	0x08018e74

08010aa8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b086      	sub	sp, #24
 8010aac:	af02      	add	r7, sp, #8
 8010aae:	60f8      	str	r0, [r7, #12]
 8010ab0:	60b9      	str	r1, [r7, #8]
 8010ab2:	4613      	mov	r3, r2
 8010ab4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010ab6:	79fa      	ldrb	r2, [r7, #7]
 8010ab8:	4944      	ldr	r1, [pc, #272]	; (8010bcc <etharp_output_to_arp_index+0x124>)
 8010aba:	4613      	mov	r3, r2
 8010abc:	005b      	lsls	r3, r3, #1
 8010abe:	4413      	add	r3, r2
 8010ac0:	00db      	lsls	r3, r3, #3
 8010ac2:	440b      	add	r3, r1
 8010ac4:	3314      	adds	r3, #20
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	d806      	bhi.n	8010ada <etharp_output_to_arp_index+0x32>
 8010acc:	4b40      	ldr	r3, [pc, #256]	; (8010bd0 <etharp_output_to_arp_index+0x128>)
 8010ace:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010ad2:	4940      	ldr	r1, [pc, #256]	; (8010bd4 <etharp_output_to_arp_index+0x12c>)
 8010ad4:	4840      	ldr	r0, [pc, #256]	; (8010bd8 <etharp_output_to_arp_index+0x130>)
 8010ad6:	f002 fc7d 	bl	80133d4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010ada:	79fa      	ldrb	r2, [r7, #7]
 8010adc:	493b      	ldr	r1, [pc, #236]	; (8010bcc <etharp_output_to_arp_index+0x124>)
 8010ade:	4613      	mov	r3, r2
 8010ae0:	005b      	lsls	r3, r3, #1
 8010ae2:	4413      	add	r3, r2
 8010ae4:	00db      	lsls	r3, r3, #3
 8010ae6:	440b      	add	r3, r1
 8010ae8:	3314      	adds	r3, #20
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	2b02      	cmp	r3, #2
 8010aee:	d153      	bne.n	8010b98 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010af0:	79fa      	ldrb	r2, [r7, #7]
 8010af2:	4936      	ldr	r1, [pc, #216]	; (8010bcc <etharp_output_to_arp_index+0x124>)
 8010af4:	4613      	mov	r3, r2
 8010af6:	005b      	lsls	r3, r3, #1
 8010af8:	4413      	add	r3, r2
 8010afa:	00db      	lsls	r3, r3, #3
 8010afc:	440b      	add	r3, r1
 8010afe:	3312      	adds	r3, #18
 8010b00:	881b      	ldrh	r3, [r3, #0]
 8010b02:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010b06:	d919      	bls.n	8010b3c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010b08:	79fa      	ldrb	r2, [r7, #7]
 8010b0a:	4613      	mov	r3, r2
 8010b0c:	005b      	lsls	r3, r3, #1
 8010b0e:	4413      	add	r3, r2
 8010b10:	00db      	lsls	r3, r3, #3
 8010b12:	4a2e      	ldr	r2, [pc, #184]	; (8010bcc <etharp_output_to_arp_index+0x124>)
 8010b14:	4413      	add	r3, r2
 8010b16:	3304      	adds	r3, #4
 8010b18:	4619      	mov	r1, r3
 8010b1a:	68f8      	ldr	r0, [r7, #12]
 8010b1c:	f000 fb4c 	bl	80111b8 <etharp_request>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d138      	bne.n	8010b98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010b26:	79fa      	ldrb	r2, [r7, #7]
 8010b28:	4928      	ldr	r1, [pc, #160]	; (8010bcc <etharp_output_to_arp_index+0x124>)
 8010b2a:	4613      	mov	r3, r2
 8010b2c:	005b      	lsls	r3, r3, #1
 8010b2e:	4413      	add	r3, r2
 8010b30:	00db      	lsls	r3, r3, #3
 8010b32:	440b      	add	r3, r1
 8010b34:	3314      	adds	r3, #20
 8010b36:	2203      	movs	r2, #3
 8010b38:	701a      	strb	r2, [r3, #0]
 8010b3a:	e02d      	b.n	8010b98 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010b3c:	79fa      	ldrb	r2, [r7, #7]
 8010b3e:	4923      	ldr	r1, [pc, #140]	; (8010bcc <etharp_output_to_arp_index+0x124>)
 8010b40:	4613      	mov	r3, r2
 8010b42:	005b      	lsls	r3, r3, #1
 8010b44:	4413      	add	r3, r2
 8010b46:	00db      	lsls	r3, r3, #3
 8010b48:	440b      	add	r3, r1
 8010b4a:	3312      	adds	r3, #18
 8010b4c:	881b      	ldrh	r3, [r3, #0]
 8010b4e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010b52:	d321      	bcc.n	8010b98 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010b54:	79fa      	ldrb	r2, [r7, #7]
 8010b56:	4613      	mov	r3, r2
 8010b58:	005b      	lsls	r3, r3, #1
 8010b5a:	4413      	add	r3, r2
 8010b5c:	00db      	lsls	r3, r3, #3
 8010b5e:	4a1b      	ldr	r2, [pc, #108]	; (8010bcc <etharp_output_to_arp_index+0x124>)
 8010b60:	4413      	add	r3, r2
 8010b62:	1d19      	adds	r1, r3, #4
 8010b64:	79fa      	ldrb	r2, [r7, #7]
 8010b66:	4613      	mov	r3, r2
 8010b68:	005b      	lsls	r3, r3, #1
 8010b6a:	4413      	add	r3, r2
 8010b6c:	00db      	lsls	r3, r3, #3
 8010b6e:	3308      	adds	r3, #8
 8010b70:	4a16      	ldr	r2, [pc, #88]	; (8010bcc <etharp_output_to_arp_index+0x124>)
 8010b72:	4413      	add	r3, r2
 8010b74:	3304      	adds	r3, #4
 8010b76:	461a      	mov	r2, r3
 8010b78:	68f8      	ldr	r0, [r7, #12]
 8010b7a:	f000 fafb 	bl	8011174 <etharp_request_dst>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d109      	bne.n	8010b98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010b84:	79fa      	ldrb	r2, [r7, #7]
 8010b86:	4911      	ldr	r1, [pc, #68]	; (8010bcc <etharp_output_to_arp_index+0x124>)
 8010b88:	4613      	mov	r3, r2
 8010b8a:	005b      	lsls	r3, r3, #1
 8010b8c:	4413      	add	r3, r2
 8010b8e:	00db      	lsls	r3, r3, #3
 8010b90:	440b      	add	r3, r1
 8010b92:	3314      	adds	r3, #20
 8010b94:	2203      	movs	r2, #3
 8010b96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8010b9e:	79fa      	ldrb	r2, [r7, #7]
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	005b      	lsls	r3, r3, #1
 8010ba4:	4413      	add	r3, r2
 8010ba6:	00db      	lsls	r3, r3, #3
 8010ba8:	3308      	adds	r3, #8
 8010baa:	4a08      	ldr	r2, [pc, #32]	; (8010bcc <etharp_output_to_arp_index+0x124>)
 8010bac:	4413      	add	r3, r2
 8010bae:	3304      	adds	r3, #4
 8010bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010bb4:	9200      	str	r2, [sp, #0]
 8010bb6:	460a      	mov	r2, r1
 8010bb8:	68b9      	ldr	r1, [r7, #8]
 8010bba:	68f8      	ldr	r0, [r7, #12]
 8010bbc:	f001 fe38 	bl	8012830 <ethernet_output>
 8010bc0:	4603      	mov	r3, r0
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3710      	adds	r7, #16
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	200002fc 	.word	0x200002fc
 8010bd0:	08018dfc 	.word	0x08018dfc
 8010bd4:	08018f6c 	.word	0x08018f6c
 8010bd8:	08018e74 	.word	0x08018e74

08010bdc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b08a      	sub	sp, #40	; 0x28
 8010be0:	af02      	add	r7, sp, #8
 8010be2:	60f8      	str	r0, [r7, #12]
 8010be4:	60b9      	str	r1, [r7, #8]
 8010be6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d106      	bne.n	8010c00 <etharp_output+0x24>
 8010bf2:	4b73      	ldr	r3, [pc, #460]	; (8010dc0 <etharp_output+0x1e4>)
 8010bf4:	f240 321e 	movw	r2, #798	; 0x31e
 8010bf8:	4972      	ldr	r1, [pc, #456]	; (8010dc4 <etharp_output+0x1e8>)
 8010bfa:	4873      	ldr	r0, [pc, #460]	; (8010dc8 <etharp_output+0x1ec>)
 8010bfc:	f002 fbea 	bl	80133d4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d106      	bne.n	8010c14 <etharp_output+0x38>
 8010c06:	4b6e      	ldr	r3, [pc, #440]	; (8010dc0 <etharp_output+0x1e4>)
 8010c08:	f240 321f 	movw	r2, #799	; 0x31f
 8010c0c:	496f      	ldr	r1, [pc, #444]	; (8010dcc <etharp_output+0x1f0>)
 8010c0e:	486e      	ldr	r0, [pc, #440]	; (8010dc8 <etharp_output+0x1ec>)
 8010c10:	f002 fbe0 	bl	80133d4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d106      	bne.n	8010c28 <etharp_output+0x4c>
 8010c1a:	4b69      	ldr	r3, [pc, #420]	; (8010dc0 <etharp_output+0x1e4>)
 8010c1c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010c20:	496b      	ldr	r1, [pc, #428]	; (8010dd0 <etharp_output+0x1f4>)
 8010c22:	4869      	ldr	r0, [pc, #420]	; (8010dc8 <etharp_output+0x1ec>)
 8010c24:	f002 fbd6 	bl	80133d4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	68f9      	ldr	r1, [r7, #12]
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f000 fef6 	bl	8011a20 <ip4_addr_isbroadcast_u32>
 8010c34:	4603      	mov	r3, r0
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d002      	beq.n	8010c40 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010c3a:	4b66      	ldr	r3, [pc, #408]	; (8010dd4 <etharp_output+0x1f8>)
 8010c3c:	61fb      	str	r3, [r7, #28]
 8010c3e:	e0af      	b.n	8010da0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c48:	2be0      	cmp	r3, #224	; 0xe0
 8010c4a:	d118      	bne.n	8010c7e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010c50:	2300      	movs	r3, #0
 8010c52:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010c54:	235e      	movs	r3, #94	; 0x5e
 8010c56:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	3301      	adds	r3, #1
 8010c5c:	781b      	ldrb	r3, [r3, #0]
 8010c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	3302      	adds	r3, #2
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	3303      	adds	r3, #3
 8010c72:	781b      	ldrb	r3, [r3, #0]
 8010c74:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010c76:	f107 0310 	add.w	r3, r7, #16
 8010c7a:	61fb      	str	r3, [r7, #28]
 8010c7c:	e090      	b.n	8010da0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681a      	ldr	r2, [r3, #0]
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	3304      	adds	r3, #4
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	405a      	eors	r2, r3
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	3308      	adds	r3, #8
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4013      	ands	r3, r2
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d012      	beq.n	8010cbc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010c9c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d00b      	beq.n	8010cbc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	330c      	adds	r3, #12
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d003      	beq.n	8010cb6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	330c      	adds	r3, #12
 8010cb2:	61bb      	str	r3, [r7, #24]
 8010cb4:	e002      	b.n	8010cbc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010cb6:	f06f 0303 	mvn.w	r3, #3
 8010cba:	e07d      	b.n	8010db8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010cbc:	4b46      	ldr	r3, [pc, #280]	; (8010dd8 <etharp_output+0x1fc>)
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	4a46      	ldr	r2, [pc, #280]	; (8010ddc <etharp_output+0x200>)
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	005b      	lsls	r3, r3, #1
 8010cc8:	440b      	add	r3, r1
 8010cca:	00db      	lsls	r3, r3, #3
 8010ccc:	4413      	add	r3, r2
 8010cce:	3314      	adds	r3, #20
 8010cd0:	781b      	ldrb	r3, [r3, #0]
 8010cd2:	2b01      	cmp	r3, #1
 8010cd4:	d925      	bls.n	8010d22 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010cd6:	4b40      	ldr	r3, [pc, #256]	; (8010dd8 <etharp_output+0x1fc>)
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	4619      	mov	r1, r3
 8010cdc:	4a3f      	ldr	r2, [pc, #252]	; (8010ddc <etharp_output+0x200>)
 8010cde:	460b      	mov	r3, r1
 8010ce0:	005b      	lsls	r3, r3, #1
 8010ce2:	440b      	add	r3, r1
 8010ce4:	00db      	lsls	r3, r3, #3
 8010ce6:	4413      	add	r3, r2
 8010ce8:	3308      	adds	r3, #8
 8010cea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010cec:	68fa      	ldr	r2, [r7, #12]
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d117      	bne.n	8010d22 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010cf2:	69bb      	ldr	r3, [r7, #24]
 8010cf4:	681a      	ldr	r2, [r3, #0]
 8010cf6:	4b38      	ldr	r3, [pc, #224]	; (8010dd8 <etharp_output+0x1fc>)
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	4937      	ldr	r1, [pc, #220]	; (8010ddc <etharp_output+0x200>)
 8010cfe:	4603      	mov	r3, r0
 8010d00:	005b      	lsls	r3, r3, #1
 8010d02:	4403      	add	r3, r0
 8010d04:	00db      	lsls	r3, r3, #3
 8010d06:	440b      	add	r3, r1
 8010d08:	3304      	adds	r3, #4
 8010d0a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d108      	bne.n	8010d22 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010d10:	4b31      	ldr	r3, [pc, #196]	; (8010dd8 <etharp_output+0x1fc>)
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	461a      	mov	r2, r3
 8010d16:	68b9      	ldr	r1, [r7, #8]
 8010d18:	68f8      	ldr	r0, [r7, #12]
 8010d1a:	f7ff fec5 	bl	8010aa8 <etharp_output_to_arp_index>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	e04a      	b.n	8010db8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010d22:	2300      	movs	r3, #0
 8010d24:	75fb      	strb	r3, [r7, #23]
 8010d26:	e031      	b.n	8010d8c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010d28:	7dfa      	ldrb	r2, [r7, #23]
 8010d2a:	492c      	ldr	r1, [pc, #176]	; (8010ddc <etharp_output+0x200>)
 8010d2c:	4613      	mov	r3, r2
 8010d2e:	005b      	lsls	r3, r3, #1
 8010d30:	4413      	add	r3, r2
 8010d32:	00db      	lsls	r3, r3, #3
 8010d34:	440b      	add	r3, r1
 8010d36:	3314      	adds	r3, #20
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	2b01      	cmp	r3, #1
 8010d3c:	d923      	bls.n	8010d86 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010d3e:	7dfa      	ldrb	r2, [r7, #23]
 8010d40:	4926      	ldr	r1, [pc, #152]	; (8010ddc <etharp_output+0x200>)
 8010d42:	4613      	mov	r3, r2
 8010d44:	005b      	lsls	r3, r3, #1
 8010d46:	4413      	add	r3, r2
 8010d48:	00db      	lsls	r3, r3, #3
 8010d4a:	440b      	add	r3, r1
 8010d4c:	3308      	adds	r3, #8
 8010d4e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010d50:	68fa      	ldr	r2, [r7, #12]
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d117      	bne.n	8010d86 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010d56:	69bb      	ldr	r3, [r7, #24]
 8010d58:	6819      	ldr	r1, [r3, #0]
 8010d5a:	7dfa      	ldrb	r2, [r7, #23]
 8010d5c:	481f      	ldr	r0, [pc, #124]	; (8010ddc <etharp_output+0x200>)
 8010d5e:	4613      	mov	r3, r2
 8010d60:	005b      	lsls	r3, r3, #1
 8010d62:	4413      	add	r3, r2
 8010d64:	00db      	lsls	r3, r3, #3
 8010d66:	4403      	add	r3, r0
 8010d68:	3304      	adds	r3, #4
 8010d6a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010d6c:	4299      	cmp	r1, r3
 8010d6e:	d10a      	bne.n	8010d86 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010d70:	4a19      	ldr	r2, [pc, #100]	; (8010dd8 <etharp_output+0x1fc>)
 8010d72:	7dfb      	ldrb	r3, [r7, #23]
 8010d74:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010d76:	7dfb      	ldrb	r3, [r7, #23]
 8010d78:	461a      	mov	r2, r3
 8010d7a:	68b9      	ldr	r1, [r7, #8]
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	f7ff fe93 	bl	8010aa8 <etharp_output_to_arp_index>
 8010d82:	4603      	mov	r3, r0
 8010d84:	e018      	b.n	8010db8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010d86:	7dfb      	ldrb	r3, [r7, #23]
 8010d88:	3301      	adds	r3, #1
 8010d8a:	75fb      	strb	r3, [r7, #23]
 8010d8c:	7dfb      	ldrb	r3, [r7, #23]
 8010d8e:	2b09      	cmp	r3, #9
 8010d90:	d9ca      	bls.n	8010d28 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010d92:	68ba      	ldr	r2, [r7, #8]
 8010d94:	69b9      	ldr	r1, [r7, #24]
 8010d96:	68f8      	ldr	r0, [r7, #12]
 8010d98:	f000 f822 	bl	8010de0 <etharp_query>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	e00b      	b.n	8010db8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010daa:	9300      	str	r3, [sp, #0]
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	68b9      	ldr	r1, [r7, #8]
 8010db0:	68f8      	ldr	r0, [r7, #12]
 8010db2:	f001 fd3d 	bl	8012830 <ethernet_output>
 8010db6:	4603      	mov	r3, r0
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3720      	adds	r7, #32
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}
 8010dc0:	08018dfc 	.word	0x08018dfc
 8010dc4:	08018f4c 	.word	0x08018f4c
 8010dc8:	08018e74 	.word	0x08018e74
 8010dcc:	08018f9c 	.word	0x08018f9c
 8010dd0:	08018f3c 	.word	0x08018f3c
 8010dd4:	080195a4 	.word	0x080195a4
 8010dd8:	200003ec 	.word	0x200003ec
 8010ddc:	200002fc 	.word	0x200002fc

08010de0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b08c      	sub	sp, #48	; 0x30
 8010de4:	af02      	add	r7, sp, #8
 8010de6:	60f8      	str	r0, [r7, #12]
 8010de8:	60b9      	str	r1, [r7, #8]
 8010dea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	332a      	adds	r3, #42	; 0x2a
 8010df0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010df2:	23ff      	movs	r3, #255	; 0xff
 8010df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010df8:	2300      	movs	r3, #0
 8010dfa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	68f9      	ldr	r1, [r7, #12]
 8010e02:	4618      	mov	r0, r3
 8010e04:	f000 fe0c 	bl	8011a20 <ip4_addr_isbroadcast_u32>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d10c      	bne.n	8010e28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010e16:	2be0      	cmp	r3, #224	; 0xe0
 8010e18:	d006      	beq.n	8010e28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d003      	beq.n	8010e28 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d102      	bne.n	8010e2e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010e28:	f06f 030f 	mvn.w	r3, #15
 8010e2c:	e101      	b.n	8011032 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010e2e:	68fa      	ldr	r2, [r7, #12]
 8010e30:	2101      	movs	r1, #1
 8010e32:	68b8      	ldr	r0, [r7, #8]
 8010e34:	f7ff fb60 	bl	80104f8 <etharp_find_entry>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010e3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	da02      	bge.n	8010e4a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010e44:	8a7b      	ldrh	r3, [r7, #18]
 8010e46:	b25b      	sxtb	r3, r3
 8010e48:	e0f3      	b.n	8011032 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010e4a:	8a7b      	ldrh	r3, [r7, #18]
 8010e4c:	2b7e      	cmp	r3, #126	; 0x7e
 8010e4e:	d906      	bls.n	8010e5e <etharp_query+0x7e>
 8010e50:	4b7a      	ldr	r3, [pc, #488]	; (801103c <etharp_query+0x25c>)
 8010e52:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010e56:	497a      	ldr	r1, [pc, #488]	; (8011040 <etharp_query+0x260>)
 8010e58:	487a      	ldr	r0, [pc, #488]	; (8011044 <etharp_query+0x264>)
 8010e5a:	f002 fabb 	bl	80133d4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010e5e:	8a7b      	ldrh	r3, [r7, #18]
 8010e60:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010e62:	7c7a      	ldrb	r2, [r7, #17]
 8010e64:	4978      	ldr	r1, [pc, #480]	; (8011048 <etharp_query+0x268>)
 8010e66:	4613      	mov	r3, r2
 8010e68:	005b      	lsls	r3, r3, #1
 8010e6a:	4413      	add	r3, r2
 8010e6c:	00db      	lsls	r3, r3, #3
 8010e6e:	440b      	add	r3, r1
 8010e70:	3314      	adds	r3, #20
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d115      	bne.n	8010ea4 <etharp_query+0xc4>
    is_new_entry = 1;
 8010e78:	2301      	movs	r3, #1
 8010e7a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010e7c:	7c7a      	ldrb	r2, [r7, #17]
 8010e7e:	4972      	ldr	r1, [pc, #456]	; (8011048 <etharp_query+0x268>)
 8010e80:	4613      	mov	r3, r2
 8010e82:	005b      	lsls	r3, r3, #1
 8010e84:	4413      	add	r3, r2
 8010e86:	00db      	lsls	r3, r3, #3
 8010e88:	440b      	add	r3, r1
 8010e8a:	3314      	adds	r3, #20
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010e90:	7c7a      	ldrb	r2, [r7, #17]
 8010e92:	496d      	ldr	r1, [pc, #436]	; (8011048 <etharp_query+0x268>)
 8010e94:	4613      	mov	r3, r2
 8010e96:	005b      	lsls	r3, r3, #1
 8010e98:	4413      	add	r3, r2
 8010e9a:	00db      	lsls	r3, r3, #3
 8010e9c:	440b      	add	r3, r1
 8010e9e:	3308      	adds	r3, #8
 8010ea0:	68fa      	ldr	r2, [r7, #12]
 8010ea2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010ea4:	7c7a      	ldrb	r2, [r7, #17]
 8010ea6:	4968      	ldr	r1, [pc, #416]	; (8011048 <etharp_query+0x268>)
 8010ea8:	4613      	mov	r3, r2
 8010eaa:	005b      	lsls	r3, r3, #1
 8010eac:	4413      	add	r3, r2
 8010eae:	00db      	lsls	r3, r3, #3
 8010eb0:	440b      	add	r3, r1
 8010eb2:	3314      	adds	r3, #20
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	2b01      	cmp	r3, #1
 8010eb8:	d011      	beq.n	8010ede <etharp_query+0xfe>
 8010eba:	7c7a      	ldrb	r2, [r7, #17]
 8010ebc:	4962      	ldr	r1, [pc, #392]	; (8011048 <etharp_query+0x268>)
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	005b      	lsls	r3, r3, #1
 8010ec2:	4413      	add	r3, r2
 8010ec4:	00db      	lsls	r3, r3, #3
 8010ec6:	440b      	add	r3, r1
 8010ec8:	3314      	adds	r3, #20
 8010eca:	781b      	ldrb	r3, [r3, #0]
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	d806      	bhi.n	8010ede <etharp_query+0xfe>
 8010ed0:	4b5a      	ldr	r3, [pc, #360]	; (801103c <etharp_query+0x25c>)
 8010ed2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010ed6:	495d      	ldr	r1, [pc, #372]	; (801104c <etharp_query+0x26c>)
 8010ed8:	485a      	ldr	r0, [pc, #360]	; (8011044 <etharp_query+0x264>)
 8010eda:	f002 fa7b 	bl	80133d4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010ede:	6a3b      	ldr	r3, [r7, #32]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d102      	bne.n	8010eea <etharp_query+0x10a>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d10c      	bne.n	8010f04 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010eea:	68b9      	ldr	r1, [r7, #8]
 8010eec:	68f8      	ldr	r0, [r7, #12]
 8010eee:	f000 f963 	bl	80111b8 <etharp_request>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d102      	bne.n	8010f04 <etharp_query+0x124>
      return result;
 8010efe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010f02:	e096      	b.n	8011032 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d106      	bne.n	8010f18 <etharp_query+0x138>
 8010f0a:	4b4c      	ldr	r3, [pc, #304]	; (801103c <etharp_query+0x25c>)
 8010f0c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010f10:	494f      	ldr	r1, [pc, #316]	; (8011050 <etharp_query+0x270>)
 8010f12:	484c      	ldr	r0, [pc, #304]	; (8011044 <etharp_query+0x264>)
 8010f14:	f002 fa5e 	bl	80133d4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010f18:	7c7a      	ldrb	r2, [r7, #17]
 8010f1a:	494b      	ldr	r1, [pc, #300]	; (8011048 <etharp_query+0x268>)
 8010f1c:	4613      	mov	r3, r2
 8010f1e:	005b      	lsls	r3, r3, #1
 8010f20:	4413      	add	r3, r2
 8010f22:	00db      	lsls	r3, r3, #3
 8010f24:	440b      	add	r3, r1
 8010f26:	3314      	adds	r3, #20
 8010f28:	781b      	ldrb	r3, [r3, #0]
 8010f2a:	2b01      	cmp	r3, #1
 8010f2c:	d917      	bls.n	8010f5e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010f2e:	4a49      	ldr	r2, [pc, #292]	; (8011054 <etharp_query+0x274>)
 8010f30:	7c7b      	ldrb	r3, [r7, #17]
 8010f32:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010f34:	7c7a      	ldrb	r2, [r7, #17]
 8010f36:	4613      	mov	r3, r2
 8010f38:	005b      	lsls	r3, r3, #1
 8010f3a:	4413      	add	r3, r2
 8010f3c:	00db      	lsls	r3, r3, #3
 8010f3e:	3308      	adds	r3, #8
 8010f40:	4a41      	ldr	r2, [pc, #260]	; (8011048 <etharp_query+0x268>)
 8010f42:	4413      	add	r3, r2
 8010f44:	3304      	adds	r3, #4
 8010f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010f4a:	9200      	str	r2, [sp, #0]
 8010f4c:	697a      	ldr	r2, [r7, #20]
 8010f4e:	6879      	ldr	r1, [r7, #4]
 8010f50:	68f8      	ldr	r0, [r7, #12]
 8010f52:	f001 fc6d 	bl	8012830 <ethernet_output>
 8010f56:	4603      	mov	r3, r0
 8010f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f5c:	e067      	b.n	801102e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010f5e:	7c7a      	ldrb	r2, [r7, #17]
 8010f60:	4939      	ldr	r1, [pc, #228]	; (8011048 <etharp_query+0x268>)
 8010f62:	4613      	mov	r3, r2
 8010f64:	005b      	lsls	r3, r3, #1
 8010f66:	4413      	add	r3, r2
 8010f68:	00db      	lsls	r3, r3, #3
 8010f6a:	440b      	add	r3, r1
 8010f6c:	3314      	adds	r3, #20
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	2b01      	cmp	r3, #1
 8010f72:	d15c      	bne.n	801102e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010f74:	2300      	movs	r3, #0
 8010f76:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010f7c:	e01c      	b.n	8010fb8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010f7e:	69fb      	ldr	r3, [r7, #28]
 8010f80:	895a      	ldrh	r2, [r3, #10]
 8010f82:	69fb      	ldr	r3, [r7, #28]
 8010f84:	891b      	ldrh	r3, [r3, #8]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d10a      	bne.n	8010fa0 <etharp_query+0x1c0>
 8010f8a:	69fb      	ldr	r3, [r7, #28]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d006      	beq.n	8010fa0 <etharp_query+0x1c0>
 8010f92:	4b2a      	ldr	r3, [pc, #168]	; (801103c <etharp_query+0x25c>)
 8010f94:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010f98:	492f      	ldr	r1, [pc, #188]	; (8011058 <etharp_query+0x278>)
 8010f9a:	482a      	ldr	r0, [pc, #168]	; (8011044 <etharp_query+0x264>)
 8010f9c:	f002 fa1a 	bl	80133d4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010fa0:	69fb      	ldr	r3, [r7, #28]
 8010fa2:	7b1b      	ldrb	r3, [r3, #12]
 8010fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d002      	beq.n	8010fb2 <etharp_query+0x1d2>
        copy_needed = 1;
 8010fac:	2301      	movs	r3, #1
 8010fae:	61bb      	str	r3, [r7, #24]
        break;
 8010fb0:	e005      	b.n	8010fbe <etharp_query+0x1de>
      }
      p = p->next;
 8010fb2:	69fb      	ldr	r3, [r7, #28]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010fb8:	69fb      	ldr	r3, [r7, #28]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d1df      	bne.n	8010f7e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d007      	beq.n	8010fd4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010fca:	200e      	movs	r0, #14
 8010fcc:	f7f9 f9dc 	bl	800a388 <pbuf_clone>
 8010fd0:	61f8      	str	r0, [r7, #28]
 8010fd2:	e004      	b.n	8010fde <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010fd8:	69f8      	ldr	r0, [r7, #28]
 8010fda:	f7f8 ff77 	bl	8009ecc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010fde:	69fb      	ldr	r3, [r7, #28]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d021      	beq.n	8011028 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010fe4:	7c7a      	ldrb	r2, [r7, #17]
 8010fe6:	4918      	ldr	r1, [pc, #96]	; (8011048 <etharp_query+0x268>)
 8010fe8:	4613      	mov	r3, r2
 8010fea:	005b      	lsls	r3, r3, #1
 8010fec:	4413      	add	r3, r2
 8010fee:	00db      	lsls	r3, r3, #3
 8010ff0:	440b      	add	r3, r1
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d00a      	beq.n	801100e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010ff8:	7c7a      	ldrb	r2, [r7, #17]
 8010ffa:	4913      	ldr	r1, [pc, #76]	; (8011048 <etharp_query+0x268>)
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	005b      	lsls	r3, r3, #1
 8011000:	4413      	add	r3, r2
 8011002:	00db      	lsls	r3, r3, #3
 8011004:	440b      	add	r3, r1
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	4618      	mov	r0, r3
 801100a:	f7f8 febf 	bl	8009d8c <pbuf_free>
      }
      arp_table[i].q = p;
 801100e:	7c7a      	ldrb	r2, [r7, #17]
 8011010:	490d      	ldr	r1, [pc, #52]	; (8011048 <etharp_query+0x268>)
 8011012:	4613      	mov	r3, r2
 8011014:	005b      	lsls	r3, r3, #1
 8011016:	4413      	add	r3, r2
 8011018:	00db      	lsls	r3, r3, #3
 801101a:	440b      	add	r3, r1
 801101c:	69fa      	ldr	r2, [r7, #28]
 801101e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011020:	2300      	movs	r3, #0
 8011022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011026:	e002      	b.n	801102e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011028:	23ff      	movs	r3, #255	; 0xff
 801102a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801102e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011032:	4618      	mov	r0, r3
 8011034:	3728      	adds	r7, #40	; 0x28
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	08018dfc 	.word	0x08018dfc
 8011040:	08018fa8 	.word	0x08018fa8
 8011044:	08018e74 	.word	0x08018e74
 8011048:	200002fc 	.word	0x200002fc
 801104c:	08018fb8 	.word	0x08018fb8
 8011050:	08018f9c 	.word	0x08018f9c
 8011054:	200003ec 	.word	0x200003ec
 8011058:	08018fe0 	.word	0x08018fe0

0801105c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b08a      	sub	sp, #40	; 0x28
 8011060:	af02      	add	r7, sp, #8
 8011062:	60f8      	str	r0, [r7, #12]
 8011064:	60b9      	str	r1, [r7, #8]
 8011066:	607a      	str	r2, [r7, #4]
 8011068:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801106a:	2300      	movs	r3, #0
 801106c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d106      	bne.n	8011082 <etharp_raw+0x26>
 8011074:	4b3a      	ldr	r3, [pc, #232]	; (8011160 <etharp_raw+0x104>)
 8011076:	f240 4257 	movw	r2, #1111	; 0x457
 801107a:	493a      	ldr	r1, [pc, #232]	; (8011164 <etharp_raw+0x108>)
 801107c:	483a      	ldr	r0, [pc, #232]	; (8011168 <etharp_raw+0x10c>)
 801107e:	f002 f9a9 	bl	80133d4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011082:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011086:	211c      	movs	r1, #28
 8011088:	200e      	movs	r0, #14
 801108a:	f7f8 fb9b 	bl	80097c4 <pbuf_alloc>
 801108e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011090:	69bb      	ldr	r3, [r7, #24]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d102      	bne.n	801109c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011096:	f04f 33ff 	mov.w	r3, #4294967295
 801109a:	e05d      	b.n	8011158 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801109c:	69bb      	ldr	r3, [r7, #24]
 801109e:	895b      	ldrh	r3, [r3, #10]
 80110a0:	2b1b      	cmp	r3, #27
 80110a2:	d806      	bhi.n	80110b2 <etharp_raw+0x56>
 80110a4:	4b2e      	ldr	r3, [pc, #184]	; (8011160 <etharp_raw+0x104>)
 80110a6:	f240 4262 	movw	r2, #1122	; 0x462
 80110aa:	4930      	ldr	r1, [pc, #192]	; (801116c <etharp_raw+0x110>)
 80110ac:	482e      	ldr	r0, [pc, #184]	; (8011168 <etharp_raw+0x10c>)
 80110ae:	f002 f991 	bl	80133d4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80110b2:	69bb      	ldr	r3, [r7, #24]
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80110b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7f7 fbb2 	bl	8008824 <lwip_htons>
 80110c0:	4603      	mov	r3, r0
 80110c2:	461a      	mov	r2, r3
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110ce:	2b06      	cmp	r3, #6
 80110d0:	d006      	beq.n	80110e0 <etharp_raw+0x84>
 80110d2:	4b23      	ldr	r3, [pc, #140]	; (8011160 <etharp_raw+0x104>)
 80110d4:	f240 4269 	movw	r2, #1129	; 0x469
 80110d8:	4925      	ldr	r1, [pc, #148]	; (8011170 <etharp_raw+0x114>)
 80110da:	4823      	ldr	r0, [pc, #140]	; (8011168 <etharp_raw+0x10c>)
 80110dc:	f002 f97a 	bl	80133d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	3308      	adds	r3, #8
 80110e4:	2206      	movs	r2, #6
 80110e6:	6839      	ldr	r1, [r7, #0]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f001 fc2f 	bl	801294c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	3312      	adds	r3, #18
 80110f2:	2206      	movs	r2, #6
 80110f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110f6:	4618      	mov	r0, r3
 80110f8:	f001 fc28 	bl	801294c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	330e      	adds	r3, #14
 8011100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011102:	6812      	ldr	r2, [r2, #0]
 8011104:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	3318      	adds	r3, #24
 801110a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801110c:	6812      	ldr	r2, [r2, #0]
 801110e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	2200      	movs	r2, #0
 8011114:	701a      	strb	r2, [r3, #0]
 8011116:	2200      	movs	r2, #0
 8011118:	f042 0201 	orr.w	r2, r2, #1
 801111c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	2200      	movs	r2, #0
 8011122:	f042 0208 	orr.w	r2, r2, #8
 8011126:	709a      	strb	r2, [r3, #2]
 8011128:	2200      	movs	r2, #0
 801112a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	2206      	movs	r2, #6
 8011130:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	2204      	movs	r2, #4
 8011136:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011138:	f640 0306 	movw	r3, #2054	; 0x806
 801113c:	9300      	str	r3, [sp, #0]
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	68ba      	ldr	r2, [r7, #8]
 8011142:	69b9      	ldr	r1, [r7, #24]
 8011144:	68f8      	ldr	r0, [r7, #12]
 8011146:	f001 fb73 	bl	8012830 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801114a:	69b8      	ldr	r0, [r7, #24]
 801114c:	f7f8 fe1e 	bl	8009d8c <pbuf_free>
  p = NULL;
 8011150:	2300      	movs	r3, #0
 8011152:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011154:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011158:	4618      	mov	r0, r3
 801115a:	3720      	adds	r7, #32
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}
 8011160:	08018dfc 	.word	0x08018dfc
 8011164:	08018f4c 	.word	0x08018f4c
 8011168:	08018e74 	.word	0x08018e74
 801116c:	08018ffc 	.word	0x08018ffc
 8011170:	08019030 	.word	0x08019030

08011174 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b088      	sub	sp, #32
 8011178:	af04      	add	r7, sp, #16
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	60b9      	str	r1, [r7, #8]
 801117e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011190:	2201      	movs	r2, #1
 8011192:	9203      	str	r2, [sp, #12]
 8011194:	68ba      	ldr	r2, [r7, #8]
 8011196:	9202      	str	r2, [sp, #8]
 8011198:	4a06      	ldr	r2, [pc, #24]	; (80111b4 <etharp_request_dst+0x40>)
 801119a:	9201      	str	r2, [sp, #4]
 801119c:	9300      	str	r3, [sp, #0]
 801119e:	4603      	mov	r3, r0
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	68f8      	ldr	r0, [r7, #12]
 80111a4:	f7ff ff5a 	bl	801105c <etharp_raw>
 80111a8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3710      	adds	r7, #16
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	080195ac 	.word	0x080195ac

080111b8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b082      	sub	sp, #8
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80111c2:	4a05      	ldr	r2, [pc, #20]	; (80111d8 <etharp_request+0x20>)
 80111c4:	6839      	ldr	r1, [r7, #0]
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f7ff ffd4 	bl	8011174 <etharp_request_dst>
 80111cc:	4603      	mov	r3, r0
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3708      	adds	r7, #8
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	080195a4 	.word	0x080195a4

080111dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b08e      	sub	sp, #56	; 0x38
 80111e0:	af04      	add	r7, sp, #16
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80111e6:	4b78      	ldr	r3, [pc, #480]	; (80113c8 <icmp_input+0x1ec>)
 80111e8:	689b      	ldr	r3, [r3, #8]
 80111ea:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 80111ec:	6a3b      	ldr	r3, [r7, #32]
 80111ee:	781b      	ldrb	r3, [r3, #0]
 80111f0:	f003 030f 	and.w	r3, r3, #15
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	009b      	lsls	r3, r3, #2
 80111f8:	b2db      	uxtb	r3, r3
 80111fa:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 80111fc:	8bfb      	ldrh	r3, [r7, #30]
 80111fe:	2b13      	cmp	r3, #19
 8011200:	f240 80cf 	bls.w	80113a2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	895b      	ldrh	r3, [r3, #10]
 8011208:	2b03      	cmp	r3, #3
 801120a:	f240 80cc 	bls.w	80113a6 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011216:	7f7b      	ldrb	r3, [r7, #29]
 8011218:	2b00      	cmp	r3, #0
 801121a:	f000 80bb 	beq.w	8011394 <icmp_input+0x1b8>
 801121e:	2b08      	cmp	r3, #8
 8011220:	f040 80bb 	bne.w	801139a <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011224:	4b69      	ldr	r3, [pc, #420]	; (80113cc <icmp_input+0x1f0>)
 8011226:	627b      	str	r3, [r7, #36]	; 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011228:	4b67      	ldr	r3, [pc, #412]	; (80113c8 <icmp_input+0x1ec>)
 801122a:	695b      	ldr	r3, [r3, #20]
 801122c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011230:	2be0      	cmp	r3, #224	; 0xe0
 8011232:	d102      	bne.n	801123a <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	3304      	adds	r3, #4
 8011238:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801123a:	4b63      	ldr	r3, [pc, #396]	; (80113c8 <icmp_input+0x1ec>)
 801123c:	695b      	ldr	r3, [r3, #20]
 801123e:	4a62      	ldr	r2, [pc, #392]	; (80113c8 <icmp_input+0x1ec>)
 8011240:	6812      	ldr	r2, [r2, #0]
 8011242:	4611      	mov	r1, r2
 8011244:	4618      	mov	r0, r3
 8011246:	f000 fbeb 	bl	8011a20 <ip4_addr_isbroadcast_u32>
 801124a:	4603      	mov	r3, r0
 801124c:	2b00      	cmp	r3, #0
 801124e:	d002      	beq.n	8011256 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	3304      	adds	r3, #4
 8011254:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	891b      	ldrh	r3, [r3, #8]
 801125a:	2b07      	cmp	r3, #7
 801125c:	f240 80a5 	bls.w	80113aa <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011260:	8bfb      	ldrh	r3, [r7, #30]
 8011262:	330e      	adds	r3, #14
 8011264:	4619      	mov	r1, r3
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f7f8 fcfa 	bl	8009c60 <pbuf_add_header>
 801126c:	4603      	mov	r3, r0
 801126e:	2b00      	cmp	r3, #0
 8011270:	d04b      	beq.n	801130a <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	891a      	ldrh	r2, [r3, #8]
 8011276:	8bfb      	ldrh	r3, [r7, #30]
 8011278:	4413      	add	r3, r2
 801127a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	891b      	ldrh	r3, [r3, #8]
 8011280:	8b7a      	ldrh	r2, [r7, #26]
 8011282:	429a      	cmp	r2, r3
 8011284:	f0c0 8096 	bcc.w	80113b4 <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011288:	8b7b      	ldrh	r3, [r7, #26]
 801128a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801128e:	4619      	mov	r1, r3
 8011290:	200e      	movs	r0, #14
 8011292:	f7f8 fa97 	bl	80097c4 <pbuf_alloc>
 8011296:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	2b00      	cmp	r3, #0
 801129c:	f000 808c 	beq.w	80113b8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80112a0:	697b      	ldr	r3, [r7, #20]
 80112a2:	895b      	ldrh	r3, [r3, #10]
 80112a4:	461a      	mov	r2, r3
 80112a6:	8bfb      	ldrh	r3, [r7, #30]
 80112a8:	3308      	adds	r3, #8
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d203      	bcs.n	80112b6 <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80112ae:	6978      	ldr	r0, [r7, #20]
 80112b0:	f7f8 fd6c 	bl	8009d8c <pbuf_free>
          goto icmperr;
 80112b4:	e081      	b.n	80113ba <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	8bfa      	ldrh	r2, [r7, #30]
 80112bc:	6a39      	ldr	r1, [r7, #32]
 80112be:	4618      	mov	r0, r3
 80112c0:	f001 fb44 	bl	801294c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80112c4:	8bfb      	ldrh	r3, [r7, #30]
 80112c6:	4619      	mov	r1, r3
 80112c8:	6978      	ldr	r0, [r7, #20]
 80112ca:	f7f8 fcd9 	bl	8009c80 <pbuf_remove_header>
 80112ce:	4603      	mov	r3, r0
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d009      	beq.n	80112e8 <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80112d4:	4b3e      	ldr	r3, [pc, #248]	; (80113d0 <icmp_input+0x1f4>)
 80112d6:	22b6      	movs	r2, #182	; 0xb6
 80112d8:	493e      	ldr	r1, [pc, #248]	; (80113d4 <icmp_input+0x1f8>)
 80112da:	483f      	ldr	r0, [pc, #252]	; (80113d8 <icmp_input+0x1fc>)
 80112dc:	f002 f87a 	bl	80133d4 <iprintf>
          pbuf_free(r);
 80112e0:	6978      	ldr	r0, [r7, #20]
 80112e2:	f7f8 fd53 	bl	8009d8c <pbuf_free>
          goto icmperr;
 80112e6:	e068      	b.n	80113ba <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80112e8:	6879      	ldr	r1, [r7, #4]
 80112ea:	6978      	ldr	r0, [r7, #20]
 80112ec:	f7f8 fe76 	bl	8009fdc <pbuf_copy>
 80112f0:	4603      	mov	r3, r0
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d003      	beq.n	80112fe <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80112f6:	6978      	ldr	r0, [r7, #20]
 80112f8:	f7f8 fd48 	bl	8009d8c <pbuf_free>
          goto icmperr;
 80112fc:	e05d      	b.n	80113ba <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f7f8 fd44 	bl	8009d8c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	607b      	str	r3, [r7, #4]
 8011308:	e00f      	b.n	801132a <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801130a:	8bfb      	ldrh	r3, [r7, #30]
 801130c:	330e      	adds	r3, #14
 801130e:	4619      	mov	r1, r3
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f7f8 fcb5 	bl	8009c80 <pbuf_remove_header>
 8011316:	4603      	mov	r3, r0
 8011318:	2b00      	cmp	r3, #0
 801131a:	d006      	beq.n	801132a <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801131c:	4b2c      	ldr	r3, [pc, #176]	; (80113d0 <icmp_input+0x1f4>)
 801131e:	22c7      	movs	r2, #199	; 0xc7
 8011320:	492e      	ldr	r1, [pc, #184]	; (80113dc <icmp_input+0x200>)
 8011322:	482d      	ldr	r0, [pc, #180]	; (80113d8 <icmp_input+0x1fc>)
 8011324:	f002 f856 	bl	80133d4 <iprintf>
          goto icmperr;
 8011328:	e047      	b.n	80113ba <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011330:	8bfb      	ldrh	r3, [r7, #30]
 8011332:	4619      	mov	r1, r3
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f7f8 fc93 	bl	8009c60 <pbuf_add_header>
 801133a:	4603      	mov	r3, r0
 801133c:	2b00      	cmp	r3, #0
 801133e:	d12b      	bne.n	8011398 <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	685b      	ldr	r3, [r3, #4]
 8011344:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011348:	681a      	ldr	r2, [r3, #0]
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801134e:	4b1e      	ldr	r3, [pc, #120]	; (80113c8 <icmp_input+0x1ec>)
 8011350:	691a      	ldr	r2, [r3, #16]
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	2200      	movs	r2, #0
 801135a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	2200      	movs	r2, #0
 8011360:	709a      	strb	r2, [r3, #2]
 8011362:	2200      	movs	r2, #0
 8011364:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	22ff      	movs	r2, #255	; 0xff
 801136a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	2200      	movs	r2, #0
 8011370:	729a      	strb	r2, [r3, #10]
 8011372:	2200      	movs	r2, #0
 8011374:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	9302      	str	r3, [sp, #8]
 801137a:	2301      	movs	r3, #1
 801137c:	9301      	str	r3, [sp, #4]
 801137e:	2300      	movs	r3, #0
 8011380:	9300      	str	r3, [sp, #0]
 8011382:	23ff      	movs	r3, #255	; 0xff
 8011384:	2200      	movs	r2, #0
 8011386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f000 fa71 	bl	8011870 <ip4_output_if>
 801138e:	4603      	mov	r3, r0
 8011390:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011392:	e001      	b.n	8011398 <icmp_input+0x1bc>
      break;
 8011394:	bf00      	nop
 8011396:	e000      	b.n	801139a <icmp_input+0x1be>
      break;
 8011398:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f7f8 fcf6 	bl	8009d8c <pbuf_free>
  return;
 80113a0:	e00f      	b.n	80113c2 <icmp_input+0x1e6>
    goto lenerr;
 80113a2:	bf00      	nop
 80113a4:	e002      	b.n	80113ac <icmp_input+0x1d0>
    goto lenerr;
 80113a6:	bf00      	nop
 80113a8:	e000      	b.n	80113ac <icmp_input+0x1d0>
        goto lenerr;
 80113aa:	bf00      	nop
lenerr:
  pbuf_free(p);
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f7f8 fced 	bl	8009d8c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80113b2:	e006      	b.n	80113c2 <icmp_input+0x1e6>
          goto icmperr;
 80113b4:	bf00      	nop
 80113b6:	e000      	b.n	80113ba <icmp_input+0x1de>
          goto icmperr;
 80113b8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f7f8 fce6 	bl	8009d8c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80113c0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80113c2:	3728      	adds	r7, #40	; 0x28
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	200039d4 	.word	0x200039d4
 80113cc:	200039e8 	.word	0x200039e8
 80113d0:	08019074 	.word	0x08019074
 80113d4:	080190ac 	.word	0x080190ac
 80113d8:	080190e4 	.word	0x080190e4
 80113dc:	0801910c 	.word	0x0801910c

080113e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	460b      	mov	r3, r1
 80113ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80113ec:	78fb      	ldrb	r3, [r7, #3]
 80113ee:	461a      	mov	r2, r3
 80113f0:	2103      	movs	r1, #3
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f000 f814 	bl	8011420 <icmp_send_response>
}
 80113f8:	bf00      	nop
 80113fa:	3708      	adds	r7, #8
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	460b      	mov	r3, r1
 801140a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801140c:	78fb      	ldrb	r3, [r7, #3]
 801140e:	461a      	mov	r2, r3
 8011410:	210b      	movs	r1, #11
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f000 f804 	bl	8011420 <icmp_send_response>
}
 8011418:	bf00      	nop
 801141a:	3708      	adds	r7, #8
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}

08011420 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b08c      	sub	sp, #48	; 0x30
 8011424:	af04      	add	r7, sp, #16
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	460b      	mov	r3, r1
 801142a:	70fb      	strb	r3, [r7, #3]
 801142c:	4613      	mov	r3, r2
 801142e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011430:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011434:	2124      	movs	r1, #36	; 0x24
 8011436:	2022      	movs	r0, #34	; 0x22
 8011438:	f7f8 f9c4 	bl	80097c4 <pbuf_alloc>
 801143c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801143e:	69fb      	ldr	r3, [r7, #28]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d04c      	beq.n	80114de <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011444:	69fb      	ldr	r3, [r7, #28]
 8011446:	895b      	ldrh	r3, [r3, #10]
 8011448:	2b23      	cmp	r3, #35	; 0x23
 801144a:	d806      	bhi.n	801145a <icmp_send_response+0x3a>
 801144c:	4b26      	ldr	r3, [pc, #152]	; (80114e8 <icmp_send_response+0xc8>)
 801144e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011452:	4926      	ldr	r1, [pc, #152]	; (80114ec <icmp_send_response+0xcc>)
 8011454:	4826      	ldr	r0, [pc, #152]	; (80114f0 <icmp_send_response+0xd0>)
 8011456:	f001 ffbd 	bl	80133d4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011460:	69fb      	ldr	r3, [r7, #28]
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	78fa      	ldrb	r2, [r7, #3]
 801146a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	78ba      	ldrb	r2, [r7, #2]
 8011470:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	2200      	movs	r2, #0
 8011476:	711a      	strb	r2, [r3, #4]
 8011478:	2200      	movs	r2, #0
 801147a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	2200      	movs	r2, #0
 8011480:	719a      	strb	r2, [r3, #6]
 8011482:	2200      	movs	r2, #0
 8011484:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	f103 0008 	add.w	r0, r3, #8
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	221c      	movs	r2, #28
 8011494:	4619      	mov	r1, r3
 8011496:	f001 fa59 	bl	801294c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80114a0:	f107 030c 	add.w	r3, r7, #12
 80114a4:	4618      	mov	r0, r3
 80114a6:	f000 f825 	bl	80114f4 <ip4_route>
 80114aa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d011      	beq.n	80114d6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	2200      	movs	r2, #0
 80114b6:	709a      	strb	r2, [r3, #2]
 80114b8:	2200      	movs	r2, #0
 80114ba:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80114bc:	f107 020c 	add.w	r2, r7, #12
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	9302      	str	r3, [sp, #8]
 80114c4:	2301      	movs	r3, #1
 80114c6:	9301      	str	r3, [sp, #4]
 80114c8:	2300      	movs	r3, #0
 80114ca:	9300      	str	r3, [sp, #0]
 80114cc:	23ff      	movs	r3, #255	; 0xff
 80114ce:	2100      	movs	r1, #0
 80114d0:	69f8      	ldr	r0, [r7, #28]
 80114d2:	f000 f9cd 	bl	8011870 <ip4_output_if>
  }
  pbuf_free(q);
 80114d6:	69f8      	ldr	r0, [r7, #28]
 80114d8:	f7f8 fc58 	bl	8009d8c <pbuf_free>
 80114dc:	e000      	b.n	80114e0 <icmp_send_response+0xc0>
    return;
 80114de:	bf00      	nop
}
 80114e0:	3720      	adds	r7, #32
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
 80114e6:	bf00      	nop
 80114e8:	08019074 	.word	0x08019074
 80114ec:	08019140 	.word	0x08019140
 80114f0:	080190e4 	.word	0x080190e4

080114f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80114f4:	b480      	push	{r7}
 80114f6:	b085      	sub	sp, #20
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80114fc:	4b33      	ldr	r3, [pc, #204]	; (80115cc <ip4_route+0xd8>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	60fb      	str	r3, [r7, #12]
 8011502:	e036      	b.n	8011572 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801150a:	f003 0301 	and.w	r3, r3, #1
 801150e:	b2db      	uxtb	r3, r3
 8011510:	2b00      	cmp	r3, #0
 8011512:	d02b      	beq.n	801156c <ip4_route+0x78>
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801151a:	089b      	lsrs	r3, r3, #2
 801151c:	f003 0301 	and.w	r3, r3, #1
 8011520:	b2db      	uxtb	r3, r3
 8011522:	2b00      	cmp	r3, #0
 8011524:	d022      	beq.n	801156c <ip4_route+0x78>
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	3304      	adds	r3, #4
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d01d      	beq.n	801156c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	3304      	adds	r3, #4
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	405a      	eors	r2, r3
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	3308      	adds	r3, #8
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	4013      	ands	r3, r2
 8011544:	2b00      	cmp	r3, #0
 8011546:	d101      	bne.n	801154c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	e038      	b.n	80115be <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011552:	f003 0302 	and.w	r3, r3, #2
 8011556:	2b00      	cmp	r3, #0
 8011558:	d108      	bne.n	801156c <ip4_route+0x78>
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681a      	ldr	r2, [r3, #0]
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	330c      	adds	r3, #12
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	429a      	cmp	r2, r3
 8011566:	d101      	bne.n	801156c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	e028      	b.n	80115be <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	60fb      	str	r3, [r7, #12]
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d1c5      	bne.n	8011504 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011578:	4b15      	ldr	r3, [pc, #84]	; (80115d0 <ip4_route+0xdc>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d01a      	beq.n	80115b6 <ip4_route+0xc2>
 8011580:	4b13      	ldr	r3, [pc, #76]	; (80115d0 <ip4_route+0xdc>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011588:	f003 0301 	and.w	r3, r3, #1
 801158c:	2b00      	cmp	r3, #0
 801158e:	d012      	beq.n	80115b6 <ip4_route+0xc2>
 8011590:	4b0f      	ldr	r3, [pc, #60]	; (80115d0 <ip4_route+0xdc>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011598:	f003 0304 	and.w	r3, r3, #4
 801159c:	2b00      	cmp	r3, #0
 801159e:	d00a      	beq.n	80115b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80115a0:	4b0b      	ldr	r3, [pc, #44]	; (80115d0 <ip4_route+0xdc>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	3304      	adds	r3, #4
 80115a6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d004      	beq.n	80115b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	b2db      	uxtb	r3, r3
 80115b2:	2b7f      	cmp	r3, #127	; 0x7f
 80115b4:	d101      	bne.n	80115ba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80115b6:	2300      	movs	r3, #0
 80115b8:	e001      	b.n	80115be <ip4_route+0xca>
  }

  return netif_default;
 80115ba:	4b05      	ldr	r3, [pc, #20]	; (80115d0 <ip4_route+0xdc>)
 80115bc:	681b      	ldr	r3, [r3, #0]
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3714      	adds	r7, #20
 80115c2:	46bd      	mov	sp, r7
 80115c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c8:	4770      	bx	lr
 80115ca:	bf00      	nop
 80115cc:	200090c8 	.word	0x200090c8
 80115d0:	200090cc 	.word	0x200090cc

080115d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80115e2:	f003 0301 	and.w	r3, r3, #1
 80115e6:	b2db      	uxtb	r3, r3
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d016      	beq.n	801161a <ip4_input_accept+0x46>
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	3304      	adds	r3, #4
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d011      	beq.n	801161a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80115f6:	4b0b      	ldr	r3, [pc, #44]	; (8011624 <ip4_input_accept+0x50>)
 80115f8:	695a      	ldr	r2, [r3, #20]
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	3304      	adds	r3, #4
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	429a      	cmp	r2, r3
 8011602:	d008      	beq.n	8011616 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011604:	4b07      	ldr	r3, [pc, #28]	; (8011624 <ip4_input_accept+0x50>)
 8011606:	695b      	ldr	r3, [r3, #20]
 8011608:	6879      	ldr	r1, [r7, #4]
 801160a:	4618      	mov	r0, r3
 801160c:	f000 fa08 	bl	8011a20 <ip4_addr_isbroadcast_u32>
 8011610:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011612:	2b00      	cmp	r3, #0
 8011614:	d001      	beq.n	801161a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011616:	2301      	movs	r3, #1
 8011618:	e000      	b.n	801161c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801161a:	2300      	movs	r3, #0
}
 801161c:	4618      	mov	r0, r3
 801161e:	3708      	adds	r7, #8
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}
 8011624:	200039d4 	.word	0x200039d4

08011628 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b086      	sub	sp, #24
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
 8011630:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	091b      	lsrs	r3, r3, #4
 801163e:	b2db      	uxtb	r3, r3
 8011640:	2b04      	cmp	r3, #4
 8011642:	d004      	beq.n	801164e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f7f8 fba1 	bl	8009d8c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801164a:	2300      	movs	r3, #0
 801164c:	e107      	b.n	801185e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	f003 030f 	and.w	r3, r3, #15
 8011656:	b2db      	uxtb	r3, r3
 8011658:	009b      	lsls	r3, r3, #2
 801165a:	b2db      	uxtb	r3, r3
 801165c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	885b      	ldrh	r3, [r3, #2]
 8011662:	b29b      	uxth	r3, r3
 8011664:	4618      	mov	r0, r3
 8011666:	f7f7 f8dd 	bl	8008824 <lwip_htons>
 801166a:	4603      	mov	r3, r0
 801166c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	891b      	ldrh	r3, [r3, #8]
 8011672:	89ba      	ldrh	r2, [r7, #12]
 8011674:	429a      	cmp	r2, r3
 8011676:	d204      	bcs.n	8011682 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011678:	89bb      	ldrh	r3, [r7, #12]
 801167a:	4619      	mov	r1, r3
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f7f8 f9ff 	bl	8009a80 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	895b      	ldrh	r3, [r3, #10]
 8011686:	89fa      	ldrh	r2, [r7, #14]
 8011688:	429a      	cmp	r2, r3
 801168a:	d807      	bhi.n	801169c <ip4_input+0x74>
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	891b      	ldrh	r3, [r3, #8]
 8011690:	89ba      	ldrh	r2, [r7, #12]
 8011692:	429a      	cmp	r2, r3
 8011694:	d802      	bhi.n	801169c <ip4_input+0x74>
 8011696:	89fb      	ldrh	r3, [r7, #14]
 8011698:	2b13      	cmp	r3, #19
 801169a:	d804      	bhi.n	80116a6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f7f8 fb75 	bl	8009d8c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80116a2:	2300      	movs	r3, #0
 80116a4:	e0db      	b.n	801185e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	691b      	ldr	r3, [r3, #16]
 80116aa:	4a6f      	ldr	r2, [pc, #444]	; (8011868 <ip4_input+0x240>)
 80116ac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	68db      	ldr	r3, [r3, #12]
 80116b2:	4a6d      	ldr	r2, [pc, #436]	; (8011868 <ip4_input+0x240>)
 80116b4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80116b6:	4b6c      	ldr	r3, [pc, #432]	; (8011868 <ip4_input+0x240>)
 80116b8:	695b      	ldr	r3, [r3, #20]
 80116ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80116be:	2be0      	cmp	r3, #224	; 0xe0
 80116c0:	d112      	bne.n	80116e8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80116c8:	f003 0301 	and.w	r3, r3, #1
 80116cc:	b2db      	uxtb	r3, r3
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d007      	beq.n	80116e2 <ip4_input+0xba>
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	3304      	adds	r3, #4
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d002      	beq.n	80116e2 <ip4_input+0xba>
      netif = inp;
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	613b      	str	r3, [r7, #16]
 80116e0:	e02a      	b.n	8011738 <ip4_input+0x110>
    } else {
      netif = NULL;
 80116e2:	2300      	movs	r3, #0
 80116e4:	613b      	str	r3, [r7, #16]
 80116e6:	e027      	b.n	8011738 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80116e8:	6838      	ldr	r0, [r7, #0]
 80116ea:	f7ff ff73 	bl	80115d4 <ip4_input_accept>
 80116ee:	4603      	mov	r3, r0
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d002      	beq.n	80116fa <ip4_input+0xd2>
      netif = inp;
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	613b      	str	r3, [r7, #16]
 80116f8:	e01e      	b.n	8011738 <ip4_input+0x110>
    } else {
      netif = NULL;
 80116fa:	2300      	movs	r3, #0
 80116fc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80116fe:	4b5a      	ldr	r3, [pc, #360]	; (8011868 <ip4_input+0x240>)
 8011700:	695b      	ldr	r3, [r3, #20]
 8011702:	b2db      	uxtb	r3, r3
 8011704:	2b7f      	cmp	r3, #127	; 0x7f
 8011706:	d017      	beq.n	8011738 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011708:	4b58      	ldr	r3, [pc, #352]	; (801186c <ip4_input+0x244>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	613b      	str	r3, [r7, #16]
 801170e:	e00e      	b.n	801172e <ip4_input+0x106>
          if (netif == inp) {
 8011710:	693a      	ldr	r2, [r7, #16]
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	429a      	cmp	r2, r3
 8011716:	d006      	beq.n	8011726 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011718:	6938      	ldr	r0, [r7, #16]
 801171a:	f7ff ff5b 	bl	80115d4 <ip4_input_accept>
 801171e:	4603      	mov	r3, r0
 8011720:	2b00      	cmp	r3, #0
 8011722:	d108      	bne.n	8011736 <ip4_input+0x10e>
 8011724:	e000      	b.n	8011728 <ip4_input+0x100>
            continue;
 8011726:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011728:	693b      	ldr	r3, [r7, #16]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	613b      	str	r3, [r7, #16]
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d1ed      	bne.n	8011710 <ip4_input+0xe8>
 8011734:	e000      	b.n	8011738 <ip4_input+0x110>
            break;
 8011736:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011738:	4b4b      	ldr	r3, [pc, #300]	; (8011868 <ip4_input+0x240>)
 801173a:	691b      	ldr	r3, [r3, #16]
 801173c:	6839      	ldr	r1, [r7, #0]
 801173e:	4618      	mov	r0, r3
 8011740:	f000 f96e 	bl	8011a20 <ip4_addr_isbroadcast_u32>
 8011744:	4603      	mov	r3, r0
 8011746:	2b00      	cmp	r3, #0
 8011748:	d105      	bne.n	8011756 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801174a:	4b47      	ldr	r3, [pc, #284]	; (8011868 <ip4_input+0x240>)
 801174c:	691b      	ldr	r3, [r3, #16]
 801174e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011752:	2be0      	cmp	r3, #224	; 0xe0
 8011754:	d104      	bne.n	8011760 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f7f8 fb18 	bl	8009d8c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801175c:	2300      	movs	r3, #0
 801175e:	e07e      	b.n	801185e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d104      	bne.n	8011770 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f7f8 fb10 	bl	8009d8c <pbuf_free>
    return ERR_OK;
 801176c:	2300      	movs	r3, #0
 801176e:	e076      	b.n	801185e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	88db      	ldrh	r3, [r3, #6]
 8011774:	b29b      	uxth	r3, r3
 8011776:	461a      	mov	r2, r3
 8011778:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801177c:	4013      	ands	r3, r2
 801177e:	2b00      	cmp	r3, #0
 8011780:	d00b      	beq.n	801179a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	f000 fc92 	bl	80120ac <ip4_reass>
 8011788:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d101      	bne.n	8011794 <ip4_input+0x16c>
      return ERR_OK;
 8011790:	2300      	movs	r3, #0
 8011792:	e064      	b.n	801185e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801179a:	4a33      	ldr	r2, [pc, #204]	; (8011868 <ip4_input+0x240>)
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80117a0:	4a31      	ldr	r2, [pc, #196]	; (8011868 <ip4_input+0x240>)
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80117a6:	4a30      	ldr	r2, [pc, #192]	; (8011868 <ip4_input+0x240>)
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	f003 030f 	and.w	r3, r3, #15
 80117b4:	b2db      	uxtb	r3, r3
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	b2db      	uxtb	r3, r3
 80117ba:	b29a      	uxth	r2, r3
 80117bc:	4b2a      	ldr	r3, [pc, #168]	; (8011868 <ip4_input+0x240>)
 80117be:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80117c0:	89fb      	ldrh	r3, [r7, #14]
 80117c2:	4619      	mov	r1, r3
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f7f8 fa5b 	bl	8009c80 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	7a5b      	ldrb	r3, [r3, #9]
 80117ce:	2b11      	cmp	r3, #17
 80117d0:	d006      	beq.n	80117e0 <ip4_input+0x1b8>
 80117d2:	2b11      	cmp	r3, #17
 80117d4:	dc13      	bgt.n	80117fe <ip4_input+0x1d6>
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d00c      	beq.n	80117f4 <ip4_input+0x1cc>
 80117da:	2b06      	cmp	r3, #6
 80117dc:	d005      	beq.n	80117ea <ip4_input+0x1c2>
 80117de:	e00e      	b.n	80117fe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80117e0:	6839      	ldr	r1, [r7, #0]
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f7fe f952 	bl	800fa8c <udp_input>
        break;
 80117e8:	e026      	b.n	8011838 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80117ea:	6839      	ldr	r1, [r7, #0]
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f7fa f997 	bl	800bb20 <tcp_input>
        break;
 80117f2:	e021      	b.n	8011838 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80117f4:	6839      	ldr	r1, [r7, #0]
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f7ff fcf0 	bl	80111dc <icmp_input>
        break;
 80117fc:	e01c      	b.n	8011838 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80117fe:	4b1a      	ldr	r3, [pc, #104]	; (8011868 <ip4_input+0x240>)
 8011800:	695b      	ldr	r3, [r3, #20]
 8011802:	6939      	ldr	r1, [r7, #16]
 8011804:	4618      	mov	r0, r3
 8011806:	f000 f90b 	bl	8011a20 <ip4_addr_isbroadcast_u32>
 801180a:	4603      	mov	r3, r0
 801180c:	2b00      	cmp	r3, #0
 801180e:	d10f      	bne.n	8011830 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011810:	4b15      	ldr	r3, [pc, #84]	; (8011868 <ip4_input+0x240>)
 8011812:	695b      	ldr	r3, [r3, #20]
 8011814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011818:	2be0      	cmp	r3, #224	; 0xe0
 801181a:	d009      	beq.n	8011830 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801181c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011820:	4619      	mov	r1, r3
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f7f8 fa9f 	bl	8009d66 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011828:	2102      	movs	r1, #2
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f7ff fdd8 	bl	80113e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f7f8 faab 	bl	8009d8c <pbuf_free>
        break;
 8011836:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011838:	4b0b      	ldr	r3, [pc, #44]	; (8011868 <ip4_input+0x240>)
 801183a:	2200      	movs	r2, #0
 801183c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801183e:	4b0a      	ldr	r3, [pc, #40]	; (8011868 <ip4_input+0x240>)
 8011840:	2200      	movs	r2, #0
 8011842:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011844:	4b08      	ldr	r3, [pc, #32]	; (8011868 <ip4_input+0x240>)
 8011846:	2200      	movs	r2, #0
 8011848:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801184a:	4b07      	ldr	r3, [pc, #28]	; (8011868 <ip4_input+0x240>)
 801184c:	2200      	movs	r2, #0
 801184e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011850:	4b05      	ldr	r3, [pc, #20]	; (8011868 <ip4_input+0x240>)
 8011852:	2200      	movs	r2, #0
 8011854:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011856:	4b04      	ldr	r3, [pc, #16]	; (8011868 <ip4_input+0x240>)
 8011858:	2200      	movs	r2, #0
 801185a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801185c:	2300      	movs	r3, #0
}
 801185e:	4618      	mov	r0, r3
 8011860:	3718      	adds	r7, #24
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
 8011866:	bf00      	nop
 8011868:	200039d4 	.word	0x200039d4
 801186c:	200090c8 	.word	0x200090c8

08011870 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b08a      	sub	sp, #40	; 0x28
 8011874:	af04      	add	r7, sp, #16
 8011876:	60f8      	str	r0, [r7, #12]
 8011878:	60b9      	str	r1, [r7, #8]
 801187a:	607a      	str	r2, [r7, #4]
 801187c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d009      	beq.n	801189c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d003      	beq.n	8011896 <ip4_output_if+0x26>
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d102      	bne.n	801189c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011898:	3304      	adds	r3, #4
 801189a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801189c:	78fa      	ldrb	r2, [r7, #3]
 801189e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118a0:	9302      	str	r3, [sp, #8]
 80118a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80118a6:	9301      	str	r3, [sp, #4]
 80118a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80118ac:	9300      	str	r3, [sp, #0]
 80118ae:	4613      	mov	r3, r2
 80118b0:	687a      	ldr	r2, [r7, #4]
 80118b2:	6979      	ldr	r1, [r7, #20]
 80118b4:	68f8      	ldr	r0, [r7, #12]
 80118b6:	f000 f805 	bl	80118c4 <ip4_output_if_src>
 80118ba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80118bc:	4618      	mov	r0, r3
 80118be:	3718      	adds	r7, #24
 80118c0:	46bd      	mov	sp, r7
 80118c2:	bd80      	pop	{r7, pc}

080118c4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b088      	sub	sp, #32
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	60f8      	str	r0, [r7, #12]
 80118cc:	60b9      	str	r1, [r7, #8]
 80118ce:	607a      	str	r2, [r7, #4]
 80118d0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	7b9b      	ldrb	r3, [r3, #14]
 80118d6:	2b01      	cmp	r3, #1
 80118d8:	d006      	beq.n	80118e8 <ip4_output_if_src+0x24>
 80118da:	4b4b      	ldr	r3, [pc, #300]	; (8011a08 <ip4_output_if_src+0x144>)
 80118dc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80118e0:	494a      	ldr	r1, [pc, #296]	; (8011a0c <ip4_output_if_src+0x148>)
 80118e2:	484b      	ldr	r0, [pc, #300]	; (8011a10 <ip4_output_if_src+0x14c>)
 80118e4:	f001 fd76 	bl	80133d4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d060      	beq.n	80119b0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80118ee:	2314      	movs	r3, #20
 80118f0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80118f2:	2114      	movs	r1, #20
 80118f4:	68f8      	ldr	r0, [r7, #12]
 80118f6:	f7f8 f9b3 	bl	8009c60 <pbuf_add_header>
 80118fa:	4603      	mov	r3, r0
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d002      	beq.n	8011906 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011900:	f06f 0301 	mvn.w	r3, #1
 8011904:	e07c      	b.n	8011a00 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	895b      	ldrh	r3, [r3, #10]
 8011910:	2b13      	cmp	r3, #19
 8011912:	d806      	bhi.n	8011922 <ip4_output_if_src+0x5e>
 8011914:	4b3c      	ldr	r3, [pc, #240]	; (8011a08 <ip4_output_if_src+0x144>)
 8011916:	f44f 7262 	mov.w	r2, #904	; 0x388
 801191a:	493e      	ldr	r1, [pc, #248]	; (8011a14 <ip4_output_if_src+0x150>)
 801191c:	483c      	ldr	r0, [pc, #240]	; (8011a10 <ip4_output_if_src+0x14c>)
 801191e:	f001 fd59 	bl	80133d4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011922:	69fb      	ldr	r3, [r7, #28]
 8011924:	78fa      	ldrb	r2, [r7, #3]
 8011926:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011928:	69fb      	ldr	r3, [r7, #28]
 801192a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801192e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681a      	ldr	r2, [r3, #0]
 8011934:	69fb      	ldr	r3, [r7, #28]
 8011936:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011938:	8b7b      	ldrh	r3, [r7, #26]
 801193a:	089b      	lsrs	r3, r3, #2
 801193c:	b29b      	uxth	r3, r3
 801193e:	b2db      	uxtb	r3, r3
 8011940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011944:	b2da      	uxtb	r2, r3
 8011946:	69fb      	ldr	r3, [r7, #28]
 8011948:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801194a:	69fb      	ldr	r3, [r7, #28]
 801194c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011950:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	891b      	ldrh	r3, [r3, #8]
 8011956:	4618      	mov	r0, r3
 8011958:	f7f6 ff64 	bl	8008824 <lwip_htons>
 801195c:	4603      	mov	r3, r0
 801195e:	461a      	mov	r2, r3
 8011960:	69fb      	ldr	r3, [r7, #28]
 8011962:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011964:	69fb      	ldr	r3, [r7, #28]
 8011966:	2200      	movs	r2, #0
 8011968:	719a      	strb	r2, [r3, #6]
 801196a:	2200      	movs	r2, #0
 801196c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801196e:	4b2a      	ldr	r3, [pc, #168]	; (8011a18 <ip4_output_if_src+0x154>)
 8011970:	881b      	ldrh	r3, [r3, #0]
 8011972:	4618      	mov	r0, r3
 8011974:	f7f6 ff56 	bl	8008824 <lwip_htons>
 8011978:	4603      	mov	r3, r0
 801197a:	461a      	mov	r2, r3
 801197c:	69fb      	ldr	r3, [r7, #28]
 801197e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011980:	4b25      	ldr	r3, [pc, #148]	; (8011a18 <ip4_output_if_src+0x154>)
 8011982:	881b      	ldrh	r3, [r3, #0]
 8011984:	3301      	adds	r3, #1
 8011986:	b29a      	uxth	r2, r3
 8011988:	4b23      	ldr	r3, [pc, #140]	; (8011a18 <ip4_output_if_src+0x154>)
 801198a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d104      	bne.n	801199c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011992:	4b22      	ldr	r3, [pc, #136]	; (8011a1c <ip4_output_if_src+0x158>)
 8011994:	681a      	ldr	r2, [r3, #0]
 8011996:	69fb      	ldr	r3, [r7, #28]
 8011998:	60da      	str	r2, [r3, #12]
 801199a:	e003      	b.n	80119a4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	681a      	ldr	r2, [r3, #0]
 80119a0:	69fb      	ldr	r3, [r7, #28]
 80119a2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80119a4:	69fb      	ldr	r3, [r7, #28]
 80119a6:	2200      	movs	r2, #0
 80119a8:	729a      	strb	r2, [r3, #10]
 80119aa:	2200      	movs	r2, #0
 80119ac:	72da      	strb	r2, [r3, #11]
 80119ae:	e00f      	b.n	80119d0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	895b      	ldrh	r3, [r3, #10]
 80119b4:	2b13      	cmp	r3, #19
 80119b6:	d802      	bhi.n	80119be <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80119b8:	f06f 0301 	mvn.w	r3, #1
 80119bc:	e020      	b.n	8011a00 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	691b      	ldr	r3, [r3, #16]
 80119c8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80119ca:	f107 0314 	add.w	r3, r7, #20
 80119ce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80119d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d00c      	beq.n	80119f2 <ip4_output_if_src+0x12e>
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	891a      	ldrh	r2, [r3, #8]
 80119dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d906      	bls.n	80119f2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80119e4:	687a      	ldr	r2, [r7, #4]
 80119e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80119e8:	68f8      	ldr	r0, [r7, #12]
 80119ea:	f000 fd4d 	bl	8012488 <ip4_frag>
 80119ee:	4603      	mov	r3, r0
 80119f0:	e006      	b.n	8011a00 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80119f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f4:	695b      	ldr	r3, [r3, #20]
 80119f6:	687a      	ldr	r2, [r7, #4]
 80119f8:	68f9      	ldr	r1, [r7, #12]
 80119fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119fc:	4798      	blx	r3
 80119fe:	4603      	mov	r3, r0
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3720      	adds	r7, #32
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}
 8011a08:	0801916c 	.word	0x0801916c
 8011a0c:	080191a0 	.word	0x080191a0
 8011a10:	080191ac 	.word	0x080191ac
 8011a14:	080191d4 	.word	0x080191d4
 8011a18:	200003ee 	.word	0x200003ee
 8011a1c:	080195a0 	.word	0x080195a0

08011a20 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b085      	sub	sp, #20
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a34:	d002      	beq.n	8011a3c <ip4_addr_isbroadcast_u32+0x1c>
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d101      	bne.n	8011a40 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	e02a      	b.n	8011a96 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011a46:	f003 0302 	and.w	r3, r3, #2
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d101      	bne.n	8011a52 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	e021      	b.n	8011a96 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	3304      	adds	r3, #4
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	687a      	ldr	r2, [r7, #4]
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d101      	bne.n	8011a62 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	e019      	b.n	8011a96 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011a62:	68fa      	ldr	r2, [r7, #12]
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	3304      	adds	r3, #4
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	405a      	eors	r2, r3
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	3308      	adds	r3, #8
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	4013      	ands	r3, r2
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d10d      	bne.n	8011a94 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	3308      	adds	r3, #8
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	43da      	mvns	r2, r3
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	3308      	adds	r3, #8
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d101      	bne.n	8011a94 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011a90:	2301      	movs	r3, #1
 8011a92:	e000      	b.n	8011a96 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011a94:	2300      	movs	r3, #0
  }
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3714      	adds	r7, #20
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa0:	4770      	bx	lr
	...

08011aa4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011aae:	4b12      	ldr	r3, [pc, #72]	; (8011af8 <ip_reass_tmr+0x54>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011ab4:	e018      	b.n	8011ae8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	7fdb      	ldrb	r3, [r3, #31]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d00b      	beq.n	8011ad6 <ip_reass_tmr+0x32>
      r->timer--;
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	7fdb      	ldrb	r3, [r3, #31]
 8011ac2:	3b01      	subs	r3, #1
 8011ac4:	b2da      	uxtb	r2, r3
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	60fb      	str	r3, [r7, #12]
 8011ad4:	e008      	b.n	8011ae8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011ae0:	68b9      	ldr	r1, [r7, #8]
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f000 f80a 	bl	8011afc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d1e3      	bne.n	8011ab6 <ip_reass_tmr+0x12>
    }
  }
}
 8011aee:	bf00      	nop
 8011af0:	bf00      	nop
 8011af2:	3710      	adds	r7, #16
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}
 8011af8:	200003f0 	.word	0x200003f0

08011afc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b088      	sub	sp, #32
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011b06:	2300      	movs	r3, #0
 8011b08:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011b0a:	683a      	ldr	r2, [r7, #0]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d105      	bne.n	8011b1e <ip_reass_free_complete_datagram+0x22>
 8011b12:	4b45      	ldr	r3, [pc, #276]	; (8011c28 <ip_reass_free_complete_datagram+0x12c>)
 8011b14:	22ab      	movs	r2, #171	; 0xab
 8011b16:	4945      	ldr	r1, [pc, #276]	; (8011c2c <ip_reass_free_complete_datagram+0x130>)
 8011b18:	4845      	ldr	r0, [pc, #276]	; (8011c30 <ip_reass_free_complete_datagram+0x134>)
 8011b1a:	f001 fc5b 	bl	80133d4 <iprintf>
  if (prev != NULL) {
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d00a      	beq.n	8011b3a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	687a      	ldr	r2, [r7, #4]
 8011b2a:	429a      	cmp	r2, r3
 8011b2c:	d005      	beq.n	8011b3a <ip_reass_free_complete_datagram+0x3e>
 8011b2e:	4b3e      	ldr	r3, [pc, #248]	; (8011c28 <ip_reass_free_complete_datagram+0x12c>)
 8011b30:	22ad      	movs	r2, #173	; 0xad
 8011b32:	4940      	ldr	r1, [pc, #256]	; (8011c34 <ip_reass_free_complete_datagram+0x138>)
 8011b34:	483e      	ldr	r0, [pc, #248]	; (8011c30 <ip_reass_free_complete_datagram+0x134>)
 8011b36:	f001 fc4d 	bl	80133d4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011b42:	697b      	ldr	r3, [r7, #20]
 8011b44:	889b      	ldrh	r3, [r3, #4]
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d12a      	bne.n	8011ba2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	685b      	ldr	r3, [r3, #4]
 8011b50:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	681a      	ldr	r2, [r3, #0]
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	6858      	ldr	r0, [r3, #4]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	3308      	adds	r3, #8
 8011b62:	2214      	movs	r2, #20
 8011b64:	4619      	mov	r1, r3
 8011b66:	f000 fef1 	bl	801294c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011b6a:	2101      	movs	r1, #1
 8011b6c:	69b8      	ldr	r0, [r7, #24]
 8011b6e:	f7ff fc47 	bl	8011400 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011b72:	69b8      	ldr	r0, [r7, #24]
 8011b74:	f7f8 f992 	bl	8009e9c <pbuf_clen>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011b7c:	8bfa      	ldrh	r2, [r7, #30]
 8011b7e:	8a7b      	ldrh	r3, [r7, #18]
 8011b80:	4413      	add	r3, r2
 8011b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b86:	db05      	blt.n	8011b94 <ip_reass_free_complete_datagram+0x98>
 8011b88:	4b27      	ldr	r3, [pc, #156]	; (8011c28 <ip_reass_free_complete_datagram+0x12c>)
 8011b8a:	22bc      	movs	r2, #188	; 0xbc
 8011b8c:	492a      	ldr	r1, [pc, #168]	; (8011c38 <ip_reass_free_complete_datagram+0x13c>)
 8011b8e:	4828      	ldr	r0, [pc, #160]	; (8011c30 <ip_reass_free_complete_datagram+0x134>)
 8011b90:	f001 fc20 	bl	80133d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011b94:	8bfa      	ldrh	r2, [r7, #30]
 8011b96:	8a7b      	ldrh	r3, [r7, #18]
 8011b98:	4413      	add	r3, r2
 8011b9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011b9c:	69b8      	ldr	r0, [r7, #24]
 8011b9e:	f7f8 f8f5 	bl	8009d8c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011ba8:	e01f      	b.n	8011bea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011baa:	69bb      	ldr	r3, [r7, #24]
 8011bac:	685b      	ldr	r3, [r3, #4]
 8011bae:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011bb0:	69bb      	ldr	r3, [r7, #24]
 8011bb2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011bba:	68f8      	ldr	r0, [r7, #12]
 8011bbc:	f7f8 f96e 	bl	8009e9c <pbuf_clen>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011bc4:	8bfa      	ldrh	r2, [r7, #30]
 8011bc6:	8a7b      	ldrh	r3, [r7, #18]
 8011bc8:	4413      	add	r3, r2
 8011bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bce:	db05      	blt.n	8011bdc <ip_reass_free_complete_datagram+0xe0>
 8011bd0:	4b15      	ldr	r3, [pc, #84]	; (8011c28 <ip_reass_free_complete_datagram+0x12c>)
 8011bd2:	22cc      	movs	r2, #204	; 0xcc
 8011bd4:	4918      	ldr	r1, [pc, #96]	; (8011c38 <ip_reass_free_complete_datagram+0x13c>)
 8011bd6:	4816      	ldr	r0, [pc, #88]	; (8011c30 <ip_reass_free_complete_datagram+0x134>)
 8011bd8:	f001 fbfc 	bl	80133d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011bdc:	8bfa      	ldrh	r2, [r7, #30]
 8011bde:	8a7b      	ldrh	r3, [r7, #18]
 8011be0:	4413      	add	r3, r2
 8011be2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011be4:	68f8      	ldr	r0, [r7, #12]
 8011be6:	f7f8 f8d1 	bl	8009d8c <pbuf_free>
  while (p != NULL) {
 8011bea:	69bb      	ldr	r3, [r7, #24]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d1dc      	bne.n	8011baa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011bf0:	6839      	ldr	r1, [r7, #0]
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f000 f8c2 	bl	8011d7c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011bf8:	4b10      	ldr	r3, [pc, #64]	; (8011c3c <ip_reass_free_complete_datagram+0x140>)
 8011bfa:	881b      	ldrh	r3, [r3, #0]
 8011bfc:	8bfa      	ldrh	r2, [r7, #30]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d905      	bls.n	8011c0e <ip_reass_free_complete_datagram+0x112>
 8011c02:	4b09      	ldr	r3, [pc, #36]	; (8011c28 <ip_reass_free_complete_datagram+0x12c>)
 8011c04:	22d2      	movs	r2, #210	; 0xd2
 8011c06:	490e      	ldr	r1, [pc, #56]	; (8011c40 <ip_reass_free_complete_datagram+0x144>)
 8011c08:	4809      	ldr	r0, [pc, #36]	; (8011c30 <ip_reass_free_complete_datagram+0x134>)
 8011c0a:	f001 fbe3 	bl	80133d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011c0e:	4b0b      	ldr	r3, [pc, #44]	; (8011c3c <ip_reass_free_complete_datagram+0x140>)
 8011c10:	881a      	ldrh	r2, [r3, #0]
 8011c12:	8bfb      	ldrh	r3, [r7, #30]
 8011c14:	1ad3      	subs	r3, r2, r3
 8011c16:	b29a      	uxth	r2, r3
 8011c18:	4b08      	ldr	r3, [pc, #32]	; (8011c3c <ip_reass_free_complete_datagram+0x140>)
 8011c1a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011c1c:	8bfb      	ldrh	r3, [r7, #30]
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3720      	adds	r7, #32
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	08019204 	.word	0x08019204
 8011c2c:	08019240 	.word	0x08019240
 8011c30:	0801924c 	.word	0x0801924c
 8011c34:	08019274 	.word	0x08019274
 8011c38:	08019288 	.word	0x08019288
 8011c3c:	200003f4 	.word	0x200003f4
 8011c40:	080192a8 	.word	0x080192a8

08011c44 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b08a      	sub	sp, #40	; 0x28
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011c52:	2300      	movs	r3, #0
 8011c54:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011c56:	2300      	movs	r3, #0
 8011c58:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011c62:	4b28      	ldr	r3, [pc, #160]	; (8011d04 <ip_reass_remove_oldest_datagram+0xc0>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011c68:	e030      	b.n	8011ccc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6c:	695a      	ldr	r2, [r3, #20]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	68db      	ldr	r3, [r3, #12]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d10c      	bne.n	8011c90 <ip_reass_remove_oldest_datagram+0x4c>
 8011c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c78:	699a      	ldr	r2, [r3, #24]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	691b      	ldr	r3, [r3, #16]
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	d106      	bne.n	8011c90 <ip_reass_remove_oldest_datagram+0x4c>
 8011c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c84:	899a      	ldrh	r2, [r3, #12]
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	889b      	ldrh	r3, [r3, #4]
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	429a      	cmp	r2, r3
 8011c8e:	d014      	beq.n	8011cba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	3301      	adds	r3, #1
 8011c94:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011c96:	6a3b      	ldr	r3, [r7, #32]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d104      	bne.n	8011ca6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c9e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011ca0:	69fb      	ldr	r3, [r7, #28]
 8011ca2:	61bb      	str	r3, [r7, #24]
 8011ca4:	e009      	b.n	8011cba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca8:	7fda      	ldrb	r2, [r3, #31]
 8011caa:	6a3b      	ldr	r3, [r7, #32]
 8011cac:	7fdb      	ldrb	r3, [r3, #31]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d803      	bhi.n	8011cba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d001      	beq.n	8011cc6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d1cb      	bne.n	8011c6a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011cd2:	6a3b      	ldr	r3, [r7, #32]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d008      	beq.n	8011cea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011cd8:	69b9      	ldr	r1, [r7, #24]
 8011cda:	6a38      	ldr	r0, [r7, #32]
 8011cdc:	f7ff ff0e 	bl	8011afc <ip_reass_free_complete_datagram>
 8011ce0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011ce2:	697a      	ldr	r2, [r7, #20]
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	4413      	add	r3, r2
 8011ce8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011cea:	697a      	ldr	r2, [r7, #20]
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	da02      	bge.n	8011cf8 <ip_reass_remove_oldest_datagram+0xb4>
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	dcac      	bgt.n	8011c52 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011cf8:	697b      	ldr	r3, [r7, #20]
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3728      	adds	r7, #40	; 0x28
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	200003f0 	.word	0x200003f0

08011d08 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b084      	sub	sp, #16
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
 8011d10:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011d12:	2004      	movs	r0, #4
 8011d14:	f7f7 f9dc 	bl	80090d0 <memp_malloc>
 8011d18:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d110      	bne.n	8011d42 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011d20:	6839      	ldr	r1, [r7, #0]
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f7ff ff8e 	bl	8011c44 <ip_reass_remove_oldest_datagram>
 8011d28:	4602      	mov	r2, r0
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	4293      	cmp	r3, r2
 8011d2e:	dc03      	bgt.n	8011d38 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011d30:	2004      	movs	r0, #4
 8011d32:	f7f7 f9cd 	bl	80090d0 <memp_malloc>
 8011d36:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d101      	bne.n	8011d42 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	e016      	b.n	8011d70 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011d42:	2220      	movs	r2, #32
 8011d44:	2100      	movs	r1, #0
 8011d46:	68f8      	ldr	r0, [r7, #12]
 8011d48:	f000 fe28 	bl	801299c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	220f      	movs	r2, #15
 8011d50:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011d52:	4b09      	ldr	r3, [pc, #36]	; (8011d78 <ip_reass_enqueue_new_datagram+0x70>)
 8011d54:	681a      	ldr	r2, [r3, #0]
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011d5a:	4a07      	ldr	r2, [pc, #28]	; (8011d78 <ip_reass_enqueue_new_datagram+0x70>)
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	3308      	adds	r3, #8
 8011d64:	2214      	movs	r2, #20
 8011d66:	6879      	ldr	r1, [r7, #4]
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f000 fdef 	bl	801294c <memcpy>
  return ipr;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	3710      	adds	r7, #16
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}
 8011d78:	200003f0 	.word	0x200003f0

08011d7c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b082      	sub	sp, #8
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011d86:	4b10      	ldr	r3, [pc, #64]	; (8011dc8 <ip_reass_dequeue_datagram+0x4c>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	687a      	ldr	r2, [r7, #4]
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d104      	bne.n	8011d9a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	4a0c      	ldr	r2, [pc, #48]	; (8011dc8 <ip_reass_dequeue_datagram+0x4c>)
 8011d96:	6013      	str	r3, [r2, #0]
 8011d98:	e00d      	b.n	8011db6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d106      	bne.n	8011dae <ip_reass_dequeue_datagram+0x32>
 8011da0:	4b0a      	ldr	r3, [pc, #40]	; (8011dcc <ip_reass_dequeue_datagram+0x50>)
 8011da2:	f240 1245 	movw	r2, #325	; 0x145
 8011da6:	490a      	ldr	r1, [pc, #40]	; (8011dd0 <ip_reass_dequeue_datagram+0x54>)
 8011da8:	480a      	ldr	r0, [pc, #40]	; (8011dd4 <ip_reass_dequeue_datagram+0x58>)
 8011daa:	f001 fb13 	bl	80133d4 <iprintf>
    prev->next = ipr->next;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681a      	ldr	r2, [r3, #0]
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011db6:	6879      	ldr	r1, [r7, #4]
 8011db8:	2004      	movs	r0, #4
 8011dba:	f7f7 f9d5 	bl	8009168 <memp_free>
}
 8011dbe:	bf00      	nop
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	200003f0 	.word	0x200003f0
 8011dcc:	08019204 	.word	0x08019204
 8011dd0:	080192cc 	.word	0x080192cc
 8011dd4:	0801924c 	.word	0x0801924c

08011dd8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b08c      	sub	sp, #48	; 0x30
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	60b9      	str	r1, [r7, #8]
 8011de2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011de4:	2300      	movs	r3, #0
 8011de6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011de8:	2301      	movs	r3, #1
 8011dea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011df2:	69fb      	ldr	r3, [r7, #28]
 8011df4:	885b      	ldrh	r3, [r3, #2]
 8011df6:	b29b      	uxth	r3, r3
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7f6 fd13 	bl	8008824 <lwip_htons>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011e02:	69fb      	ldr	r3, [r7, #28]
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	f003 030f 	and.w	r3, r3, #15
 8011e0a:	b2db      	uxtb	r3, r3
 8011e0c:	009b      	lsls	r3, r3, #2
 8011e0e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011e10:	7e7b      	ldrb	r3, [r7, #25]
 8011e12:	b29b      	uxth	r3, r3
 8011e14:	8b7a      	ldrh	r2, [r7, #26]
 8011e16:	429a      	cmp	r2, r3
 8011e18:	d202      	bcs.n	8011e20 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8011e1e:	e135      	b.n	801208c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011e20:	7e7b      	ldrb	r3, [r7, #25]
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	8b7a      	ldrh	r2, [r7, #26]
 8011e26:	1ad3      	subs	r3, r2, r3
 8011e28:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011e2a:	69fb      	ldr	r3, [r7, #28]
 8011e2c:	88db      	ldrh	r3, [r3, #6]
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7f6 fcf7 	bl	8008824 <lwip_htons>
 8011e36:	4603      	mov	r3, r0
 8011e38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011e3c:	b29b      	uxth	r3, r3
 8011e3e:	00db      	lsls	r3, r3, #3
 8011e40:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	685b      	ldr	r3, [r3, #4]
 8011e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	701a      	strb	r2, [r3, #0]
 8011e4e:	2200      	movs	r2, #0
 8011e50:	705a      	strb	r2, [r3, #1]
 8011e52:	2200      	movs	r2, #0
 8011e54:	709a      	strb	r2, [r3, #2]
 8011e56:	2200      	movs	r2, #0
 8011e58:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e5c:	8afa      	ldrh	r2, [r7, #22]
 8011e5e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011e60:	8afa      	ldrh	r2, [r7, #22]
 8011e62:	8b7b      	ldrh	r3, [r7, #26]
 8011e64:	4413      	add	r3, r2
 8011e66:	b29a      	uxth	r2, r3
 8011e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e6a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e6e:	88db      	ldrh	r3, [r3, #6]
 8011e70:	b29b      	uxth	r3, r3
 8011e72:	8afa      	ldrh	r2, [r7, #22]
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d902      	bls.n	8011e7e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e78:	f04f 33ff 	mov.w	r3, #4294967295
 8011e7c:	e106      	b.n	801208c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	627b      	str	r3, [r7, #36]	; 0x24
 8011e84:	e068      	b.n	8011f58 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e88:	685b      	ldr	r3, [r3, #4]
 8011e8a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e8e:	889b      	ldrh	r3, [r3, #4]
 8011e90:	b29a      	uxth	r2, r3
 8011e92:	693b      	ldr	r3, [r7, #16]
 8011e94:	889b      	ldrh	r3, [r3, #4]
 8011e96:	b29b      	uxth	r3, r3
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d235      	bcs.n	8011f08 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ea0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d020      	beq.n	8011eea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eaa:	889b      	ldrh	r3, [r3, #4]
 8011eac:	b29a      	uxth	r2, r3
 8011eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eb0:	88db      	ldrh	r3, [r3, #6]
 8011eb2:	b29b      	uxth	r3, r3
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d307      	bcc.n	8011ec8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eba:	88db      	ldrh	r3, [r3, #6]
 8011ebc:	b29a      	uxth	r2, r3
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	889b      	ldrh	r3, [r3, #4]
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d902      	bls.n	8011ece <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8011ecc:	e0de      	b.n	801208c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed0:	68ba      	ldr	r2, [r7, #8]
 8011ed2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed6:	88db      	ldrh	r3, [r3, #6]
 8011ed8:	b29a      	uxth	r2, r3
 8011eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011edc:	889b      	ldrh	r3, [r3, #4]
 8011ede:	b29b      	uxth	r3, r3
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d03d      	beq.n	8011f60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011ee8:	e03a      	b.n	8011f60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eec:	88db      	ldrh	r3, [r3, #6]
 8011eee:	b29a      	uxth	r2, r3
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	889b      	ldrh	r3, [r3, #4]
 8011ef4:	b29b      	uxth	r3, r3
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d902      	bls.n	8011f00 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011efa:	f04f 33ff 	mov.w	r3, #4294967295
 8011efe:	e0c5      	b.n	801208c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	68ba      	ldr	r2, [r7, #8]
 8011f04:	605a      	str	r2, [r3, #4]
      break;
 8011f06:	e02b      	b.n	8011f60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f0a:	889b      	ldrh	r3, [r3, #4]
 8011f0c:	b29a      	uxth	r2, r3
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	889b      	ldrh	r3, [r3, #4]
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d102      	bne.n	8011f1e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f18:	f04f 33ff 	mov.w	r3, #4294967295
 8011f1c:	e0b6      	b.n	801208c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f20:	889b      	ldrh	r3, [r3, #4]
 8011f22:	b29a      	uxth	r2, r3
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	88db      	ldrh	r3, [r3, #6]
 8011f28:	b29b      	uxth	r3, r3
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d202      	bcs.n	8011f34 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f32:	e0ab      	b.n	801208c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d009      	beq.n	8011f4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f3c:	88db      	ldrh	r3, [r3, #6]
 8011f3e:	b29a      	uxth	r2, r3
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	889b      	ldrh	r3, [r3, #4]
 8011f44:	b29b      	uxth	r3, r3
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d001      	beq.n	8011f4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d193      	bne.n	8011e86 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011f5e:	e000      	b.n	8011f62 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011f60:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d12d      	bne.n	8011fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d01c      	beq.n	8011fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f70:	88db      	ldrh	r3, [r3, #6]
 8011f72:	b29a      	uxth	r2, r3
 8011f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f76:	889b      	ldrh	r3, [r3, #4]
 8011f78:	b29b      	uxth	r3, r3
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	d906      	bls.n	8011f8c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011f7e:	4b45      	ldr	r3, [pc, #276]	; (8012094 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011f80:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011f84:	4944      	ldr	r1, [pc, #272]	; (8012098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011f86:	4845      	ldr	r0, [pc, #276]	; (801209c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011f88:	f001 fa24 	bl	80133d4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f8e:	68ba      	ldr	r2, [r7, #8]
 8011f90:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f94:	88db      	ldrh	r3, [r3, #6]
 8011f96:	b29a      	uxth	r2, r3
 8011f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f9a:	889b      	ldrh	r3, [r3, #4]
 8011f9c:	b29b      	uxth	r3, r3
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d010      	beq.n	8011fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	623b      	str	r3, [r7, #32]
 8011fa6:	e00d      	b.n	8011fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d006      	beq.n	8011fbe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011fb0:	4b38      	ldr	r3, [pc, #224]	; (8012094 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011fb2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8011fb6:	493a      	ldr	r1, [pc, #232]	; (80120a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011fb8:	4838      	ldr	r0, [pc, #224]	; (801209c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011fba:	f001 fa0b 	bl	80133d4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	68ba      	ldr	r2, [r7, #8]
 8011fc2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d105      	bne.n	8011fd6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	7f9b      	ldrb	r3, [r3, #30]
 8011fce:	f003 0301 	and.w	r3, r3, #1
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d059      	beq.n	801208a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011fd6:	6a3b      	ldr	r3, [r7, #32]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d04f      	beq.n	801207c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d006      	beq.n	8011ff2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	685b      	ldr	r3, [r3, #4]
 8011fea:	889b      	ldrh	r3, [r3, #4]
 8011fec:	b29b      	uxth	r3, r3
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d002      	beq.n	8011ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	623b      	str	r3, [r7, #32]
 8011ff6:	e041      	b.n	801207c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ffa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012002:	e012      	b.n	801202a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801200c:	88db      	ldrh	r3, [r3, #6]
 801200e:	b29a      	uxth	r2, r3
 8012010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012012:	889b      	ldrh	r3, [r3, #4]
 8012014:	b29b      	uxth	r3, r3
 8012016:	429a      	cmp	r2, r3
 8012018:	d002      	beq.n	8012020 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801201a:	2300      	movs	r3, #0
 801201c:	623b      	str	r3, [r7, #32]
            break;
 801201e:	e007      	b.n	8012030 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012022:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801202c:	2b00      	cmp	r3, #0
 801202e:	d1e9      	bne.n	8012004 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012030:	6a3b      	ldr	r3, [r7, #32]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d022      	beq.n	801207c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d106      	bne.n	801204c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801203e:	4b15      	ldr	r3, [pc, #84]	; (8012094 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012040:	f240 12df 	movw	r2, #479	; 0x1df
 8012044:	4917      	ldr	r1, [pc, #92]	; (80120a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012046:	4815      	ldr	r0, [pc, #84]	; (801209c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012048:	f001 f9c4 	bl	80133d4 <iprintf>
          LWIP_ASSERT("sanity check",
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012054:	429a      	cmp	r2, r3
 8012056:	d106      	bne.n	8012066 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012058:	4b0e      	ldr	r3, [pc, #56]	; (8012094 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801205a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801205e:	4911      	ldr	r1, [pc, #68]	; (80120a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012060:	480e      	ldr	r0, [pc, #56]	; (801209c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012062:	f001 f9b7 	bl	80133d4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d006      	beq.n	801207c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801206e:	4b09      	ldr	r3, [pc, #36]	; (8012094 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012070:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012074:	490c      	ldr	r1, [pc, #48]	; (80120a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012076:	4809      	ldr	r0, [pc, #36]	; (801209c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012078:	f001 f9ac 	bl	80133d4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801207c:	6a3b      	ldr	r3, [r7, #32]
 801207e:	2b00      	cmp	r3, #0
 8012080:	bf14      	ite	ne
 8012082:	2301      	movne	r3, #1
 8012084:	2300      	moveq	r3, #0
 8012086:	b2db      	uxtb	r3, r3
 8012088:	e000      	b.n	801208c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801208a:	2300      	movs	r3, #0
}
 801208c:	4618      	mov	r0, r3
 801208e:	3730      	adds	r7, #48	; 0x30
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}
 8012094:	08019204 	.word	0x08019204
 8012098:	080192e8 	.word	0x080192e8
 801209c:	0801924c 	.word	0x0801924c
 80120a0:	08019308 	.word	0x08019308
 80120a4:	08019340 	.word	0x08019340
 80120a8:	08019350 	.word	0x08019350

080120ac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b08e      	sub	sp, #56	; 0x38
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	685b      	ldr	r3, [r3, #4]
 80120b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80120ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120bc:	781b      	ldrb	r3, [r3, #0]
 80120be:	f003 030f 	and.w	r3, r3, #15
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	009b      	lsls	r3, r3, #2
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	2b14      	cmp	r3, #20
 80120ca:	f040 8167 	bne.w	801239c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80120ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d0:	88db      	ldrh	r3, [r3, #6]
 80120d2:	b29b      	uxth	r3, r3
 80120d4:	4618      	mov	r0, r3
 80120d6:	f7f6 fba5 	bl	8008824 <lwip_htons>
 80120da:	4603      	mov	r3, r0
 80120dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80120e0:	b29b      	uxth	r3, r3
 80120e2:	00db      	lsls	r3, r3, #3
 80120e4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80120e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e8:	885b      	ldrh	r3, [r3, #2]
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7f6 fb99 	bl	8008824 <lwip_htons>
 80120f2:	4603      	mov	r3, r0
 80120f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80120f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f8:	781b      	ldrb	r3, [r3, #0]
 80120fa:	f003 030f 	and.w	r3, r3, #15
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	009b      	lsls	r3, r3, #2
 8012102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012106:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801210a:	b29b      	uxth	r3, r3
 801210c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801210e:	429a      	cmp	r2, r3
 8012110:	f0c0 8146 	bcc.w	80123a0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012114:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012118:	b29b      	uxth	r3, r3
 801211a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801211c:	1ad3      	subs	r3, r2, r3
 801211e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f7f7 febb 	bl	8009e9c <pbuf_clen>
 8012126:	4603      	mov	r3, r0
 8012128:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801212a:	4b9f      	ldr	r3, [pc, #636]	; (80123a8 <ip4_reass+0x2fc>)
 801212c:	881b      	ldrh	r3, [r3, #0]
 801212e:	461a      	mov	r2, r3
 8012130:	8c3b      	ldrh	r3, [r7, #32]
 8012132:	4413      	add	r3, r2
 8012134:	2b0a      	cmp	r3, #10
 8012136:	dd10      	ble.n	801215a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012138:	8c3b      	ldrh	r3, [r7, #32]
 801213a:	4619      	mov	r1, r3
 801213c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801213e:	f7ff fd81 	bl	8011c44 <ip_reass_remove_oldest_datagram>
 8012142:	4603      	mov	r3, r0
 8012144:	2b00      	cmp	r3, #0
 8012146:	f000 812d 	beq.w	80123a4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801214a:	4b97      	ldr	r3, [pc, #604]	; (80123a8 <ip4_reass+0x2fc>)
 801214c:	881b      	ldrh	r3, [r3, #0]
 801214e:	461a      	mov	r2, r3
 8012150:	8c3b      	ldrh	r3, [r7, #32]
 8012152:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012154:	2b0a      	cmp	r3, #10
 8012156:	f300 8125 	bgt.w	80123a4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801215a:	4b94      	ldr	r3, [pc, #592]	; (80123ac <ip4_reass+0x300>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	633b      	str	r3, [r7, #48]	; 0x30
 8012160:	e015      	b.n	801218e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012164:	695a      	ldr	r2, [r3, #20]
 8012166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012168:	68db      	ldr	r3, [r3, #12]
 801216a:	429a      	cmp	r2, r3
 801216c:	d10c      	bne.n	8012188 <ip4_reass+0xdc>
 801216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012170:	699a      	ldr	r2, [r3, #24]
 8012172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012174:	691b      	ldr	r3, [r3, #16]
 8012176:	429a      	cmp	r2, r3
 8012178:	d106      	bne.n	8012188 <ip4_reass+0xdc>
 801217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801217c:	899a      	ldrh	r2, [r3, #12]
 801217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012180:	889b      	ldrh	r3, [r3, #4]
 8012182:	b29b      	uxth	r3, r3
 8012184:	429a      	cmp	r2, r3
 8012186:	d006      	beq.n	8012196 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	633b      	str	r3, [r7, #48]	; 0x30
 801218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012190:	2b00      	cmp	r3, #0
 8012192:	d1e6      	bne.n	8012162 <ip4_reass+0xb6>
 8012194:	e000      	b.n	8012198 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012196:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801219a:	2b00      	cmp	r3, #0
 801219c:	d109      	bne.n	80121b2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801219e:	8c3b      	ldrh	r3, [r7, #32]
 80121a0:	4619      	mov	r1, r3
 80121a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121a4:	f7ff fdb0 	bl	8011d08 <ip_reass_enqueue_new_datagram>
 80121a8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80121aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d11c      	bne.n	80121ea <ip4_reass+0x13e>
      goto nullreturn;
 80121b0:	e109      	b.n	80123c6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80121b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b4:	88db      	ldrh	r3, [r3, #6]
 80121b6:	b29b      	uxth	r3, r3
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7f6 fb33 	bl	8008824 <lwip_htons>
 80121be:	4603      	mov	r3, r0
 80121c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d110      	bne.n	80121ea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80121c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ca:	89db      	ldrh	r3, [r3, #14]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7f6 fb29 	bl	8008824 <lwip_htons>
 80121d2:	4603      	mov	r3, r0
 80121d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d006      	beq.n	80121ea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80121dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121de:	3308      	adds	r3, #8
 80121e0:	2214      	movs	r2, #20
 80121e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80121e4:	4618      	mov	r0, r3
 80121e6:	f000 fbb1 	bl	801294c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80121ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ec:	88db      	ldrh	r3, [r3, #6]
 80121ee:	b29b      	uxth	r3, r3
 80121f0:	f003 0320 	and.w	r3, r3, #32
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	bf0c      	ite	eq
 80121f8:	2301      	moveq	r3, #1
 80121fa:	2300      	movne	r3, #0
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012200:	69fb      	ldr	r3, [r7, #28]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d00e      	beq.n	8012224 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012206:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012208:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801220a:	4413      	add	r3, r2
 801220c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801220e:	8b7a      	ldrh	r2, [r7, #26]
 8012210:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012212:	429a      	cmp	r2, r3
 8012214:	f0c0 80a0 	bcc.w	8012358 <ip4_reass+0x2ac>
 8012218:	8b7b      	ldrh	r3, [r7, #26]
 801221a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801221e:	4293      	cmp	r3, r2
 8012220:	f200 809a 	bhi.w	8012358 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012224:	69fa      	ldr	r2, [r7, #28]
 8012226:	6879      	ldr	r1, [r7, #4]
 8012228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801222a:	f7ff fdd5 	bl	8011dd8 <ip_reass_chain_frag_into_datagram_and_validate>
 801222e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012236:	f000 8091 	beq.w	801235c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801223a:	4b5b      	ldr	r3, [pc, #364]	; (80123a8 <ip4_reass+0x2fc>)
 801223c:	881a      	ldrh	r2, [r3, #0]
 801223e:	8c3b      	ldrh	r3, [r7, #32]
 8012240:	4413      	add	r3, r2
 8012242:	b29a      	uxth	r2, r3
 8012244:	4b58      	ldr	r3, [pc, #352]	; (80123a8 <ip4_reass+0x2fc>)
 8012246:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012248:	69fb      	ldr	r3, [r7, #28]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d00d      	beq.n	801226a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801224e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012250:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012252:	4413      	add	r3, r2
 8012254:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012258:	8a7a      	ldrh	r2, [r7, #18]
 801225a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801225e:	7f9b      	ldrb	r3, [r3, #30]
 8012260:	f043 0301 	orr.w	r3, r3, #1
 8012264:	b2da      	uxtb	r2, r3
 8012266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012268:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	2b01      	cmp	r3, #1
 801226e:	d171      	bne.n	8012354 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012272:	8b9b      	ldrh	r3, [r3, #28]
 8012274:	3314      	adds	r3, #20
 8012276:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801227a:	685b      	ldr	r3, [r3, #4]
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012284:	685b      	ldr	r3, [r3, #4]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801228c:	3308      	adds	r3, #8
 801228e:	2214      	movs	r2, #20
 8012290:	4619      	mov	r1, r3
 8012292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012294:	f000 fb5a 	bl	801294c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012298:	8a3b      	ldrh	r3, [r7, #16]
 801229a:	4618      	mov	r0, r3
 801229c:	f7f6 fac2 	bl	8008824 <lwip_htons>
 80122a0:	4603      	mov	r3, r0
 80122a2:	461a      	mov	r2, r3
 80122a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80122a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122aa:	2200      	movs	r2, #0
 80122ac:	719a      	strb	r2, [r3, #6]
 80122ae:	2200      	movs	r2, #0
 80122b0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80122b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b4:	2200      	movs	r2, #0
 80122b6:	729a      	strb	r2, [r3, #10]
 80122b8:	2200      	movs	r2, #0
 80122ba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80122bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80122c2:	e00d      	b.n	80122e0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80122c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80122ca:	2114      	movs	r1, #20
 80122cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80122ce:	f7f7 fcd7 	bl	8009c80 <pbuf_remove_header>
      pbuf_cat(p, r);
 80122d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f7f7 fe1b 	bl	8009f10 <pbuf_cat>
      r = iprh->next_pbuf;
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80122e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d1ee      	bne.n	80122c4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80122e6:	4b31      	ldr	r3, [pc, #196]	; (80123ac <ip4_reass+0x300>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122ec:	429a      	cmp	r2, r3
 80122ee:	d102      	bne.n	80122f6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80122f0:	2300      	movs	r3, #0
 80122f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122f4:	e010      	b.n	8012318 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80122f6:	4b2d      	ldr	r3, [pc, #180]	; (80123ac <ip4_reass+0x300>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122fc:	e007      	b.n	801230e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80122fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012304:	429a      	cmp	r2, r3
 8012306:	d006      	beq.n	8012316 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012310:	2b00      	cmp	r3, #0
 8012312:	d1f4      	bne.n	80122fe <ip4_reass+0x252>
 8012314:	e000      	b.n	8012318 <ip4_reass+0x26c>
          break;
 8012316:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801231a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801231c:	f7ff fd2e 	bl	8011d7c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f7f7 fdbb 	bl	8009e9c <pbuf_clen>
 8012326:	4603      	mov	r3, r0
 8012328:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801232a:	4b1f      	ldr	r3, [pc, #124]	; (80123a8 <ip4_reass+0x2fc>)
 801232c:	881b      	ldrh	r3, [r3, #0]
 801232e:	8c3a      	ldrh	r2, [r7, #32]
 8012330:	429a      	cmp	r2, r3
 8012332:	d906      	bls.n	8012342 <ip4_reass+0x296>
 8012334:	4b1e      	ldr	r3, [pc, #120]	; (80123b0 <ip4_reass+0x304>)
 8012336:	f240 229b 	movw	r2, #667	; 0x29b
 801233a:	491e      	ldr	r1, [pc, #120]	; (80123b4 <ip4_reass+0x308>)
 801233c:	481e      	ldr	r0, [pc, #120]	; (80123b8 <ip4_reass+0x30c>)
 801233e:	f001 f849 	bl	80133d4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012342:	4b19      	ldr	r3, [pc, #100]	; (80123a8 <ip4_reass+0x2fc>)
 8012344:	881a      	ldrh	r2, [r3, #0]
 8012346:	8c3b      	ldrh	r3, [r7, #32]
 8012348:	1ad3      	subs	r3, r2, r3
 801234a:	b29a      	uxth	r2, r3
 801234c:	4b16      	ldr	r3, [pc, #88]	; (80123a8 <ip4_reass+0x2fc>)
 801234e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	e03c      	b.n	80123ce <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012354:	2300      	movs	r3, #0
 8012356:	e03a      	b.n	80123ce <ip4_reass+0x322>
      goto nullreturn_ipr;
 8012358:	bf00      	nop
 801235a:	e000      	b.n	801235e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801235c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012360:	2b00      	cmp	r3, #0
 8012362:	d106      	bne.n	8012372 <ip4_reass+0x2c6>
 8012364:	4b12      	ldr	r3, [pc, #72]	; (80123b0 <ip4_reass+0x304>)
 8012366:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801236a:	4914      	ldr	r1, [pc, #80]	; (80123bc <ip4_reass+0x310>)
 801236c:	4812      	ldr	r0, [pc, #72]	; (80123b8 <ip4_reass+0x30c>)
 801236e:	f001 f831 	bl	80133d4 <iprintf>
  if (ipr->p == NULL) {
 8012372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d124      	bne.n	80123c4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801237a:	4b0c      	ldr	r3, [pc, #48]	; (80123ac <ip4_reass+0x300>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012380:	429a      	cmp	r2, r3
 8012382:	d006      	beq.n	8012392 <ip4_reass+0x2e6>
 8012384:	4b0a      	ldr	r3, [pc, #40]	; (80123b0 <ip4_reass+0x304>)
 8012386:	f240 22ab 	movw	r2, #683	; 0x2ab
 801238a:	490d      	ldr	r1, [pc, #52]	; (80123c0 <ip4_reass+0x314>)
 801238c:	480a      	ldr	r0, [pc, #40]	; (80123b8 <ip4_reass+0x30c>)
 801238e:	f001 f821 	bl	80133d4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012392:	2100      	movs	r1, #0
 8012394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012396:	f7ff fcf1 	bl	8011d7c <ip_reass_dequeue_datagram>
 801239a:	e014      	b.n	80123c6 <ip4_reass+0x31a>
    goto nullreturn;
 801239c:	bf00      	nop
 801239e:	e012      	b.n	80123c6 <ip4_reass+0x31a>
    goto nullreturn;
 80123a0:	bf00      	nop
 80123a2:	e010      	b.n	80123c6 <ip4_reass+0x31a>
      goto nullreturn;
 80123a4:	bf00      	nop
 80123a6:	e00e      	b.n	80123c6 <ip4_reass+0x31a>
 80123a8:	200003f4 	.word	0x200003f4
 80123ac:	200003f0 	.word	0x200003f0
 80123b0:	08019204 	.word	0x08019204
 80123b4:	08019374 	.word	0x08019374
 80123b8:	0801924c 	.word	0x0801924c
 80123bc:	08019390 	.word	0x08019390
 80123c0:	0801939c 	.word	0x0801939c
  }

nullreturn:
 80123c4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f7f7 fce0 	bl	8009d8c <pbuf_free>
  return NULL;
 80123cc:	2300      	movs	r3, #0
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3738      	adds	r7, #56	; 0x38
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	bf00      	nop

080123d8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80123dc:	2005      	movs	r0, #5
 80123de:	f7f6 fe77 	bl	80090d0 <memp_malloc>
 80123e2:	4603      	mov	r3, r0
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	bd80      	pop	{r7, pc}

080123e8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d106      	bne.n	8012404 <ip_frag_free_pbuf_custom_ref+0x1c>
 80123f6:	4b07      	ldr	r3, [pc, #28]	; (8012414 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80123f8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80123fc:	4906      	ldr	r1, [pc, #24]	; (8012418 <ip_frag_free_pbuf_custom_ref+0x30>)
 80123fe:	4807      	ldr	r0, [pc, #28]	; (801241c <ip_frag_free_pbuf_custom_ref+0x34>)
 8012400:	f000 ffe8 	bl	80133d4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012404:	6879      	ldr	r1, [r7, #4]
 8012406:	2005      	movs	r0, #5
 8012408:	f7f6 feae 	bl	8009168 <memp_free>
}
 801240c:	bf00      	nop
 801240e:	3708      	adds	r7, #8
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}
 8012414:	08019204 	.word	0x08019204
 8012418:	080193bc 	.word	0x080193bc
 801241c:	0801924c 	.word	0x0801924c

08012420 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b084      	sub	sp, #16
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d106      	bne.n	8012440 <ipfrag_free_pbuf_custom+0x20>
 8012432:	4b11      	ldr	r3, [pc, #68]	; (8012478 <ipfrag_free_pbuf_custom+0x58>)
 8012434:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012438:	4910      	ldr	r1, [pc, #64]	; (801247c <ipfrag_free_pbuf_custom+0x5c>)
 801243a:	4811      	ldr	r0, [pc, #68]	; (8012480 <ipfrag_free_pbuf_custom+0x60>)
 801243c:	f000 ffca 	bl	80133d4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012440:	68fa      	ldr	r2, [r7, #12]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	429a      	cmp	r2, r3
 8012446:	d006      	beq.n	8012456 <ipfrag_free_pbuf_custom+0x36>
 8012448:	4b0b      	ldr	r3, [pc, #44]	; (8012478 <ipfrag_free_pbuf_custom+0x58>)
 801244a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801244e:	490d      	ldr	r1, [pc, #52]	; (8012484 <ipfrag_free_pbuf_custom+0x64>)
 8012450:	480b      	ldr	r0, [pc, #44]	; (8012480 <ipfrag_free_pbuf_custom+0x60>)
 8012452:	f000 ffbf 	bl	80133d4 <iprintf>
  if (pcr->original != NULL) {
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	695b      	ldr	r3, [r3, #20]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d004      	beq.n	8012468 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	695b      	ldr	r3, [r3, #20]
 8012462:	4618      	mov	r0, r3
 8012464:	f7f7 fc92 	bl	8009d8c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012468:	68f8      	ldr	r0, [r7, #12]
 801246a:	f7ff ffbd 	bl	80123e8 <ip_frag_free_pbuf_custom_ref>
}
 801246e:	bf00      	nop
 8012470:	3710      	adds	r7, #16
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}
 8012476:	bf00      	nop
 8012478:	08019204 	.word	0x08019204
 801247c:	080193c8 	.word	0x080193c8
 8012480:	0801924c 	.word	0x0801924c
 8012484:	080193d4 	.word	0x080193d4

08012488 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b094      	sub	sp, #80	; 0x50
 801248c:	af02      	add	r7, sp, #8
 801248e:	60f8      	str	r0, [r7, #12]
 8012490:	60b9      	str	r1, [r7, #8]
 8012492:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012494:	2300      	movs	r3, #0
 8012496:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801249a:	68bb      	ldr	r3, [r7, #8]
 801249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801249e:	3b14      	subs	r3, #20
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	da00      	bge.n	80124a6 <ip4_frag+0x1e>
 80124a4:	3307      	adds	r3, #7
 80124a6:	10db      	asrs	r3, r3, #3
 80124a8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80124aa:	2314      	movs	r3, #20
 80124ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80124b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80124b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ba:	781b      	ldrb	r3, [r3, #0]
 80124bc:	f003 030f 	and.w	r3, r3, #15
 80124c0:	b2db      	uxtb	r3, r3
 80124c2:	009b      	lsls	r3, r3, #2
 80124c4:	b2db      	uxtb	r3, r3
 80124c6:	2b14      	cmp	r3, #20
 80124c8:	d002      	beq.n	80124d0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80124ca:	f06f 0305 	mvn.w	r3, #5
 80124ce:	e110      	b.n	80126f2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	895b      	ldrh	r3, [r3, #10]
 80124d4:	2b13      	cmp	r3, #19
 80124d6:	d809      	bhi.n	80124ec <ip4_frag+0x64>
 80124d8:	4b88      	ldr	r3, [pc, #544]	; (80126fc <ip4_frag+0x274>)
 80124da:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80124de:	4988      	ldr	r1, [pc, #544]	; (8012700 <ip4_frag+0x278>)
 80124e0:	4888      	ldr	r0, [pc, #544]	; (8012704 <ip4_frag+0x27c>)
 80124e2:	f000 ff77 	bl	80133d4 <iprintf>
 80124e6:	f06f 0305 	mvn.w	r3, #5
 80124ea:	e102      	b.n	80126f2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80124ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ee:	88db      	ldrh	r3, [r3, #6]
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	4618      	mov	r0, r3
 80124f4:	f7f6 f996 	bl	8008824 <lwip_htons>
 80124f8:	4603      	mov	r3, r0
 80124fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80124fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80124fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012502:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012506:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801250c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	891b      	ldrh	r3, [r3, #8]
 8012512:	3b14      	subs	r3, #20
 8012514:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012518:	e0e1      	b.n	80126de <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801251a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801251c:	00db      	lsls	r3, r3, #3
 801251e:	b29b      	uxth	r3, r3
 8012520:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012524:	4293      	cmp	r3, r2
 8012526:	bf28      	it	cs
 8012528:	4613      	movcs	r3, r2
 801252a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801252c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012530:	2114      	movs	r1, #20
 8012532:	200e      	movs	r0, #14
 8012534:	f7f7 f946 	bl	80097c4 <pbuf_alloc>
 8012538:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801253c:	2b00      	cmp	r3, #0
 801253e:	f000 80d5 	beq.w	80126ec <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012544:	895b      	ldrh	r3, [r3, #10]
 8012546:	2b13      	cmp	r3, #19
 8012548:	d806      	bhi.n	8012558 <ip4_frag+0xd0>
 801254a:	4b6c      	ldr	r3, [pc, #432]	; (80126fc <ip4_frag+0x274>)
 801254c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012550:	496d      	ldr	r1, [pc, #436]	; (8012708 <ip4_frag+0x280>)
 8012552:	486c      	ldr	r0, [pc, #432]	; (8012704 <ip4_frag+0x27c>)
 8012554:	f000 ff3e 	bl	80133d4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255a:	685b      	ldr	r3, [r3, #4]
 801255c:	2214      	movs	r2, #20
 801255e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012560:	4618      	mov	r0, r3
 8012562:	f000 f9f3 	bl	801294c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012568:	685b      	ldr	r3, [r3, #4]
 801256a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801256c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801256e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012572:	e064      	b.n	801263e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	895a      	ldrh	r2, [r3, #10]
 8012578:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801257a:	1ad3      	subs	r3, r2, r3
 801257c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	895b      	ldrh	r3, [r3, #10]
 8012582:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012584:	429a      	cmp	r2, r3
 8012586:	d906      	bls.n	8012596 <ip4_frag+0x10e>
 8012588:	4b5c      	ldr	r3, [pc, #368]	; (80126fc <ip4_frag+0x274>)
 801258a:	f240 322d 	movw	r2, #813	; 0x32d
 801258e:	495f      	ldr	r1, [pc, #380]	; (801270c <ip4_frag+0x284>)
 8012590:	485c      	ldr	r0, [pc, #368]	; (8012704 <ip4_frag+0x27c>)
 8012592:	f000 ff1f 	bl	80133d4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012596:	8bfa      	ldrh	r2, [r7, #30]
 8012598:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801259c:	4293      	cmp	r3, r2
 801259e:	bf28      	it	cs
 80125a0:	4613      	movcs	r3, r2
 80125a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80125a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d105      	bne.n	80125ba <ip4_frag+0x132>
        poff = 0;
 80125ae:	2300      	movs	r3, #0
 80125b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	60fb      	str	r3, [r7, #12]
        continue;
 80125b8:	e041      	b.n	801263e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80125ba:	f7ff ff0d 	bl	80123d8 <ip_frag_alloc_pbuf_custom_ref>
 80125be:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80125c0:	69bb      	ldr	r3, [r7, #24]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d103      	bne.n	80125ce <ip4_frag+0x146>
        pbuf_free(rambuf);
 80125c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125c8:	f7f7 fbe0 	bl	8009d8c <pbuf_free>
        goto memerr;
 80125cc:	e08f      	b.n	80126ee <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80125ce:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80125d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80125d6:	4413      	add	r3, r2
 80125d8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80125dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80125e0:	9201      	str	r2, [sp, #4]
 80125e2:	9300      	str	r3, [sp, #0]
 80125e4:	4603      	mov	r3, r0
 80125e6:	2241      	movs	r2, #65	; 0x41
 80125e8:	2000      	movs	r0, #0
 80125ea:	f7f7 fa15 	bl	8009a18 <pbuf_alloced_custom>
 80125ee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d106      	bne.n	8012604 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80125f6:	69b8      	ldr	r0, [r7, #24]
 80125f8:	f7ff fef6 	bl	80123e8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80125fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125fe:	f7f7 fbc5 	bl	8009d8c <pbuf_free>
        goto memerr;
 8012602:	e074      	b.n	80126ee <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012604:	68f8      	ldr	r0, [r7, #12]
 8012606:	f7f7 fc61 	bl	8009ecc <pbuf_ref>
      pcr->original = p;
 801260a:	69bb      	ldr	r3, [r7, #24]
 801260c:	68fa      	ldr	r2, [r7, #12]
 801260e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012610:	69bb      	ldr	r3, [r7, #24]
 8012612:	4a3f      	ldr	r2, [pc, #252]	; (8012710 <ip4_frag+0x288>)
 8012614:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012616:	6979      	ldr	r1, [r7, #20]
 8012618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801261a:	f7f7 fc79 	bl	8009f10 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801261e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012622:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012626:	1ad3      	subs	r3, r2, r3
 8012628:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801262c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012630:	2b00      	cmp	r3, #0
 8012632:	d004      	beq.n	801263e <ip4_frag+0x1b6>
        poff = 0;
 8012634:	2300      	movs	r3, #0
 8012636:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801263e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012642:	2b00      	cmp	r3, #0
 8012644:	d196      	bne.n	8012574 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012646:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012648:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801264c:	4413      	add	r3, r2
 801264e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012654:	f1a3 0213 	sub.w	r2, r3, #19
 8012658:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801265c:	429a      	cmp	r2, r3
 801265e:	bfcc      	ite	gt
 8012660:	2301      	movgt	r3, #1
 8012662:	2300      	movle	r3, #0
 8012664:	b2db      	uxtb	r3, r3
 8012666:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012668:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801266c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012670:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012672:	6a3b      	ldr	r3, [r7, #32]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d002      	beq.n	801267e <ip4_frag+0x1f6>
 8012678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267a:	2b00      	cmp	r3, #0
 801267c:	d003      	beq.n	8012686 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801267e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012680:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012684:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012686:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012688:	4618      	mov	r0, r3
 801268a:	f7f6 f8cb 	bl	8008824 <lwip_htons>
 801268e:	4603      	mov	r3, r0
 8012690:	461a      	mov	r2, r3
 8012692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012694:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012696:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012698:	3314      	adds	r3, #20
 801269a:	b29b      	uxth	r3, r3
 801269c:	4618      	mov	r0, r3
 801269e:	f7f6 f8c1 	bl	8008824 <lwip_htons>
 80126a2:	4603      	mov	r3, r0
 80126a4:	461a      	mov	r2, r3
 80126a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80126aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ac:	2200      	movs	r2, #0
 80126ae:	729a      	strb	r2, [r3, #10]
 80126b0:	2200      	movs	r2, #0
 80126b2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	695b      	ldr	r3, [r3, #20]
 80126b8:	687a      	ldr	r2, [r7, #4]
 80126ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80126bc:	68b8      	ldr	r0, [r7, #8]
 80126be:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80126c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126c2:	f7f7 fb63 	bl	8009d8c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80126c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80126ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80126cc:	1ad3      	subs	r3, r2, r3
 80126ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80126d2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80126d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80126d8:	4413      	add	r3, r2
 80126da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80126de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	f47f af19 	bne.w	801251a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80126e8:	2300      	movs	r3, #0
 80126ea:	e002      	b.n	80126f2 <ip4_frag+0x26a>
      goto memerr;
 80126ec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80126ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3748      	adds	r7, #72	; 0x48
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	08019204 	.word	0x08019204
 8012700:	080193e0 	.word	0x080193e0
 8012704:	0801924c 	.word	0x0801924c
 8012708:	080193fc 	.word	0x080193fc
 801270c:	0801941c 	.word	0x0801941c
 8012710:	08012421 	.word	0x08012421

08012714 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b086      	sub	sp, #24
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801271e:	230e      	movs	r3, #14
 8012720:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	895b      	ldrh	r3, [r3, #10]
 8012726:	2b0e      	cmp	r3, #14
 8012728:	d96e      	bls.n	8012808 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	7bdb      	ldrb	r3, [r3, #15]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d106      	bne.n	8012740 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012738:	3301      	adds	r3, #1
 801273a:	b2da      	uxtb	r2, r3
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	685b      	ldr	r3, [r3, #4]
 8012744:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012746:	693b      	ldr	r3, [r7, #16]
 8012748:	7b1a      	ldrb	r2, [r3, #12]
 801274a:	7b5b      	ldrb	r3, [r3, #13]
 801274c:	021b      	lsls	r3, r3, #8
 801274e:	4313      	orrs	r3, r2
 8012750:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	781b      	ldrb	r3, [r3, #0]
 8012756:	f003 0301 	and.w	r3, r3, #1
 801275a:	2b00      	cmp	r3, #0
 801275c:	d023      	beq.n	80127a6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	2b01      	cmp	r3, #1
 8012764:	d10f      	bne.n	8012786 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	785b      	ldrb	r3, [r3, #1]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d11b      	bne.n	80127a6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801276e:	693b      	ldr	r3, [r7, #16]
 8012770:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012772:	2b5e      	cmp	r3, #94	; 0x5e
 8012774:	d117      	bne.n	80127a6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	7b5b      	ldrb	r3, [r3, #13]
 801277a:	f043 0310 	orr.w	r3, r3, #16
 801277e:	b2da      	uxtb	r2, r3
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	735a      	strb	r2, [r3, #13]
 8012784:	e00f      	b.n	80127a6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	2206      	movs	r2, #6
 801278a:	4928      	ldr	r1, [pc, #160]	; (801282c <ethernet_input+0x118>)
 801278c:	4618      	mov	r0, r3
 801278e:	f000 f8cf 	bl	8012930 <memcmp>
 8012792:	4603      	mov	r3, r0
 8012794:	2b00      	cmp	r3, #0
 8012796:	d106      	bne.n	80127a6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	7b5b      	ldrb	r3, [r3, #13]
 801279c:	f043 0308 	orr.w	r3, r3, #8
 80127a0:	b2da      	uxtb	r2, r3
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80127a6:	89fb      	ldrh	r3, [r7, #14]
 80127a8:	2b08      	cmp	r3, #8
 80127aa:	d003      	beq.n	80127b4 <ethernet_input+0xa0>
 80127ac:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80127b0:	d014      	beq.n	80127dc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80127b2:	e032      	b.n	801281a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80127ba:	f003 0308 	and.w	r3, r3, #8
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d024      	beq.n	801280c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80127c2:	8afb      	ldrh	r3, [r7, #22]
 80127c4:	4619      	mov	r1, r3
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f7f7 fa5a 	bl	8009c80 <pbuf_remove_header>
 80127cc:	4603      	mov	r3, r0
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d11e      	bne.n	8012810 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80127d2:	6839      	ldr	r1, [r7, #0]
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f7fe ff27 	bl	8011628 <ip4_input>
      break;
 80127da:	e013      	b.n	8012804 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80127e2:	f003 0308 	and.w	r3, r3, #8
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d014      	beq.n	8012814 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80127ea:	8afb      	ldrh	r3, [r7, #22]
 80127ec:	4619      	mov	r1, r3
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f7f7 fa46 	bl	8009c80 <pbuf_remove_header>
 80127f4:	4603      	mov	r3, r0
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d10e      	bne.n	8012818 <ethernet_input+0x104>
        etharp_input(p, netif);
 80127fa:	6839      	ldr	r1, [r7, #0]
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f7fe f8c9 	bl	8010994 <etharp_input>
      break;
 8012802:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012804:	2300      	movs	r3, #0
 8012806:	e00c      	b.n	8012822 <ethernet_input+0x10e>
    goto free_and_return;
 8012808:	bf00      	nop
 801280a:	e006      	b.n	801281a <ethernet_input+0x106>
        goto free_and_return;
 801280c:	bf00      	nop
 801280e:	e004      	b.n	801281a <ethernet_input+0x106>
        goto free_and_return;
 8012810:	bf00      	nop
 8012812:	e002      	b.n	801281a <ethernet_input+0x106>
        goto free_and_return;
 8012814:	bf00      	nop
 8012816:	e000      	b.n	801281a <ethernet_input+0x106>
        goto free_and_return;
 8012818:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f7f7 fab6 	bl	8009d8c <pbuf_free>
  return ERR_OK;
 8012820:	2300      	movs	r3, #0
}
 8012822:	4618      	mov	r0, r3
 8012824:	3718      	adds	r7, #24
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}
 801282a:	bf00      	nop
 801282c:	080195a4 	.word	0x080195a4

08012830 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012830:	b580      	push	{r7, lr}
 8012832:	b086      	sub	sp, #24
 8012834:	af00      	add	r7, sp, #0
 8012836:	60f8      	str	r0, [r7, #12]
 8012838:	60b9      	str	r1, [r7, #8]
 801283a:	607a      	str	r2, [r7, #4]
 801283c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801283e:	8c3b      	ldrh	r3, [r7, #32]
 8012840:	4618      	mov	r0, r3
 8012842:	f7f5 ffef 	bl	8008824 <lwip_htons>
 8012846:	4603      	mov	r3, r0
 8012848:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801284a:	210e      	movs	r1, #14
 801284c:	68b8      	ldr	r0, [r7, #8]
 801284e:	f7f7 fa07 	bl	8009c60 <pbuf_add_header>
 8012852:	4603      	mov	r3, r0
 8012854:	2b00      	cmp	r3, #0
 8012856:	d125      	bne.n	80128a4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	685b      	ldr	r3, [r3, #4]
 801285c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	8afa      	ldrh	r2, [r7, #22]
 8012862:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	2206      	movs	r2, #6
 8012868:	6839      	ldr	r1, [r7, #0]
 801286a:	4618      	mov	r0, r3
 801286c:	f000 f86e 	bl	801294c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012870:	693b      	ldr	r3, [r7, #16]
 8012872:	3306      	adds	r3, #6
 8012874:	2206      	movs	r2, #6
 8012876:	6879      	ldr	r1, [r7, #4]
 8012878:	4618      	mov	r0, r3
 801287a:	f000 f867 	bl	801294c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012884:	2b06      	cmp	r3, #6
 8012886:	d006      	beq.n	8012896 <ethernet_output+0x66>
 8012888:	4b0a      	ldr	r3, [pc, #40]	; (80128b4 <ethernet_output+0x84>)
 801288a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801288e:	490a      	ldr	r1, [pc, #40]	; (80128b8 <ethernet_output+0x88>)
 8012890:	480a      	ldr	r0, [pc, #40]	; (80128bc <ethernet_output+0x8c>)
 8012892:	f000 fd9f 	bl	80133d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	699b      	ldr	r3, [r3, #24]
 801289a:	68b9      	ldr	r1, [r7, #8]
 801289c:	68f8      	ldr	r0, [r7, #12]
 801289e:	4798      	blx	r3
 80128a0:	4603      	mov	r3, r0
 80128a2:	e002      	b.n	80128aa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80128a4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80128a6:	f06f 0301 	mvn.w	r3, #1
}
 80128aa:	4618      	mov	r0, r3
 80128ac:	3718      	adds	r7, #24
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop
 80128b4:	0801942c 	.word	0x0801942c
 80128b8:	08019464 	.word	0x08019464
 80128bc:	08019498 	.word	0x08019498

080128c0 <atoi>:
 80128c0:	220a      	movs	r2, #10
 80128c2:	2100      	movs	r1, #0
 80128c4:	f000 beae 	b.w	8013624 <strtol>

080128c8 <__libc_init_array>:
 80128c8:	b570      	push	{r4, r5, r6, lr}
 80128ca:	4d0d      	ldr	r5, [pc, #52]	; (8012900 <__libc_init_array+0x38>)
 80128cc:	4c0d      	ldr	r4, [pc, #52]	; (8012904 <__libc_init_array+0x3c>)
 80128ce:	1b64      	subs	r4, r4, r5
 80128d0:	10a4      	asrs	r4, r4, #2
 80128d2:	2600      	movs	r6, #0
 80128d4:	42a6      	cmp	r6, r4
 80128d6:	d109      	bne.n	80128ec <__libc_init_array+0x24>
 80128d8:	4d0b      	ldr	r5, [pc, #44]	; (8012908 <__libc_init_array+0x40>)
 80128da:	4c0c      	ldr	r4, [pc, #48]	; (801290c <__libc_init_array+0x44>)
 80128dc:	f003 ff8a 	bl	80167f4 <_init>
 80128e0:	1b64      	subs	r4, r4, r5
 80128e2:	10a4      	asrs	r4, r4, #2
 80128e4:	2600      	movs	r6, #0
 80128e6:	42a6      	cmp	r6, r4
 80128e8:	d105      	bne.n	80128f6 <__libc_init_array+0x2e>
 80128ea:	bd70      	pop	{r4, r5, r6, pc}
 80128ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80128f0:	4798      	blx	r3
 80128f2:	3601      	adds	r6, #1
 80128f4:	e7ee      	b.n	80128d4 <__libc_init_array+0xc>
 80128f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80128fa:	4798      	blx	r3
 80128fc:	3601      	adds	r6, #1
 80128fe:	e7f2      	b.n	80128e6 <__libc_init_array+0x1e>
 8012900:	08019a40 	.word	0x08019a40
 8012904:	08019a40 	.word	0x08019a40
 8012908:	08019a40 	.word	0x08019a40
 801290c:	08019a44 	.word	0x08019a44

08012910 <malloc>:
 8012910:	4b02      	ldr	r3, [pc, #8]	; (801291c <malloc+0xc>)
 8012912:	4601      	mov	r1, r0
 8012914:	6818      	ldr	r0, [r3, #0]
 8012916:	f000 b899 	b.w	8012a4c <_malloc_r>
 801291a:	bf00      	nop
 801291c:	2000004c 	.word	0x2000004c

08012920 <free>:
 8012920:	4b02      	ldr	r3, [pc, #8]	; (801292c <free+0xc>)
 8012922:	4601      	mov	r1, r0
 8012924:	6818      	ldr	r0, [r3, #0]
 8012926:	f000 b841 	b.w	80129ac <_free_r>
 801292a:	bf00      	nop
 801292c:	2000004c 	.word	0x2000004c

08012930 <memcmp>:
 8012930:	b530      	push	{r4, r5, lr}
 8012932:	3901      	subs	r1, #1
 8012934:	2400      	movs	r4, #0
 8012936:	42a2      	cmp	r2, r4
 8012938:	d101      	bne.n	801293e <memcmp+0xe>
 801293a:	2000      	movs	r0, #0
 801293c:	e005      	b.n	801294a <memcmp+0x1a>
 801293e:	5d03      	ldrb	r3, [r0, r4]
 8012940:	3401      	adds	r4, #1
 8012942:	5d0d      	ldrb	r5, [r1, r4]
 8012944:	42ab      	cmp	r3, r5
 8012946:	d0f6      	beq.n	8012936 <memcmp+0x6>
 8012948:	1b58      	subs	r0, r3, r5
 801294a:	bd30      	pop	{r4, r5, pc}

0801294c <memcpy>:
 801294c:	440a      	add	r2, r1
 801294e:	4291      	cmp	r1, r2
 8012950:	f100 33ff 	add.w	r3, r0, #4294967295
 8012954:	d100      	bne.n	8012958 <memcpy+0xc>
 8012956:	4770      	bx	lr
 8012958:	b510      	push	{r4, lr}
 801295a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801295e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012962:	4291      	cmp	r1, r2
 8012964:	d1f9      	bne.n	801295a <memcpy+0xe>
 8012966:	bd10      	pop	{r4, pc}

08012968 <memmove>:
 8012968:	4288      	cmp	r0, r1
 801296a:	b510      	push	{r4, lr}
 801296c:	eb01 0402 	add.w	r4, r1, r2
 8012970:	d902      	bls.n	8012978 <memmove+0x10>
 8012972:	4284      	cmp	r4, r0
 8012974:	4623      	mov	r3, r4
 8012976:	d807      	bhi.n	8012988 <memmove+0x20>
 8012978:	1e43      	subs	r3, r0, #1
 801297a:	42a1      	cmp	r1, r4
 801297c:	d008      	beq.n	8012990 <memmove+0x28>
 801297e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012982:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012986:	e7f8      	b.n	801297a <memmove+0x12>
 8012988:	4402      	add	r2, r0
 801298a:	4601      	mov	r1, r0
 801298c:	428a      	cmp	r2, r1
 801298e:	d100      	bne.n	8012992 <memmove+0x2a>
 8012990:	bd10      	pop	{r4, pc}
 8012992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801299a:	e7f7      	b.n	801298c <memmove+0x24>

0801299c <memset>:
 801299c:	4402      	add	r2, r0
 801299e:	4603      	mov	r3, r0
 80129a0:	4293      	cmp	r3, r2
 80129a2:	d100      	bne.n	80129a6 <memset+0xa>
 80129a4:	4770      	bx	lr
 80129a6:	f803 1b01 	strb.w	r1, [r3], #1
 80129aa:	e7f9      	b.n	80129a0 <memset+0x4>

080129ac <_free_r>:
 80129ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129ae:	2900      	cmp	r1, #0
 80129b0:	d048      	beq.n	8012a44 <_free_r+0x98>
 80129b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129b6:	9001      	str	r0, [sp, #4]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	f1a1 0404 	sub.w	r4, r1, #4
 80129be:	bfb8      	it	lt
 80129c0:	18e4      	addlt	r4, r4, r3
 80129c2:	f001 fde7 	bl	8014594 <__malloc_lock>
 80129c6:	4a20      	ldr	r2, [pc, #128]	; (8012a48 <_free_r+0x9c>)
 80129c8:	9801      	ldr	r0, [sp, #4]
 80129ca:	6813      	ldr	r3, [r2, #0]
 80129cc:	4615      	mov	r5, r2
 80129ce:	b933      	cbnz	r3, 80129de <_free_r+0x32>
 80129d0:	6063      	str	r3, [r4, #4]
 80129d2:	6014      	str	r4, [r2, #0]
 80129d4:	b003      	add	sp, #12
 80129d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80129da:	f001 bde1 	b.w	80145a0 <__malloc_unlock>
 80129de:	42a3      	cmp	r3, r4
 80129e0:	d90b      	bls.n	80129fa <_free_r+0x4e>
 80129e2:	6821      	ldr	r1, [r4, #0]
 80129e4:	1862      	adds	r2, r4, r1
 80129e6:	4293      	cmp	r3, r2
 80129e8:	bf04      	itt	eq
 80129ea:	681a      	ldreq	r2, [r3, #0]
 80129ec:	685b      	ldreq	r3, [r3, #4]
 80129ee:	6063      	str	r3, [r4, #4]
 80129f0:	bf04      	itt	eq
 80129f2:	1852      	addeq	r2, r2, r1
 80129f4:	6022      	streq	r2, [r4, #0]
 80129f6:	602c      	str	r4, [r5, #0]
 80129f8:	e7ec      	b.n	80129d4 <_free_r+0x28>
 80129fa:	461a      	mov	r2, r3
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	b10b      	cbz	r3, 8012a04 <_free_r+0x58>
 8012a00:	42a3      	cmp	r3, r4
 8012a02:	d9fa      	bls.n	80129fa <_free_r+0x4e>
 8012a04:	6811      	ldr	r1, [r2, #0]
 8012a06:	1855      	adds	r5, r2, r1
 8012a08:	42a5      	cmp	r5, r4
 8012a0a:	d10b      	bne.n	8012a24 <_free_r+0x78>
 8012a0c:	6824      	ldr	r4, [r4, #0]
 8012a0e:	4421      	add	r1, r4
 8012a10:	1854      	adds	r4, r2, r1
 8012a12:	42a3      	cmp	r3, r4
 8012a14:	6011      	str	r1, [r2, #0]
 8012a16:	d1dd      	bne.n	80129d4 <_free_r+0x28>
 8012a18:	681c      	ldr	r4, [r3, #0]
 8012a1a:	685b      	ldr	r3, [r3, #4]
 8012a1c:	6053      	str	r3, [r2, #4]
 8012a1e:	4421      	add	r1, r4
 8012a20:	6011      	str	r1, [r2, #0]
 8012a22:	e7d7      	b.n	80129d4 <_free_r+0x28>
 8012a24:	d902      	bls.n	8012a2c <_free_r+0x80>
 8012a26:	230c      	movs	r3, #12
 8012a28:	6003      	str	r3, [r0, #0]
 8012a2a:	e7d3      	b.n	80129d4 <_free_r+0x28>
 8012a2c:	6825      	ldr	r5, [r4, #0]
 8012a2e:	1961      	adds	r1, r4, r5
 8012a30:	428b      	cmp	r3, r1
 8012a32:	bf04      	itt	eq
 8012a34:	6819      	ldreq	r1, [r3, #0]
 8012a36:	685b      	ldreq	r3, [r3, #4]
 8012a38:	6063      	str	r3, [r4, #4]
 8012a3a:	bf04      	itt	eq
 8012a3c:	1949      	addeq	r1, r1, r5
 8012a3e:	6021      	streq	r1, [r4, #0]
 8012a40:	6054      	str	r4, [r2, #4]
 8012a42:	e7c7      	b.n	80129d4 <_free_r+0x28>
 8012a44:	b003      	add	sp, #12
 8012a46:	bd30      	pop	{r4, r5, pc}
 8012a48:	200003f8 	.word	0x200003f8

08012a4c <_malloc_r>:
 8012a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a4e:	1ccd      	adds	r5, r1, #3
 8012a50:	f025 0503 	bic.w	r5, r5, #3
 8012a54:	3508      	adds	r5, #8
 8012a56:	2d0c      	cmp	r5, #12
 8012a58:	bf38      	it	cc
 8012a5a:	250c      	movcc	r5, #12
 8012a5c:	2d00      	cmp	r5, #0
 8012a5e:	4606      	mov	r6, r0
 8012a60:	db01      	blt.n	8012a66 <_malloc_r+0x1a>
 8012a62:	42a9      	cmp	r1, r5
 8012a64:	d903      	bls.n	8012a6e <_malloc_r+0x22>
 8012a66:	230c      	movs	r3, #12
 8012a68:	6033      	str	r3, [r6, #0]
 8012a6a:	2000      	movs	r0, #0
 8012a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a6e:	f001 fd91 	bl	8014594 <__malloc_lock>
 8012a72:	4921      	ldr	r1, [pc, #132]	; (8012af8 <_malloc_r+0xac>)
 8012a74:	680a      	ldr	r2, [r1, #0]
 8012a76:	4614      	mov	r4, r2
 8012a78:	b99c      	cbnz	r4, 8012aa2 <_malloc_r+0x56>
 8012a7a:	4f20      	ldr	r7, [pc, #128]	; (8012afc <_malloc_r+0xb0>)
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	b923      	cbnz	r3, 8012a8a <_malloc_r+0x3e>
 8012a80:	4621      	mov	r1, r4
 8012a82:	4630      	mov	r0, r6
 8012a84:	f000 fcfe 	bl	8013484 <_sbrk_r>
 8012a88:	6038      	str	r0, [r7, #0]
 8012a8a:	4629      	mov	r1, r5
 8012a8c:	4630      	mov	r0, r6
 8012a8e:	f000 fcf9 	bl	8013484 <_sbrk_r>
 8012a92:	1c43      	adds	r3, r0, #1
 8012a94:	d123      	bne.n	8012ade <_malloc_r+0x92>
 8012a96:	230c      	movs	r3, #12
 8012a98:	6033      	str	r3, [r6, #0]
 8012a9a:	4630      	mov	r0, r6
 8012a9c:	f001 fd80 	bl	80145a0 <__malloc_unlock>
 8012aa0:	e7e3      	b.n	8012a6a <_malloc_r+0x1e>
 8012aa2:	6823      	ldr	r3, [r4, #0]
 8012aa4:	1b5b      	subs	r3, r3, r5
 8012aa6:	d417      	bmi.n	8012ad8 <_malloc_r+0x8c>
 8012aa8:	2b0b      	cmp	r3, #11
 8012aaa:	d903      	bls.n	8012ab4 <_malloc_r+0x68>
 8012aac:	6023      	str	r3, [r4, #0]
 8012aae:	441c      	add	r4, r3
 8012ab0:	6025      	str	r5, [r4, #0]
 8012ab2:	e004      	b.n	8012abe <_malloc_r+0x72>
 8012ab4:	6863      	ldr	r3, [r4, #4]
 8012ab6:	42a2      	cmp	r2, r4
 8012ab8:	bf0c      	ite	eq
 8012aba:	600b      	streq	r3, [r1, #0]
 8012abc:	6053      	strne	r3, [r2, #4]
 8012abe:	4630      	mov	r0, r6
 8012ac0:	f001 fd6e 	bl	80145a0 <__malloc_unlock>
 8012ac4:	f104 000b 	add.w	r0, r4, #11
 8012ac8:	1d23      	adds	r3, r4, #4
 8012aca:	f020 0007 	bic.w	r0, r0, #7
 8012ace:	1ac2      	subs	r2, r0, r3
 8012ad0:	d0cc      	beq.n	8012a6c <_malloc_r+0x20>
 8012ad2:	1a1b      	subs	r3, r3, r0
 8012ad4:	50a3      	str	r3, [r4, r2]
 8012ad6:	e7c9      	b.n	8012a6c <_malloc_r+0x20>
 8012ad8:	4622      	mov	r2, r4
 8012ada:	6864      	ldr	r4, [r4, #4]
 8012adc:	e7cc      	b.n	8012a78 <_malloc_r+0x2c>
 8012ade:	1cc4      	adds	r4, r0, #3
 8012ae0:	f024 0403 	bic.w	r4, r4, #3
 8012ae4:	42a0      	cmp	r0, r4
 8012ae6:	d0e3      	beq.n	8012ab0 <_malloc_r+0x64>
 8012ae8:	1a21      	subs	r1, r4, r0
 8012aea:	4630      	mov	r0, r6
 8012aec:	f000 fcca 	bl	8013484 <_sbrk_r>
 8012af0:	3001      	adds	r0, #1
 8012af2:	d1dd      	bne.n	8012ab0 <_malloc_r+0x64>
 8012af4:	e7cf      	b.n	8012a96 <_malloc_r+0x4a>
 8012af6:	bf00      	nop
 8012af8:	200003f8 	.word	0x200003f8
 8012afc:	200003fc 	.word	0x200003fc

08012b00 <__cvt>:
 8012b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b04:	ec55 4b10 	vmov	r4, r5, d0
 8012b08:	2d00      	cmp	r5, #0
 8012b0a:	460e      	mov	r6, r1
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	462b      	mov	r3, r5
 8012b10:	bfbb      	ittet	lt
 8012b12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012b16:	461d      	movlt	r5, r3
 8012b18:	2300      	movge	r3, #0
 8012b1a:	232d      	movlt	r3, #45	; 0x2d
 8012b1c:	700b      	strb	r3, [r1, #0]
 8012b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012b24:	4691      	mov	r9, r2
 8012b26:	f023 0820 	bic.w	r8, r3, #32
 8012b2a:	bfbc      	itt	lt
 8012b2c:	4622      	movlt	r2, r4
 8012b2e:	4614      	movlt	r4, r2
 8012b30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012b34:	d005      	beq.n	8012b42 <__cvt+0x42>
 8012b36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012b3a:	d100      	bne.n	8012b3e <__cvt+0x3e>
 8012b3c:	3601      	adds	r6, #1
 8012b3e:	2102      	movs	r1, #2
 8012b40:	e000      	b.n	8012b44 <__cvt+0x44>
 8012b42:	2103      	movs	r1, #3
 8012b44:	ab03      	add	r3, sp, #12
 8012b46:	9301      	str	r3, [sp, #4]
 8012b48:	ab02      	add	r3, sp, #8
 8012b4a:	9300      	str	r3, [sp, #0]
 8012b4c:	ec45 4b10 	vmov	d0, r4, r5
 8012b50:	4653      	mov	r3, sl
 8012b52:	4632      	mov	r2, r6
 8012b54:	f000 fe1c 	bl	8013790 <_dtoa_r>
 8012b58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012b5c:	4607      	mov	r7, r0
 8012b5e:	d102      	bne.n	8012b66 <__cvt+0x66>
 8012b60:	f019 0f01 	tst.w	r9, #1
 8012b64:	d022      	beq.n	8012bac <__cvt+0xac>
 8012b66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012b6a:	eb07 0906 	add.w	r9, r7, r6
 8012b6e:	d110      	bne.n	8012b92 <__cvt+0x92>
 8012b70:	783b      	ldrb	r3, [r7, #0]
 8012b72:	2b30      	cmp	r3, #48	; 0x30
 8012b74:	d10a      	bne.n	8012b8c <__cvt+0x8c>
 8012b76:	2200      	movs	r2, #0
 8012b78:	2300      	movs	r3, #0
 8012b7a:	4620      	mov	r0, r4
 8012b7c:	4629      	mov	r1, r5
 8012b7e:	f7ed ffb3 	bl	8000ae8 <__aeabi_dcmpeq>
 8012b82:	b918      	cbnz	r0, 8012b8c <__cvt+0x8c>
 8012b84:	f1c6 0601 	rsb	r6, r6, #1
 8012b88:	f8ca 6000 	str.w	r6, [sl]
 8012b8c:	f8da 3000 	ldr.w	r3, [sl]
 8012b90:	4499      	add	r9, r3
 8012b92:	2200      	movs	r2, #0
 8012b94:	2300      	movs	r3, #0
 8012b96:	4620      	mov	r0, r4
 8012b98:	4629      	mov	r1, r5
 8012b9a:	f7ed ffa5 	bl	8000ae8 <__aeabi_dcmpeq>
 8012b9e:	b108      	cbz	r0, 8012ba4 <__cvt+0xa4>
 8012ba0:	f8cd 900c 	str.w	r9, [sp, #12]
 8012ba4:	2230      	movs	r2, #48	; 0x30
 8012ba6:	9b03      	ldr	r3, [sp, #12]
 8012ba8:	454b      	cmp	r3, r9
 8012baa:	d307      	bcc.n	8012bbc <__cvt+0xbc>
 8012bac:	9b03      	ldr	r3, [sp, #12]
 8012bae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012bb0:	1bdb      	subs	r3, r3, r7
 8012bb2:	4638      	mov	r0, r7
 8012bb4:	6013      	str	r3, [r2, #0]
 8012bb6:	b004      	add	sp, #16
 8012bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bbc:	1c59      	adds	r1, r3, #1
 8012bbe:	9103      	str	r1, [sp, #12]
 8012bc0:	701a      	strb	r2, [r3, #0]
 8012bc2:	e7f0      	b.n	8012ba6 <__cvt+0xa6>

08012bc4 <__exponent>:
 8012bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	2900      	cmp	r1, #0
 8012bca:	bfb8      	it	lt
 8012bcc:	4249      	neglt	r1, r1
 8012bce:	f803 2b02 	strb.w	r2, [r3], #2
 8012bd2:	bfb4      	ite	lt
 8012bd4:	222d      	movlt	r2, #45	; 0x2d
 8012bd6:	222b      	movge	r2, #43	; 0x2b
 8012bd8:	2909      	cmp	r1, #9
 8012bda:	7042      	strb	r2, [r0, #1]
 8012bdc:	dd2a      	ble.n	8012c34 <__exponent+0x70>
 8012bde:	f10d 0407 	add.w	r4, sp, #7
 8012be2:	46a4      	mov	ip, r4
 8012be4:	270a      	movs	r7, #10
 8012be6:	46a6      	mov	lr, r4
 8012be8:	460a      	mov	r2, r1
 8012bea:	fb91 f6f7 	sdiv	r6, r1, r7
 8012bee:	fb07 1516 	mls	r5, r7, r6, r1
 8012bf2:	3530      	adds	r5, #48	; 0x30
 8012bf4:	2a63      	cmp	r2, #99	; 0x63
 8012bf6:	f104 34ff 	add.w	r4, r4, #4294967295
 8012bfa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012bfe:	4631      	mov	r1, r6
 8012c00:	dcf1      	bgt.n	8012be6 <__exponent+0x22>
 8012c02:	3130      	adds	r1, #48	; 0x30
 8012c04:	f1ae 0502 	sub.w	r5, lr, #2
 8012c08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012c0c:	1c44      	adds	r4, r0, #1
 8012c0e:	4629      	mov	r1, r5
 8012c10:	4561      	cmp	r1, ip
 8012c12:	d30a      	bcc.n	8012c2a <__exponent+0x66>
 8012c14:	f10d 0209 	add.w	r2, sp, #9
 8012c18:	eba2 020e 	sub.w	r2, r2, lr
 8012c1c:	4565      	cmp	r5, ip
 8012c1e:	bf88      	it	hi
 8012c20:	2200      	movhi	r2, #0
 8012c22:	4413      	add	r3, r2
 8012c24:	1a18      	subs	r0, r3, r0
 8012c26:	b003      	add	sp, #12
 8012c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012c32:	e7ed      	b.n	8012c10 <__exponent+0x4c>
 8012c34:	2330      	movs	r3, #48	; 0x30
 8012c36:	3130      	adds	r1, #48	; 0x30
 8012c38:	7083      	strb	r3, [r0, #2]
 8012c3a:	70c1      	strb	r1, [r0, #3]
 8012c3c:	1d03      	adds	r3, r0, #4
 8012c3e:	e7f1      	b.n	8012c24 <__exponent+0x60>

08012c40 <_printf_float>:
 8012c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c44:	ed2d 8b02 	vpush	{d8}
 8012c48:	b08d      	sub	sp, #52	; 0x34
 8012c4a:	460c      	mov	r4, r1
 8012c4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012c50:	4616      	mov	r6, r2
 8012c52:	461f      	mov	r7, r3
 8012c54:	4605      	mov	r5, r0
 8012c56:	f001 fc95 	bl	8014584 <_localeconv_r>
 8012c5a:	f8d0 a000 	ldr.w	sl, [r0]
 8012c5e:	4650      	mov	r0, sl
 8012c60:	f7ed fac0 	bl	80001e4 <strlen>
 8012c64:	2300      	movs	r3, #0
 8012c66:	930a      	str	r3, [sp, #40]	; 0x28
 8012c68:	6823      	ldr	r3, [r4, #0]
 8012c6a:	9305      	str	r3, [sp, #20]
 8012c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8012c70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012c74:	3307      	adds	r3, #7
 8012c76:	f023 0307 	bic.w	r3, r3, #7
 8012c7a:	f103 0208 	add.w	r2, r3, #8
 8012c7e:	f8c8 2000 	str.w	r2, [r8]
 8012c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012c8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012c8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012c92:	9307      	str	r3, [sp, #28]
 8012c94:	f8cd 8018 	str.w	r8, [sp, #24]
 8012c98:	ee08 0a10 	vmov	s16, r0
 8012c9c:	4b9f      	ldr	r3, [pc, #636]	; (8012f1c <_printf_float+0x2dc>)
 8012c9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ca6:	f7ed ff51 	bl	8000b4c <__aeabi_dcmpun>
 8012caa:	bb88      	cbnz	r0, 8012d10 <_printf_float+0xd0>
 8012cac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012cb0:	4b9a      	ldr	r3, [pc, #616]	; (8012f1c <_printf_float+0x2dc>)
 8012cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8012cb6:	f7ed ff2b 	bl	8000b10 <__aeabi_dcmple>
 8012cba:	bb48      	cbnz	r0, 8012d10 <_printf_float+0xd0>
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	4640      	mov	r0, r8
 8012cc2:	4649      	mov	r1, r9
 8012cc4:	f7ed ff1a 	bl	8000afc <__aeabi_dcmplt>
 8012cc8:	b110      	cbz	r0, 8012cd0 <_printf_float+0x90>
 8012cca:	232d      	movs	r3, #45	; 0x2d
 8012ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012cd0:	4b93      	ldr	r3, [pc, #588]	; (8012f20 <_printf_float+0x2e0>)
 8012cd2:	4894      	ldr	r0, [pc, #592]	; (8012f24 <_printf_float+0x2e4>)
 8012cd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012cd8:	bf94      	ite	ls
 8012cda:	4698      	movls	r8, r3
 8012cdc:	4680      	movhi	r8, r0
 8012cde:	2303      	movs	r3, #3
 8012ce0:	6123      	str	r3, [r4, #16]
 8012ce2:	9b05      	ldr	r3, [sp, #20]
 8012ce4:	f023 0204 	bic.w	r2, r3, #4
 8012ce8:	6022      	str	r2, [r4, #0]
 8012cea:	f04f 0900 	mov.w	r9, #0
 8012cee:	9700      	str	r7, [sp, #0]
 8012cf0:	4633      	mov	r3, r6
 8012cf2:	aa0b      	add	r2, sp, #44	; 0x2c
 8012cf4:	4621      	mov	r1, r4
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	f000 f9d8 	bl	80130ac <_printf_common>
 8012cfc:	3001      	adds	r0, #1
 8012cfe:	f040 8090 	bne.w	8012e22 <_printf_float+0x1e2>
 8012d02:	f04f 30ff 	mov.w	r0, #4294967295
 8012d06:	b00d      	add	sp, #52	; 0x34
 8012d08:	ecbd 8b02 	vpop	{d8}
 8012d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d10:	4642      	mov	r2, r8
 8012d12:	464b      	mov	r3, r9
 8012d14:	4640      	mov	r0, r8
 8012d16:	4649      	mov	r1, r9
 8012d18:	f7ed ff18 	bl	8000b4c <__aeabi_dcmpun>
 8012d1c:	b140      	cbz	r0, 8012d30 <_printf_float+0xf0>
 8012d1e:	464b      	mov	r3, r9
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	bfbc      	itt	lt
 8012d24:	232d      	movlt	r3, #45	; 0x2d
 8012d26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012d2a:	487f      	ldr	r0, [pc, #508]	; (8012f28 <_printf_float+0x2e8>)
 8012d2c:	4b7f      	ldr	r3, [pc, #508]	; (8012f2c <_printf_float+0x2ec>)
 8012d2e:	e7d1      	b.n	8012cd4 <_printf_float+0x94>
 8012d30:	6863      	ldr	r3, [r4, #4]
 8012d32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012d36:	9206      	str	r2, [sp, #24]
 8012d38:	1c5a      	adds	r2, r3, #1
 8012d3a:	d13f      	bne.n	8012dbc <_printf_float+0x17c>
 8012d3c:	2306      	movs	r3, #6
 8012d3e:	6063      	str	r3, [r4, #4]
 8012d40:	9b05      	ldr	r3, [sp, #20]
 8012d42:	6861      	ldr	r1, [r4, #4]
 8012d44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012d48:	2300      	movs	r3, #0
 8012d4a:	9303      	str	r3, [sp, #12]
 8012d4c:	ab0a      	add	r3, sp, #40	; 0x28
 8012d4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012d52:	ab09      	add	r3, sp, #36	; 0x24
 8012d54:	ec49 8b10 	vmov	d0, r8, r9
 8012d58:	9300      	str	r3, [sp, #0]
 8012d5a:	6022      	str	r2, [r4, #0]
 8012d5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012d60:	4628      	mov	r0, r5
 8012d62:	f7ff fecd 	bl	8012b00 <__cvt>
 8012d66:	9b06      	ldr	r3, [sp, #24]
 8012d68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d6a:	2b47      	cmp	r3, #71	; 0x47
 8012d6c:	4680      	mov	r8, r0
 8012d6e:	d108      	bne.n	8012d82 <_printf_float+0x142>
 8012d70:	1cc8      	adds	r0, r1, #3
 8012d72:	db02      	blt.n	8012d7a <_printf_float+0x13a>
 8012d74:	6863      	ldr	r3, [r4, #4]
 8012d76:	4299      	cmp	r1, r3
 8012d78:	dd41      	ble.n	8012dfe <_printf_float+0x1be>
 8012d7a:	f1ab 0b02 	sub.w	fp, fp, #2
 8012d7e:	fa5f fb8b 	uxtb.w	fp, fp
 8012d82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012d86:	d820      	bhi.n	8012dca <_printf_float+0x18a>
 8012d88:	3901      	subs	r1, #1
 8012d8a:	465a      	mov	r2, fp
 8012d8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012d90:	9109      	str	r1, [sp, #36]	; 0x24
 8012d92:	f7ff ff17 	bl	8012bc4 <__exponent>
 8012d96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d98:	1813      	adds	r3, r2, r0
 8012d9a:	2a01      	cmp	r2, #1
 8012d9c:	4681      	mov	r9, r0
 8012d9e:	6123      	str	r3, [r4, #16]
 8012da0:	dc02      	bgt.n	8012da8 <_printf_float+0x168>
 8012da2:	6822      	ldr	r2, [r4, #0]
 8012da4:	07d2      	lsls	r2, r2, #31
 8012da6:	d501      	bpl.n	8012dac <_printf_float+0x16c>
 8012da8:	3301      	adds	r3, #1
 8012daa:	6123      	str	r3, [r4, #16]
 8012dac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d09c      	beq.n	8012cee <_printf_float+0xae>
 8012db4:	232d      	movs	r3, #45	; 0x2d
 8012db6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012dba:	e798      	b.n	8012cee <_printf_float+0xae>
 8012dbc:	9a06      	ldr	r2, [sp, #24]
 8012dbe:	2a47      	cmp	r2, #71	; 0x47
 8012dc0:	d1be      	bne.n	8012d40 <_printf_float+0x100>
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d1bc      	bne.n	8012d40 <_printf_float+0x100>
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	e7b9      	b.n	8012d3e <_printf_float+0xfe>
 8012dca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012dce:	d118      	bne.n	8012e02 <_printf_float+0x1c2>
 8012dd0:	2900      	cmp	r1, #0
 8012dd2:	6863      	ldr	r3, [r4, #4]
 8012dd4:	dd0b      	ble.n	8012dee <_printf_float+0x1ae>
 8012dd6:	6121      	str	r1, [r4, #16]
 8012dd8:	b913      	cbnz	r3, 8012de0 <_printf_float+0x1a0>
 8012dda:	6822      	ldr	r2, [r4, #0]
 8012ddc:	07d0      	lsls	r0, r2, #31
 8012dde:	d502      	bpl.n	8012de6 <_printf_float+0x1a6>
 8012de0:	3301      	adds	r3, #1
 8012de2:	440b      	add	r3, r1
 8012de4:	6123      	str	r3, [r4, #16]
 8012de6:	65a1      	str	r1, [r4, #88]	; 0x58
 8012de8:	f04f 0900 	mov.w	r9, #0
 8012dec:	e7de      	b.n	8012dac <_printf_float+0x16c>
 8012dee:	b913      	cbnz	r3, 8012df6 <_printf_float+0x1b6>
 8012df0:	6822      	ldr	r2, [r4, #0]
 8012df2:	07d2      	lsls	r2, r2, #31
 8012df4:	d501      	bpl.n	8012dfa <_printf_float+0x1ba>
 8012df6:	3302      	adds	r3, #2
 8012df8:	e7f4      	b.n	8012de4 <_printf_float+0x1a4>
 8012dfa:	2301      	movs	r3, #1
 8012dfc:	e7f2      	b.n	8012de4 <_printf_float+0x1a4>
 8012dfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e04:	4299      	cmp	r1, r3
 8012e06:	db05      	blt.n	8012e14 <_printf_float+0x1d4>
 8012e08:	6823      	ldr	r3, [r4, #0]
 8012e0a:	6121      	str	r1, [r4, #16]
 8012e0c:	07d8      	lsls	r0, r3, #31
 8012e0e:	d5ea      	bpl.n	8012de6 <_printf_float+0x1a6>
 8012e10:	1c4b      	adds	r3, r1, #1
 8012e12:	e7e7      	b.n	8012de4 <_printf_float+0x1a4>
 8012e14:	2900      	cmp	r1, #0
 8012e16:	bfd4      	ite	le
 8012e18:	f1c1 0202 	rsble	r2, r1, #2
 8012e1c:	2201      	movgt	r2, #1
 8012e1e:	4413      	add	r3, r2
 8012e20:	e7e0      	b.n	8012de4 <_printf_float+0x1a4>
 8012e22:	6823      	ldr	r3, [r4, #0]
 8012e24:	055a      	lsls	r2, r3, #21
 8012e26:	d407      	bmi.n	8012e38 <_printf_float+0x1f8>
 8012e28:	6923      	ldr	r3, [r4, #16]
 8012e2a:	4642      	mov	r2, r8
 8012e2c:	4631      	mov	r1, r6
 8012e2e:	4628      	mov	r0, r5
 8012e30:	47b8      	blx	r7
 8012e32:	3001      	adds	r0, #1
 8012e34:	d12c      	bne.n	8012e90 <_printf_float+0x250>
 8012e36:	e764      	b.n	8012d02 <_printf_float+0xc2>
 8012e38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012e3c:	f240 80e0 	bls.w	8013000 <_printf_float+0x3c0>
 8012e40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012e44:	2200      	movs	r2, #0
 8012e46:	2300      	movs	r3, #0
 8012e48:	f7ed fe4e 	bl	8000ae8 <__aeabi_dcmpeq>
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	d034      	beq.n	8012eba <_printf_float+0x27a>
 8012e50:	4a37      	ldr	r2, [pc, #220]	; (8012f30 <_printf_float+0x2f0>)
 8012e52:	2301      	movs	r3, #1
 8012e54:	4631      	mov	r1, r6
 8012e56:	4628      	mov	r0, r5
 8012e58:	47b8      	blx	r7
 8012e5a:	3001      	adds	r0, #1
 8012e5c:	f43f af51 	beq.w	8012d02 <_printf_float+0xc2>
 8012e60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012e64:	429a      	cmp	r2, r3
 8012e66:	db02      	blt.n	8012e6e <_printf_float+0x22e>
 8012e68:	6823      	ldr	r3, [r4, #0]
 8012e6a:	07d8      	lsls	r0, r3, #31
 8012e6c:	d510      	bpl.n	8012e90 <_printf_float+0x250>
 8012e6e:	ee18 3a10 	vmov	r3, s16
 8012e72:	4652      	mov	r2, sl
 8012e74:	4631      	mov	r1, r6
 8012e76:	4628      	mov	r0, r5
 8012e78:	47b8      	blx	r7
 8012e7a:	3001      	adds	r0, #1
 8012e7c:	f43f af41 	beq.w	8012d02 <_printf_float+0xc2>
 8012e80:	f04f 0800 	mov.w	r8, #0
 8012e84:	f104 091a 	add.w	r9, r4, #26
 8012e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e8a:	3b01      	subs	r3, #1
 8012e8c:	4543      	cmp	r3, r8
 8012e8e:	dc09      	bgt.n	8012ea4 <_printf_float+0x264>
 8012e90:	6823      	ldr	r3, [r4, #0]
 8012e92:	079b      	lsls	r3, r3, #30
 8012e94:	f100 8105 	bmi.w	80130a2 <_printf_float+0x462>
 8012e98:	68e0      	ldr	r0, [r4, #12]
 8012e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e9c:	4298      	cmp	r0, r3
 8012e9e:	bfb8      	it	lt
 8012ea0:	4618      	movlt	r0, r3
 8012ea2:	e730      	b.n	8012d06 <_printf_float+0xc6>
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	464a      	mov	r2, r9
 8012ea8:	4631      	mov	r1, r6
 8012eaa:	4628      	mov	r0, r5
 8012eac:	47b8      	blx	r7
 8012eae:	3001      	adds	r0, #1
 8012eb0:	f43f af27 	beq.w	8012d02 <_printf_float+0xc2>
 8012eb4:	f108 0801 	add.w	r8, r8, #1
 8012eb8:	e7e6      	b.n	8012e88 <_printf_float+0x248>
 8012eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	dc39      	bgt.n	8012f34 <_printf_float+0x2f4>
 8012ec0:	4a1b      	ldr	r2, [pc, #108]	; (8012f30 <_printf_float+0x2f0>)
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	4631      	mov	r1, r6
 8012ec6:	4628      	mov	r0, r5
 8012ec8:	47b8      	blx	r7
 8012eca:	3001      	adds	r0, #1
 8012ecc:	f43f af19 	beq.w	8012d02 <_printf_float+0xc2>
 8012ed0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012ed4:	4313      	orrs	r3, r2
 8012ed6:	d102      	bne.n	8012ede <_printf_float+0x29e>
 8012ed8:	6823      	ldr	r3, [r4, #0]
 8012eda:	07d9      	lsls	r1, r3, #31
 8012edc:	d5d8      	bpl.n	8012e90 <_printf_float+0x250>
 8012ede:	ee18 3a10 	vmov	r3, s16
 8012ee2:	4652      	mov	r2, sl
 8012ee4:	4631      	mov	r1, r6
 8012ee6:	4628      	mov	r0, r5
 8012ee8:	47b8      	blx	r7
 8012eea:	3001      	adds	r0, #1
 8012eec:	f43f af09 	beq.w	8012d02 <_printf_float+0xc2>
 8012ef0:	f04f 0900 	mov.w	r9, #0
 8012ef4:	f104 0a1a 	add.w	sl, r4, #26
 8012ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012efa:	425b      	negs	r3, r3
 8012efc:	454b      	cmp	r3, r9
 8012efe:	dc01      	bgt.n	8012f04 <_printf_float+0x2c4>
 8012f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f02:	e792      	b.n	8012e2a <_printf_float+0x1ea>
 8012f04:	2301      	movs	r3, #1
 8012f06:	4652      	mov	r2, sl
 8012f08:	4631      	mov	r1, r6
 8012f0a:	4628      	mov	r0, r5
 8012f0c:	47b8      	blx	r7
 8012f0e:	3001      	adds	r0, #1
 8012f10:	f43f aef7 	beq.w	8012d02 <_printf_float+0xc2>
 8012f14:	f109 0901 	add.w	r9, r9, #1
 8012f18:	e7ee      	b.n	8012ef8 <_printf_float+0x2b8>
 8012f1a:	bf00      	nop
 8012f1c:	7fefffff 	.word	0x7fefffff
 8012f20:	080196b8 	.word	0x080196b8
 8012f24:	080196bc 	.word	0x080196bc
 8012f28:	080196c4 	.word	0x080196c4
 8012f2c:	080196c0 	.word	0x080196c0
 8012f30:	080196c8 	.word	0x080196c8
 8012f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012f38:	429a      	cmp	r2, r3
 8012f3a:	bfa8      	it	ge
 8012f3c:	461a      	movge	r2, r3
 8012f3e:	2a00      	cmp	r2, #0
 8012f40:	4691      	mov	r9, r2
 8012f42:	dc37      	bgt.n	8012fb4 <_printf_float+0x374>
 8012f44:	f04f 0b00 	mov.w	fp, #0
 8012f48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012f4c:	f104 021a 	add.w	r2, r4, #26
 8012f50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012f52:	9305      	str	r3, [sp, #20]
 8012f54:	eba3 0309 	sub.w	r3, r3, r9
 8012f58:	455b      	cmp	r3, fp
 8012f5a:	dc33      	bgt.n	8012fc4 <_printf_float+0x384>
 8012f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f60:	429a      	cmp	r2, r3
 8012f62:	db3b      	blt.n	8012fdc <_printf_float+0x39c>
 8012f64:	6823      	ldr	r3, [r4, #0]
 8012f66:	07da      	lsls	r2, r3, #31
 8012f68:	d438      	bmi.n	8012fdc <_printf_float+0x39c>
 8012f6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f6c:	9b05      	ldr	r3, [sp, #20]
 8012f6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f70:	1ad3      	subs	r3, r2, r3
 8012f72:	eba2 0901 	sub.w	r9, r2, r1
 8012f76:	4599      	cmp	r9, r3
 8012f78:	bfa8      	it	ge
 8012f7a:	4699      	movge	r9, r3
 8012f7c:	f1b9 0f00 	cmp.w	r9, #0
 8012f80:	dc35      	bgt.n	8012fee <_printf_float+0x3ae>
 8012f82:	f04f 0800 	mov.w	r8, #0
 8012f86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012f8a:	f104 0a1a 	add.w	sl, r4, #26
 8012f8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f92:	1a9b      	subs	r3, r3, r2
 8012f94:	eba3 0309 	sub.w	r3, r3, r9
 8012f98:	4543      	cmp	r3, r8
 8012f9a:	f77f af79 	ble.w	8012e90 <_printf_float+0x250>
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	4652      	mov	r2, sl
 8012fa2:	4631      	mov	r1, r6
 8012fa4:	4628      	mov	r0, r5
 8012fa6:	47b8      	blx	r7
 8012fa8:	3001      	adds	r0, #1
 8012faa:	f43f aeaa 	beq.w	8012d02 <_printf_float+0xc2>
 8012fae:	f108 0801 	add.w	r8, r8, #1
 8012fb2:	e7ec      	b.n	8012f8e <_printf_float+0x34e>
 8012fb4:	4613      	mov	r3, r2
 8012fb6:	4631      	mov	r1, r6
 8012fb8:	4642      	mov	r2, r8
 8012fba:	4628      	mov	r0, r5
 8012fbc:	47b8      	blx	r7
 8012fbe:	3001      	adds	r0, #1
 8012fc0:	d1c0      	bne.n	8012f44 <_printf_float+0x304>
 8012fc2:	e69e      	b.n	8012d02 <_printf_float+0xc2>
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	4631      	mov	r1, r6
 8012fc8:	4628      	mov	r0, r5
 8012fca:	9205      	str	r2, [sp, #20]
 8012fcc:	47b8      	blx	r7
 8012fce:	3001      	adds	r0, #1
 8012fd0:	f43f ae97 	beq.w	8012d02 <_printf_float+0xc2>
 8012fd4:	9a05      	ldr	r2, [sp, #20]
 8012fd6:	f10b 0b01 	add.w	fp, fp, #1
 8012fda:	e7b9      	b.n	8012f50 <_printf_float+0x310>
 8012fdc:	ee18 3a10 	vmov	r3, s16
 8012fe0:	4652      	mov	r2, sl
 8012fe2:	4631      	mov	r1, r6
 8012fe4:	4628      	mov	r0, r5
 8012fe6:	47b8      	blx	r7
 8012fe8:	3001      	adds	r0, #1
 8012fea:	d1be      	bne.n	8012f6a <_printf_float+0x32a>
 8012fec:	e689      	b.n	8012d02 <_printf_float+0xc2>
 8012fee:	9a05      	ldr	r2, [sp, #20]
 8012ff0:	464b      	mov	r3, r9
 8012ff2:	4442      	add	r2, r8
 8012ff4:	4631      	mov	r1, r6
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	47b8      	blx	r7
 8012ffa:	3001      	adds	r0, #1
 8012ffc:	d1c1      	bne.n	8012f82 <_printf_float+0x342>
 8012ffe:	e680      	b.n	8012d02 <_printf_float+0xc2>
 8013000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013002:	2a01      	cmp	r2, #1
 8013004:	dc01      	bgt.n	801300a <_printf_float+0x3ca>
 8013006:	07db      	lsls	r3, r3, #31
 8013008:	d538      	bpl.n	801307c <_printf_float+0x43c>
 801300a:	2301      	movs	r3, #1
 801300c:	4642      	mov	r2, r8
 801300e:	4631      	mov	r1, r6
 8013010:	4628      	mov	r0, r5
 8013012:	47b8      	blx	r7
 8013014:	3001      	adds	r0, #1
 8013016:	f43f ae74 	beq.w	8012d02 <_printf_float+0xc2>
 801301a:	ee18 3a10 	vmov	r3, s16
 801301e:	4652      	mov	r2, sl
 8013020:	4631      	mov	r1, r6
 8013022:	4628      	mov	r0, r5
 8013024:	47b8      	blx	r7
 8013026:	3001      	adds	r0, #1
 8013028:	f43f ae6b 	beq.w	8012d02 <_printf_float+0xc2>
 801302c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013030:	2200      	movs	r2, #0
 8013032:	2300      	movs	r3, #0
 8013034:	f7ed fd58 	bl	8000ae8 <__aeabi_dcmpeq>
 8013038:	b9d8      	cbnz	r0, 8013072 <_printf_float+0x432>
 801303a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801303c:	f108 0201 	add.w	r2, r8, #1
 8013040:	3b01      	subs	r3, #1
 8013042:	4631      	mov	r1, r6
 8013044:	4628      	mov	r0, r5
 8013046:	47b8      	blx	r7
 8013048:	3001      	adds	r0, #1
 801304a:	d10e      	bne.n	801306a <_printf_float+0x42a>
 801304c:	e659      	b.n	8012d02 <_printf_float+0xc2>
 801304e:	2301      	movs	r3, #1
 8013050:	4652      	mov	r2, sl
 8013052:	4631      	mov	r1, r6
 8013054:	4628      	mov	r0, r5
 8013056:	47b8      	blx	r7
 8013058:	3001      	adds	r0, #1
 801305a:	f43f ae52 	beq.w	8012d02 <_printf_float+0xc2>
 801305e:	f108 0801 	add.w	r8, r8, #1
 8013062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013064:	3b01      	subs	r3, #1
 8013066:	4543      	cmp	r3, r8
 8013068:	dcf1      	bgt.n	801304e <_printf_float+0x40e>
 801306a:	464b      	mov	r3, r9
 801306c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013070:	e6dc      	b.n	8012e2c <_printf_float+0x1ec>
 8013072:	f04f 0800 	mov.w	r8, #0
 8013076:	f104 0a1a 	add.w	sl, r4, #26
 801307a:	e7f2      	b.n	8013062 <_printf_float+0x422>
 801307c:	2301      	movs	r3, #1
 801307e:	4642      	mov	r2, r8
 8013080:	e7df      	b.n	8013042 <_printf_float+0x402>
 8013082:	2301      	movs	r3, #1
 8013084:	464a      	mov	r2, r9
 8013086:	4631      	mov	r1, r6
 8013088:	4628      	mov	r0, r5
 801308a:	47b8      	blx	r7
 801308c:	3001      	adds	r0, #1
 801308e:	f43f ae38 	beq.w	8012d02 <_printf_float+0xc2>
 8013092:	f108 0801 	add.w	r8, r8, #1
 8013096:	68e3      	ldr	r3, [r4, #12]
 8013098:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801309a:	1a5b      	subs	r3, r3, r1
 801309c:	4543      	cmp	r3, r8
 801309e:	dcf0      	bgt.n	8013082 <_printf_float+0x442>
 80130a0:	e6fa      	b.n	8012e98 <_printf_float+0x258>
 80130a2:	f04f 0800 	mov.w	r8, #0
 80130a6:	f104 0919 	add.w	r9, r4, #25
 80130aa:	e7f4      	b.n	8013096 <_printf_float+0x456>

080130ac <_printf_common>:
 80130ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130b0:	4616      	mov	r6, r2
 80130b2:	4699      	mov	r9, r3
 80130b4:	688a      	ldr	r2, [r1, #8]
 80130b6:	690b      	ldr	r3, [r1, #16]
 80130b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80130bc:	4293      	cmp	r3, r2
 80130be:	bfb8      	it	lt
 80130c0:	4613      	movlt	r3, r2
 80130c2:	6033      	str	r3, [r6, #0]
 80130c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80130c8:	4607      	mov	r7, r0
 80130ca:	460c      	mov	r4, r1
 80130cc:	b10a      	cbz	r2, 80130d2 <_printf_common+0x26>
 80130ce:	3301      	adds	r3, #1
 80130d0:	6033      	str	r3, [r6, #0]
 80130d2:	6823      	ldr	r3, [r4, #0]
 80130d4:	0699      	lsls	r1, r3, #26
 80130d6:	bf42      	ittt	mi
 80130d8:	6833      	ldrmi	r3, [r6, #0]
 80130da:	3302      	addmi	r3, #2
 80130dc:	6033      	strmi	r3, [r6, #0]
 80130de:	6825      	ldr	r5, [r4, #0]
 80130e0:	f015 0506 	ands.w	r5, r5, #6
 80130e4:	d106      	bne.n	80130f4 <_printf_common+0x48>
 80130e6:	f104 0a19 	add.w	sl, r4, #25
 80130ea:	68e3      	ldr	r3, [r4, #12]
 80130ec:	6832      	ldr	r2, [r6, #0]
 80130ee:	1a9b      	subs	r3, r3, r2
 80130f0:	42ab      	cmp	r3, r5
 80130f2:	dc26      	bgt.n	8013142 <_printf_common+0x96>
 80130f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80130f8:	1e13      	subs	r3, r2, #0
 80130fa:	6822      	ldr	r2, [r4, #0]
 80130fc:	bf18      	it	ne
 80130fe:	2301      	movne	r3, #1
 8013100:	0692      	lsls	r2, r2, #26
 8013102:	d42b      	bmi.n	801315c <_printf_common+0xb0>
 8013104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013108:	4649      	mov	r1, r9
 801310a:	4638      	mov	r0, r7
 801310c:	47c0      	blx	r8
 801310e:	3001      	adds	r0, #1
 8013110:	d01e      	beq.n	8013150 <_printf_common+0xa4>
 8013112:	6823      	ldr	r3, [r4, #0]
 8013114:	68e5      	ldr	r5, [r4, #12]
 8013116:	6832      	ldr	r2, [r6, #0]
 8013118:	f003 0306 	and.w	r3, r3, #6
 801311c:	2b04      	cmp	r3, #4
 801311e:	bf08      	it	eq
 8013120:	1aad      	subeq	r5, r5, r2
 8013122:	68a3      	ldr	r3, [r4, #8]
 8013124:	6922      	ldr	r2, [r4, #16]
 8013126:	bf0c      	ite	eq
 8013128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801312c:	2500      	movne	r5, #0
 801312e:	4293      	cmp	r3, r2
 8013130:	bfc4      	itt	gt
 8013132:	1a9b      	subgt	r3, r3, r2
 8013134:	18ed      	addgt	r5, r5, r3
 8013136:	2600      	movs	r6, #0
 8013138:	341a      	adds	r4, #26
 801313a:	42b5      	cmp	r5, r6
 801313c:	d11a      	bne.n	8013174 <_printf_common+0xc8>
 801313e:	2000      	movs	r0, #0
 8013140:	e008      	b.n	8013154 <_printf_common+0xa8>
 8013142:	2301      	movs	r3, #1
 8013144:	4652      	mov	r2, sl
 8013146:	4649      	mov	r1, r9
 8013148:	4638      	mov	r0, r7
 801314a:	47c0      	blx	r8
 801314c:	3001      	adds	r0, #1
 801314e:	d103      	bne.n	8013158 <_printf_common+0xac>
 8013150:	f04f 30ff 	mov.w	r0, #4294967295
 8013154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013158:	3501      	adds	r5, #1
 801315a:	e7c6      	b.n	80130ea <_printf_common+0x3e>
 801315c:	18e1      	adds	r1, r4, r3
 801315e:	1c5a      	adds	r2, r3, #1
 8013160:	2030      	movs	r0, #48	; 0x30
 8013162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013166:	4422      	add	r2, r4
 8013168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801316c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013170:	3302      	adds	r3, #2
 8013172:	e7c7      	b.n	8013104 <_printf_common+0x58>
 8013174:	2301      	movs	r3, #1
 8013176:	4622      	mov	r2, r4
 8013178:	4649      	mov	r1, r9
 801317a:	4638      	mov	r0, r7
 801317c:	47c0      	blx	r8
 801317e:	3001      	adds	r0, #1
 8013180:	d0e6      	beq.n	8013150 <_printf_common+0xa4>
 8013182:	3601      	adds	r6, #1
 8013184:	e7d9      	b.n	801313a <_printf_common+0x8e>
	...

08013188 <_printf_i>:
 8013188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801318c:	460c      	mov	r4, r1
 801318e:	4691      	mov	r9, r2
 8013190:	7e27      	ldrb	r7, [r4, #24]
 8013192:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013194:	2f78      	cmp	r7, #120	; 0x78
 8013196:	4680      	mov	r8, r0
 8013198:	469a      	mov	sl, r3
 801319a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801319e:	d807      	bhi.n	80131b0 <_printf_i+0x28>
 80131a0:	2f62      	cmp	r7, #98	; 0x62
 80131a2:	d80a      	bhi.n	80131ba <_printf_i+0x32>
 80131a4:	2f00      	cmp	r7, #0
 80131a6:	f000 80d8 	beq.w	801335a <_printf_i+0x1d2>
 80131aa:	2f58      	cmp	r7, #88	; 0x58
 80131ac:	f000 80a3 	beq.w	80132f6 <_printf_i+0x16e>
 80131b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80131b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80131b8:	e03a      	b.n	8013230 <_printf_i+0xa8>
 80131ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80131be:	2b15      	cmp	r3, #21
 80131c0:	d8f6      	bhi.n	80131b0 <_printf_i+0x28>
 80131c2:	a001      	add	r0, pc, #4	; (adr r0, 80131c8 <_printf_i+0x40>)
 80131c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80131c8:	08013221 	.word	0x08013221
 80131cc:	08013235 	.word	0x08013235
 80131d0:	080131b1 	.word	0x080131b1
 80131d4:	080131b1 	.word	0x080131b1
 80131d8:	080131b1 	.word	0x080131b1
 80131dc:	080131b1 	.word	0x080131b1
 80131e0:	08013235 	.word	0x08013235
 80131e4:	080131b1 	.word	0x080131b1
 80131e8:	080131b1 	.word	0x080131b1
 80131ec:	080131b1 	.word	0x080131b1
 80131f0:	080131b1 	.word	0x080131b1
 80131f4:	08013341 	.word	0x08013341
 80131f8:	08013265 	.word	0x08013265
 80131fc:	08013323 	.word	0x08013323
 8013200:	080131b1 	.word	0x080131b1
 8013204:	080131b1 	.word	0x080131b1
 8013208:	08013363 	.word	0x08013363
 801320c:	080131b1 	.word	0x080131b1
 8013210:	08013265 	.word	0x08013265
 8013214:	080131b1 	.word	0x080131b1
 8013218:	080131b1 	.word	0x080131b1
 801321c:	0801332b 	.word	0x0801332b
 8013220:	680b      	ldr	r3, [r1, #0]
 8013222:	1d1a      	adds	r2, r3, #4
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	600a      	str	r2, [r1, #0]
 8013228:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801322c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013230:	2301      	movs	r3, #1
 8013232:	e0a3      	b.n	801337c <_printf_i+0x1f4>
 8013234:	6825      	ldr	r5, [r4, #0]
 8013236:	6808      	ldr	r0, [r1, #0]
 8013238:	062e      	lsls	r6, r5, #24
 801323a:	f100 0304 	add.w	r3, r0, #4
 801323e:	d50a      	bpl.n	8013256 <_printf_i+0xce>
 8013240:	6805      	ldr	r5, [r0, #0]
 8013242:	600b      	str	r3, [r1, #0]
 8013244:	2d00      	cmp	r5, #0
 8013246:	da03      	bge.n	8013250 <_printf_i+0xc8>
 8013248:	232d      	movs	r3, #45	; 0x2d
 801324a:	426d      	negs	r5, r5
 801324c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013250:	485e      	ldr	r0, [pc, #376]	; (80133cc <_printf_i+0x244>)
 8013252:	230a      	movs	r3, #10
 8013254:	e019      	b.n	801328a <_printf_i+0x102>
 8013256:	f015 0f40 	tst.w	r5, #64	; 0x40
 801325a:	6805      	ldr	r5, [r0, #0]
 801325c:	600b      	str	r3, [r1, #0]
 801325e:	bf18      	it	ne
 8013260:	b22d      	sxthne	r5, r5
 8013262:	e7ef      	b.n	8013244 <_printf_i+0xbc>
 8013264:	680b      	ldr	r3, [r1, #0]
 8013266:	6825      	ldr	r5, [r4, #0]
 8013268:	1d18      	adds	r0, r3, #4
 801326a:	6008      	str	r0, [r1, #0]
 801326c:	0628      	lsls	r0, r5, #24
 801326e:	d501      	bpl.n	8013274 <_printf_i+0xec>
 8013270:	681d      	ldr	r5, [r3, #0]
 8013272:	e002      	b.n	801327a <_printf_i+0xf2>
 8013274:	0669      	lsls	r1, r5, #25
 8013276:	d5fb      	bpl.n	8013270 <_printf_i+0xe8>
 8013278:	881d      	ldrh	r5, [r3, #0]
 801327a:	4854      	ldr	r0, [pc, #336]	; (80133cc <_printf_i+0x244>)
 801327c:	2f6f      	cmp	r7, #111	; 0x6f
 801327e:	bf0c      	ite	eq
 8013280:	2308      	moveq	r3, #8
 8013282:	230a      	movne	r3, #10
 8013284:	2100      	movs	r1, #0
 8013286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801328a:	6866      	ldr	r6, [r4, #4]
 801328c:	60a6      	str	r6, [r4, #8]
 801328e:	2e00      	cmp	r6, #0
 8013290:	bfa2      	ittt	ge
 8013292:	6821      	ldrge	r1, [r4, #0]
 8013294:	f021 0104 	bicge.w	r1, r1, #4
 8013298:	6021      	strge	r1, [r4, #0]
 801329a:	b90d      	cbnz	r5, 80132a0 <_printf_i+0x118>
 801329c:	2e00      	cmp	r6, #0
 801329e:	d04d      	beq.n	801333c <_printf_i+0x1b4>
 80132a0:	4616      	mov	r6, r2
 80132a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80132a6:	fb03 5711 	mls	r7, r3, r1, r5
 80132aa:	5dc7      	ldrb	r7, [r0, r7]
 80132ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80132b0:	462f      	mov	r7, r5
 80132b2:	42bb      	cmp	r3, r7
 80132b4:	460d      	mov	r5, r1
 80132b6:	d9f4      	bls.n	80132a2 <_printf_i+0x11a>
 80132b8:	2b08      	cmp	r3, #8
 80132ba:	d10b      	bne.n	80132d4 <_printf_i+0x14c>
 80132bc:	6823      	ldr	r3, [r4, #0]
 80132be:	07df      	lsls	r7, r3, #31
 80132c0:	d508      	bpl.n	80132d4 <_printf_i+0x14c>
 80132c2:	6923      	ldr	r3, [r4, #16]
 80132c4:	6861      	ldr	r1, [r4, #4]
 80132c6:	4299      	cmp	r1, r3
 80132c8:	bfde      	ittt	le
 80132ca:	2330      	movle	r3, #48	; 0x30
 80132cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80132d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80132d4:	1b92      	subs	r2, r2, r6
 80132d6:	6122      	str	r2, [r4, #16]
 80132d8:	f8cd a000 	str.w	sl, [sp]
 80132dc:	464b      	mov	r3, r9
 80132de:	aa03      	add	r2, sp, #12
 80132e0:	4621      	mov	r1, r4
 80132e2:	4640      	mov	r0, r8
 80132e4:	f7ff fee2 	bl	80130ac <_printf_common>
 80132e8:	3001      	adds	r0, #1
 80132ea:	d14c      	bne.n	8013386 <_printf_i+0x1fe>
 80132ec:	f04f 30ff 	mov.w	r0, #4294967295
 80132f0:	b004      	add	sp, #16
 80132f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132f6:	4835      	ldr	r0, [pc, #212]	; (80133cc <_printf_i+0x244>)
 80132f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80132fc:	6823      	ldr	r3, [r4, #0]
 80132fe:	680e      	ldr	r6, [r1, #0]
 8013300:	061f      	lsls	r7, r3, #24
 8013302:	f856 5b04 	ldr.w	r5, [r6], #4
 8013306:	600e      	str	r6, [r1, #0]
 8013308:	d514      	bpl.n	8013334 <_printf_i+0x1ac>
 801330a:	07d9      	lsls	r1, r3, #31
 801330c:	bf44      	itt	mi
 801330e:	f043 0320 	orrmi.w	r3, r3, #32
 8013312:	6023      	strmi	r3, [r4, #0]
 8013314:	b91d      	cbnz	r5, 801331e <_printf_i+0x196>
 8013316:	6823      	ldr	r3, [r4, #0]
 8013318:	f023 0320 	bic.w	r3, r3, #32
 801331c:	6023      	str	r3, [r4, #0]
 801331e:	2310      	movs	r3, #16
 8013320:	e7b0      	b.n	8013284 <_printf_i+0xfc>
 8013322:	6823      	ldr	r3, [r4, #0]
 8013324:	f043 0320 	orr.w	r3, r3, #32
 8013328:	6023      	str	r3, [r4, #0]
 801332a:	2378      	movs	r3, #120	; 0x78
 801332c:	4828      	ldr	r0, [pc, #160]	; (80133d0 <_printf_i+0x248>)
 801332e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013332:	e7e3      	b.n	80132fc <_printf_i+0x174>
 8013334:	065e      	lsls	r6, r3, #25
 8013336:	bf48      	it	mi
 8013338:	b2ad      	uxthmi	r5, r5
 801333a:	e7e6      	b.n	801330a <_printf_i+0x182>
 801333c:	4616      	mov	r6, r2
 801333e:	e7bb      	b.n	80132b8 <_printf_i+0x130>
 8013340:	680b      	ldr	r3, [r1, #0]
 8013342:	6826      	ldr	r6, [r4, #0]
 8013344:	6960      	ldr	r0, [r4, #20]
 8013346:	1d1d      	adds	r5, r3, #4
 8013348:	600d      	str	r5, [r1, #0]
 801334a:	0635      	lsls	r5, r6, #24
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	d501      	bpl.n	8013354 <_printf_i+0x1cc>
 8013350:	6018      	str	r0, [r3, #0]
 8013352:	e002      	b.n	801335a <_printf_i+0x1d2>
 8013354:	0671      	lsls	r1, r6, #25
 8013356:	d5fb      	bpl.n	8013350 <_printf_i+0x1c8>
 8013358:	8018      	strh	r0, [r3, #0]
 801335a:	2300      	movs	r3, #0
 801335c:	6123      	str	r3, [r4, #16]
 801335e:	4616      	mov	r6, r2
 8013360:	e7ba      	b.n	80132d8 <_printf_i+0x150>
 8013362:	680b      	ldr	r3, [r1, #0]
 8013364:	1d1a      	adds	r2, r3, #4
 8013366:	600a      	str	r2, [r1, #0]
 8013368:	681e      	ldr	r6, [r3, #0]
 801336a:	6862      	ldr	r2, [r4, #4]
 801336c:	2100      	movs	r1, #0
 801336e:	4630      	mov	r0, r6
 8013370:	f7ec ff46 	bl	8000200 <memchr>
 8013374:	b108      	cbz	r0, 801337a <_printf_i+0x1f2>
 8013376:	1b80      	subs	r0, r0, r6
 8013378:	6060      	str	r0, [r4, #4]
 801337a:	6863      	ldr	r3, [r4, #4]
 801337c:	6123      	str	r3, [r4, #16]
 801337e:	2300      	movs	r3, #0
 8013380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013384:	e7a8      	b.n	80132d8 <_printf_i+0x150>
 8013386:	6923      	ldr	r3, [r4, #16]
 8013388:	4632      	mov	r2, r6
 801338a:	4649      	mov	r1, r9
 801338c:	4640      	mov	r0, r8
 801338e:	47d0      	blx	sl
 8013390:	3001      	adds	r0, #1
 8013392:	d0ab      	beq.n	80132ec <_printf_i+0x164>
 8013394:	6823      	ldr	r3, [r4, #0]
 8013396:	079b      	lsls	r3, r3, #30
 8013398:	d413      	bmi.n	80133c2 <_printf_i+0x23a>
 801339a:	68e0      	ldr	r0, [r4, #12]
 801339c:	9b03      	ldr	r3, [sp, #12]
 801339e:	4298      	cmp	r0, r3
 80133a0:	bfb8      	it	lt
 80133a2:	4618      	movlt	r0, r3
 80133a4:	e7a4      	b.n	80132f0 <_printf_i+0x168>
 80133a6:	2301      	movs	r3, #1
 80133a8:	4632      	mov	r2, r6
 80133aa:	4649      	mov	r1, r9
 80133ac:	4640      	mov	r0, r8
 80133ae:	47d0      	blx	sl
 80133b0:	3001      	adds	r0, #1
 80133b2:	d09b      	beq.n	80132ec <_printf_i+0x164>
 80133b4:	3501      	adds	r5, #1
 80133b6:	68e3      	ldr	r3, [r4, #12]
 80133b8:	9903      	ldr	r1, [sp, #12]
 80133ba:	1a5b      	subs	r3, r3, r1
 80133bc:	42ab      	cmp	r3, r5
 80133be:	dcf2      	bgt.n	80133a6 <_printf_i+0x21e>
 80133c0:	e7eb      	b.n	801339a <_printf_i+0x212>
 80133c2:	2500      	movs	r5, #0
 80133c4:	f104 0619 	add.w	r6, r4, #25
 80133c8:	e7f5      	b.n	80133b6 <_printf_i+0x22e>
 80133ca:	bf00      	nop
 80133cc:	080196ca 	.word	0x080196ca
 80133d0:	080196db 	.word	0x080196db

080133d4 <iprintf>:
 80133d4:	b40f      	push	{r0, r1, r2, r3}
 80133d6:	4b0a      	ldr	r3, [pc, #40]	; (8013400 <iprintf+0x2c>)
 80133d8:	b513      	push	{r0, r1, r4, lr}
 80133da:	681c      	ldr	r4, [r3, #0]
 80133dc:	b124      	cbz	r4, 80133e8 <iprintf+0x14>
 80133de:	69a3      	ldr	r3, [r4, #24]
 80133e0:	b913      	cbnz	r3, 80133e8 <iprintf+0x14>
 80133e2:	4620      	mov	r0, r4
 80133e4:	f001 f81e 	bl	8014424 <__sinit>
 80133e8:	ab05      	add	r3, sp, #20
 80133ea:	9a04      	ldr	r2, [sp, #16]
 80133ec:	68a1      	ldr	r1, [r4, #8]
 80133ee:	9301      	str	r3, [sp, #4]
 80133f0:	4620      	mov	r0, r4
 80133f2:	f001 fded 	bl	8014fd0 <_vfiprintf_r>
 80133f6:	b002      	add	sp, #8
 80133f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133fc:	b004      	add	sp, #16
 80133fe:	4770      	bx	lr
 8013400:	2000004c 	.word	0x2000004c

08013404 <rand>:
 8013404:	4b17      	ldr	r3, [pc, #92]	; (8013464 <rand+0x60>)
 8013406:	b510      	push	{r4, lr}
 8013408:	681c      	ldr	r4, [r3, #0]
 801340a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801340c:	b9b3      	cbnz	r3, 801343c <rand+0x38>
 801340e:	2018      	movs	r0, #24
 8013410:	f7ff fa7e 	bl	8012910 <malloc>
 8013414:	63a0      	str	r0, [r4, #56]	; 0x38
 8013416:	b928      	cbnz	r0, 8013424 <rand+0x20>
 8013418:	4602      	mov	r2, r0
 801341a:	4b13      	ldr	r3, [pc, #76]	; (8013468 <rand+0x64>)
 801341c:	4813      	ldr	r0, [pc, #76]	; (801346c <rand+0x68>)
 801341e:	214e      	movs	r1, #78	; 0x4e
 8013420:	f000 f90a 	bl	8013638 <__assert_func>
 8013424:	4a12      	ldr	r2, [pc, #72]	; (8013470 <rand+0x6c>)
 8013426:	4b13      	ldr	r3, [pc, #76]	; (8013474 <rand+0x70>)
 8013428:	e9c0 2300 	strd	r2, r3, [r0]
 801342c:	4b12      	ldr	r3, [pc, #72]	; (8013478 <rand+0x74>)
 801342e:	6083      	str	r3, [r0, #8]
 8013430:	230b      	movs	r3, #11
 8013432:	8183      	strh	r3, [r0, #12]
 8013434:	2201      	movs	r2, #1
 8013436:	2300      	movs	r3, #0
 8013438:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801343c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801343e:	480f      	ldr	r0, [pc, #60]	; (801347c <rand+0x78>)
 8013440:	690a      	ldr	r2, [r1, #16]
 8013442:	694b      	ldr	r3, [r1, #20]
 8013444:	4c0e      	ldr	r4, [pc, #56]	; (8013480 <rand+0x7c>)
 8013446:	4350      	muls	r0, r2
 8013448:	fb04 0003 	mla	r0, r4, r3, r0
 801344c:	fba2 3404 	umull	r3, r4, r2, r4
 8013450:	1c5a      	adds	r2, r3, #1
 8013452:	4404      	add	r4, r0
 8013454:	f144 0000 	adc.w	r0, r4, #0
 8013458:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801345c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013460:	bd10      	pop	{r4, pc}
 8013462:	bf00      	nop
 8013464:	2000004c 	.word	0x2000004c
 8013468:	080196ec 	.word	0x080196ec
 801346c:	08019703 	.word	0x08019703
 8013470:	abcd330e 	.word	0xabcd330e
 8013474:	e66d1234 	.word	0xe66d1234
 8013478:	0005deec 	.word	0x0005deec
 801347c:	5851f42d 	.word	0x5851f42d
 8013480:	4c957f2d 	.word	0x4c957f2d

08013484 <_sbrk_r>:
 8013484:	b538      	push	{r3, r4, r5, lr}
 8013486:	4d06      	ldr	r5, [pc, #24]	; (80134a0 <_sbrk_r+0x1c>)
 8013488:	2300      	movs	r3, #0
 801348a:	4604      	mov	r4, r0
 801348c:	4608      	mov	r0, r1
 801348e:	602b      	str	r3, [r5, #0]
 8013490:	f7f0 fe82 	bl	8004198 <_sbrk>
 8013494:	1c43      	adds	r3, r0, #1
 8013496:	d102      	bne.n	801349e <_sbrk_r+0x1a>
 8013498:	682b      	ldr	r3, [r5, #0]
 801349a:	b103      	cbz	r3, 801349e <_sbrk_r+0x1a>
 801349c:	6023      	str	r3, [r4, #0]
 801349e:	bd38      	pop	{r3, r4, r5, pc}
 80134a0:	200090f4 	.word	0x200090f4

080134a4 <siprintf>:
 80134a4:	b40e      	push	{r1, r2, r3}
 80134a6:	b500      	push	{lr}
 80134a8:	b09c      	sub	sp, #112	; 0x70
 80134aa:	ab1d      	add	r3, sp, #116	; 0x74
 80134ac:	9002      	str	r0, [sp, #8]
 80134ae:	9006      	str	r0, [sp, #24]
 80134b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80134b4:	4809      	ldr	r0, [pc, #36]	; (80134dc <siprintf+0x38>)
 80134b6:	9107      	str	r1, [sp, #28]
 80134b8:	9104      	str	r1, [sp, #16]
 80134ba:	4909      	ldr	r1, [pc, #36]	; (80134e0 <siprintf+0x3c>)
 80134bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80134c0:	9105      	str	r1, [sp, #20]
 80134c2:	6800      	ldr	r0, [r0, #0]
 80134c4:	9301      	str	r3, [sp, #4]
 80134c6:	a902      	add	r1, sp, #8
 80134c8:	f001 fc58 	bl	8014d7c <_svfiprintf_r>
 80134cc:	9b02      	ldr	r3, [sp, #8]
 80134ce:	2200      	movs	r2, #0
 80134d0:	701a      	strb	r2, [r3, #0]
 80134d2:	b01c      	add	sp, #112	; 0x70
 80134d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80134d8:	b003      	add	sp, #12
 80134da:	4770      	bx	lr
 80134dc:	2000004c 	.word	0x2000004c
 80134e0:	ffff0208 	.word	0xffff0208

080134e4 <strcpy>:
 80134e4:	4603      	mov	r3, r0
 80134e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134ea:	f803 2b01 	strb.w	r2, [r3], #1
 80134ee:	2a00      	cmp	r2, #0
 80134f0:	d1f9      	bne.n	80134e6 <strcpy+0x2>
 80134f2:	4770      	bx	lr

080134f4 <strncpy>:
 80134f4:	b510      	push	{r4, lr}
 80134f6:	3901      	subs	r1, #1
 80134f8:	4603      	mov	r3, r0
 80134fa:	b132      	cbz	r2, 801350a <strncpy+0x16>
 80134fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013500:	f803 4b01 	strb.w	r4, [r3], #1
 8013504:	3a01      	subs	r2, #1
 8013506:	2c00      	cmp	r4, #0
 8013508:	d1f7      	bne.n	80134fa <strncpy+0x6>
 801350a:	441a      	add	r2, r3
 801350c:	2100      	movs	r1, #0
 801350e:	4293      	cmp	r3, r2
 8013510:	d100      	bne.n	8013514 <strncpy+0x20>
 8013512:	bd10      	pop	{r4, pc}
 8013514:	f803 1b01 	strb.w	r1, [r3], #1
 8013518:	e7f9      	b.n	801350e <strncpy+0x1a>
	...

0801351c <_strtol_l.isra.0>:
 801351c:	2b01      	cmp	r3, #1
 801351e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013522:	d001      	beq.n	8013528 <_strtol_l.isra.0+0xc>
 8013524:	2b24      	cmp	r3, #36	; 0x24
 8013526:	d906      	bls.n	8013536 <_strtol_l.isra.0+0x1a>
 8013528:	f000 ff1e 	bl	8014368 <__errno>
 801352c:	2316      	movs	r3, #22
 801352e:	6003      	str	r3, [r0, #0]
 8013530:	2000      	movs	r0, #0
 8013532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013536:	4f3a      	ldr	r7, [pc, #232]	; (8013620 <_strtol_l.isra.0+0x104>)
 8013538:	468e      	mov	lr, r1
 801353a:	4676      	mov	r6, lr
 801353c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013540:	5de5      	ldrb	r5, [r4, r7]
 8013542:	f015 0508 	ands.w	r5, r5, #8
 8013546:	d1f8      	bne.n	801353a <_strtol_l.isra.0+0x1e>
 8013548:	2c2d      	cmp	r4, #45	; 0x2d
 801354a:	d134      	bne.n	80135b6 <_strtol_l.isra.0+0x9a>
 801354c:	f89e 4000 	ldrb.w	r4, [lr]
 8013550:	f04f 0801 	mov.w	r8, #1
 8013554:	f106 0e02 	add.w	lr, r6, #2
 8013558:	2b00      	cmp	r3, #0
 801355a:	d05c      	beq.n	8013616 <_strtol_l.isra.0+0xfa>
 801355c:	2b10      	cmp	r3, #16
 801355e:	d10c      	bne.n	801357a <_strtol_l.isra.0+0x5e>
 8013560:	2c30      	cmp	r4, #48	; 0x30
 8013562:	d10a      	bne.n	801357a <_strtol_l.isra.0+0x5e>
 8013564:	f89e 4000 	ldrb.w	r4, [lr]
 8013568:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801356c:	2c58      	cmp	r4, #88	; 0x58
 801356e:	d14d      	bne.n	801360c <_strtol_l.isra.0+0xf0>
 8013570:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013574:	2310      	movs	r3, #16
 8013576:	f10e 0e02 	add.w	lr, lr, #2
 801357a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801357e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013582:	2600      	movs	r6, #0
 8013584:	fbbc f9f3 	udiv	r9, ip, r3
 8013588:	4635      	mov	r5, r6
 801358a:	fb03 ca19 	mls	sl, r3, r9, ip
 801358e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013592:	2f09      	cmp	r7, #9
 8013594:	d818      	bhi.n	80135c8 <_strtol_l.isra.0+0xac>
 8013596:	463c      	mov	r4, r7
 8013598:	42a3      	cmp	r3, r4
 801359a:	dd24      	ble.n	80135e6 <_strtol_l.isra.0+0xca>
 801359c:	2e00      	cmp	r6, #0
 801359e:	db1f      	blt.n	80135e0 <_strtol_l.isra.0+0xc4>
 80135a0:	45a9      	cmp	r9, r5
 80135a2:	d31d      	bcc.n	80135e0 <_strtol_l.isra.0+0xc4>
 80135a4:	d101      	bne.n	80135aa <_strtol_l.isra.0+0x8e>
 80135a6:	45a2      	cmp	sl, r4
 80135a8:	db1a      	blt.n	80135e0 <_strtol_l.isra.0+0xc4>
 80135aa:	fb05 4503 	mla	r5, r5, r3, r4
 80135ae:	2601      	movs	r6, #1
 80135b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80135b4:	e7eb      	b.n	801358e <_strtol_l.isra.0+0x72>
 80135b6:	2c2b      	cmp	r4, #43	; 0x2b
 80135b8:	bf08      	it	eq
 80135ba:	f89e 4000 	ldrbeq.w	r4, [lr]
 80135be:	46a8      	mov	r8, r5
 80135c0:	bf08      	it	eq
 80135c2:	f106 0e02 	addeq.w	lr, r6, #2
 80135c6:	e7c7      	b.n	8013558 <_strtol_l.isra.0+0x3c>
 80135c8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80135cc:	2f19      	cmp	r7, #25
 80135ce:	d801      	bhi.n	80135d4 <_strtol_l.isra.0+0xb8>
 80135d0:	3c37      	subs	r4, #55	; 0x37
 80135d2:	e7e1      	b.n	8013598 <_strtol_l.isra.0+0x7c>
 80135d4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80135d8:	2f19      	cmp	r7, #25
 80135da:	d804      	bhi.n	80135e6 <_strtol_l.isra.0+0xca>
 80135dc:	3c57      	subs	r4, #87	; 0x57
 80135de:	e7db      	b.n	8013598 <_strtol_l.isra.0+0x7c>
 80135e0:	f04f 36ff 	mov.w	r6, #4294967295
 80135e4:	e7e4      	b.n	80135b0 <_strtol_l.isra.0+0x94>
 80135e6:	2e00      	cmp	r6, #0
 80135e8:	da05      	bge.n	80135f6 <_strtol_l.isra.0+0xda>
 80135ea:	2322      	movs	r3, #34	; 0x22
 80135ec:	6003      	str	r3, [r0, #0]
 80135ee:	4665      	mov	r5, ip
 80135f0:	b942      	cbnz	r2, 8013604 <_strtol_l.isra.0+0xe8>
 80135f2:	4628      	mov	r0, r5
 80135f4:	e79d      	b.n	8013532 <_strtol_l.isra.0+0x16>
 80135f6:	f1b8 0f00 	cmp.w	r8, #0
 80135fa:	d000      	beq.n	80135fe <_strtol_l.isra.0+0xe2>
 80135fc:	426d      	negs	r5, r5
 80135fe:	2a00      	cmp	r2, #0
 8013600:	d0f7      	beq.n	80135f2 <_strtol_l.isra.0+0xd6>
 8013602:	b10e      	cbz	r6, 8013608 <_strtol_l.isra.0+0xec>
 8013604:	f10e 31ff 	add.w	r1, lr, #4294967295
 8013608:	6011      	str	r1, [r2, #0]
 801360a:	e7f2      	b.n	80135f2 <_strtol_l.isra.0+0xd6>
 801360c:	2430      	movs	r4, #48	; 0x30
 801360e:	2b00      	cmp	r3, #0
 8013610:	d1b3      	bne.n	801357a <_strtol_l.isra.0+0x5e>
 8013612:	2308      	movs	r3, #8
 8013614:	e7b1      	b.n	801357a <_strtol_l.isra.0+0x5e>
 8013616:	2c30      	cmp	r4, #48	; 0x30
 8013618:	d0a4      	beq.n	8013564 <_strtol_l.isra.0+0x48>
 801361a:	230a      	movs	r3, #10
 801361c:	e7ad      	b.n	801357a <_strtol_l.isra.0+0x5e>
 801361e:	bf00      	nop
 8013620:	080195b3 	.word	0x080195b3

08013624 <strtol>:
 8013624:	4613      	mov	r3, r2
 8013626:	460a      	mov	r2, r1
 8013628:	4601      	mov	r1, r0
 801362a:	4802      	ldr	r0, [pc, #8]	; (8013634 <strtol+0x10>)
 801362c:	6800      	ldr	r0, [r0, #0]
 801362e:	f7ff bf75 	b.w	801351c <_strtol_l.isra.0>
 8013632:	bf00      	nop
 8013634:	2000004c 	.word	0x2000004c

08013638 <__assert_func>:
 8013638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801363a:	4614      	mov	r4, r2
 801363c:	461a      	mov	r2, r3
 801363e:	4b09      	ldr	r3, [pc, #36]	; (8013664 <__assert_func+0x2c>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	4605      	mov	r5, r0
 8013644:	68d8      	ldr	r0, [r3, #12]
 8013646:	b14c      	cbz	r4, 801365c <__assert_func+0x24>
 8013648:	4b07      	ldr	r3, [pc, #28]	; (8013668 <__assert_func+0x30>)
 801364a:	9100      	str	r1, [sp, #0]
 801364c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013650:	4906      	ldr	r1, [pc, #24]	; (801366c <__assert_func+0x34>)
 8013652:	462b      	mov	r3, r5
 8013654:	f000 ff64 	bl	8014520 <fiprintf>
 8013658:	f001 ff00 	bl	801545c <abort>
 801365c:	4b04      	ldr	r3, [pc, #16]	; (8013670 <__assert_func+0x38>)
 801365e:	461c      	mov	r4, r3
 8013660:	e7f3      	b.n	801364a <__assert_func+0x12>
 8013662:	bf00      	nop
 8013664:	2000004c 	.word	0x2000004c
 8013668:	08019762 	.word	0x08019762
 801366c:	0801976f 	.word	0x0801976f
 8013670:	0801979d 	.word	0x0801979d

08013674 <quorem>:
 8013674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013678:	6903      	ldr	r3, [r0, #16]
 801367a:	690c      	ldr	r4, [r1, #16]
 801367c:	42a3      	cmp	r3, r4
 801367e:	4607      	mov	r7, r0
 8013680:	f2c0 8081 	blt.w	8013786 <quorem+0x112>
 8013684:	3c01      	subs	r4, #1
 8013686:	f101 0814 	add.w	r8, r1, #20
 801368a:	f100 0514 	add.w	r5, r0, #20
 801368e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013692:	9301      	str	r3, [sp, #4]
 8013694:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013698:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801369c:	3301      	adds	r3, #1
 801369e:	429a      	cmp	r2, r3
 80136a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80136a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80136a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80136ac:	d331      	bcc.n	8013712 <quorem+0x9e>
 80136ae:	f04f 0e00 	mov.w	lr, #0
 80136b2:	4640      	mov	r0, r8
 80136b4:	46ac      	mov	ip, r5
 80136b6:	46f2      	mov	sl, lr
 80136b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80136bc:	b293      	uxth	r3, r2
 80136be:	fb06 e303 	mla	r3, r6, r3, lr
 80136c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80136c6:	b29b      	uxth	r3, r3
 80136c8:	ebaa 0303 	sub.w	r3, sl, r3
 80136cc:	0c12      	lsrs	r2, r2, #16
 80136ce:	f8dc a000 	ldr.w	sl, [ip]
 80136d2:	fb06 e202 	mla	r2, r6, r2, lr
 80136d6:	fa13 f38a 	uxtah	r3, r3, sl
 80136da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80136de:	fa1f fa82 	uxth.w	sl, r2
 80136e2:	f8dc 2000 	ldr.w	r2, [ip]
 80136e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80136ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80136ee:	b29b      	uxth	r3, r3
 80136f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80136f4:	4581      	cmp	r9, r0
 80136f6:	f84c 3b04 	str.w	r3, [ip], #4
 80136fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80136fe:	d2db      	bcs.n	80136b8 <quorem+0x44>
 8013700:	f855 300b 	ldr.w	r3, [r5, fp]
 8013704:	b92b      	cbnz	r3, 8013712 <quorem+0x9e>
 8013706:	9b01      	ldr	r3, [sp, #4]
 8013708:	3b04      	subs	r3, #4
 801370a:	429d      	cmp	r5, r3
 801370c:	461a      	mov	r2, r3
 801370e:	d32e      	bcc.n	801376e <quorem+0xfa>
 8013710:	613c      	str	r4, [r7, #16]
 8013712:	4638      	mov	r0, r7
 8013714:	f001 f9c8 	bl	8014aa8 <__mcmp>
 8013718:	2800      	cmp	r0, #0
 801371a:	db24      	blt.n	8013766 <quorem+0xf2>
 801371c:	3601      	adds	r6, #1
 801371e:	4628      	mov	r0, r5
 8013720:	f04f 0c00 	mov.w	ip, #0
 8013724:	f858 2b04 	ldr.w	r2, [r8], #4
 8013728:	f8d0 e000 	ldr.w	lr, [r0]
 801372c:	b293      	uxth	r3, r2
 801372e:	ebac 0303 	sub.w	r3, ip, r3
 8013732:	0c12      	lsrs	r2, r2, #16
 8013734:	fa13 f38e 	uxtah	r3, r3, lr
 8013738:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801373c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013740:	b29b      	uxth	r3, r3
 8013742:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013746:	45c1      	cmp	r9, r8
 8013748:	f840 3b04 	str.w	r3, [r0], #4
 801374c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013750:	d2e8      	bcs.n	8013724 <quorem+0xb0>
 8013752:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013756:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801375a:	b922      	cbnz	r2, 8013766 <quorem+0xf2>
 801375c:	3b04      	subs	r3, #4
 801375e:	429d      	cmp	r5, r3
 8013760:	461a      	mov	r2, r3
 8013762:	d30a      	bcc.n	801377a <quorem+0x106>
 8013764:	613c      	str	r4, [r7, #16]
 8013766:	4630      	mov	r0, r6
 8013768:	b003      	add	sp, #12
 801376a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801376e:	6812      	ldr	r2, [r2, #0]
 8013770:	3b04      	subs	r3, #4
 8013772:	2a00      	cmp	r2, #0
 8013774:	d1cc      	bne.n	8013710 <quorem+0x9c>
 8013776:	3c01      	subs	r4, #1
 8013778:	e7c7      	b.n	801370a <quorem+0x96>
 801377a:	6812      	ldr	r2, [r2, #0]
 801377c:	3b04      	subs	r3, #4
 801377e:	2a00      	cmp	r2, #0
 8013780:	d1f0      	bne.n	8013764 <quorem+0xf0>
 8013782:	3c01      	subs	r4, #1
 8013784:	e7eb      	b.n	801375e <quorem+0xea>
 8013786:	2000      	movs	r0, #0
 8013788:	e7ee      	b.n	8013768 <quorem+0xf4>
 801378a:	0000      	movs	r0, r0
 801378c:	0000      	movs	r0, r0
	...

08013790 <_dtoa_r>:
 8013790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013794:	ed2d 8b02 	vpush	{d8}
 8013798:	ec57 6b10 	vmov	r6, r7, d0
 801379c:	b095      	sub	sp, #84	; 0x54
 801379e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80137a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80137a4:	9105      	str	r1, [sp, #20]
 80137a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80137aa:	4604      	mov	r4, r0
 80137ac:	9209      	str	r2, [sp, #36]	; 0x24
 80137ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80137b0:	b975      	cbnz	r5, 80137d0 <_dtoa_r+0x40>
 80137b2:	2010      	movs	r0, #16
 80137b4:	f7ff f8ac 	bl	8012910 <malloc>
 80137b8:	4602      	mov	r2, r0
 80137ba:	6260      	str	r0, [r4, #36]	; 0x24
 80137bc:	b920      	cbnz	r0, 80137c8 <_dtoa_r+0x38>
 80137be:	4bb2      	ldr	r3, [pc, #712]	; (8013a88 <_dtoa_r+0x2f8>)
 80137c0:	21ea      	movs	r1, #234	; 0xea
 80137c2:	48b2      	ldr	r0, [pc, #712]	; (8013a8c <_dtoa_r+0x2fc>)
 80137c4:	f7ff ff38 	bl	8013638 <__assert_func>
 80137c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80137cc:	6005      	str	r5, [r0, #0]
 80137ce:	60c5      	str	r5, [r0, #12]
 80137d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137d2:	6819      	ldr	r1, [r3, #0]
 80137d4:	b151      	cbz	r1, 80137ec <_dtoa_r+0x5c>
 80137d6:	685a      	ldr	r2, [r3, #4]
 80137d8:	604a      	str	r2, [r1, #4]
 80137da:	2301      	movs	r3, #1
 80137dc:	4093      	lsls	r3, r2
 80137de:	608b      	str	r3, [r1, #8]
 80137e0:	4620      	mov	r0, r4
 80137e2:	f000 ff23 	bl	801462c <_Bfree>
 80137e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137e8:	2200      	movs	r2, #0
 80137ea:	601a      	str	r2, [r3, #0]
 80137ec:	1e3b      	subs	r3, r7, #0
 80137ee:	bfb9      	ittee	lt
 80137f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80137f4:	9303      	strlt	r3, [sp, #12]
 80137f6:	2300      	movge	r3, #0
 80137f8:	f8c8 3000 	strge.w	r3, [r8]
 80137fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013800:	4ba3      	ldr	r3, [pc, #652]	; (8013a90 <_dtoa_r+0x300>)
 8013802:	bfbc      	itt	lt
 8013804:	2201      	movlt	r2, #1
 8013806:	f8c8 2000 	strlt.w	r2, [r8]
 801380a:	ea33 0309 	bics.w	r3, r3, r9
 801380e:	d11b      	bne.n	8013848 <_dtoa_r+0xb8>
 8013810:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013812:	f242 730f 	movw	r3, #9999	; 0x270f
 8013816:	6013      	str	r3, [r2, #0]
 8013818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801381c:	4333      	orrs	r3, r6
 801381e:	f000 857a 	beq.w	8014316 <_dtoa_r+0xb86>
 8013822:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013824:	b963      	cbnz	r3, 8013840 <_dtoa_r+0xb0>
 8013826:	4b9b      	ldr	r3, [pc, #620]	; (8013a94 <_dtoa_r+0x304>)
 8013828:	e024      	b.n	8013874 <_dtoa_r+0xe4>
 801382a:	4b9b      	ldr	r3, [pc, #620]	; (8013a98 <_dtoa_r+0x308>)
 801382c:	9300      	str	r3, [sp, #0]
 801382e:	3308      	adds	r3, #8
 8013830:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013832:	6013      	str	r3, [r2, #0]
 8013834:	9800      	ldr	r0, [sp, #0]
 8013836:	b015      	add	sp, #84	; 0x54
 8013838:	ecbd 8b02 	vpop	{d8}
 801383c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013840:	4b94      	ldr	r3, [pc, #592]	; (8013a94 <_dtoa_r+0x304>)
 8013842:	9300      	str	r3, [sp, #0]
 8013844:	3303      	adds	r3, #3
 8013846:	e7f3      	b.n	8013830 <_dtoa_r+0xa0>
 8013848:	ed9d 7b02 	vldr	d7, [sp, #8]
 801384c:	2200      	movs	r2, #0
 801384e:	ec51 0b17 	vmov	r0, r1, d7
 8013852:	2300      	movs	r3, #0
 8013854:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013858:	f7ed f946 	bl	8000ae8 <__aeabi_dcmpeq>
 801385c:	4680      	mov	r8, r0
 801385e:	b158      	cbz	r0, 8013878 <_dtoa_r+0xe8>
 8013860:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013862:	2301      	movs	r3, #1
 8013864:	6013      	str	r3, [r2, #0]
 8013866:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013868:	2b00      	cmp	r3, #0
 801386a:	f000 8551 	beq.w	8014310 <_dtoa_r+0xb80>
 801386e:	488b      	ldr	r0, [pc, #556]	; (8013a9c <_dtoa_r+0x30c>)
 8013870:	6018      	str	r0, [r3, #0]
 8013872:	1e43      	subs	r3, r0, #1
 8013874:	9300      	str	r3, [sp, #0]
 8013876:	e7dd      	b.n	8013834 <_dtoa_r+0xa4>
 8013878:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801387c:	aa12      	add	r2, sp, #72	; 0x48
 801387e:	a913      	add	r1, sp, #76	; 0x4c
 8013880:	4620      	mov	r0, r4
 8013882:	f001 f9b5 	bl	8014bf0 <__d2b>
 8013886:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801388a:	4683      	mov	fp, r0
 801388c:	2d00      	cmp	r5, #0
 801388e:	d07c      	beq.n	801398a <_dtoa_r+0x1fa>
 8013890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013892:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801389a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801389e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80138a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80138a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80138aa:	4b7d      	ldr	r3, [pc, #500]	; (8013aa0 <_dtoa_r+0x310>)
 80138ac:	2200      	movs	r2, #0
 80138ae:	4630      	mov	r0, r6
 80138b0:	4639      	mov	r1, r7
 80138b2:	f7ec fcf9 	bl	80002a8 <__aeabi_dsub>
 80138b6:	a36e      	add	r3, pc, #440	; (adr r3, 8013a70 <_dtoa_r+0x2e0>)
 80138b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138bc:	f7ec feac 	bl	8000618 <__aeabi_dmul>
 80138c0:	a36d      	add	r3, pc, #436	; (adr r3, 8013a78 <_dtoa_r+0x2e8>)
 80138c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138c6:	f7ec fcf1 	bl	80002ac <__adddf3>
 80138ca:	4606      	mov	r6, r0
 80138cc:	4628      	mov	r0, r5
 80138ce:	460f      	mov	r7, r1
 80138d0:	f7ec fe38 	bl	8000544 <__aeabi_i2d>
 80138d4:	a36a      	add	r3, pc, #424	; (adr r3, 8013a80 <_dtoa_r+0x2f0>)
 80138d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138da:	f7ec fe9d 	bl	8000618 <__aeabi_dmul>
 80138de:	4602      	mov	r2, r0
 80138e0:	460b      	mov	r3, r1
 80138e2:	4630      	mov	r0, r6
 80138e4:	4639      	mov	r1, r7
 80138e6:	f7ec fce1 	bl	80002ac <__adddf3>
 80138ea:	4606      	mov	r6, r0
 80138ec:	460f      	mov	r7, r1
 80138ee:	f7ed f943 	bl	8000b78 <__aeabi_d2iz>
 80138f2:	2200      	movs	r2, #0
 80138f4:	4682      	mov	sl, r0
 80138f6:	2300      	movs	r3, #0
 80138f8:	4630      	mov	r0, r6
 80138fa:	4639      	mov	r1, r7
 80138fc:	f7ed f8fe 	bl	8000afc <__aeabi_dcmplt>
 8013900:	b148      	cbz	r0, 8013916 <_dtoa_r+0x186>
 8013902:	4650      	mov	r0, sl
 8013904:	f7ec fe1e 	bl	8000544 <__aeabi_i2d>
 8013908:	4632      	mov	r2, r6
 801390a:	463b      	mov	r3, r7
 801390c:	f7ed f8ec 	bl	8000ae8 <__aeabi_dcmpeq>
 8013910:	b908      	cbnz	r0, 8013916 <_dtoa_r+0x186>
 8013912:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013916:	f1ba 0f16 	cmp.w	sl, #22
 801391a:	d854      	bhi.n	80139c6 <_dtoa_r+0x236>
 801391c:	4b61      	ldr	r3, [pc, #388]	; (8013aa4 <_dtoa_r+0x314>)
 801391e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013926:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801392a:	f7ed f8e7 	bl	8000afc <__aeabi_dcmplt>
 801392e:	2800      	cmp	r0, #0
 8013930:	d04b      	beq.n	80139ca <_dtoa_r+0x23a>
 8013932:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013936:	2300      	movs	r3, #0
 8013938:	930e      	str	r3, [sp, #56]	; 0x38
 801393a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801393c:	1b5d      	subs	r5, r3, r5
 801393e:	1e6b      	subs	r3, r5, #1
 8013940:	9304      	str	r3, [sp, #16]
 8013942:	bf43      	ittte	mi
 8013944:	2300      	movmi	r3, #0
 8013946:	f1c5 0801 	rsbmi	r8, r5, #1
 801394a:	9304      	strmi	r3, [sp, #16]
 801394c:	f04f 0800 	movpl.w	r8, #0
 8013950:	f1ba 0f00 	cmp.w	sl, #0
 8013954:	db3b      	blt.n	80139ce <_dtoa_r+0x23e>
 8013956:	9b04      	ldr	r3, [sp, #16]
 8013958:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801395c:	4453      	add	r3, sl
 801395e:	9304      	str	r3, [sp, #16]
 8013960:	2300      	movs	r3, #0
 8013962:	9306      	str	r3, [sp, #24]
 8013964:	9b05      	ldr	r3, [sp, #20]
 8013966:	2b09      	cmp	r3, #9
 8013968:	d869      	bhi.n	8013a3e <_dtoa_r+0x2ae>
 801396a:	2b05      	cmp	r3, #5
 801396c:	bfc4      	itt	gt
 801396e:	3b04      	subgt	r3, #4
 8013970:	9305      	strgt	r3, [sp, #20]
 8013972:	9b05      	ldr	r3, [sp, #20]
 8013974:	f1a3 0302 	sub.w	r3, r3, #2
 8013978:	bfcc      	ite	gt
 801397a:	2500      	movgt	r5, #0
 801397c:	2501      	movle	r5, #1
 801397e:	2b03      	cmp	r3, #3
 8013980:	d869      	bhi.n	8013a56 <_dtoa_r+0x2c6>
 8013982:	e8df f003 	tbb	[pc, r3]
 8013986:	4e2c      	.short	0x4e2c
 8013988:	5a4c      	.short	0x5a4c
 801398a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801398e:	441d      	add	r5, r3
 8013990:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013994:	2b20      	cmp	r3, #32
 8013996:	bfc1      	itttt	gt
 8013998:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801399c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80139a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80139a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80139a8:	bfda      	itte	le
 80139aa:	f1c3 0320 	rsble	r3, r3, #32
 80139ae:	fa06 f003 	lslle.w	r0, r6, r3
 80139b2:	4318      	orrgt	r0, r3
 80139b4:	f7ec fdb6 	bl	8000524 <__aeabi_ui2d>
 80139b8:	2301      	movs	r3, #1
 80139ba:	4606      	mov	r6, r0
 80139bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80139c0:	3d01      	subs	r5, #1
 80139c2:	9310      	str	r3, [sp, #64]	; 0x40
 80139c4:	e771      	b.n	80138aa <_dtoa_r+0x11a>
 80139c6:	2301      	movs	r3, #1
 80139c8:	e7b6      	b.n	8013938 <_dtoa_r+0x1a8>
 80139ca:	900e      	str	r0, [sp, #56]	; 0x38
 80139cc:	e7b5      	b.n	801393a <_dtoa_r+0x1aa>
 80139ce:	f1ca 0300 	rsb	r3, sl, #0
 80139d2:	9306      	str	r3, [sp, #24]
 80139d4:	2300      	movs	r3, #0
 80139d6:	eba8 080a 	sub.w	r8, r8, sl
 80139da:	930d      	str	r3, [sp, #52]	; 0x34
 80139dc:	e7c2      	b.n	8013964 <_dtoa_r+0x1d4>
 80139de:	2300      	movs	r3, #0
 80139e0:	9308      	str	r3, [sp, #32]
 80139e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	dc39      	bgt.n	8013a5c <_dtoa_r+0x2cc>
 80139e8:	f04f 0901 	mov.w	r9, #1
 80139ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80139f0:	464b      	mov	r3, r9
 80139f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80139f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80139f8:	2200      	movs	r2, #0
 80139fa:	6042      	str	r2, [r0, #4]
 80139fc:	2204      	movs	r2, #4
 80139fe:	f102 0614 	add.w	r6, r2, #20
 8013a02:	429e      	cmp	r6, r3
 8013a04:	6841      	ldr	r1, [r0, #4]
 8013a06:	d92f      	bls.n	8013a68 <_dtoa_r+0x2d8>
 8013a08:	4620      	mov	r0, r4
 8013a0a:	f000 fdcf 	bl	80145ac <_Balloc>
 8013a0e:	9000      	str	r0, [sp, #0]
 8013a10:	2800      	cmp	r0, #0
 8013a12:	d14b      	bne.n	8013aac <_dtoa_r+0x31c>
 8013a14:	4b24      	ldr	r3, [pc, #144]	; (8013aa8 <_dtoa_r+0x318>)
 8013a16:	4602      	mov	r2, r0
 8013a18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013a1c:	e6d1      	b.n	80137c2 <_dtoa_r+0x32>
 8013a1e:	2301      	movs	r3, #1
 8013a20:	e7de      	b.n	80139e0 <_dtoa_r+0x250>
 8013a22:	2300      	movs	r3, #0
 8013a24:	9308      	str	r3, [sp, #32]
 8013a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a28:	eb0a 0903 	add.w	r9, sl, r3
 8013a2c:	f109 0301 	add.w	r3, r9, #1
 8013a30:	2b01      	cmp	r3, #1
 8013a32:	9301      	str	r3, [sp, #4]
 8013a34:	bfb8      	it	lt
 8013a36:	2301      	movlt	r3, #1
 8013a38:	e7dd      	b.n	80139f6 <_dtoa_r+0x266>
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	e7f2      	b.n	8013a24 <_dtoa_r+0x294>
 8013a3e:	2501      	movs	r5, #1
 8013a40:	2300      	movs	r3, #0
 8013a42:	9305      	str	r3, [sp, #20]
 8013a44:	9508      	str	r5, [sp, #32]
 8013a46:	f04f 39ff 	mov.w	r9, #4294967295
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013a50:	2312      	movs	r3, #18
 8013a52:	9209      	str	r2, [sp, #36]	; 0x24
 8013a54:	e7cf      	b.n	80139f6 <_dtoa_r+0x266>
 8013a56:	2301      	movs	r3, #1
 8013a58:	9308      	str	r3, [sp, #32]
 8013a5a:	e7f4      	b.n	8013a46 <_dtoa_r+0x2b6>
 8013a5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013a60:	f8cd 9004 	str.w	r9, [sp, #4]
 8013a64:	464b      	mov	r3, r9
 8013a66:	e7c6      	b.n	80139f6 <_dtoa_r+0x266>
 8013a68:	3101      	adds	r1, #1
 8013a6a:	6041      	str	r1, [r0, #4]
 8013a6c:	0052      	lsls	r2, r2, #1
 8013a6e:	e7c6      	b.n	80139fe <_dtoa_r+0x26e>
 8013a70:	636f4361 	.word	0x636f4361
 8013a74:	3fd287a7 	.word	0x3fd287a7
 8013a78:	8b60c8b3 	.word	0x8b60c8b3
 8013a7c:	3fc68a28 	.word	0x3fc68a28
 8013a80:	509f79fb 	.word	0x509f79fb
 8013a84:	3fd34413 	.word	0x3fd34413
 8013a88:	080196ec 	.word	0x080196ec
 8013a8c:	080197ab 	.word	0x080197ab
 8013a90:	7ff00000 	.word	0x7ff00000
 8013a94:	080197a7 	.word	0x080197a7
 8013a98:	0801979e 	.word	0x0801979e
 8013a9c:	080196c9 	.word	0x080196c9
 8013aa0:	3ff80000 	.word	0x3ff80000
 8013aa4:	08019908 	.word	0x08019908
 8013aa8:	0801980a 	.word	0x0801980a
 8013aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013aae:	9a00      	ldr	r2, [sp, #0]
 8013ab0:	601a      	str	r2, [r3, #0]
 8013ab2:	9b01      	ldr	r3, [sp, #4]
 8013ab4:	2b0e      	cmp	r3, #14
 8013ab6:	f200 80ad 	bhi.w	8013c14 <_dtoa_r+0x484>
 8013aba:	2d00      	cmp	r5, #0
 8013abc:	f000 80aa 	beq.w	8013c14 <_dtoa_r+0x484>
 8013ac0:	f1ba 0f00 	cmp.w	sl, #0
 8013ac4:	dd36      	ble.n	8013b34 <_dtoa_r+0x3a4>
 8013ac6:	4ac3      	ldr	r2, [pc, #780]	; (8013dd4 <_dtoa_r+0x644>)
 8013ac8:	f00a 030f 	and.w	r3, sl, #15
 8013acc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013ad0:	ed93 7b00 	vldr	d7, [r3]
 8013ad4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013ad8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013adc:	eeb0 8a47 	vmov.f32	s16, s14
 8013ae0:	eef0 8a67 	vmov.f32	s17, s15
 8013ae4:	d016      	beq.n	8013b14 <_dtoa_r+0x384>
 8013ae6:	4bbc      	ldr	r3, [pc, #752]	; (8013dd8 <_dtoa_r+0x648>)
 8013ae8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013aec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013af0:	f7ec febc 	bl	800086c <__aeabi_ddiv>
 8013af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013af8:	f007 070f 	and.w	r7, r7, #15
 8013afc:	2503      	movs	r5, #3
 8013afe:	4eb6      	ldr	r6, [pc, #728]	; (8013dd8 <_dtoa_r+0x648>)
 8013b00:	b957      	cbnz	r7, 8013b18 <_dtoa_r+0x388>
 8013b02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b06:	ec53 2b18 	vmov	r2, r3, d8
 8013b0a:	f7ec feaf 	bl	800086c <__aeabi_ddiv>
 8013b0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b12:	e029      	b.n	8013b68 <_dtoa_r+0x3d8>
 8013b14:	2502      	movs	r5, #2
 8013b16:	e7f2      	b.n	8013afe <_dtoa_r+0x36e>
 8013b18:	07f9      	lsls	r1, r7, #31
 8013b1a:	d508      	bpl.n	8013b2e <_dtoa_r+0x39e>
 8013b1c:	ec51 0b18 	vmov	r0, r1, d8
 8013b20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013b24:	f7ec fd78 	bl	8000618 <__aeabi_dmul>
 8013b28:	ec41 0b18 	vmov	d8, r0, r1
 8013b2c:	3501      	adds	r5, #1
 8013b2e:	107f      	asrs	r7, r7, #1
 8013b30:	3608      	adds	r6, #8
 8013b32:	e7e5      	b.n	8013b00 <_dtoa_r+0x370>
 8013b34:	f000 80a6 	beq.w	8013c84 <_dtoa_r+0x4f4>
 8013b38:	f1ca 0600 	rsb	r6, sl, #0
 8013b3c:	4ba5      	ldr	r3, [pc, #660]	; (8013dd4 <_dtoa_r+0x644>)
 8013b3e:	4fa6      	ldr	r7, [pc, #664]	; (8013dd8 <_dtoa_r+0x648>)
 8013b40:	f006 020f 	and.w	r2, r6, #15
 8013b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013b50:	f7ec fd62 	bl	8000618 <__aeabi_dmul>
 8013b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b58:	1136      	asrs	r6, r6, #4
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	2502      	movs	r5, #2
 8013b5e:	2e00      	cmp	r6, #0
 8013b60:	f040 8085 	bne.w	8013c6e <_dtoa_r+0x4de>
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d1d2      	bne.n	8013b0e <_dtoa_r+0x37e>
 8013b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	f000 808c 	beq.w	8013c88 <_dtoa_r+0x4f8>
 8013b70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013b74:	4b99      	ldr	r3, [pc, #612]	; (8013ddc <_dtoa_r+0x64c>)
 8013b76:	2200      	movs	r2, #0
 8013b78:	4630      	mov	r0, r6
 8013b7a:	4639      	mov	r1, r7
 8013b7c:	f7ec ffbe 	bl	8000afc <__aeabi_dcmplt>
 8013b80:	2800      	cmp	r0, #0
 8013b82:	f000 8081 	beq.w	8013c88 <_dtoa_r+0x4f8>
 8013b86:	9b01      	ldr	r3, [sp, #4]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d07d      	beq.n	8013c88 <_dtoa_r+0x4f8>
 8013b8c:	f1b9 0f00 	cmp.w	r9, #0
 8013b90:	dd3c      	ble.n	8013c0c <_dtoa_r+0x47c>
 8013b92:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013b96:	9307      	str	r3, [sp, #28]
 8013b98:	2200      	movs	r2, #0
 8013b9a:	4b91      	ldr	r3, [pc, #580]	; (8013de0 <_dtoa_r+0x650>)
 8013b9c:	4630      	mov	r0, r6
 8013b9e:	4639      	mov	r1, r7
 8013ba0:	f7ec fd3a 	bl	8000618 <__aeabi_dmul>
 8013ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ba8:	3501      	adds	r5, #1
 8013baa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013bae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013bb2:	4628      	mov	r0, r5
 8013bb4:	f7ec fcc6 	bl	8000544 <__aeabi_i2d>
 8013bb8:	4632      	mov	r2, r6
 8013bba:	463b      	mov	r3, r7
 8013bbc:	f7ec fd2c 	bl	8000618 <__aeabi_dmul>
 8013bc0:	4b88      	ldr	r3, [pc, #544]	; (8013de4 <_dtoa_r+0x654>)
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	f7ec fb72 	bl	80002ac <__adddf3>
 8013bc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013bcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013bd0:	9303      	str	r3, [sp, #12]
 8013bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d15c      	bne.n	8013c92 <_dtoa_r+0x502>
 8013bd8:	4b83      	ldr	r3, [pc, #524]	; (8013de8 <_dtoa_r+0x658>)
 8013bda:	2200      	movs	r2, #0
 8013bdc:	4630      	mov	r0, r6
 8013bde:	4639      	mov	r1, r7
 8013be0:	f7ec fb62 	bl	80002a8 <__aeabi_dsub>
 8013be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013be8:	4606      	mov	r6, r0
 8013bea:	460f      	mov	r7, r1
 8013bec:	f7ec ffa4 	bl	8000b38 <__aeabi_dcmpgt>
 8013bf0:	2800      	cmp	r0, #0
 8013bf2:	f040 8296 	bne.w	8014122 <_dtoa_r+0x992>
 8013bf6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013bfa:	4630      	mov	r0, r6
 8013bfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c00:	4639      	mov	r1, r7
 8013c02:	f7ec ff7b 	bl	8000afc <__aeabi_dcmplt>
 8013c06:	2800      	cmp	r0, #0
 8013c08:	f040 8288 	bne.w	801411c <_dtoa_r+0x98c>
 8013c0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013c10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013c14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	f2c0 8158 	blt.w	8013ecc <_dtoa_r+0x73c>
 8013c1c:	f1ba 0f0e 	cmp.w	sl, #14
 8013c20:	f300 8154 	bgt.w	8013ecc <_dtoa_r+0x73c>
 8013c24:	4b6b      	ldr	r3, [pc, #428]	; (8013dd4 <_dtoa_r+0x644>)
 8013c26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013c2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	f280 80e3 	bge.w	8013dfc <_dtoa_r+0x66c>
 8013c36:	9b01      	ldr	r3, [sp, #4]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	f300 80df 	bgt.w	8013dfc <_dtoa_r+0x66c>
 8013c3e:	f040 826d 	bne.w	801411c <_dtoa_r+0x98c>
 8013c42:	4b69      	ldr	r3, [pc, #420]	; (8013de8 <_dtoa_r+0x658>)
 8013c44:	2200      	movs	r2, #0
 8013c46:	4640      	mov	r0, r8
 8013c48:	4649      	mov	r1, r9
 8013c4a:	f7ec fce5 	bl	8000618 <__aeabi_dmul>
 8013c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013c52:	f7ec ff67 	bl	8000b24 <__aeabi_dcmpge>
 8013c56:	9e01      	ldr	r6, [sp, #4]
 8013c58:	4637      	mov	r7, r6
 8013c5a:	2800      	cmp	r0, #0
 8013c5c:	f040 8243 	bne.w	80140e6 <_dtoa_r+0x956>
 8013c60:	9d00      	ldr	r5, [sp, #0]
 8013c62:	2331      	movs	r3, #49	; 0x31
 8013c64:	f805 3b01 	strb.w	r3, [r5], #1
 8013c68:	f10a 0a01 	add.w	sl, sl, #1
 8013c6c:	e23f      	b.n	80140ee <_dtoa_r+0x95e>
 8013c6e:	07f2      	lsls	r2, r6, #31
 8013c70:	d505      	bpl.n	8013c7e <_dtoa_r+0x4ee>
 8013c72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c76:	f7ec fccf 	bl	8000618 <__aeabi_dmul>
 8013c7a:	3501      	adds	r5, #1
 8013c7c:	2301      	movs	r3, #1
 8013c7e:	1076      	asrs	r6, r6, #1
 8013c80:	3708      	adds	r7, #8
 8013c82:	e76c      	b.n	8013b5e <_dtoa_r+0x3ce>
 8013c84:	2502      	movs	r5, #2
 8013c86:	e76f      	b.n	8013b68 <_dtoa_r+0x3d8>
 8013c88:	9b01      	ldr	r3, [sp, #4]
 8013c8a:	f8cd a01c 	str.w	sl, [sp, #28]
 8013c8e:	930c      	str	r3, [sp, #48]	; 0x30
 8013c90:	e78d      	b.n	8013bae <_dtoa_r+0x41e>
 8013c92:	9900      	ldr	r1, [sp, #0]
 8013c94:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013c96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c98:	4b4e      	ldr	r3, [pc, #312]	; (8013dd4 <_dtoa_r+0x644>)
 8013c9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013c9e:	4401      	add	r1, r0
 8013ca0:	9102      	str	r1, [sp, #8]
 8013ca2:	9908      	ldr	r1, [sp, #32]
 8013ca4:	eeb0 8a47 	vmov.f32	s16, s14
 8013ca8:	eef0 8a67 	vmov.f32	s17, s15
 8013cac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013cb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013cb4:	2900      	cmp	r1, #0
 8013cb6:	d045      	beq.n	8013d44 <_dtoa_r+0x5b4>
 8013cb8:	494c      	ldr	r1, [pc, #304]	; (8013dec <_dtoa_r+0x65c>)
 8013cba:	2000      	movs	r0, #0
 8013cbc:	f7ec fdd6 	bl	800086c <__aeabi_ddiv>
 8013cc0:	ec53 2b18 	vmov	r2, r3, d8
 8013cc4:	f7ec faf0 	bl	80002a8 <__aeabi_dsub>
 8013cc8:	9d00      	ldr	r5, [sp, #0]
 8013cca:	ec41 0b18 	vmov	d8, r0, r1
 8013cce:	4639      	mov	r1, r7
 8013cd0:	4630      	mov	r0, r6
 8013cd2:	f7ec ff51 	bl	8000b78 <__aeabi_d2iz>
 8013cd6:	900c      	str	r0, [sp, #48]	; 0x30
 8013cd8:	f7ec fc34 	bl	8000544 <__aeabi_i2d>
 8013cdc:	4602      	mov	r2, r0
 8013cde:	460b      	mov	r3, r1
 8013ce0:	4630      	mov	r0, r6
 8013ce2:	4639      	mov	r1, r7
 8013ce4:	f7ec fae0 	bl	80002a8 <__aeabi_dsub>
 8013ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cea:	3330      	adds	r3, #48	; 0x30
 8013cec:	f805 3b01 	strb.w	r3, [r5], #1
 8013cf0:	ec53 2b18 	vmov	r2, r3, d8
 8013cf4:	4606      	mov	r6, r0
 8013cf6:	460f      	mov	r7, r1
 8013cf8:	f7ec ff00 	bl	8000afc <__aeabi_dcmplt>
 8013cfc:	2800      	cmp	r0, #0
 8013cfe:	d165      	bne.n	8013dcc <_dtoa_r+0x63c>
 8013d00:	4632      	mov	r2, r6
 8013d02:	463b      	mov	r3, r7
 8013d04:	4935      	ldr	r1, [pc, #212]	; (8013ddc <_dtoa_r+0x64c>)
 8013d06:	2000      	movs	r0, #0
 8013d08:	f7ec face 	bl	80002a8 <__aeabi_dsub>
 8013d0c:	ec53 2b18 	vmov	r2, r3, d8
 8013d10:	f7ec fef4 	bl	8000afc <__aeabi_dcmplt>
 8013d14:	2800      	cmp	r0, #0
 8013d16:	f040 80b9 	bne.w	8013e8c <_dtoa_r+0x6fc>
 8013d1a:	9b02      	ldr	r3, [sp, #8]
 8013d1c:	429d      	cmp	r5, r3
 8013d1e:	f43f af75 	beq.w	8013c0c <_dtoa_r+0x47c>
 8013d22:	4b2f      	ldr	r3, [pc, #188]	; (8013de0 <_dtoa_r+0x650>)
 8013d24:	ec51 0b18 	vmov	r0, r1, d8
 8013d28:	2200      	movs	r2, #0
 8013d2a:	f7ec fc75 	bl	8000618 <__aeabi_dmul>
 8013d2e:	4b2c      	ldr	r3, [pc, #176]	; (8013de0 <_dtoa_r+0x650>)
 8013d30:	ec41 0b18 	vmov	d8, r0, r1
 8013d34:	2200      	movs	r2, #0
 8013d36:	4630      	mov	r0, r6
 8013d38:	4639      	mov	r1, r7
 8013d3a:	f7ec fc6d 	bl	8000618 <__aeabi_dmul>
 8013d3e:	4606      	mov	r6, r0
 8013d40:	460f      	mov	r7, r1
 8013d42:	e7c4      	b.n	8013cce <_dtoa_r+0x53e>
 8013d44:	ec51 0b17 	vmov	r0, r1, d7
 8013d48:	f7ec fc66 	bl	8000618 <__aeabi_dmul>
 8013d4c:	9b02      	ldr	r3, [sp, #8]
 8013d4e:	9d00      	ldr	r5, [sp, #0]
 8013d50:	930c      	str	r3, [sp, #48]	; 0x30
 8013d52:	ec41 0b18 	vmov	d8, r0, r1
 8013d56:	4639      	mov	r1, r7
 8013d58:	4630      	mov	r0, r6
 8013d5a:	f7ec ff0d 	bl	8000b78 <__aeabi_d2iz>
 8013d5e:	9011      	str	r0, [sp, #68]	; 0x44
 8013d60:	f7ec fbf0 	bl	8000544 <__aeabi_i2d>
 8013d64:	4602      	mov	r2, r0
 8013d66:	460b      	mov	r3, r1
 8013d68:	4630      	mov	r0, r6
 8013d6a:	4639      	mov	r1, r7
 8013d6c:	f7ec fa9c 	bl	80002a8 <__aeabi_dsub>
 8013d70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d72:	3330      	adds	r3, #48	; 0x30
 8013d74:	f805 3b01 	strb.w	r3, [r5], #1
 8013d78:	9b02      	ldr	r3, [sp, #8]
 8013d7a:	429d      	cmp	r5, r3
 8013d7c:	4606      	mov	r6, r0
 8013d7e:	460f      	mov	r7, r1
 8013d80:	f04f 0200 	mov.w	r2, #0
 8013d84:	d134      	bne.n	8013df0 <_dtoa_r+0x660>
 8013d86:	4b19      	ldr	r3, [pc, #100]	; (8013dec <_dtoa_r+0x65c>)
 8013d88:	ec51 0b18 	vmov	r0, r1, d8
 8013d8c:	f7ec fa8e 	bl	80002ac <__adddf3>
 8013d90:	4602      	mov	r2, r0
 8013d92:	460b      	mov	r3, r1
 8013d94:	4630      	mov	r0, r6
 8013d96:	4639      	mov	r1, r7
 8013d98:	f7ec fece 	bl	8000b38 <__aeabi_dcmpgt>
 8013d9c:	2800      	cmp	r0, #0
 8013d9e:	d175      	bne.n	8013e8c <_dtoa_r+0x6fc>
 8013da0:	ec53 2b18 	vmov	r2, r3, d8
 8013da4:	4911      	ldr	r1, [pc, #68]	; (8013dec <_dtoa_r+0x65c>)
 8013da6:	2000      	movs	r0, #0
 8013da8:	f7ec fa7e 	bl	80002a8 <__aeabi_dsub>
 8013dac:	4602      	mov	r2, r0
 8013dae:	460b      	mov	r3, r1
 8013db0:	4630      	mov	r0, r6
 8013db2:	4639      	mov	r1, r7
 8013db4:	f7ec fea2 	bl	8000afc <__aeabi_dcmplt>
 8013db8:	2800      	cmp	r0, #0
 8013dba:	f43f af27 	beq.w	8013c0c <_dtoa_r+0x47c>
 8013dbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013dc0:	1e6b      	subs	r3, r5, #1
 8013dc2:	930c      	str	r3, [sp, #48]	; 0x30
 8013dc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013dc8:	2b30      	cmp	r3, #48	; 0x30
 8013dca:	d0f8      	beq.n	8013dbe <_dtoa_r+0x62e>
 8013dcc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013dd0:	e04a      	b.n	8013e68 <_dtoa_r+0x6d8>
 8013dd2:	bf00      	nop
 8013dd4:	08019908 	.word	0x08019908
 8013dd8:	080198e0 	.word	0x080198e0
 8013ddc:	3ff00000 	.word	0x3ff00000
 8013de0:	40240000 	.word	0x40240000
 8013de4:	401c0000 	.word	0x401c0000
 8013de8:	40140000 	.word	0x40140000
 8013dec:	3fe00000 	.word	0x3fe00000
 8013df0:	4baf      	ldr	r3, [pc, #700]	; (80140b0 <_dtoa_r+0x920>)
 8013df2:	f7ec fc11 	bl	8000618 <__aeabi_dmul>
 8013df6:	4606      	mov	r6, r0
 8013df8:	460f      	mov	r7, r1
 8013dfa:	e7ac      	b.n	8013d56 <_dtoa_r+0x5c6>
 8013dfc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013e00:	9d00      	ldr	r5, [sp, #0]
 8013e02:	4642      	mov	r2, r8
 8013e04:	464b      	mov	r3, r9
 8013e06:	4630      	mov	r0, r6
 8013e08:	4639      	mov	r1, r7
 8013e0a:	f7ec fd2f 	bl	800086c <__aeabi_ddiv>
 8013e0e:	f7ec feb3 	bl	8000b78 <__aeabi_d2iz>
 8013e12:	9002      	str	r0, [sp, #8]
 8013e14:	f7ec fb96 	bl	8000544 <__aeabi_i2d>
 8013e18:	4642      	mov	r2, r8
 8013e1a:	464b      	mov	r3, r9
 8013e1c:	f7ec fbfc 	bl	8000618 <__aeabi_dmul>
 8013e20:	4602      	mov	r2, r0
 8013e22:	460b      	mov	r3, r1
 8013e24:	4630      	mov	r0, r6
 8013e26:	4639      	mov	r1, r7
 8013e28:	f7ec fa3e 	bl	80002a8 <__aeabi_dsub>
 8013e2c:	9e02      	ldr	r6, [sp, #8]
 8013e2e:	9f01      	ldr	r7, [sp, #4]
 8013e30:	3630      	adds	r6, #48	; 0x30
 8013e32:	f805 6b01 	strb.w	r6, [r5], #1
 8013e36:	9e00      	ldr	r6, [sp, #0]
 8013e38:	1bae      	subs	r6, r5, r6
 8013e3a:	42b7      	cmp	r7, r6
 8013e3c:	4602      	mov	r2, r0
 8013e3e:	460b      	mov	r3, r1
 8013e40:	d137      	bne.n	8013eb2 <_dtoa_r+0x722>
 8013e42:	f7ec fa33 	bl	80002ac <__adddf3>
 8013e46:	4642      	mov	r2, r8
 8013e48:	464b      	mov	r3, r9
 8013e4a:	4606      	mov	r6, r0
 8013e4c:	460f      	mov	r7, r1
 8013e4e:	f7ec fe73 	bl	8000b38 <__aeabi_dcmpgt>
 8013e52:	b9c8      	cbnz	r0, 8013e88 <_dtoa_r+0x6f8>
 8013e54:	4642      	mov	r2, r8
 8013e56:	464b      	mov	r3, r9
 8013e58:	4630      	mov	r0, r6
 8013e5a:	4639      	mov	r1, r7
 8013e5c:	f7ec fe44 	bl	8000ae8 <__aeabi_dcmpeq>
 8013e60:	b110      	cbz	r0, 8013e68 <_dtoa_r+0x6d8>
 8013e62:	9b02      	ldr	r3, [sp, #8]
 8013e64:	07d9      	lsls	r1, r3, #31
 8013e66:	d40f      	bmi.n	8013e88 <_dtoa_r+0x6f8>
 8013e68:	4620      	mov	r0, r4
 8013e6a:	4659      	mov	r1, fp
 8013e6c:	f000 fbde 	bl	801462c <_Bfree>
 8013e70:	2300      	movs	r3, #0
 8013e72:	702b      	strb	r3, [r5, #0]
 8013e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e76:	f10a 0001 	add.w	r0, sl, #1
 8013e7a:	6018      	str	r0, [r3, #0]
 8013e7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	f43f acd8 	beq.w	8013834 <_dtoa_r+0xa4>
 8013e84:	601d      	str	r5, [r3, #0]
 8013e86:	e4d5      	b.n	8013834 <_dtoa_r+0xa4>
 8013e88:	f8cd a01c 	str.w	sl, [sp, #28]
 8013e8c:	462b      	mov	r3, r5
 8013e8e:	461d      	mov	r5, r3
 8013e90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013e94:	2a39      	cmp	r2, #57	; 0x39
 8013e96:	d108      	bne.n	8013eaa <_dtoa_r+0x71a>
 8013e98:	9a00      	ldr	r2, [sp, #0]
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d1f7      	bne.n	8013e8e <_dtoa_r+0x6fe>
 8013e9e:	9a07      	ldr	r2, [sp, #28]
 8013ea0:	9900      	ldr	r1, [sp, #0]
 8013ea2:	3201      	adds	r2, #1
 8013ea4:	9207      	str	r2, [sp, #28]
 8013ea6:	2230      	movs	r2, #48	; 0x30
 8013ea8:	700a      	strb	r2, [r1, #0]
 8013eaa:	781a      	ldrb	r2, [r3, #0]
 8013eac:	3201      	adds	r2, #1
 8013eae:	701a      	strb	r2, [r3, #0]
 8013eb0:	e78c      	b.n	8013dcc <_dtoa_r+0x63c>
 8013eb2:	4b7f      	ldr	r3, [pc, #508]	; (80140b0 <_dtoa_r+0x920>)
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	f7ec fbaf 	bl	8000618 <__aeabi_dmul>
 8013eba:	2200      	movs	r2, #0
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	4606      	mov	r6, r0
 8013ec0:	460f      	mov	r7, r1
 8013ec2:	f7ec fe11 	bl	8000ae8 <__aeabi_dcmpeq>
 8013ec6:	2800      	cmp	r0, #0
 8013ec8:	d09b      	beq.n	8013e02 <_dtoa_r+0x672>
 8013eca:	e7cd      	b.n	8013e68 <_dtoa_r+0x6d8>
 8013ecc:	9a08      	ldr	r2, [sp, #32]
 8013ece:	2a00      	cmp	r2, #0
 8013ed0:	f000 80c4 	beq.w	801405c <_dtoa_r+0x8cc>
 8013ed4:	9a05      	ldr	r2, [sp, #20]
 8013ed6:	2a01      	cmp	r2, #1
 8013ed8:	f300 80a8 	bgt.w	801402c <_dtoa_r+0x89c>
 8013edc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013ede:	2a00      	cmp	r2, #0
 8013ee0:	f000 80a0 	beq.w	8014024 <_dtoa_r+0x894>
 8013ee4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013ee8:	9e06      	ldr	r6, [sp, #24]
 8013eea:	4645      	mov	r5, r8
 8013eec:	9a04      	ldr	r2, [sp, #16]
 8013eee:	2101      	movs	r1, #1
 8013ef0:	441a      	add	r2, r3
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	4498      	add	r8, r3
 8013ef6:	9204      	str	r2, [sp, #16]
 8013ef8:	f000 fc54 	bl	80147a4 <__i2b>
 8013efc:	4607      	mov	r7, r0
 8013efe:	2d00      	cmp	r5, #0
 8013f00:	dd0b      	ble.n	8013f1a <_dtoa_r+0x78a>
 8013f02:	9b04      	ldr	r3, [sp, #16]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	dd08      	ble.n	8013f1a <_dtoa_r+0x78a>
 8013f08:	42ab      	cmp	r3, r5
 8013f0a:	9a04      	ldr	r2, [sp, #16]
 8013f0c:	bfa8      	it	ge
 8013f0e:	462b      	movge	r3, r5
 8013f10:	eba8 0803 	sub.w	r8, r8, r3
 8013f14:	1aed      	subs	r5, r5, r3
 8013f16:	1ad3      	subs	r3, r2, r3
 8013f18:	9304      	str	r3, [sp, #16]
 8013f1a:	9b06      	ldr	r3, [sp, #24]
 8013f1c:	b1fb      	cbz	r3, 8013f5e <_dtoa_r+0x7ce>
 8013f1e:	9b08      	ldr	r3, [sp, #32]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	f000 809f 	beq.w	8014064 <_dtoa_r+0x8d4>
 8013f26:	2e00      	cmp	r6, #0
 8013f28:	dd11      	ble.n	8013f4e <_dtoa_r+0x7be>
 8013f2a:	4639      	mov	r1, r7
 8013f2c:	4632      	mov	r2, r6
 8013f2e:	4620      	mov	r0, r4
 8013f30:	f000 fcf4 	bl	801491c <__pow5mult>
 8013f34:	465a      	mov	r2, fp
 8013f36:	4601      	mov	r1, r0
 8013f38:	4607      	mov	r7, r0
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	f000 fc48 	bl	80147d0 <__multiply>
 8013f40:	4659      	mov	r1, fp
 8013f42:	9007      	str	r0, [sp, #28]
 8013f44:	4620      	mov	r0, r4
 8013f46:	f000 fb71 	bl	801462c <_Bfree>
 8013f4a:	9b07      	ldr	r3, [sp, #28]
 8013f4c:	469b      	mov	fp, r3
 8013f4e:	9b06      	ldr	r3, [sp, #24]
 8013f50:	1b9a      	subs	r2, r3, r6
 8013f52:	d004      	beq.n	8013f5e <_dtoa_r+0x7ce>
 8013f54:	4659      	mov	r1, fp
 8013f56:	4620      	mov	r0, r4
 8013f58:	f000 fce0 	bl	801491c <__pow5mult>
 8013f5c:	4683      	mov	fp, r0
 8013f5e:	2101      	movs	r1, #1
 8013f60:	4620      	mov	r0, r4
 8013f62:	f000 fc1f 	bl	80147a4 <__i2b>
 8013f66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	4606      	mov	r6, r0
 8013f6c:	dd7c      	ble.n	8014068 <_dtoa_r+0x8d8>
 8013f6e:	461a      	mov	r2, r3
 8013f70:	4601      	mov	r1, r0
 8013f72:	4620      	mov	r0, r4
 8013f74:	f000 fcd2 	bl	801491c <__pow5mult>
 8013f78:	9b05      	ldr	r3, [sp, #20]
 8013f7a:	2b01      	cmp	r3, #1
 8013f7c:	4606      	mov	r6, r0
 8013f7e:	dd76      	ble.n	801406e <_dtoa_r+0x8de>
 8013f80:	2300      	movs	r3, #0
 8013f82:	9306      	str	r3, [sp, #24]
 8013f84:	6933      	ldr	r3, [r6, #16]
 8013f86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013f8a:	6918      	ldr	r0, [r3, #16]
 8013f8c:	f000 fbba 	bl	8014704 <__hi0bits>
 8013f90:	f1c0 0020 	rsb	r0, r0, #32
 8013f94:	9b04      	ldr	r3, [sp, #16]
 8013f96:	4418      	add	r0, r3
 8013f98:	f010 001f 	ands.w	r0, r0, #31
 8013f9c:	f000 8086 	beq.w	80140ac <_dtoa_r+0x91c>
 8013fa0:	f1c0 0320 	rsb	r3, r0, #32
 8013fa4:	2b04      	cmp	r3, #4
 8013fa6:	dd7f      	ble.n	80140a8 <_dtoa_r+0x918>
 8013fa8:	f1c0 001c 	rsb	r0, r0, #28
 8013fac:	9b04      	ldr	r3, [sp, #16]
 8013fae:	4403      	add	r3, r0
 8013fb0:	4480      	add	r8, r0
 8013fb2:	4405      	add	r5, r0
 8013fb4:	9304      	str	r3, [sp, #16]
 8013fb6:	f1b8 0f00 	cmp.w	r8, #0
 8013fba:	dd05      	ble.n	8013fc8 <_dtoa_r+0x838>
 8013fbc:	4659      	mov	r1, fp
 8013fbe:	4642      	mov	r2, r8
 8013fc0:	4620      	mov	r0, r4
 8013fc2:	f000 fd05 	bl	80149d0 <__lshift>
 8013fc6:	4683      	mov	fp, r0
 8013fc8:	9b04      	ldr	r3, [sp, #16]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	dd05      	ble.n	8013fda <_dtoa_r+0x84a>
 8013fce:	4631      	mov	r1, r6
 8013fd0:	461a      	mov	r2, r3
 8013fd2:	4620      	mov	r0, r4
 8013fd4:	f000 fcfc 	bl	80149d0 <__lshift>
 8013fd8:	4606      	mov	r6, r0
 8013fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d069      	beq.n	80140b4 <_dtoa_r+0x924>
 8013fe0:	4631      	mov	r1, r6
 8013fe2:	4658      	mov	r0, fp
 8013fe4:	f000 fd60 	bl	8014aa8 <__mcmp>
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	da63      	bge.n	80140b4 <_dtoa_r+0x924>
 8013fec:	2300      	movs	r3, #0
 8013fee:	4659      	mov	r1, fp
 8013ff0:	220a      	movs	r2, #10
 8013ff2:	4620      	mov	r0, r4
 8013ff4:	f000 fb3c 	bl	8014670 <__multadd>
 8013ff8:	9b08      	ldr	r3, [sp, #32]
 8013ffa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013ffe:	4683      	mov	fp, r0
 8014000:	2b00      	cmp	r3, #0
 8014002:	f000 818f 	beq.w	8014324 <_dtoa_r+0xb94>
 8014006:	4639      	mov	r1, r7
 8014008:	2300      	movs	r3, #0
 801400a:	220a      	movs	r2, #10
 801400c:	4620      	mov	r0, r4
 801400e:	f000 fb2f 	bl	8014670 <__multadd>
 8014012:	f1b9 0f00 	cmp.w	r9, #0
 8014016:	4607      	mov	r7, r0
 8014018:	f300 808e 	bgt.w	8014138 <_dtoa_r+0x9a8>
 801401c:	9b05      	ldr	r3, [sp, #20]
 801401e:	2b02      	cmp	r3, #2
 8014020:	dc50      	bgt.n	80140c4 <_dtoa_r+0x934>
 8014022:	e089      	b.n	8014138 <_dtoa_r+0x9a8>
 8014024:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014026:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801402a:	e75d      	b.n	8013ee8 <_dtoa_r+0x758>
 801402c:	9b01      	ldr	r3, [sp, #4]
 801402e:	1e5e      	subs	r6, r3, #1
 8014030:	9b06      	ldr	r3, [sp, #24]
 8014032:	42b3      	cmp	r3, r6
 8014034:	bfbf      	itttt	lt
 8014036:	9b06      	ldrlt	r3, [sp, #24]
 8014038:	9606      	strlt	r6, [sp, #24]
 801403a:	1af2      	sublt	r2, r6, r3
 801403c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801403e:	bfb6      	itet	lt
 8014040:	189b      	addlt	r3, r3, r2
 8014042:	1b9e      	subge	r6, r3, r6
 8014044:	930d      	strlt	r3, [sp, #52]	; 0x34
 8014046:	9b01      	ldr	r3, [sp, #4]
 8014048:	bfb8      	it	lt
 801404a:	2600      	movlt	r6, #0
 801404c:	2b00      	cmp	r3, #0
 801404e:	bfb5      	itete	lt
 8014050:	eba8 0503 	sublt.w	r5, r8, r3
 8014054:	9b01      	ldrge	r3, [sp, #4]
 8014056:	2300      	movlt	r3, #0
 8014058:	4645      	movge	r5, r8
 801405a:	e747      	b.n	8013eec <_dtoa_r+0x75c>
 801405c:	9e06      	ldr	r6, [sp, #24]
 801405e:	9f08      	ldr	r7, [sp, #32]
 8014060:	4645      	mov	r5, r8
 8014062:	e74c      	b.n	8013efe <_dtoa_r+0x76e>
 8014064:	9a06      	ldr	r2, [sp, #24]
 8014066:	e775      	b.n	8013f54 <_dtoa_r+0x7c4>
 8014068:	9b05      	ldr	r3, [sp, #20]
 801406a:	2b01      	cmp	r3, #1
 801406c:	dc18      	bgt.n	80140a0 <_dtoa_r+0x910>
 801406e:	9b02      	ldr	r3, [sp, #8]
 8014070:	b9b3      	cbnz	r3, 80140a0 <_dtoa_r+0x910>
 8014072:	9b03      	ldr	r3, [sp, #12]
 8014074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014078:	b9a3      	cbnz	r3, 80140a4 <_dtoa_r+0x914>
 801407a:	9b03      	ldr	r3, [sp, #12]
 801407c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014080:	0d1b      	lsrs	r3, r3, #20
 8014082:	051b      	lsls	r3, r3, #20
 8014084:	b12b      	cbz	r3, 8014092 <_dtoa_r+0x902>
 8014086:	9b04      	ldr	r3, [sp, #16]
 8014088:	3301      	adds	r3, #1
 801408a:	9304      	str	r3, [sp, #16]
 801408c:	f108 0801 	add.w	r8, r8, #1
 8014090:	2301      	movs	r3, #1
 8014092:	9306      	str	r3, [sp, #24]
 8014094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014096:	2b00      	cmp	r3, #0
 8014098:	f47f af74 	bne.w	8013f84 <_dtoa_r+0x7f4>
 801409c:	2001      	movs	r0, #1
 801409e:	e779      	b.n	8013f94 <_dtoa_r+0x804>
 80140a0:	2300      	movs	r3, #0
 80140a2:	e7f6      	b.n	8014092 <_dtoa_r+0x902>
 80140a4:	9b02      	ldr	r3, [sp, #8]
 80140a6:	e7f4      	b.n	8014092 <_dtoa_r+0x902>
 80140a8:	d085      	beq.n	8013fb6 <_dtoa_r+0x826>
 80140aa:	4618      	mov	r0, r3
 80140ac:	301c      	adds	r0, #28
 80140ae:	e77d      	b.n	8013fac <_dtoa_r+0x81c>
 80140b0:	40240000 	.word	0x40240000
 80140b4:	9b01      	ldr	r3, [sp, #4]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	dc38      	bgt.n	801412c <_dtoa_r+0x99c>
 80140ba:	9b05      	ldr	r3, [sp, #20]
 80140bc:	2b02      	cmp	r3, #2
 80140be:	dd35      	ble.n	801412c <_dtoa_r+0x99c>
 80140c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80140c4:	f1b9 0f00 	cmp.w	r9, #0
 80140c8:	d10d      	bne.n	80140e6 <_dtoa_r+0x956>
 80140ca:	4631      	mov	r1, r6
 80140cc:	464b      	mov	r3, r9
 80140ce:	2205      	movs	r2, #5
 80140d0:	4620      	mov	r0, r4
 80140d2:	f000 facd 	bl	8014670 <__multadd>
 80140d6:	4601      	mov	r1, r0
 80140d8:	4606      	mov	r6, r0
 80140da:	4658      	mov	r0, fp
 80140dc:	f000 fce4 	bl	8014aa8 <__mcmp>
 80140e0:	2800      	cmp	r0, #0
 80140e2:	f73f adbd 	bgt.w	8013c60 <_dtoa_r+0x4d0>
 80140e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140e8:	9d00      	ldr	r5, [sp, #0]
 80140ea:	ea6f 0a03 	mvn.w	sl, r3
 80140ee:	f04f 0800 	mov.w	r8, #0
 80140f2:	4631      	mov	r1, r6
 80140f4:	4620      	mov	r0, r4
 80140f6:	f000 fa99 	bl	801462c <_Bfree>
 80140fa:	2f00      	cmp	r7, #0
 80140fc:	f43f aeb4 	beq.w	8013e68 <_dtoa_r+0x6d8>
 8014100:	f1b8 0f00 	cmp.w	r8, #0
 8014104:	d005      	beq.n	8014112 <_dtoa_r+0x982>
 8014106:	45b8      	cmp	r8, r7
 8014108:	d003      	beq.n	8014112 <_dtoa_r+0x982>
 801410a:	4641      	mov	r1, r8
 801410c:	4620      	mov	r0, r4
 801410e:	f000 fa8d 	bl	801462c <_Bfree>
 8014112:	4639      	mov	r1, r7
 8014114:	4620      	mov	r0, r4
 8014116:	f000 fa89 	bl	801462c <_Bfree>
 801411a:	e6a5      	b.n	8013e68 <_dtoa_r+0x6d8>
 801411c:	2600      	movs	r6, #0
 801411e:	4637      	mov	r7, r6
 8014120:	e7e1      	b.n	80140e6 <_dtoa_r+0x956>
 8014122:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014124:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014128:	4637      	mov	r7, r6
 801412a:	e599      	b.n	8013c60 <_dtoa_r+0x4d0>
 801412c:	9b08      	ldr	r3, [sp, #32]
 801412e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014132:	2b00      	cmp	r3, #0
 8014134:	f000 80fd 	beq.w	8014332 <_dtoa_r+0xba2>
 8014138:	2d00      	cmp	r5, #0
 801413a:	dd05      	ble.n	8014148 <_dtoa_r+0x9b8>
 801413c:	4639      	mov	r1, r7
 801413e:	462a      	mov	r2, r5
 8014140:	4620      	mov	r0, r4
 8014142:	f000 fc45 	bl	80149d0 <__lshift>
 8014146:	4607      	mov	r7, r0
 8014148:	9b06      	ldr	r3, [sp, #24]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d05c      	beq.n	8014208 <_dtoa_r+0xa78>
 801414e:	6879      	ldr	r1, [r7, #4]
 8014150:	4620      	mov	r0, r4
 8014152:	f000 fa2b 	bl	80145ac <_Balloc>
 8014156:	4605      	mov	r5, r0
 8014158:	b928      	cbnz	r0, 8014166 <_dtoa_r+0x9d6>
 801415a:	4b80      	ldr	r3, [pc, #512]	; (801435c <_dtoa_r+0xbcc>)
 801415c:	4602      	mov	r2, r0
 801415e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014162:	f7ff bb2e 	b.w	80137c2 <_dtoa_r+0x32>
 8014166:	693a      	ldr	r2, [r7, #16]
 8014168:	3202      	adds	r2, #2
 801416a:	0092      	lsls	r2, r2, #2
 801416c:	f107 010c 	add.w	r1, r7, #12
 8014170:	300c      	adds	r0, #12
 8014172:	f7fe fbeb 	bl	801294c <memcpy>
 8014176:	2201      	movs	r2, #1
 8014178:	4629      	mov	r1, r5
 801417a:	4620      	mov	r0, r4
 801417c:	f000 fc28 	bl	80149d0 <__lshift>
 8014180:	9b00      	ldr	r3, [sp, #0]
 8014182:	3301      	adds	r3, #1
 8014184:	9301      	str	r3, [sp, #4]
 8014186:	9b00      	ldr	r3, [sp, #0]
 8014188:	444b      	add	r3, r9
 801418a:	9307      	str	r3, [sp, #28]
 801418c:	9b02      	ldr	r3, [sp, #8]
 801418e:	f003 0301 	and.w	r3, r3, #1
 8014192:	46b8      	mov	r8, r7
 8014194:	9306      	str	r3, [sp, #24]
 8014196:	4607      	mov	r7, r0
 8014198:	9b01      	ldr	r3, [sp, #4]
 801419a:	4631      	mov	r1, r6
 801419c:	3b01      	subs	r3, #1
 801419e:	4658      	mov	r0, fp
 80141a0:	9302      	str	r3, [sp, #8]
 80141a2:	f7ff fa67 	bl	8013674 <quorem>
 80141a6:	4603      	mov	r3, r0
 80141a8:	3330      	adds	r3, #48	; 0x30
 80141aa:	9004      	str	r0, [sp, #16]
 80141ac:	4641      	mov	r1, r8
 80141ae:	4658      	mov	r0, fp
 80141b0:	9308      	str	r3, [sp, #32]
 80141b2:	f000 fc79 	bl	8014aa8 <__mcmp>
 80141b6:	463a      	mov	r2, r7
 80141b8:	4681      	mov	r9, r0
 80141ba:	4631      	mov	r1, r6
 80141bc:	4620      	mov	r0, r4
 80141be:	f000 fc8f 	bl	8014ae0 <__mdiff>
 80141c2:	68c2      	ldr	r2, [r0, #12]
 80141c4:	9b08      	ldr	r3, [sp, #32]
 80141c6:	4605      	mov	r5, r0
 80141c8:	bb02      	cbnz	r2, 801420c <_dtoa_r+0xa7c>
 80141ca:	4601      	mov	r1, r0
 80141cc:	4658      	mov	r0, fp
 80141ce:	f000 fc6b 	bl	8014aa8 <__mcmp>
 80141d2:	9b08      	ldr	r3, [sp, #32]
 80141d4:	4602      	mov	r2, r0
 80141d6:	4629      	mov	r1, r5
 80141d8:	4620      	mov	r0, r4
 80141da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80141de:	f000 fa25 	bl	801462c <_Bfree>
 80141e2:	9b05      	ldr	r3, [sp, #20]
 80141e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141e6:	9d01      	ldr	r5, [sp, #4]
 80141e8:	ea43 0102 	orr.w	r1, r3, r2
 80141ec:	9b06      	ldr	r3, [sp, #24]
 80141ee:	430b      	orrs	r3, r1
 80141f0:	9b08      	ldr	r3, [sp, #32]
 80141f2:	d10d      	bne.n	8014210 <_dtoa_r+0xa80>
 80141f4:	2b39      	cmp	r3, #57	; 0x39
 80141f6:	d029      	beq.n	801424c <_dtoa_r+0xabc>
 80141f8:	f1b9 0f00 	cmp.w	r9, #0
 80141fc:	dd01      	ble.n	8014202 <_dtoa_r+0xa72>
 80141fe:	9b04      	ldr	r3, [sp, #16]
 8014200:	3331      	adds	r3, #49	; 0x31
 8014202:	9a02      	ldr	r2, [sp, #8]
 8014204:	7013      	strb	r3, [r2, #0]
 8014206:	e774      	b.n	80140f2 <_dtoa_r+0x962>
 8014208:	4638      	mov	r0, r7
 801420a:	e7b9      	b.n	8014180 <_dtoa_r+0x9f0>
 801420c:	2201      	movs	r2, #1
 801420e:	e7e2      	b.n	80141d6 <_dtoa_r+0xa46>
 8014210:	f1b9 0f00 	cmp.w	r9, #0
 8014214:	db06      	blt.n	8014224 <_dtoa_r+0xa94>
 8014216:	9905      	ldr	r1, [sp, #20]
 8014218:	ea41 0909 	orr.w	r9, r1, r9
 801421c:	9906      	ldr	r1, [sp, #24]
 801421e:	ea59 0101 	orrs.w	r1, r9, r1
 8014222:	d120      	bne.n	8014266 <_dtoa_r+0xad6>
 8014224:	2a00      	cmp	r2, #0
 8014226:	ddec      	ble.n	8014202 <_dtoa_r+0xa72>
 8014228:	4659      	mov	r1, fp
 801422a:	2201      	movs	r2, #1
 801422c:	4620      	mov	r0, r4
 801422e:	9301      	str	r3, [sp, #4]
 8014230:	f000 fbce 	bl	80149d0 <__lshift>
 8014234:	4631      	mov	r1, r6
 8014236:	4683      	mov	fp, r0
 8014238:	f000 fc36 	bl	8014aa8 <__mcmp>
 801423c:	2800      	cmp	r0, #0
 801423e:	9b01      	ldr	r3, [sp, #4]
 8014240:	dc02      	bgt.n	8014248 <_dtoa_r+0xab8>
 8014242:	d1de      	bne.n	8014202 <_dtoa_r+0xa72>
 8014244:	07da      	lsls	r2, r3, #31
 8014246:	d5dc      	bpl.n	8014202 <_dtoa_r+0xa72>
 8014248:	2b39      	cmp	r3, #57	; 0x39
 801424a:	d1d8      	bne.n	80141fe <_dtoa_r+0xa6e>
 801424c:	9a02      	ldr	r2, [sp, #8]
 801424e:	2339      	movs	r3, #57	; 0x39
 8014250:	7013      	strb	r3, [r2, #0]
 8014252:	462b      	mov	r3, r5
 8014254:	461d      	mov	r5, r3
 8014256:	3b01      	subs	r3, #1
 8014258:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801425c:	2a39      	cmp	r2, #57	; 0x39
 801425e:	d050      	beq.n	8014302 <_dtoa_r+0xb72>
 8014260:	3201      	adds	r2, #1
 8014262:	701a      	strb	r2, [r3, #0]
 8014264:	e745      	b.n	80140f2 <_dtoa_r+0x962>
 8014266:	2a00      	cmp	r2, #0
 8014268:	dd03      	ble.n	8014272 <_dtoa_r+0xae2>
 801426a:	2b39      	cmp	r3, #57	; 0x39
 801426c:	d0ee      	beq.n	801424c <_dtoa_r+0xabc>
 801426e:	3301      	adds	r3, #1
 8014270:	e7c7      	b.n	8014202 <_dtoa_r+0xa72>
 8014272:	9a01      	ldr	r2, [sp, #4]
 8014274:	9907      	ldr	r1, [sp, #28]
 8014276:	f802 3c01 	strb.w	r3, [r2, #-1]
 801427a:	428a      	cmp	r2, r1
 801427c:	d02a      	beq.n	80142d4 <_dtoa_r+0xb44>
 801427e:	4659      	mov	r1, fp
 8014280:	2300      	movs	r3, #0
 8014282:	220a      	movs	r2, #10
 8014284:	4620      	mov	r0, r4
 8014286:	f000 f9f3 	bl	8014670 <__multadd>
 801428a:	45b8      	cmp	r8, r7
 801428c:	4683      	mov	fp, r0
 801428e:	f04f 0300 	mov.w	r3, #0
 8014292:	f04f 020a 	mov.w	r2, #10
 8014296:	4641      	mov	r1, r8
 8014298:	4620      	mov	r0, r4
 801429a:	d107      	bne.n	80142ac <_dtoa_r+0xb1c>
 801429c:	f000 f9e8 	bl	8014670 <__multadd>
 80142a0:	4680      	mov	r8, r0
 80142a2:	4607      	mov	r7, r0
 80142a4:	9b01      	ldr	r3, [sp, #4]
 80142a6:	3301      	adds	r3, #1
 80142a8:	9301      	str	r3, [sp, #4]
 80142aa:	e775      	b.n	8014198 <_dtoa_r+0xa08>
 80142ac:	f000 f9e0 	bl	8014670 <__multadd>
 80142b0:	4639      	mov	r1, r7
 80142b2:	4680      	mov	r8, r0
 80142b4:	2300      	movs	r3, #0
 80142b6:	220a      	movs	r2, #10
 80142b8:	4620      	mov	r0, r4
 80142ba:	f000 f9d9 	bl	8014670 <__multadd>
 80142be:	4607      	mov	r7, r0
 80142c0:	e7f0      	b.n	80142a4 <_dtoa_r+0xb14>
 80142c2:	f1b9 0f00 	cmp.w	r9, #0
 80142c6:	9a00      	ldr	r2, [sp, #0]
 80142c8:	bfcc      	ite	gt
 80142ca:	464d      	movgt	r5, r9
 80142cc:	2501      	movle	r5, #1
 80142ce:	4415      	add	r5, r2
 80142d0:	f04f 0800 	mov.w	r8, #0
 80142d4:	4659      	mov	r1, fp
 80142d6:	2201      	movs	r2, #1
 80142d8:	4620      	mov	r0, r4
 80142da:	9301      	str	r3, [sp, #4]
 80142dc:	f000 fb78 	bl	80149d0 <__lshift>
 80142e0:	4631      	mov	r1, r6
 80142e2:	4683      	mov	fp, r0
 80142e4:	f000 fbe0 	bl	8014aa8 <__mcmp>
 80142e8:	2800      	cmp	r0, #0
 80142ea:	dcb2      	bgt.n	8014252 <_dtoa_r+0xac2>
 80142ec:	d102      	bne.n	80142f4 <_dtoa_r+0xb64>
 80142ee:	9b01      	ldr	r3, [sp, #4]
 80142f0:	07db      	lsls	r3, r3, #31
 80142f2:	d4ae      	bmi.n	8014252 <_dtoa_r+0xac2>
 80142f4:	462b      	mov	r3, r5
 80142f6:	461d      	mov	r5, r3
 80142f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80142fc:	2a30      	cmp	r2, #48	; 0x30
 80142fe:	d0fa      	beq.n	80142f6 <_dtoa_r+0xb66>
 8014300:	e6f7      	b.n	80140f2 <_dtoa_r+0x962>
 8014302:	9a00      	ldr	r2, [sp, #0]
 8014304:	429a      	cmp	r2, r3
 8014306:	d1a5      	bne.n	8014254 <_dtoa_r+0xac4>
 8014308:	f10a 0a01 	add.w	sl, sl, #1
 801430c:	2331      	movs	r3, #49	; 0x31
 801430e:	e779      	b.n	8014204 <_dtoa_r+0xa74>
 8014310:	4b13      	ldr	r3, [pc, #76]	; (8014360 <_dtoa_r+0xbd0>)
 8014312:	f7ff baaf 	b.w	8013874 <_dtoa_r+0xe4>
 8014316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014318:	2b00      	cmp	r3, #0
 801431a:	f47f aa86 	bne.w	801382a <_dtoa_r+0x9a>
 801431e:	4b11      	ldr	r3, [pc, #68]	; (8014364 <_dtoa_r+0xbd4>)
 8014320:	f7ff baa8 	b.w	8013874 <_dtoa_r+0xe4>
 8014324:	f1b9 0f00 	cmp.w	r9, #0
 8014328:	dc03      	bgt.n	8014332 <_dtoa_r+0xba2>
 801432a:	9b05      	ldr	r3, [sp, #20]
 801432c:	2b02      	cmp	r3, #2
 801432e:	f73f aec9 	bgt.w	80140c4 <_dtoa_r+0x934>
 8014332:	9d00      	ldr	r5, [sp, #0]
 8014334:	4631      	mov	r1, r6
 8014336:	4658      	mov	r0, fp
 8014338:	f7ff f99c 	bl	8013674 <quorem>
 801433c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014340:	f805 3b01 	strb.w	r3, [r5], #1
 8014344:	9a00      	ldr	r2, [sp, #0]
 8014346:	1aaa      	subs	r2, r5, r2
 8014348:	4591      	cmp	r9, r2
 801434a:	ddba      	ble.n	80142c2 <_dtoa_r+0xb32>
 801434c:	4659      	mov	r1, fp
 801434e:	2300      	movs	r3, #0
 8014350:	220a      	movs	r2, #10
 8014352:	4620      	mov	r0, r4
 8014354:	f000 f98c 	bl	8014670 <__multadd>
 8014358:	4683      	mov	fp, r0
 801435a:	e7eb      	b.n	8014334 <_dtoa_r+0xba4>
 801435c:	0801980a 	.word	0x0801980a
 8014360:	080196c8 	.word	0x080196c8
 8014364:	0801979e 	.word	0x0801979e

08014368 <__errno>:
 8014368:	4b01      	ldr	r3, [pc, #4]	; (8014370 <__errno+0x8>)
 801436a:	6818      	ldr	r0, [r3, #0]
 801436c:	4770      	bx	lr
 801436e:	bf00      	nop
 8014370:	2000004c 	.word	0x2000004c

08014374 <std>:
 8014374:	2300      	movs	r3, #0
 8014376:	b510      	push	{r4, lr}
 8014378:	4604      	mov	r4, r0
 801437a:	e9c0 3300 	strd	r3, r3, [r0]
 801437e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014382:	6083      	str	r3, [r0, #8]
 8014384:	8181      	strh	r1, [r0, #12]
 8014386:	6643      	str	r3, [r0, #100]	; 0x64
 8014388:	81c2      	strh	r2, [r0, #14]
 801438a:	6183      	str	r3, [r0, #24]
 801438c:	4619      	mov	r1, r3
 801438e:	2208      	movs	r2, #8
 8014390:	305c      	adds	r0, #92	; 0x5c
 8014392:	f7fe fb03 	bl	801299c <memset>
 8014396:	4b05      	ldr	r3, [pc, #20]	; (80143ac <std+0x38>)
 8014398:	6263      	str	r3, [r4, #36]	; 0x24
 801439a:	4b05      	ldr	r3, [pc, #20]	; (80143b0 <std+0x3c>)
 801439c:	62a3      	str	r3, [r4, #40]	; 0x28
 801439e:	4b05      	ldr	r3, [pc, #20]	; (80143b4 <std+0x40>)
 80143a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80143a2:	4b05      	ldr	r3, [pc, #20]	; (80143b8 <std+0x44>)
 80143a4:	6224      	str	r4, [r4, #32]
 80143a6:	6323      	str	r3, [r4, #48]	; 0x30
 80143a8:	bd10      	pop	{r4, pc}
 80143aa:	bf00      	nop
 80143ac:	08015231 	.word	0x08015231
 80143b0:	08015253 	.word	0x08015253
 80143b4:	0801528b 	.word	0x0801528b
 80143b8:	080152af 	.word	0x080152af

080143bc <_cleanup_r>:
 80143bc:	4901      	ldr	r1, [pc, #4]	; (80143c4 <_cleanup_r+0x8>)
 80143be:	f000 b8c1 	b.w	8014544 <_fwalk_reent>
 80143c2:	bf00      	nop
 80143c4:	08015599 	.word	0x08015599

080143c8 <__sfmoreglue>:
 80143c8:	b570      	push	{r4, r5, r6, lr}
 80143ca:	1e4a      	subs	r2, r1, #1
 80143cc:	2568      	movs	r5, #104	; 0x68
 80143ce:	4355      	muls	r5, r2
 80143d0:	460e      	mov	r6, r1
 80143d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80143d6:	f7fe fb39 	bl	8012a4c <_malloc_r>
 80143da:	4604      	mov	r4, r0
 80143dc:	b140      	cbz	r0, 80143f0 <__sfmoreglue+0x28>
 80143de:	2100      	movs	r1, #0
 80143e0:	e9c0 1600 	strd	r1, r6, [r0]
 80143e4:	300c      	adds	r0, #12
 80143e6:	60a0      	str	r0, [r4, #8]
 80143e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80143ec:	f7fe fad6 	bl	801299c <memset>
 80143f0:	4620      	mov	r0, r4
 80143f2:	bd70      	pop	{r4, r5, r6, pc}

080143f4 <__sfp_lock_acquire>:
 80143f4:	4801      	ldr	r0, [pc, #4]	; (80143fc <__sfp_lock_acquire+0x8>)
 80143f6:	f000 b8ca 	b.w	801458e <__retarget_lock_acquire_recursive>
 80143fa:	bf00      	nop
 80143fc:	20009100 	.word	0x20009100

08014400 <__sfp_lock_release>:
 8014400:	4801      	ldr	r0, [pc, #4]	; (8014408 <__sfp_lock_release+0x8>)
 8014402:	f000 b8c5 	b.w	8014590 <__retarget_lock_release_recursive>
 8014406:	bf00      	nop
 8014408:	20009100 	.word	0x20009100

0801440c <__sinit_lock_acquire>:
 801440c:	4801      	ldr	r0, [pc, #4]	; (8014414 <__sinit_lock_acquire+0x8>)
 801440e:	f000 b8be 	b.w	801458e <__retarget_lock_acquire_recursive>
 8014412:	bf00      	nop
 8014414:	200090fb 	.word	0x200090fb

08014418 <__sinit_lock_release>:
 8014418:	4801      	ldr	r0, [pc, #4]	; (8014420 <__sinit_lock_release+0x8>)
 801441a:	f000 b8b9 	b.w	8014590 <__retarget_lock_release_recursive>
 801441e:	bf00      	nop
 8014420:	200090fb 	.word	0x200090fb

08014424 <__sinit>:
 8014424:	b510      	push	{r4, lr}
 8014426:	4604      	mov	r4, r0
 8014428:	f7ff fff0 	bl	801440c <__sinit_lock_acquire>
 801442c:	69a3      	ldr	r3, [r4, #24]
 801442e:	b11b      	cbz	r3, 8014438 <__sinit+0x14>
 8014430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014434:	f7ff bff0 	b.w	8014418 <__sinit_lock_release>
 8014438:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801443c:	6523      	str	r3, [r4, #80]	; 0x50
 801443e:	4b13      	ldr	r3, [pc, #76]	; (801448c <__sinit+0x68>)
 8014440:	4a13      	ldr	r2, [pc, #76]	; (8014490 <__sinit+0x6c>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	62a2      	str	r2, [r4, #40]	; 0x28
 8014446:	42a3      	cmp	r3, r4
 8014448:	bf04      	itt	eq
 801444a:	2301      	moveq	r3, #1
 801444c:	61a3      	streq	r3, [r4, #24]
 801444e:	4620      	mov	r0, r4
 8014450:	f000 f820 	bl	8014494 <__sfp>
 8014454:	6060      	str	r0, [r4, #4]
 8014456:	4620      	mov	r0, r4
 8014458:	f000 f81c 	bl	8014494 <__sfp>
 801445c:	60a0      	str	r0, [r4, #8]
 801445e:	4620      	mov	r0, r4
 8014460:	f000 f818 	bl	8014494 <__sfp>
 8014464:	2200      	movs	r2, #0
 8014466:	60e0      	str	r0, [r4, #12]
 8014468:	2104      	movs	r1, #4
 801446a:	6860      	ldr	r0, [r4, #4]
 801446c:	f7ff ff82 	bl	8014374 <std>
 8014470:	68a0      	ldr	r0, [r4, #8]
 8014472:	2201      	movs	r2, #1
 8014474:	2109      	movs	r1, #9
 8014476:	f7ff ff7d 	bl	8014374 <std>
 801447a:	68e0      	ldr	r0, [r4, #12]
 801447c:	2202      	movs	r2, #2
 801447e:	2112      	movs	r1, #18
 8014480:	f7ff ff78 	bl	8014374 <std>
 8014484:	2301      	movs	r3, #1
 8014486:	61a3      	str	r3, [r4, #24]
 8014488:	e7d2      	b.n	8014430 <__sinit+0xc>
 801448a:	bf00      	nop
 801448c:	080196b4 	.word	0x080196b4
 8014490:	080143bd 	.word	0x080143bd

08014494 <__sfp>:
 8014494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014496:	4607      	mov	r7, r0
 8014498:	f7ff ffac 	bl	80143f4 <__sfp_lock_acquire>
 801449c:	4b1e      	ldr	r3, [pc, #120]	; (8014518 <__sfp+0x84>)
 801449e:	681e      	ldr	r6, [r3, #0]
 80144a0:	69b3      	ldr	r3, [r6, #24]
 80144a2:	b913      	cbnz	r3, 80144aa <__sfp+0x16>
 80144a4:	4630      	mov	r0, r6
 80144a6:	f7ff ffbd 	bl	8014424 <__sinit>
 80144aa:	3648      	adds	r6, #72	; 0x48
 80144ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80144b0:	3b01      	subs	r3, #1
 80144b2:	d503      	bpl.n	80144bc <__sfp+0x28>
 80144b4:	6833      	ldr	r3, [r6, #0]
 80144b6:	b30b      	cbz	r3, 80144fc <__sfp+0x68>
 80144b8:	6836      	ldr	r6, [r6, #0]
 80144ba:	e7f7      	b.n	80144ac <__sfp+0x18>
 80144bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80144c0:	b9d5      	cbnz	r5, 80144f8 <__sfp+0x64>
 80144c2:	4b16      	ldr	r3, [pc, #88]	; (801451c <__sfp+0x88>)
 80144c4:	60e3      	str	r3, [r4, #12]
 80144c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80144ca:	6665      	str	r5, [r4, #100]	; 0x64
 80144cc:	f000 f85e 	bl	801458c <__retarget_lock_init_recursive>
 80144d0:	f7ff ff96 	bl	8014400 <__sfp_lock_release>
 80144d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80144d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80144dc:	6025      	str	r5, [r4, #0]
 80144de:	61a5      	str	r5, [r4, #24]
 80144e0:	2208      	movs	r2, #8
 80144e2:	4629      	mov	r1, r5
 80144e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80144e8:	f7fe fa58 	bl	801299c <memset>
 80144ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80144f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80144f4:	4620      	mov	r0, r4
 80144f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144f8:	3468      	adds	r4, #104	; 0x68
 80144fa:	e7d9      	b.n	80144b0 <__sfp+0x1c>
 80144fc:	2104      	movs	r1, #4
 80144fe:	4638      	mov	r0, r7
 8014500:	f7ff ff62 	bl	80143c8 <__sfmoreglue>
 8014504:	4604      	mov	r4, r0
 8014506:	6030      	str	r0, [r6, #0]
 8014508:	2800      	cmp	r0, #0
 801450a:	d1d5      	bne.n	80144b8 <__sfp+0x24>
 801450c:	f7ff ff78 	bl	8014400 <__sfp_lock_release>
 8014510:	230c      	movs	r3, #12
 8014512:	603b      	str	r3, [r7, #0]
 8014514:	e7ee      	b.n	80144f4 <__sfp+0x60>
 8014516:	bf00      	nop
 8014518:	080196b4 	.word	0x080196b4
 801451c:	ffff0001 	.word	0xffff0001

08014520 <fiprintf>:
 8014520:	b40e      	push	{r1, r2, r3}
 8014522:	b503      	push	{r0, r1, lr}
 8014524:	4601      	mov	r1, r0
 8014526:	ab03      	add	r3, sp, #12
 8014528:	4805      	ldr	r0, [pc, #20]	; (8014540 <fiprintf+0x20>)
 801452a:	f853 2b04 	ldr.w	r2, [r3], #4
 801452e:	6800      	ldr	r0, [r0, #0]
 8014530:	9301      	str	r3, [sp, #4]
 8014532:	f000 fd4d 	bl	8014fd0 <_vfiprintf_r>
 8014536:	b002      	add	sp, #8
 8014538:	f85d eb04 	ldr.w	lr, [sp], #4
 801453c:	b003      	add	sp, #12
 801453e:	4770      	bx	lr
 8014540:	2000004c 	.word	0x2000004c

08014544 <_fwalk_reent>:
 8014544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014548:	4606      	mov	r6, r0
 801454a:	4688      	mov	r8, r1
 801454c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014550:	2700      	movs	r7, #0
 8014552:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014556:	f1b9 0901 	subs.w	r9, r9, #1
 801455a:	d505      	bpl.n	8014568 <_fwalk_reent+0x24>
 801455c:	6824      	ldr	r4, [r4, #0]
 801455e:	2c00      	cmp	r4, #0
 8014560:	d1f7      	bne.n	8014552 <_fwalk_reent+0xe>
 8014562:	4638      	mov	r0, r7
 8014564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014568:	89ab      	ldrh	r3, [r5, #12]
 801456a:	2b01      	cmp	r3, #1
 801456c:	d907      	bls.n	801457e <_fwalk_reent+0x3a>
 801456e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014572:	3301      	adds	r3, #1
 8014574:	d003      	beq.n	801457e <_fwalk_reent+0x3a>
 8014576:	4629      	mov	r1, r5
 8014578:	4630      	mov	r0, r6
 801457a:	47c0      	blx	r8
 801457c:	4307      	orrs	r7, r0
 801457e:	3568      	adds	r5, #104	; 0x68
 8014580:	e7e9      	b.n	8014556 <_fwalk_reent+0x12>
	...

08014584 <_localeconv_r>:
 8014584:	4800      	ldr	r0, [pc, #0]	; (8014588 <_localeconv_r+0x4>)
 8014586:	4770      	bx	lr
 8014588:	200001a0 	.word	0x200001a0

0801458c <__retarget_lock_init_recursive>:
 801458c:	4770      	bx	lr

0801458e <__retarget_lock_acquire_recursive>:
 801458e:	4770      	bx	lr

08014590 <__retarget_lock_release_recursive>:
 8014590:	4770      	bx	lr
	...

08014594 <__malloc_lock>:
 8014594:	4801      	ldr	r0, [pc, #4]	; (801459c <__malloc_lock+0x8>)
 8014596:	f7ff bffa 	b.w	801458e <__retarget_lock_acquire_recursive>
 801459a:	bf00      	nop
 801459c:	200090fc 	.word	0x200090fc

080145a0 <__malloc_unlock>:
 80145a0:	4801      	ldr	r0, [pc, #4]	; (80145a8 <__malloc_unlock+0x8>)
 80145a2:	f7ff bff5 	b.w	8014590 <__retarget_lock_release_recursive>
 80145a6:	bf00      	nop
 80145a8:	200090fc 	.word	0x200090fc

080145ac <_Balloc>:
 80145ac:	b570      	push	{r4, r5, r6, lr}
 80145ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80145b0:	4604      	mov	r4, r0
 80145b2:	460d      	mov	r5, r1
 80145b4:	b976      	cbnz	r6, 80145d4 <_Balloc+0x28>
 80145b6:	2010      	movs	r0, #16
 80145b8:	f7fe f9aa 	bl	8012910 <malloc>
 80145bc:	4602      	mov	r2, r0
 80145be:	6260      	str	r0, [r4, #36]	; 0x24
 80145c0:	b920      	cbnz	r0, 80145cc <_Balloc+0x20>
 80145c2:	4b18      	ldr	r3, [pc, #96]	; (8014624 <_Balloc+0x78>)
 80145c4:	4818      	ldr	r0, [pc, #96]	; (8014628 <_Balloc+0x7c>)
 80145c6:	2166      	movs	r1, #102	; 0x66
 80145c8:	f7ff f836 	bl	8013638 <__assert_func>
 80145cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80145d0:	6006      	str	r6, [r0, #0]
 80145d2:	60c6      	str	r6, [r0, #12]
 80145d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80145d6:	68f3      	ldr	r3, [r6, #12]
 80145d8:	b183      	cbz	r3, 80145fc <_Balloc+0x50>
 80145da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145dc:	68db      	ldr	r3, [r3, #12]
 80145de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80145e2:	b9b8      	cbnz	r0, 8014614 <_Balloc+0x68>
 80145e4:	2101      	movs	r1, #1
 80145e6:	fa01 f605 	lsl.w	r6, r1, r5
 80145ea:	1d72      	adds	r2, r6, #5
 80145ec:	0092      	lsls	r2, r2, #2
 80145ee:	4620      	mov	r0, r4
 80145f0:	f000 fb5a 	bl	8014ca8 <_calloc_r>
 80145f4:	b160      	cbz	r0, 8014610 <_Balloc+0x64>
 80145f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80145fa:	e00e      	b.n	801461a <_Balloc+0x6e>
 80145fc:	2221      	movs	r2, #33	; 0x21
 80145fe:	2104      	movs	r1, #4
 8014600:	4620      	mov	r0, r4
 8014602:	f000 fb51 	bl	8014ca8 <_calloc_r>
 8014606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014608:	60f0      	str	r0, [r6, #12]
 801460a:	68db      	ldr	r3, [r3, #12]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d1e4      	bne.n	80145da <_Balloc+0x2e>
 8014610:	2000      	movs	r0, #0
 8014612:	bd70      	pop	{r4, r5, r6, pc}
 8014614:	6802      	ldr	r2, [r0, #0]
 8014616:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801461a:	2300      	movs	r3, #0
 801461c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014620:	e7f7      	b.n	8014612 <_Balloc+0x66>
 8014622:	bf00      	nop
 8014624:	080196ec 	.word	0x080196ec
 8014628:	0801987c 	.word	0x0801987c

0801462c <_Bfree>:
 801462c:	b570      	push	{r4, r5, r6, lr}
 801462e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014630:	4605      	mov	r5, r0
 8014632:	460c      	mov	r4, r1
 8014634:	b976      	cbnz	r6, 8014654 <_Bfree+0x28>
 8014636:	2010      	movs	r0, #16
 8014638:	f7fe f96a 	bl	8012910 <malloc>
 801463c:	4602      	mov	r2, r0
 801463e:	6268      	str	r0, [r5, #36]	; 0x24
 8014640:	b920      	cbnz	r0, 801464c <_Bfree+0x20>
 8014642:	4b09      	ldr	r3, [pc, #36]	; (8014668 <_Bfree+0x3c>)
 8014644:	4809      	ldr	r0, [pc, #36]	; (801466c <_Bfree+0x40>)
 8014646:	218a      	movs	r1, #138	; 0x8a
 8014648:	f7fe fff6 	bl	8013638 <__assert_func>
 801464c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014650:	6006      	str	r6, [r0, #0]
 8014652:	60c6      	str	r6, [r0, #12]
 8014654:	b13c      	cbz	r4, 8014666 <_Bfree+0x3a>
 8014656:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014658:	6862      	ldr	r2, [r4, #4]
 801465a:	68db      	ldr	r3, [r3, #12]
 801465c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014660:	6021      	str	r1, [r4, #0]
 8014662:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014666:	bd70      	pop	{r4, r5, r6, pc}
 8014668:	080196ec 	.word	0x080196ec
 801466c:	0801987c 	.word	0x0801987c

08014670 <__multadd>:
 8014670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014674:	690e      	ldr	r6, [r1, #16]
 8014676:	4607      	mov	r7, r0
 8014678:	4698      	mov	r8, r3
 801467a:	460c      	mov	r4, r1
 801467c:	f101 0014 	add.w	r0, r1, #20
 8014680:	2300      	movs	r3, #0
 8014682:	6805      	ldr	r5, [r0, #0]
 8014684:	b2a9      	uxth	r1, r5
 8014686:	fb02 8101 	mla	r1, r2, r1, r8
 801468a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801468e:	0c2d      	lsrs	r5, r5, #16
 8014690:	fb02 c505 	mla	r5, r2, r5, ip
 8014694:	b289      	uxth	r1, r1
 8014696:	3301      	adds	r3, #1
 8014698:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801469c:	429e      	cmp	r6, r3
 801469e:	f840 1b04 	str.w	r1, [r0], #4
 80146a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80146a6:	dcec      	bgt.n	8014682 <__multadd+0x12>
 80146a8:	f1b8 0f00 	cmp.w	r8, #0
 80146ac:	d022      	beq.n	80146f4 <__multadd+0x84>
 80146ae:	68a3      	ldr	r3, [r4, #8]
 80146b0:	42b3      	cmp	r3, r6
 80146b2:	dc19      	bgt.n	80146e8 <__multadd+0x78>
 80146b4:	6861      	ldr	r1, [r4, #4]
 80146b6:	4638      	mov	r0, r7
 80146b8:	3101      	adds	r1, #1
 80146ba:	f7ff ff77 	bl	80145ac <_Balloc>
 80146be:	4605      	mov	r5, r0
 80146c0:	b928      	cbnz	r0, 80146ce <__multadd+0x5e>
 80146c2:	4602      	mov	r2, r0
 80146c4:	4b0d      	ldr	r3, [pc, #52]	; (80146fc <__multadd+0x8c>)
 80146c6:	480e      	ldr	r0, [pc, #56]	; (8014700 <__multadd+0x90>)
 80146c8:	21b5      	movs	r1, #181	; 0xb5
 80146ca:	f7fe ffb5 	bl	8013638 <__assert_func>
 80146ce:	6922      	ldr	r2, [r4, #16]
 80146d0:	3202      	adds	r2, #2
 80146d2:	f104 010c 	add.w	r1, r4, #12
 80146d6:	0092      	lsls	r2, r2, #2
 80146d8:	300c      	adds	r0, #12
 80146da:	f7fe f937 	bl	801294c <memcpy>
 80146de:	4621      	mov	r1, r4
 80146e0:	4638      	mov	r0, r7
 80146e2:	f7ff ffa3 	bl	801462c <_Bfree>
 80146e6:	462c      	mov	r4, r5
 80146e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80146ec:	3601      	adds	r6, #1
 80146ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80146f2:	6126      	str	r6, [r4, #16]
 80146f4:	4620      	mov	r0, r4
 80146f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146fa:	bf00      	nop
 80146fc:	0801980a 	.word	0x0801980a
 8014700:	0801987c 	.word	0x0801987c

08014704 <__hi0bits>:
 8014704:	0c03      	lsrs	r3, r0, #16
 8014706:	041b      	lsls	r3, r3, #16
 8014708:	b9d3      	cbnz	r3, 8014740 <__hi0bits+0x3c>
 801470a:	0400      	lsls	r0, r0, #16
 801470c:	2310      	movs	r3, #16
 801470e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014712:	bf04      	itt	eq
 8014714:	0200      	lsleq	r0, r0, #8
 8014716:	3308      	addeq	r3, #8
 8014718:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801471c:	bf04      	itt	eq
 801471e:	0100      	lsleq	r0, r0, #4
 8014720:	3304      	addeq	r3, #4
 8014722:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014726:	bf04      	itt	eq
 8014728:	0080      	lsleq	r0, r0, #2
 801472a:	3302      	addeq	r3, #2
 801472c:	2800      	cmp	r0, #0
 801472e:	db05      	blt.n	801473c <__hi0bits+0x38>
 8014730:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014734:	f103 0301 	add.w	r3, r3, #1
 8014738:	bf08      	it	eq
 801473a:	2320      	moveq	r3, #32
 801473c:	4618      	mov	r0, r3
 801473e:	4770      	bx	lr
 8014740:	2300      	movs	r3, #0
 8014742:	e7e4      	b.n	801470e <__hi0bits+0xa>

08014744 <__lo0bits>:
 8014744:	6803      	ldr	r3, [r0, #0]
 8014746:	f013 0207 	ands.w	r2, r3, #7
 801474a:	4601      	mov	r1, r0
 801474c:	d00b      	beq.n	8014766 <__lo0bits+0x22>
 801474e:	07da      	lsls	r2, r3, #31
 8014750:	d424      	bmi.n	801479c <__lo0bits+0x58>
 8014752:	0798      	lsls	r0, r3, #30
 8014754:	bf49      	itett	mi
 8014756:	085b      	lsrmi	r3, r3, #1
 8014758:	089b      	lsrpl	r3, r3, #2
 801475a:	2001      	movmi	r0, #1
 801475c:	600b      	strmi	r3, [r1, #0]
 801475e:	bf5c      	itt	pl
 8014760:	600b      	strpl	r3, [r1, #0]
 8014762:	2002      	movpl	r0, #2
 8014764:	4770      	bx	lr
 8014766:	b298      	uxth	r0, r3
 8014768:	b9b0      	cbnz	r0, 8014798 <__lo0bits+0x54>
 801476a:	0c1b      	lsrs	r3, r3, #16
 801476c:	2010      	movs	r0, #16
 801476e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014772:	bf04      	itt	eq
 8014774:	0a1b      	lsreq	r3, r3, #8
 8014776:	3008      	addeq	r0, #8
 8014778:	071a      	lsls	r2, r3, #28
 801477a:	bf04      	itt	eq
 801477c:	091b      	lsreq	r3, r3, #4
 801477e:	3004      	addeq	r0, #4
 8014780:	079a      	lsls	r2, r3, #30
 8014782:	bf04      	itt	eq
 8014784:	089b      	lsreq	r3, r3, #2
 8014786:	3002      	addeq	r0, #2
 8014788:	07da      	lsls	r2, r3, #31
 801478a:	d403      	bmi.n	8014794 <__lo0bits+0x50>
 801478c:	085b      	lsrs	r3, r3, #1
 801478e:	f100 0001 	add.w	r0, r0, #1
 8014792:	d005      	beq.n	80147a0 <__lo0bits+0x5c>
 8014794:	600b      	str	r3, [r1, #0]
 8014796:	4770      	bx	lr
 8014798:	4610      	mov	r0, r2
 801479a:	e7e8      	b.n	801476e <__lo0bits+0x2a>
 801479c:	2000      	movs	r0, #0
 801479e:	4770      	bx	lr
 80147a0:	2020      	movs	r0, #32
 80147a2:	4770      	bx	lr

080147a4 <__i2b>:
 80147a4:	b510      	push	{r4, lr}
 80147a6:	460c      	mov	r4, r1
 80147a8:	2101      	movs	r1, #1
 80147aa:	f7ff feff 	bl	80145ac <_Balloc>
 80147ae:	4602      	mov	r2, r0
 80147b0:	b928      	cbnz	r0, 80147be <__i2b+0x1a>
 80147b2:	4b05      	ldr	r3, [pc, #20]	; (80147c8 <__i2b+0x24>)
 80147b4:	4805      	ldr	r0, [pc, #20]	; (80147cc <__i2b+0x28>)
 80147b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80147ba:	f7fe ff3d 	bl	8013638 <__assert_func>
 80147be:	2301      	movs	r3, #1
 80147c0:	6144      	str	r4, [r0, #20]
 80147c2:	6103      	str	r3, [r0, #16]
 80147c4:	bd10      	pop	{r4, pc}
 80147c6:	bf00      	nop
 80147c8:	0801980a 	.word	0x0801980a
 80147cc:	0801987c 	.word	0x0801987c

080147d0 <__multiply>:
 80147d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147d4:	4614      	mov	r4, r2
 80147d6:	690a      	ldr	r2, [r1, #16]
 80147d8:	6923      	ldr	r3, [r4, #16]
 80147da:	429a      	cmp	r2, r3
 80147dc:	bfb8      	it	lt
 80147de:	460b      	movlt	r3, r1
 80147e0:	460d      	mov	r5, r1
 80147e2:	bfbc      	itt	lt
 80147e4:	4625      	movlt	r5, r4
 80147e6:	461c      	movlt	r4, r3
 80147e8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80147ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80147f0:	68ab      	ldr	r3, [r5, #8]
 80147f2:	6869      	ldr	r1, [r5, #4]
 80147f4:	eb0a 0709 	add.w	r7, sl, r9
 80147f8:	42bb      	cmp	r3, r7
 80147fa:	b085      	sub	sp, #20
 80147fc:	bfb8      	it	lt
 80147fe:	3101      	addlt	r1, #1
 8014800:	f7ff fed4 	bl	80145ac <_Balloc>
 8014804:	b930      	cbnz	r0, 8014814 <__multiply+0x44>
 8014806:	4602      	mov	r2, r0
 8014808:	4b42      	ldr	r3, [pc, #264]	; (8014914 <__multiply+0x144>)
 801480a:	4843      	ldr	r0, [pc, #268]	; (8014918 <__multiply+0x148>)
 801480c:	f240 115d 	movw	r1, #349	; 0x15d
 8014810:	f7fe ff12 	bl	8013638 <__assert_func>
 8014814:	f100 0614 	add.w	r6, r0, #20
 8014818:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801481c:	4633      	mov	r3, r6
 801481e:	2200      	movs	r2, #0
 8014820:	4543      	cmp	r3, r8
 8014822:	d31e      	bcc.n	8014862 <__multiply+0x92>
 8014824:	f105 0c14 	add.w	ip, r5, #20
 8014828:	f104 0314 	add.w	r3, r4, #20
 801482c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014830:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014834:	9202      	str	r2, [sp, #8]
 8014836:	ebac 0205 	sub.w	r2, ip, r5
 801483a:	3a15      	subs	r2, #21
 801483c:	f022 0203 	bic.w	r2, r2, #3
 8014840:	3204      	adds	r2, #4
 8014842:	f105 0115 	add.w	r1, r5, #21
 8014846:	458c      	cmp	ip, r1
 8014848:	bf38      	it	cc
 801484a:	2204      	movcc	r2, #4
 801484c:	9201      	str	r2, [sp, #4]
 801484e:	9a02      	ldr	r2, [sp, #8]
 8014850:	9303      	str	r3, [sp, #12]
 8014852:	429a      	cmp	r2, r3
 8014854:	d808      	bhi.n	8014868 <__multiply+0x98>
 8014856:	2f00      	cmp	r7, #0
 8014858:	dc55      	bgt.n	8014906 <__multiply+0x136>
 801485a:	6107      	str	r7, [r0, #16]
 801485c:	b005      	add	sp, #20
 801485e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014862:	f843 2b04 	str.w	r2, [r3], #4
 8014866:	e7db      	b.n	8014820 <__multiply+0x50>
 8014868:	f8b3 a000 	ldrh.w	sl, [r3]
 801486c:	f1ba 0f00 	cmp.w	sl, #0
 8014870:	d020      	beq.n	80148b4 <__multiply+0xe4>
 8014872:	f105 0e14 	add.w	lr, r5, #20
 8014876:	46b1      	mov	r9, r6
 8014878:	2200      	movs	r2, #0
 801487a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801487e:	f8d9 b000 	ldr.w	fp, [r9]
 8014882:	b2a1      	uxth	r1, r4
 8014884:	fa1f fb8b 	uxth.w	fp, fp
 8014888:	fb0a b101 	mla	r1, sl, r1, fp
 801488c:	4411      	add	r1, r2
 801488e:	f8d9 2000 	ldr.w	r2, [r9]
 8014892:	0c24      	lsrs	r4, r4, #16
 8014894:	0c12      	lsrs	r2, r2, #16
 8014896:	fb0a 2404 	mla	r4, sl, r4, r2
 801489a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801489e:	b289      	uxth	r1, r1
 80148a0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80148a4:	45f4      	cmp	ip, lr
 80148a6:	f849 1b04 	str.w	r1, [r9], #4
 80148aa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80148ae:	d8e4      	bhi.n	801487a <__multiply+0xaa>
 80148b0:	9901      	ldr	r1, [sp, #4]
 80148b2:	5072      	str	r2, [r6, r1]
 80148b4:	9a03      	ldr	r2, [sp, #12]
 80148b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80148ba:	3304      	adds	r3, #4
 80148bc:	f1b9 0f00 	cmp.w	r9, #0
 80148c0:	d01f      	beq.n	8014902 <__multiply+0x132>
 80148c2:	6834      	ldr	r4, [r6, #0]
 80148c4:	f105 0114 	add.w	r1, r5, #20
 80148c8:	46b6      	mov	lr, r6
 80148ca:	f04f 0a00 	mov.w	sl, #0
 80148ce:	880a      	ldrh	r2, [r1, #0]
 80148d0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80148d4:	fb09 b202 	mla	r2, r9, r2, fp
 80148d8:	4492      	add	sl, r2
 80148da:	b2a4      	uxth	r4, r4
 80148dc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80148e0:	f84e 4b04 	str.w	r4, [lr], #4
 80148e4:	f851 4b04 	ldr.w	r4, [r1], #4
 80148e8:	f8be 2000 	ldrh.w	r2, [lr]
 80148ec:	0c24      	lsrs	r4, r4, #16
 80148ee:	fb09 2404 	mla	r4, r9, r4, r2
 80148f2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80148f6:	458c      	cmp	ip, r1
 80148f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80148fc:	d8e7      	bhi.n	80148ce <__multiply+0xfe>
 80148fe:	9a01      	ldr	r2, [sp, #4]
 8014900:	50b4      	str	r4, [r6, r2]
 8014902:	3604      	adds	r6, #4
 8014904:	e7a3      	b.n	801484e <__multiply+0x7e>
 8014906:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801490a:	2b00      	cmp	r3, #0
 801490c:	d1a5      	bne.n	801485a <__multiply+0x8a>
 801490e:	3f01      	subs	r7, #1
 8014910:	e7a1      	b.n	8014856 <__multiply+0x86>
 8014912:	bf00      	nop
 8014914:	0801980a 	.word	0x0801980a
 8014918:	0801987c 	.word	0x0801987c

0801491c <__pow5mult>:
 801491c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014920:	4615      	mov	r5, r2
 8014922:	f012 0203 	ands.w	r2, r2, #3
 8014926:	4606      	mov	r6, r0
 8014928:	460f      	mov	r7, r1
 801492a:	d007      	beq.n	801493c <__pow5mult+0x20>
 801492c:	4c25      	ldr	r4, [pc, #148]	; (80149c4 <__pow5mult+0xa8>)
 801492e:	3a01      	subs	r2, #1
 8014930:	2300      	movs	r3, #0
 8014932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014936:	f7ff fe9b 	bl	8014670 <__multadd>
 801493a:	4607      	mov	r7, r0
 801493c:	10ad      	asrs	r5, r5, #2
 801493e:	d03d      	beq.n	80149bc <__pow5mult+0xa0>
 8014940:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014942:	b97c      	cbnz	r4, 8014964 <__pow5mult+0x48>
 8014944:	2010      	movs	r0, #16
 8014946:	f7fd ffe3 	bl	8012910 <malloc>
 801494a:	4602      	mov	r2, r0
 801494c:	6270      	str	r0, [r6, #36]	; 0x24
 801494e:	b928      	cbnz	r0, 801495c <__pow5mult+0x40>
 8014950:	4b1d      	ldr	r3, [pc, #116]	; (80149c8 <__pow5mult+0xac>)
 8014952:	481e      	ldr	r0, [pc, #120]	; (80149cc <__pow5mult+0xb0>)
 8014954:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014958:	f7fe fe6e 	bl	8013638 <__assert_func>
 801495c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014960:	6004      	str	r4, [r0, #0]
 8014962:	60c4      	str	r4, [r0, #12]
 8014964:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014968:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801496c:	b94c      	cbnz	r4, 8014982 <__pow5mult+0x66>
 801496e:	f240 2171 	movw	r1, #625	; 0x271
 8014972:	4630      	mov	r0, r6
 8014974:	f7ff ff16 	bl	80147a4 <__i2b>
 8014978:	2300      	movs	r3, #0
 801497a:	f8c8 0008 	str.w	r0, [r8, #8]
 801497e:	4604      	mov	r4, r0
 8014980:	6003      	str	r3, [r0, #0]
 8014982:	f04f 0900 	mov.w	r9, #0
 8014986:	07eb      	lsls	r3, r5, #31
 8014988:	d50a      	bpl.n	80149a0 <__pow5mult+0x84>
 801498a:	4639      	mov	r1, r7
 801498c:	4622      	mov	r2, r4
 801498e:	4630      	mov	r0, r6
 8014990:	f7ff ff1e 	bl	80147d0 <__multiply>
 8014994:	4639      	mov	r1, r7
 8014996:	4680      	mov	r8, r0
 8014998:	4630      	mov	r0, r6
 801499a:	f7ff fe47 	bl	801462c <_Bfree>
 801499e:	4647      	mov	r7, r8
 80149a0:	106d      	asrs	r5, r5, #1
 80149a2:	d00b      	beq.n	80149bc <__pow5mult+0xa0>
 80149a4:	6820      	ldr	r0, [r4, #0]
 80149a6:	b938      	cbnz	r0, 80149b8 <__pow5mult+0x9c>
 80149a8:	4622      	mov	r2, r4
 80149aa:	4621      	mov	r1, r4
 80149ac:	4630      	mov	r0, r6
 80149ae:	f7ff ff0f 	bl	80147d0 <__multiply>
 80149b2:	6020      	str	r0, [r4, #0]
 80149b4:	f8c0 9000 	str.w	r9, [r0]
 80149b8:	4604      	mov	r4, r0
 80149ba:	e7e4      	b.n	8014986 <__pow5mult+0x6a>
 80149bc:	4638      	mov	r0, r7
 80149be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149c2:	bf00      	nop
 80149c4:	080199d0 	.word	0x080199d0
 80149c8:	080196ec 	.word	0x080196ec
 80149cc:	0801987c 	.word	0x0801987c

080149d0 <__lshift>:
 80149d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149d4:	460c      	mov	r4, r1
 80149d6:	6849      	ldr	r1, [r1, #4]
 80149d8:	6923      	ldr	r3, [r4, #16]
 80149da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80149de:	68a3      	ldr	r3, [r4, #8]
 80149e0:	4607      	mov	r7, r0
 80149e2:	4691      	mov	r9, r2
 80149e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80149e8:	f108 0601 	add.w	r6, r8, #1
 80149ec:	42b3      	cmp	r3, r6
 80149ee:	db0b      	blt.n	8014a08 <__lshift+0x38>
 80149f0:	4638      	mov	r0, r7
 80149f2:	f7ff fddb 	bl	80145ac <_Balloc>
 80149f6:	4605      	mov	r5, r0
 80149f8:	b948      	cbnz	r0, 8014a0e <__lshift+0x3e>
 80149fa:	4602      	mov	r2, r0
 80149fc:	4b28      	ldr	r3, [pc, #160]	; (8014aa0 <__lshift+0xd0>)
 80149fe:	4829      	ldr	r0, [pc, #164]	; (8014aa4 <__lshift+0xd4>)
 8014a00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014a04:	f7fe fe18 	bl	8013638 <__assert_func>
 8014a08:	3101      	adds	r1, #1
 8014a0a:	005b      	lsls	r3, r3, #1
 8014a0c:	e7ee      	b.n	80149ec <__lshift+0x1c>
 8014a0e:	2300      	movs	r3, #0
 8014a10:	f100 0114 	add.w	r1, r0, #20
 8014a14:	f100 0210 	add.w	r2, r0, #16
 8014a18:	4618      	mov	r0, r3
 8014a1a:	4553      	cmp	r3, sl
 8014a1c:	db33      	blt.n	8014a86 <__lshift+0xb6>
 8014a1e:	6920      	ldr	r0, [r4, #16]
 8014a20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014a24:	f104 0314 	add.w	r3, r4, #20
 8014a28:	f019 091f 	ands.w	r9, r9, #31
 8014a2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014a30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014a34:	d02b      	beq.n	8014a8e <__lshift+0xbe>
 8014a36:	f1c9 0e20 	rsb	lr, r9, #32
 8014a3a:	468a      	mov	sl, r1
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	6818      	ldr	r0, [r3, #0]
 8014a40:	fa00 f009 	lsl.w	r0, r0, r9
 8014a44:	4302      	orrs	r2, r0
 8014a46:	f84a 2b04 	str.w	r2, [sl], #4
 8014a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a4e:	459c      	cmp	ip, r3
 8014a50:	fa22 f20e 	lsr.w	r2, r2, lr
 8014a54:	d8f3      	bhi.n	8014a3e <__lshift+0x6e>
 8014a56:	ebac 0304 	sub.w	r3, ip, r4
 8014a5a:	3b15      	subs	r3, #21
 8014a5c:	f023 0303 	bic.w	r3, r3, #3
 8014a60:	3304      	adds	r3, #4
 8014a62:	f104 0015 	add.w	r0, r4, #21
 8014a66:	4584      	cmp	ip, r0
 8014a68:	bf38      	it	cc
 8014a6a:	2304      	movcc	r3, #4
 8014a6c:	50ca      	str	r2, [r1, r3]
 8014a6e:	b10a      	cbz	r2, 8014a74 <__lshift+0xa4>
 8014a70:	f108 0602 	add.w	r6, r8, #2
 8014a74:	3e01      	subs	r6, #1
 8014a76:	4638      	mov	r0, r7
 8014a78:	612e      	str	r6, [r5, #16]
 8014a7a:	4621      	mov	r1, r4
 8014a7c:	f7ff fdd6 	bl	801462c <_Bfree>
 8014a80:	4628      	mov	r0, r5
 8014a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a86:	f842 0f04 	str.w	r0, [r2, #4]!
 8014a8a:	3301      	adds	r3, #1
 8014a8c:	e7c5      	b.n	8014a1a <__lshift+0x4a>
 8014a8e:	3904      	subs	r1, #4
 8014a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a94:	f841 2f04 	str.w	r2, [r1, #4]!
 8014a98:	459c      	cmp	ip, r3
 8014a9a:	d8f9      	bhi.n	8014a90 <__lshift+0xc0>
 8014a9c:	e7ea      	b.n	8014a74 <__lshift+0xa4>
 8014a9e:	bf00      	nop
 8014aa0:	0801980a 	.word	0x0801980a
 8014aa4:	0801987c 	.word	0x0801987c

08014aa8 <__mcmp>:
 8014aa8:	b530      	push	{r4, r5, lr}
 8014aaa:	6902      	ldr	r2, [r0, #16]
 8014aac:	690c      	ldr	r4, [r1, #16]
 8014aae:	1b12      	subs	r2, r2, r4
 8014ab0:	d10e      	bne.n	8014ad0 <__mcmp+0x28>
 8014ab2:	f100 0314 	add.w	r3, r0, #20
 8014ab6:	3114      	adds	r1, #20
 8014ab8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014abc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014ac0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014ac4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014ac8:	42a5      	cmp	r5, r4
 8014aca:	d003      	beq.n	8014ad4 <__mcmp+0x2c>
 8014acc:	d305      	bcc.n	8014ada <__mcmp+0x32>
 8014ace:	2201      	movs	r2, #1
 8014ad0:	4610      	mov	r0, r2
 8014ad2:	bd30      	pop	{r4, r5, pc}
 8014ad4:	4283      	cmp	r3, r0
 8014ad6:	d3f3      	bcc.n	8014ac0 <__mcmp+0x18>
 8014ad8:	e7fa      	b.n	8014ad0 <__mcmp+0x28>
 8014ada:	f04f 32ff 	mov.w	r2, #4294967295
 8014ade:	e7f7      	b.n	8014ad0 <__mcmp+0x28>

08014ae0 <__mdiff>:
 8014ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ae4:	460c      	mov	r4, r1
 8014ae6:	4606      	mov	r6, r0
 8014ae8:	4611      	mov	r1, r2
 8014aea:	4620      	mov	r0, r4
 8014aec:	4617      	mov	r7, r2
 8014aee:	f7ff ffdb 	bl	8014aa8 <__mcmp>
 8014af2:	1e05      	subs	r5, r0, #0
 8014af4:	d110      	bne.n	8014b18 <__mdiff+0x38>
 8014af6:	4629      	mov	r1, r5
 8014af8:	4630      	mov	r0, r6
 8014afa:	f7ff fd57 	bl	80145ac <_Balloc>
 8014afe:	b930      	cbnz	r0, 8014b0e <__mdiff+0x2e>
 8014b00:	4b39      	ldr	r3, [pc, #228]	; (8014be8 <__mdiff+0x108>)
 8014b02:	4602      	mov	r2, r0
 8014b04:	f240 2132 	movw	r1, #562	; 0x232
 8014b08:	4838      	ldr	r0, [pc, #224]	; (8014bec <__mdiff+0x10c>)
 8014b0a:	f7fe fd95 	bl	8013638 <__assert_func>
 8014b0e:	2301      	movs	r3, #1
 8014b10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014b14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b18:	bfa4      	itt	ge
 8014b1a:	463b      	movge	r3, r7
 8014b1c:	4627      	movge	r7, r4
 8014b1e:	4630      	mov	r0, r6
 8014b20:	6879      	ldr	r1, [r7, #4]
 8014b22:	bfa6      	itte	ge
 8014b24:	461c      	movge	r4, r3
 8014b26:	2500      	movge	r5, #0
 8014b28:	2501      	movlt	r5, #1
 8014b2a:	f7ff fd3f 	bl	80145ac <_Balloc>
 8014b2e:	b920      	cbnz	r0, 8014b3a <__mdiff+0x5a>
 8014b30:	4b2d      	ldr	r3, [pc, #180]	; (8014be8 <__mdiff+0x108>)
 8014b32:	4602      	mov	r2, r0
 8014b34:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014b38:	e7e6      	b.n	8014b08 <__mdiff+0x28>
 8014b3a:	693e      	ldr	r6, [r7, #16]
 8014b3c:	60c5      	str	r5, [r0, #12]
 8014b3e:	6925      	ldr	r5, [r4, #16]
 8014b40:	f107 0114 	add.w	r1, r7, #20
 8014b44:	f104 0914 	add.w	r9, r4, #20
 8014b48:	f100 0e14 	add.w	lr, r0, #20
 8014b4c:	f107 0210 	add.w	r2, r7, #16
 8014b50:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014b54:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014b58:	46f2      	mov	sl, lr
 8014b5a:	2700      	movs	r7, #0
 8014b5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014b60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014b64:	fa1f f883 	uxth.w	r8, r3
 8014b68:	fa17 f78b 	uxtah	r7, r7, fp
 8014b6c:	0c1b      	lsrs	r3, r3, #16
 8014b6e:	eba7 0808 	sub.w	r8, r7, r8
 8014b72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014b76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014b7a:	fa1f f888 	uxth.w	r8, r8
 8014b7e:	141f      	asrs	r7, r3, #16
 8014b80:	454d      	cmp	r5, r9
 8014b82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014b86:	f84a 3b04 	str.w	r3, [sl], #4
 8014b8a:	d8e7      	bhi.n	8014b5c <__mdiff+0x7c>
 8014b8c:	1b2b      	subs	r3, r5, r4
 8014b8e:	3b15      	subs	r3, #21
 8014b90:	f023 0303 	bic.w	r3, r3, #3
 8014b94:	3304      	adds	r3, #4
 8014b96:	3415      	adds	r4, #21
 8014b98:	42a5      	cmp	r5, r4
 8014b9a:	bf38      	it	cc
 8014b9c:	2304      	movcc	r3, #4
 8014b9e:	4419      	add	r1, r3
 8014ba0:	4473      	add	r3, lr
 8014ba2:	469e      	mov	lr, r3
 8014ba4:	460d      	mov	r5, r1
 8014ba6:	4565      	cmp	r5, ip
 8014ba8:	d30e      	bcc.n	8014bc8 <__mdiff+0xe8>
 8014baa:	f10c 0203 	add.w	r2, ip, #3
 8014bae:	1a52      	subs	r2, r2, r1
 8014bb0:	f022 0203 	bic.w	r2, r2, #3
 8014bb4:	3903      	subs	r1, #3
 8014bb6:	458c      	cmp	ip, r1
 8014bb8:	bf38      	it	cc
 8014bba:	2200      	movcc	r2, #0
 8014bbc:	441a      	add	r2, r3
 8014bbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014bc2:	b17b      	cbz	r3, 8014be4 <__mdiff+0x104>
 8014bc4:	6106      	str	r6, [r0, #16]
 8014bc6:	e7a5      	b.n	8014b14 <__mdiff+0x34>
 8014bc8:	f855 8b04 	ldr.w	r8, [r5], #4
 8014bcc:	fa17 f488 	uxtah	r4, r7, r8
 8014bd0:	1422      	asrs	r2, r4, #16
 8014bd2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014bd6:	b2a4      	uxth	r4, r4
 8014bd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014bdc:	f84e 4b04 	str.w	r4, [lr], #4
 8014be0:	1417      	asrs	r7, r2, #16
 8014be2:	e7e0      	b.n	8014ba6 <__mdiff+0xc6>
 8014be4:	3e01      	subs	r6, #1
 8014be6:	e7ea      	b.n	8014bbe <__mdiff+0xde>
 8014be8:	0801980a 	.word	0x0801980a
 8014bec:	0801987c 	.word	0x0801987c

08014bf0 <__d2b>:
 8014bf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014bf4:	4689      	mov	r9, r1
 8014bf6:	2101      	movs	r1, #1
 8014bf8:	ec57 6b10 	vmov	r6, r7, d0
 8014bfc:	4690      	mov	r8, r2
 8014bfe:	f7ff fcd5 	bl	80145ac <_Balloc>
 8014c02:	4604      	mov	r4, r0
 8014c04:	b930      	cbnz	r0, 8014c14 <__d2b+0x24>
 8014c06:	4602      	mov	r2, r0
 8014c08:	4b25      	ldr	r3, [pc, #148]	; (8014ca0 <__d2b+0xb0>)
 8014c0a:	4826      	ldr	r0, [pc, #152]	; (8014ca4 <__d2b+0xb4>)
 8014c0c:	f240 310a 	movw	r1, #778	; 0x30a
 8014c10:	f7fe fd12 	bl	8013638 <__assert_func>
 8014c14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014c18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014c1c:	bb35      	cbnz	r5, 8014c6c <__d2b+0x7c>
 8014c1e:	2e00      	cmp	r6, #0
 8014c20:	9301      	str	r3, [sp, #4]
 8014c22:	d028      	beq.n	8014c76 <__d2b+0x86>
 8014c24:	4668      	mov	r0, sp
 8014c26:	9600      	str	r6, [sp, #0]
 8014c28:	f7ff fd8c 	bl	8014744 <__lo0bits>
 8014c2c:	9900      	ldr	r1, [sp, #0]
 8014c2e:	b300      	cbz	r0, 8014c72 <__d2b+0x82>
 8014c30:	9a01      	ldr	r2, [sp, #4]
 8014c32:	f1c0 0320 	rsb	r3, r0, #32
 8014c36:	fa02 f303 	lsl.w	r3, r2, r3
 8014c3a:	430b      	orrs	r3, r1
 8014c3c:	40c2      	lsrs	r2, r0
 8014c3e:	6163      	str	r3, [r4, #20]
 8014c40:	9201      	str	r2, [sp, #4]
 8014c42:	9b01      	ldr	r3, [sp, #4]
 8014c44:	61a3      	str	r3, [r4, #24]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	bf14      	ite	ne
 8014c4a:	2202      	movne	r2, #2
 8014c4c:	2201      	moveq	r2, #1
 8014c4e:	6122      	str	r2, [r4, #16]
 8014c50:	b1d5      	cbz	r5, 8014c88 <__d2b+0x98>
 8014c52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014c56:	4405      	add	r5, r0
 8014c58:	f8c9 5000 	str.w	r5, [r9]
 8014c5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014c60:	f8c8 0000 	str.w	r0, [r8]
 8014c64:	4620      	mov	r0, r4
 8014c66:	b003      	add	sp, #12
 8014c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014c70:	e7d5      	b.n	8014c1e <__d2b+0x2e>
 8014c72:	6161      	str	r1, [r4, #20]
 8014c74:	e7e5      	b.n	8014c42 <__d2b+0x52>
 8014c76:	a801      	add	r0, sp, #4
 8014c78:	f7ff fd64 	bl	8014744 <__lo0bits>
 8014c7c:	9b01      	ldr	r3, [sp, #4]
 8014c7e:	6163      	str	r3, [r4, #20]
 8014c80:	2201      	movs	r2, #1
 8014c82:	6122      	str	r2, [r4, #16]
 8014c84:	3020      	adds	r0, #32
 8014c86:	e7e3      	b.n	8014c50 <__d2b+0x60>
 8014c88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014c8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014c90:	f8c9 0000 	str.w	r0, [r9]
 8014c94:	6918      	ldr	r0, [r3, #16]
 8014c96:	f7ff fd35 	bl	8014704 <__hi0bits>
 8014c9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014c9e:	e7df      	b.n	8014c60 <__d2b+0x70>
 8014ca0:	0801980a 	.word	0x0801980a
 8014ca4:	0801987c 	.word	0x0801987c

08014ca8 <_calloc_r>:
 8014ca8:	b513      	push	{r0, r1, r4, lr}
 8014caa:	434a      	muls	r2, r1
 8014cac:	4611      	mov	r1, r2
 8014cae:	9201      	str	r2, [sp, #4]
 8014cb0:	f7fd fecc 	bl	8012a4c <_malloc_r>
 8014cb4:	4604      	mov	r4, r0
 8014cb6:	b118      	cbz	r0, 8014cc0 <_calloc_r+0x18>
 8014cb8:	9a01      	ldr	r2, [sp, #4]
 8014cba:	2100      	movs	r1, #0
 8014cbc:	f7fd fe6e 	bl	801299c <memset>
 8014cc0:	4620      	mov	r0, r4
 8014cc2:	b002      	add	sp, #8
 8014cc4:	bd10      	pop	{r4, pc}

08014cc6 <__ssputs_r>:
 8014cc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cca:	688e      	ldr	r6, [r1, #8]
 8014ccc:	429e      	cmp	r6, r3
 8014cce:	4682      	mov	sl, r0
 8014cd0:	460c      	mov	r4, r1
 8014cd2:	4690      	mov	r8, r2
 8014cd4:	461f      	mov	r7, r3
 8014cd6:	d838      	bhi.n	8014d4a <__ssputs_r+0x84>
 8014cd8:	898a      	ldrh	r2, [r1, #12]
 8014cda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014cde:	d032      	beq.n	8014d46 <__ssputs_r+0x80>
 8014ce0:	6825      	ldr	r5, [r4, #0]
 8014ce2:	6909      	ldr	r1, [r1, #16]
 8014ce4:	eba5 0901 	sub.w	r9, r5, r1
 8014ce8:	6965      	ldr	r5, [r4, #20]
 8014cea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014cee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014cf2:	3301      	adds	r3, #1
 8014cf4:	444b      	add	r3, r9
 8014cf6:	106d      	asrs	r5, r5, #1
 8014cf8:	429d      	cmp	r5, r3
 8014cfa:	bf38      	it	cc
 8014cfc:	461d      	movcc	r5, r3
 8014cfe:	0553      	lsls	r3, r2, #21
 8014d00:	d531      	bpl.n	8014d66 <__ssputs_r+0xa0>
 8014d02:	4629      	mov	r1, r5
 8014d04:	f7fd fea2 	bl	8012a4c <_malloc_r>
 8014d08:	4606      	mov	r6, r0
 8014d0a:	b950      	cbnz	r0, 8014d22 <__ssputs_r+0x5c>
 8014d0c:	230c      	movs	r3, #12
 8014d0e:	f8ca 3000 	str.w	r3, [sl]
 8014d12:	89a3      	ldrh	r3, [r4, #12]
 8014d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d18:	81a3      	strh	r3, [r4, #12]
 8014d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8014d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d22:	6921      	ldr	r1, [r4, #16]
 8014d24:	464a      	mov	r2, r9
 8014d26:	f7fd fe11 	bl	801294c <memcpy>
 8014d2a:	89a3      	ldrh	r3, [r4, #12]
 8014d2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d34:	81a3      	strh	r3, [r4, #12]
 8014d36:	6126      	str	r6, [r4, #16]
 8014d38:	6165      	str	r5, [r4, #20]
 8014d3a:	444e      	add	r6, r9
 8014d3c:	eba5 0509 	sub.w	r5, r5, r9
 8014d40:	6026      	str	r6, [r4, #0]
 8014d42:	60a5      	str	r5, [r4, #8]
 8014d44:	463e      	mov	r6, r7
 8014d46:	42be      	cmp	r6, r7
 8014d48:	d900      	bls.n	8014d4c <__ssputs_r+0x86>
 8014d4a:	463e      	mov	r6, r7
 8014d4c:	4632      	mov	r2, r6
 8014d4e:	6820      	ldr	r0, [r4, #0]
 8014d50:	4641      	mov	r1, r8
 8014d52:	f7fd fe09 	bl	8012968 <memmove>
 8014d56:	68a3      	ldr	r3, [r4, #8]
 8014d58:	6822      	ldr	r2, [r4, #0]
 8014d5a:	1b9b      	subs	r3, r3, r6
 8014d5c:	4432      	add	r2, r6
 8014d5e:	60a3      	str	r3, [r4, #8]
 8014d60:	6022      	str	r2, [r4, #0]
 8014d62:	2000      	movs	r0, #0
 8014d64:	e7db      	b.n	8014d1e <__ssputs_r+0x58>
 8014d66:	462a      	mov	r2, r5
 8014d68:	f000 fcda 	bl	8015720 <_realloc_r>
 8014d6c:	4606      	mov	r6, r0
 8014d6e:	2800      	cmp	r0, #0
 8014d70:	d1e1      	bne.n	8014d36 <__ssputs_r+0x70>
 8014d72:	6921      	ldr	r1, [r4, #16]
 8014d74:	4650      	mov	r0, sl
 8014d76:	f7fd fe19 	bl	80129ac <_free_r>
 8014d7a:	e7c7      	b.n	8014d0c <__ssputs_r+0x46>

08014d7c <_svfiprintf_r>:
 8014d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d80:	4698      	mov	r8, r3
 8014d82:	898b      	ldrh	r3, [r1, #12]
 8014d84:	061b      	lsls	r3, r3, #24
 8014d86:	b09d      	sub	sp, #116	; 0x74
 8014d88:	4607      	mov	r7, r0
 8014d8a:	460d      	mov	r5, r1
 8014d8c:	4614      	mov	r4, r2
 8014d8e:	d50e      	bpl.n	8014dae <_svfiprintf_r+0x32>
 8014d90:	690b      	ldr	r3, [r1, #16]
 8014d92:	b963      	cbnz	r3, 8014dae <_svfiprintf_r+0x32>
 8014d94:	2140      	movs	r1, #64	; 0x40
 8014d96:	f7fd fe59 	bl	8012a4c <_malloc_r>
 8014d9a:	6028      	str	r0, [r5, #0]
 8014d9c:	6128      	str	r0, [r5, #16]
 8014d9e:	b920      	cbnz	r0, 8014daa <_svfiprintf_r+0x2e>
 8014da0:	230c      	movs	r3, #12
 8014da2:	603b      	str	r3, [r7, #0]
 8014da4:	f04f 30ff 	mov.w	r0, #4294967295
 8014da8:	e0d1      	b.n	8014f4e <_svfiprintf_r+0x1d2>
 8014daa:	2340      	movs	r3, #64	; 0x40
 8014dac:	616b      	str	r3, [r5, #20]
 8014dae:	2300      	movs	r3, #0
 8014db0:	9309      	str	r3, [sp, #36]	; 0x24
 8014db2:	2320      	movs	r3, #32
 8014db4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014db8:	f8cd 800c 	str.w	r8, [sp, #12]
 8014dbc:	2330      	movs	r3, #48	; 0x30
 8014dbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014f68 <_svfiprintf_r+0x1ec>
 8014dc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014dc6:	f04f 0901 	mov.w	r9, #1
 8014dca:	4623      	mov	r3, r4
 8014dcc:	469a      	mov	sl, r3
 8014dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014dd2:	b10a      	cbz	r2, 8014dd8 <_svfiprintf_r+0x5c>
 8014dd4:	2a25      	cmp	r2, #37	; 0x25
 8014dd6:	d1f9      	bne.n	8014dcc <_svfiprintf_r+0x50>
 8014dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8014ddc:	d00b      	beq.n	8014df6 <_svfiprintf_r+0x7a>
 8014dde:	465b      	mov	r3, fp
 8014de0:	4622      	mov	r2, r4
 8014de2:	4629      	mov	r1, r5
 8014de4:	4638      	mov	r0, r7
 8014de6:	f7ff ff6e 	bl	8014cc6 <__ssputs_r>
 8014dea:	3001      	adds	r0, #1
 8014dec:	f000 80aa 	beq.w	8014f44 <_svfiprintf_r+0x1c8>
 8014df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014df2:	445a      	add	r2, fp
 8014df4:	9209      	str	r2, [sp, #36]	; 0x24
 8014df6:	f89a 3000 	ldrb.w	r3, [sl]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	f000 80a2 	beq.w	8014f44 <_svfiprintf_r+0x1c8>
 8014e00:	2300      	movs	r3, #0
 8014e02:	f04f 32ff 	mov.w	r2, #4294967295
 8014e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e0a:	f10a 0a01 	add.w	sl, sl, #1
 8014e0e:	9304      	str	r3, [sp, #16]
 8014e10:	9307      	str	r3, [sp, #28]
 8014e12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e16:	931a      	str	r3, [sp, #104]	; 0x68
 8014e18:	4654      	mov	r4, sl
 8014e1a:	2205      	movs	r2, #5
 8014e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e20:	4851      	ldr	r0, [pc, #324]	; (8014f68 <_svfiprintf_r+0x1ec>)
 8014e22:	f7eb f9ed 	bl	8000200 <memchr>
 8014e26:	9a04      	ldr	r2, [sp, #16]
 8014e28:	b9d8      	cbnz	r0, 8014e62 <_svfiprintf_r+0xe6>
 8014e2a:	06d0      	lsls	r0, r2, #27
 8014e2c:	bf44      	itt	mi
 8014e2e:	2320      	movmi	r3, #32
 8014e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e34:	0711      	lsls	r1, r2, #28
 8014e36:	bf44      	itt	mi
 8014e38:	232b      	movmi	r3, #43	; 0x2b
 8014e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8014e42:	2b2a      	cmp	r3, #42	; 0x2a
 8014e44:	d015      	beq.n	8014e72 <_svfiprintf_r+0xf6>
 8014e46:	9a07      	ldr	r2, [sp, #28]
 8014e48:	4654      	mov	r4, sl
 8014e4a:	2000      	movs	r0, #0
 8014e4c:	f04f 0c0a 	mov.w	ip, #10
 8014e50:	4621      	mov	r1, r4
 8014e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e56:	3b30      	subs	r3, #48	; 0x30
 8014e58:	2b09      	cmp	r3, #9
 8014e5a:	d94e      	bls.n	8014efa <_svfiprintf_r+0x17e>
 8014e5c:	b1b0      	cbz	r0, 8014e8c <_svfiprintf_r+0x110>
 8014e5e:	9207      	str	r2, [sp, #28]
 8014e60:	e014      	b.n	8014e8c <_svfiprintf_r+0x110>
 8014e62:	eba0 0308 	sub.w	r3, r0, r8
 8014e66:	fa09 f303 	lsl.w	r3, r9, r3
 8014e6a:	4313      	orrs	r3, r2
 8014e6c:	9304      	str	r3, [sp, #16]
 8014e6e:	46a2      	mov	sl, r4
 8014e70:	e7d2      	b.n	8014e18 <_svfiprintf_r+0x9c>
 8014e72:	9b03      	ldr	r3, [sp, #12]
 8014e74:	1d19      	adds	r1, r3, #4
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	9103      	str	r1, [sp, #12]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	bfbb      	ittet	lt
 8014e7e:	425b      	neglt	r3, r3
 8014e80:	f042 0202 	orrlt.w	r2, r2, #2
 8014e84:	9307      	strge	r3, [sp, #28]
 8014e86:	9307      	strlt	r3, [sp, #28]
 8014e88:	bfb8      	it	lt
 8014e8a:	9204      	strlt	r2, [sp, #16]
 8014e8c:	7823      	ldrb	r3, [r4, #0]
 8014e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8014e90:	d10c      	bne.n	8014eac <_svfiprintf_r+0x130>
 8014e92:	7863      	ldrb	r3, [r4, #1]
 8014e94:	2b2a      	cmp	r3, #42	; 0x2a
 8014e96:	d135      	bne.n	8014f04 <_svfiprintf_r+0x188>
 8014e98:	9b03      	ldr	r3, [sp, #12]
 8014e9a:	1d1a      	adds	r2, r3, #4
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	9203      	str	r2, [sp, #12]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	bfb8      	it	lt
 8014ea4:	f04f 33ff 	movlt.w	r3, #4294967295
 8014ea8:	3402      	adds	r4, #2
 8014eaa:	9305      	str	r3, [sp, #20]
 8014eac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014f78 <_svfiprintf_r+0x1fc>
 8014eb0:	7821      	ldrb	r1, [r4, #0]
 8014eb2:	2203      	movs	r2, #3
 8014eb4:	4650      	mov	r0, sl
 8014eb6:	f7eb f9a3 	bl	8000200 <memchr>
 8014eba:	b140      	cbz	r0, 8014ece <_svfiprintf_r+0x152>
 8014ebc:	2340      	movs	r3, #64	; 0x40
 8014ebe:	eba0 000a 	sub.w	r0, r0, sl
 8014ec2:	fa03 f000 	lsl.w	r0, r3, r0
 8014ec6:	9b04      	ldr	r3, [sp, #16]
 8014ec8:	4303      	orrs	r3, r0
 8014eca:	3401      	adds	r4, #1
 8014ecc:	9304      	str	r3, [sp, #16]
 8014ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ed2:	4826      	ldr	r0, [pc, #152]	; (8014f6c <_svfiprintf_r+0x1f0>)
 8014ed4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ed8:	2206      	movs	r2, #6
 8014eda:	f7eb f991 	bl	8000200 <memchr>
 8014ede:	2800      	cmp	r0, #0
 8014ee0:	d038      	beq.n	8014f54 <_svfiprintf_r+0x1d8>
 8014ee2:	4b23      	ldr	r3, [pc, #140]	; (8014f70 <_svfiprintf_r+0x1f4>)
 8014ee4:	bb1b      	cbnz	r3, 8014f2e <_svfiprintf_r+0x1b2>
 8014ee6:	9b03      	ldr	r3, [sp, #12]
 8014ee8:	3307      	adds	r3, #7
 8014eea:	f023 0307 	bic.w	r3, r3, #7
 8014eee:	3308      	adds	r3, #8
 8014ef0:	9303      	str	r3, [sp, #12]
 8014ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ef4:	4433      	add	r3, r6
 8014ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8014ef8:	e767      	b.n	8014dca <_svfiprintf_r+0x4e>
 8014efa:	fb0c 3202 	mla	r2, ip, r2, r3
 8014efe:	460c      	mov	r4, r1
 8014f00:	2001      	movs	r0, #1
 8014f02:	e7a5      	b.n	8014e50 <_svfiprintf_r+0xd4>
 8014f04:	2300      	movs	r3, #0
 8014f06:	3401      	adds	r4, #1
 8014f08:	9305      	str	r3, [sp, #20]
 8014f0a:	4619      	mov	r1, r3
 8014f0c:	f04f 0c0a 	mov.w	ip, #10
 8014f10:	4620      	mov	r0, r4
 8014f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f16:	3a30      	subs	r2, #48	; 0x30
 8014f18:	2a09      	cmp	r2, #9
 8014f1a:	d903      	bls.n	8014f24 <_svfiprintf_r+0x1a8>
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d0c5      	beq.n	8014eac <_svfiprintf_r+0x130>
 8014f20:	9105      	str	r1, [sp, #20]
 8014f22:	e7c3      	b.n	8014eac <_svfiprintf_r+0x130>
 8014f24:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f28:	4604      	mov	r4, r0
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	e7f0      	b.n	8014f10 <_svfiprintf_r+0x194>
 8014f2e:	ab03      	add	r3, sp, #12
 8014f30:	9300      	str	r3, [sp, #0]
 8014f32:	462a      	mov	r2, r5
 8014f34:	4b0f      	ldr	r3, [pc, #60]	; (8014f74 <_svfiprintf_r+0x1f8>)
 8014f36:	a904      	add	r1, sp, #16
 8014f38:	4638      	mov	r0, r7
 8014f3a:	f7fd fe81 	bl	8012c40 <_printf_float>
 8014f3e:	1c42      	adds	r2, r0, #1
 8014f40:	4606      	mov	r6, r0
 8014f42:	d1d6      	bne.n	8014ef2 <_svfiprintf_r+0x176>
 8014f44:	89ab      	ldrh	r3, [r5, #12]
 8014f46:	065b      	lsls	r3, r3, #25
 8014f48:	f53f af2c 	bmi.w	8014da4 <_svfiprintf_r+0x28>
 8014f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f4e:	b01d      	add	sp, #116	; 0x74
 8014f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f54:	ab03      	add	r3, sp, #12
 8014f56:	9300      	str	r3, [sp, #0]
 8014f58:	462a      	mov	r2, r5
 8014f5a:	4b06      	ldr	r3, [pc, #24]	; (8014f74 <_svfiprintf_r+0x1f8>)
 8014f5c:	a904      	add	r1, sp, #16
 8014f5e:	4638      	mov	r0, r7
 8014f60:	f7fe f912 	bl	8013188 <_printf_i>
 8014f64:	e7eb      	b.n	8014f3e <_svfiprintf_r+0x1c2>
 8014f66:	bf00      	nop
 8014f68:	080199dc 	.word	0x080199dc
 8014f6c:	080199e6 	.word	0x080199e6
 8014f70:	08012c41 	.word	0x08012c41
 8014f74:	08014cc7 	.word	0x08014cc7
 8014f78:	080199e2 	.word	0x080199e2

08014f7c <__sfputc_r>:
 8014f7c:	6893      	ldr	r3, [r2, #8]
 8014f7e:	3b01      	subs	r3, #1
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	b410      	push	{r4}
 8014f84:	6093      	str	r3, [r2, #8]
 8014f86:	da08      	bge.n	8014f9a <__sfputc_r+0x1e>
 8014f88:	6994      	ldr	r4, [r2, #24]
 8014f8a:	42a3      	cmp	r3, r4
 8014f8c:	db01      	blt.n	8014f92 <__sfputc_r+0x16>
 8014f8e:	290a      	cmp	r1, #10
 8014f90:	d103      	bne.n	8014f9a <__sfputc_r+0x1e>
 8014f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f96:	f000 b98f 	b.w	80152b8 <__swbuf_r>
 8014f9a:	6813      	ldr	r3, [r2, #0]
 8014f9c:	1c58      	adds	r0, r3, #1
 8014f9e:	6010      	str	r0, [r2, #0]
 8014fa0:	7019      	strb	r1, [r3, #0]
 8014fa2:	4608      	mov	r0, r1
 8014fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fa8:	4770      	bx	lr

08014faa <__sfputs_r>:
 8014faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fac:	4606      	mov	r6, r0
 8014fae:	460f      	mov	r7, r1
 8014fb0:	4614      	mov	r4, r2
 8014fb2:	18d5      	adds	r5, r2, r3
 8014fb4:	42ac      	cmp	r4, r5
 8014fb6:	d101      	bne.n	8014fbc <__sfputs_r+0x12>
 8014fb8:	2000      	movs	r0, #0
 8014fba:	e007      	b.n	8014fcc <__sfputs_r+0x22>
 8014fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fc0:	463a      	mov	r2, r7
 8014fc2:	4630      	mov	r0, r6
 8014fc4:	f7ff ffda 	bl	8014f7c <__sfputc_r>
 8014fc8:	1c43      	adds	r3, r0, #1
 8014fca:	d1f3      	bne.n	8014fb4 <__sfputs_r+0xa>
 8014fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014fd0 <_vfiprintf_r>:
 8014fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fd4:	460d      	mov	r5, r1
 8014fd6:	b09d      	sub	sp, #116	; 0x74
 8014fd8:	4614      	mov	r4, r2
 8014fda:	4698      	mov	r8, r3
 8014fdc:	4606      	mov	r6, r0
 8014fde:	b118      	cbz	r0, 8014fe8 <_vfiprintf_r+0x18>
 8014fe0:	6983      	ldr	r3, [r0, #24]
 8014fe2:	b90b      	cbnz	r3, 8014fe8 <_vfiprintf_r+0x18>
 8014fe4:	f7ff fa1e 	bl	8014424 <__sinit>
 8014fe8:	4b89      	ldr	r3, [pc, #548]	; (8015210 <_vfiprintf_r+0x240>)
 8014fea:	429d      	cmp	r5, r3
 8014fec:	d11b      	bne.n	8015026 <_vfiprintf_r+0x56>
 8014fee:	6875      	ldr	r5, [r6, #4]
 8014ff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ff2:	07d9      	lsls	r1, r3, #31
 8014ff4:	d405      	bmi.n	8015002 <_vfiprintf_r+0x32>
 8014ff6:	89ab      	ldrh	r3, [r5, #12]
 8014ff8:	059a      	lsls	r2, r3, #22
 8014ffa:	d402      	bmi.n	8015002 <_vfiprintf_r+0x32>
 8014ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ffe:	f7ff fac6 	bl	801458e <__retarget_lock_acquire_recursive>
 8015002:	89ab      	ldrh	r3, [r5, #12]
 8015004:	071b      	lsls	r3, r3, #28
 8015006:	d501      	bpl.n	801500c <_vfiprintf_r+0x3c>
 8015008:	692b      	ldr	r3, [r5, #16]
 801500a:	b9eb      	cbnz	r3, 8015048 <_vfiprintf_r+0x78>
 801500c:	4629      	mov	r1, r5
 801500e:	4630      	mov	r0, r6
 8015010:	f000 f9b6 	bl	8015380 <__swsetup_r>
 8015014:	b1c0      	cbz	r0, 8015048 <_vfiprintf_r+0x78>
 8015016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015018:	07dc      	lsls	r4, r3, #31
 801501a:	d50e      	bpl.n	801503a <_vfiprintf_r+0x6a>
 801501c:	f04f 30ff 	mov.w	r0, #4294967295
 8015020:	b01d      	add	sp, #116	; 0x74
 8015022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015026:	4b7b      	ldr	r3, [pc, #492]	; (8015214 <_vfiprintf_r+0x244>)
 8015028:	429d      	cmp	r5, r3
 801502a:	d101      	bne.n	8015030 <_vfiprintf_r+0x60>
 801502c:	68b5      	ldr	r5, [r6, #8]
 801502e:	e7df      	b.n	8014ff0 <_vfiprintf_r+0x20>
 8015030:	4b79      	ldr	r3, [pc, #484]	; (8015218 <_vfiprintf_r+0x248>)
 8015032:	429d      	cmp	r5, r3
 8015034:	bf08      	it	eq
 8015036:	68f5      	ldreq	r5, [r6, #12]
 8015038:	e7da      	b.n	8014ff0 <_vfiprintf_r+0x20>
 801503a:	89ab      	ldrh	r3, [r5, #12]
 801503c:	0598      	lsls	r0, r3, #22
 801503e:	d4ed      	bmi.n	801501c <_vfiprintf_r+0x4c>
 8015040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015042:	f7ff faa5 	bl	8014590 <__retarget_lock_release_recursive>
 8015046:	e7e9      	b.n	801501c <_vfiprintf_r+0x4c>
 8015048:	2300      	movs	r3, #0
 801504a:	9309      	str	r3, [sp, #36]	; 0x24
 801504c:	2320      	movs	r3, #32
 801504e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015052:	f8cd 800c 	str.w	r8, [sp, #12]
 8015056:	2330      	movs	r3, #48	; 0x30
 8015058:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801521c <_vfiprintf_r+0x24c>
 801505c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015060:	f04f 0901 	mov.w	r9, #1
 8015064:	4623      	mov	r3, r4
 8015066:	469a      	mov	sl, r3
 8015068:	f813 2b01 	ldrb.w	r2, [r3], #1
 801506c:	b10a      	cbz	r2, 8015072 <_vfiprintf_r+0xa2>
 801506e:	2a25      	cmp	r2, #37	; 0x25
 8015070:	d1f9      	bne.n	8015066 <_vfiprintf_r+0x96>
 8015072:	ebba 0b04 	subs.w	fp, sl, r4
 8015076:	d00b      	beq.n	8015090 <_vfiprintf_r+0xc0>
 8015078:	465b      	mov	r3, fp
 801507a:	4622      	mov	r2, r4
 801507c:	4629      	mov	r1, r5
 801507e:	4630      	mov	r0, r6
 8015080:	f7ff ff93 	bl	8014faa <__sfputs_r>
 8015084:	3001      	adds	r0, #1
 8015086:	f000 80aa 	beq.w	80151de <_vfiprintf_r+0x20e>
 801508a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801508c:	445a      	add	r2, fp
 801508e:	9209      	str	r2, [sp, #36]	; 0x24
 8015090:	f89a 3000 	ldrb.w	r3, [sl]
 8015094:	2b00      	cmp	r3, #0
 8015096:	f000 80a2 	beq.w	80151de <_vfiprintf_r+0x20e>
 801509a:	2300      	movs	r3, #0
 801509c:	f04f 32ff 	mov.w	r2, #4294967295
 80150a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150a4:	f10a 0a01 	add.w	sl, sl, #1
 80150a8:	9304      	str	r3, [sp, #16]
 80150aa:	9307      	str	r3, [sp, #28]
 80150ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80150b0:	931a      	str	r3, [sp, #104]	; 0x68
 80150b2:	4654      	mov	r4, sl
 80150b4:	2205      	movs	r2, #5
 80150b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150ba:	4858      	ldr	r0, [pc, #352]	; (801521c <_vfiprintf_r+0x24c>)
 80150bc:	f7eb f8a0 	bl	8000200 <memchr>
 80150c0:	9a04      	ldr	r2, [sp, #16]
 80150c2:	b9d8      	cbnz	r0, 80150fc <_vfiprintf_r+0x12c>
 80150c4:	06d1      	lsls	r1, r2, #27
 80150c6:	bf44      	itt	mi
 80150c8:	2320      	movmi	r3, #32
 80150ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80150ce:	0713      	lsls	r3, r2, #28
 80150d0:	bf44      	itt	mi
 80150d2:	232b      	movmi	r3, #43	; 0x2b
 80150d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80150d8:	f89a 3000 	ldrb.w	r3, [sl]
 80150dc:	2b2a      	cmp	r3, #42	; 0x2a
 80150de:	d015      	beq.n	801510c <_vfiprintf_r+0x13c>
 80150e0:	9a07      	ldr	r2, [sp, #28]
 80150e2:	4654      	mov	r4, sl
 80150e4:	2000      	movs	r0, #0
 80150e6:	f04f 0c0a 	mov.w	ip, #10
 80150ea:	4621      	mov	r1, r4
 80150ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80150f0:	3b30      	subs	r3, #48	; 0x30
 80150f2:	2b09      	cmp	r3, #9
 80150f4:	d94e      	bls.n	8015194 <_vfiprintf_r+0x1c4>
 80150f6:	b1b0      	cbz	r0, 8015126 <_vfiprintf_r+0x156>
 80150f8:	9207      	str	r2, [sp, #28]
 80150fa:	e014      	b.n	8015126 <_vfiprintf_r+0x156>
 80150fc:	eba0 0308 	sub.w	r3, r0, r8
 8015100:	fa09 f303 	lsl.w	r3, r9, r3
 8015104:	4313      	orrs	r3, r2
 8015106:	9304      	str	r3, [sp, #16]
 8015108:	46a2      	mov	sl, r4
 801510a:	e7d2      	b.n	80150b2 <_vfiprintf_r+0xe2>
 801510c:	9b03      	ldr	r3, [sp, #12]
 801510e:	1d19      	adds	r1, r3, #4
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	9103      	str	r1, [sp, #12]
 8015114:	2b00      	cmp	r3, #0
 8015116:	bfbb      	ittet	lt
 8015118:	425b      	neglt	r3, r3
 801511a:	f042 0202 	orrlt.w	r2, r2, #2
 801511e:	9307      	strge	r3, [sp, #28]
 8015120:	9307      	strlt	r3, [sp, #28]
 8015122:	bfb8      	it	lt
 8015124:	9204      	strlt	r2, [sp, #16]
 8015126:	7823      	ldrb	r3, [r4, #0]
 8015128:	2b2e      	cmp	r3, #46	; 0x2e
 801512a:	d10c      	bne.n	8015146 <_vfiprintf_r+0x176>
 801512c:	7863      	ldrb	r3, [r4, #1]
 801512e:	2b2a      	cmp	r3, #42	; 0x2a
 8015130:	d135      	bne.n	801519e <_vfiprintf_r+0x1ce>
 8015132:	9b03      	ldr	r3, [sp, #12]
 8015134:	1d1a      	adds	r2, r3, #4
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	9203      	str	r2, [sp, #12]
 801513a:	2b00      	cmp	r3, #0
 801513c:	bfb8      	it	lt
 801513e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015142:	3402      	adds	r4, #2
 8015144:	9305      	str	r3, [sp, #20]
 8015146:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801522c <_vfiprintf_r+0x25c>
 801514a:	7821      	ldrb	r1, [r4, #0]
 801514c:	2203      	movs	r2, #3
 801514e:	4650      	mov	r0, sl
 8015150:	f7eb f856 	bl	8000200 <memchr>
 8015154:	b140      	cbz	r0, 8015168 <_vfiprintf_r+0x198>
 8015156:	2340      	movs	r3, #64	; 0x40
 8015158:	eba0 000a 	sub.w	r0, r0, sl
 801515c:	fa03 f000 	lsl.w	r0, r3, r0
 8015160:	9b04      	ldr	r3, [sp, #16]
 8015162:	4303      	orrs	r3, r0
 8015164:	3401      	adds	r4, #1
 8015166:	9304      	str	r3, [sp, #16]
 8015168:	f814 1b01 	ldrb.w	r1, [r4], #1
 801516c:	482c      	ldr	r0, [pc, #176]	; (8015220 <_vfiprintf_r+0x250>)
 801516e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015172:	2206      	movs	r2, #6
 8015174:	f7eb f844 	bl	8000200 <memchr>
 8015178:	2800      	cmp	r0, #0
 801517a:	d03f      	beq.n	80151fc <_vfiprintf_r+0x22c>
 801517c:	4b29      	ldr	r3, [pc, #164]	; (8015224 <_vfiprintf_r+0x254>)
 801517e:	bb1b      	cbnz	r3, 80151c8 <_vfiprintf_r+0x1f8>
 8015180:	9b03      	ldr	r3, [sp, #12]
 8015182:	3307      	adds	r3, #7
 8015184:	f023 0307 	bic.w	r3, r3, #7
 8015188:	3308      	adds	r3, #8
 801518a:	9303      	str	r3, [sp, #12]
 801518c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801518e:	443b      	add	r3, r7
 8015190:	9309      	str	r3, [sp, #36]	; 0x24
 8015192:	e767      	b.n	8015064 <_vfiprintf_r+0x94>
 8015194:	fb0c 3202 	mla	r2, ip, r2, r3
 8015198:	460c      	mov	r4, r1
 801519a:	2001      	movs	r0, #1
 801519c:	e7a5      	b.n	80150ea <_vfiprintf_r+0x11a>
 801519e:	2300      	movs	r3, #0
 80151a0:	3401      	adds	r4, #1
 80151a2:	9305      	str	r3, [sp, #20]
 80151a4:	4619      	mov	r1, r3
 80151a6:	f04f 0c0a 	mov.w	ip, #10
 80151aa:	4620      	mov	r0, r4
 80151ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80151b0:	3a30      	subs	r2, #48	; 0x30
 80151b2:	2a09      	cmp	r2, #9
 80151b4:	d903      	bls.n	80151be <_vfiprintf_r+0x1ee>
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d0c5      	beq.n	8015146 <_vfiprintf_r+0x176>
 80151ba:	9105      	str	r1, [sp, #20]
 80151bc:	e7c3      	b.n	8015146 <_vfiprintf_r+0x176>
 80151be:	fb0c 2101 	mla	r1, ip, r1, r2
 80151c2:	4604      	mov	r4, r0
 80151c4:	2301      	movs	r3, #1
 80151c6:	e7f0      	b.n	80151aa <_vfiprintf_r+0x1da>
 80151c8:	ab03      	add	r3, sp, #12
 80151ca:	9300      	str	r3, [sp, #0]
 80151cc:	462a      	mov	r2, r5
 80151ce:	4b16      	ldr	r3, [pc, #88]	; (8015228 <_vfiprintf_r+0x258>)
 80151d0:	a904      	add	r1, sp, #16
 80151d2:	4630      	mov	r0, r6
 80151d4:	f7fd fd34 	bl	8012c40 <_printf_float>
 80151d8:	4607      	mov	r7, r0
 80151da:	1c78      	adds	r0, r7, #1
 80151dc:	d1d6      	bne.n	801518c <_vfiprintf_r+0x1bc>
 80151de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80151e0:	07d9      	lsls	r1, r3, #31
 80151e2:	d405      	bmi.n	80151f0 <_vfiprintf_r+0x220>
 80151e4:	89ab      	ldrh	r3, [r5, #12]
 80151e6:	059a      	lsls	r2, r3, #22
 80151e8:	d402      	bmi.n	80151f0 <_vfiprintf_r+0x220>
 80151ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80151ec:	f7ff f9d0 	bl	8014590 <__retarget_lock_release_recursive>
 80151f0:	89ab      	ldrh	r3, [r5, #12]
 80151f2:	065b      	lsls	r3, r3, #25
 80151f4:	f53f af12 	bmi.w	801501c <_vfiprintf_r+0x4c>
 80151f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80151fa:	e711      	b.n	8015020 <_vfiprintf_r+0x50>
 80151fc:	ab03      	add	r3, sp, #12
 80151fe:	9300      	str	r3, [sp, #0]
 8015200:	462a      	mov	r2, r5
 8015202:	4b09      	ldr	r3, [pc, #36]	; (8015228 <_vfiprintf_r+0x258>)
 8015204:	a904      	add	r1, sp, #16
 8015206:	4630      	mov	r0, r6
 8015208:	f7fd ffbe 	bl	8013188 <_printf_i>
 801520c:	e7e4      	b.n	80151d8 <_vfiprintf_r+0x208>
 801520e:	bf00      	nop
 8015210:	0801983c 	.word	0x0801983c
 8015214:	0801985c 	.word	0x0801985c
 8015218:	0801981c 	.word	0x0801981c
 801521c:	080199dc 	.word	0x080199dc
 8015220:	080199e6 	.word	0x080199e6
 8015224:	08012c41 	.word	0x08012c41
 8015228:	08014fab 	.word	0x08014fab
 801522c:	080199e2 	.word	0x080199e2

08015230 <__sread>:
 8015230:	b510      	push	{r4, lr}
 8015232:	460c      	mov	r4, r1
 8015234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015238:	f000 fa98 	bl	801576c <_read_r>
 801523c:	2800      	cmp	r0, #0
 801523e:	bfab      	itete	ge
 8015240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015242:	89a3      	ldrhlt	r3, [r4, #12]
 8015244:	181b      	addge	r3, r3, r0
 8015246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801524a:	bfac      	ite	ge
 801524c:	6563      	strge	r3, [r4, #84]	; 0x54
 801524e:	81a3      	strhlt	r3, [r4, #12]
 8015250:	bd10      	pop	{r4, pc}

08015252 <__swrite>:
 8015252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015256:	461f      	mov	r7, r3
 8015258:	898b      	ldrh	r3, [r1, #12]
 801525a:	05db      	lsls	r3, r3, #23
 801525c:	4605      	mov	r5, r0
 801525e:	460c      	mov	r4, r1
 8015260:	4616      	mov	r6, r2
 8015262:	d505      	bpl.n	8015270 <__swrite+0x1e>
 8015264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015268:	2302      	movs	r3, #2
 801526a:	2200      	movs	r2, #0
 801526c:	f000 f9d0 	bl	8015610 <_lseek_r>
 8015270:	89a3      	ldrh	r3, [r4, #12]
 8015272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801527a:	81a3      	strh	r3, [r4, #12]
 801527c:	4632      	mov	r2, r6
 801527e:	463b      	mov	r3, r7
 8015280:	4628      	mov	r0, r5
 8015282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015286:	f000 b869 	b.w	801535c <_write_r>

0801528a <__sseek>:
 801528a:	b510      	push	{r4, lr}
 801528c:	460c      	mov	r4, r1
 801528e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015292:	f000 f9bd 	bl	8015610 <_lseek_r>
 8015296:	1c43      	adds	r3, r0, #1
 8015298:	89a3      	ldrh	r3, [r4, #12]
 801529a:	bf15      	itete	ne
 801529c:	6560      	strne	r0, [r4, #84]	; 0x54
 801529e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80152a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80152a6:	81a3      	strheq	r3, [r4, #12]
 80152a8:	bf18      	it	ne
 80152aa:	81a3      	strhne	r3, [r4, #12]
 80152ac:	bd10      	pop	{r4, pc}

080152ae <__sclose>:
 80152ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152b2:	f000 b8db 	b.w	801546c <_close_r>
	...

080152b8 <__swbuf_r>:
 80152b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ba:	460e      	mov	r6, r1
 80152bc:	4614      	mov	r4, r2
 80152be:	4605      	mov	r5, r0
 80152c0:	b118      	cbz	r0, 80152ca <__swbuf_r+0x12>
 80152c2:	6983      	ldr	r3, [r0, #24]
 80152c4:	b90b      	cbnz	r3, 80152ca <__swbuf_r+0x12>
 80152c6:	f7ff f8ad 	bl	8014424 <__sinit>
 80152ca:	4b21      	ldr	r3, [pc, #132]	; (8015350 <__swbuf_r+0x98>)
 80152cc:	429c      	cmp	r4, r3
 80152ce:	d12b      	bne.n	8015328 <__swbuf_r+0x70>
 80152d0:	686c      	ldr	r4, [r5, #4]
 80152d2:	69a3      	ldr	r3, [r4, #24]
 80152d4:	60a3      	str	r3, [r4, #8]
 80152d6:	89a3      	ldrh	r3, [r4, #12]
 80152d8:	071a      	lsls	r2, r3, #28
 80152da:	d52f      	bpl.n	801533c <__swbuf_r+0x84>
 80152dc:	6923      	ldr	r3, [r4, #16]
 80152de:	b36b      	cbz	r3, 801533c <__swbuf_r+0x84>
 80152e0:	6923      	ldr	r3, [r4, #16]
 80152e2:	6820      	ldr	r0, [r4, #0]
 80152e4:	1ac0      	subs	r0, r0, r3
 80152e6:	6963      	ldr	r3, [r4, #20]
 80152e8:	b2f6      	uxtb	r6, r6
 80152ea:	4283      	cmp	r3, r0
 80152ec:	4637      	mov	r7, r6
 80152ee:	dc04      	bgt.n	80152fa <__swbuf_r+0x42>
 80152f0:	4621      	mov	r1, r4
 80152f2:	4628      	mov	r0, r5
 80152f4:	f000 f950 	bl	8015598 <_fflush_r>
 80152f8:	bb30      	cbnz	r0, 8015348 <__swbuf_r+0x90>
 80152fa:	68a3      	ldr	r3, [r4, #8]
 80152fc:	3b01      	subs	r3, #1
 80152fe:	60a3      	str	r3, [r4, #8]
 8015300:	6823      	ldr	r3, [r4, #0]
 8015302:	1c5a      	adds	r2, r3, #1
 8015304:	6022      	str	r2, [r4, #0]
 8015306:	701e      	strb	r6, [r3, #0]
 8015308:	6963      	ldr	r3, [r4, #20]
 801530a:	3001      	adds	r0, #1
 801530c:	4283      	cmp	r3, r0
 801530e:	d004      	beq.n	801531a <__swbuf_r+0x62>
 8015310:	89a3      	ldrh	r3, [r4, #12]
 8015312:	07db      	lsls	r3, r3, #31
 8015314:	d506      	bpl.n	8015324 <__swbuf_r+0x6c>
 8015316:	2e0a      	cmp	r6, #10
 8015318:	d104      	bne.n	8015324 <__swbuf_r+0x6c>
 801531a:	4621      	mov	r1, r4
 801531c:	4628      	mov	r0, r5
 801531e:	f000 f93b 	bl	8015598 <_fflush_r>
 8015322:	b988      	cbnz	r0, 8015348 <__swbuf_r+0x90>
 8015324:	4638      	mov	r0, r7
 8015326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015328:	4b0a      	ldr	r3, [pc, #40]	; (8015354 <__swbuf_r+0x9c>)
 801532a:	429c      	cmp	r4, r3
 801532c:	d101      	bne.n	8015332 <__swbuf_r+0x7a>
 801532e:	68ac      	ldr	r4, [r5, #8]
 8015330:	e7cf      	b.n	80152d2 <__swbuf_r+0x1a>
 8015332:	4b09      	ldr	r3, [pc, #36]	; (8015358 <__swbuf_r+0xa0>)
 8015334:	429c      	cmp	r4, r3
 8015336:	bf08      	it	eq
 8015338:	68ec      	ldreq	r4, [r5, #12]
 801533a:	e7ca      	b.n	80152d2 <__swbuf_r+0x1a>
 801533c:	4621      	mov	r1, r4
 801533e:	4628      	mov	r0, r5
 8015340:	f000 f81e 	bl	8015380 <__swsetup_r>
 8015344:	2800      	cmp	r0, #0
 8015346:	d0cb      	beq.n	80152e0 <__swbuf_r+0x28>
 8015348:	f04f 37ff 	mov.w	r7, #4294967295
 801534c:	e7ea      	b.n	8015324 <__swbuf_r+0x6c>
 801534e:	bf00      	nop
 8015350:	0801983c 	.word	0x0801983c
 8015354:	0801985c 	.word	0x0801985c
 8015358:	0801981c 	.word	0x0801981c

0801535c <_write_r>:
 801535c:	b538      	push	{r3, r4, r5, lr}
 801535e:	4d07      	ldr	r5, [pc, #28]	; (801537c <_write_r+0x20>)
 8015360:	4604      	mov	r4, r0
 8015362:	4608      	mov	r0, r1
 8015364:	4611      	mov	r1, r2
 8015366:	2200      	movs	r2, #0
 8015368:	602a      	str	r2, [r5, #0]
 801536a:	461a      	mov	r2, r3
 801536c:	f7ee fec3 	bl	80040f6 <_write>
 8015370:	1c43      	adds	r3, r0, #1
 8015372:	d102      	bne.n	801537a <_write_r+0x1e>
 8015374:	682b      	ldr	r3, [r5, #0]
 8015376:	b103      	cbz	r3, 801537a <_write_r+0x1e>
 8015378:	6023      	str	r3, [r4, #0]
 801537a:	bd38      	pop	{r3, r4, r5, pc}
 801537c:	200090f4 	.word	0x200090f4

08015380 <__swsetup_r>:
 8015380:	4b32      	ldr	r3, [pc, #200]	; (801544c <__swsetup_r+0xcc>)
 8015382:	b570      	push	{r4, r5, r6, lr}
 8015384:	681d      	ldr	r5, [r3, #0]
 8015386:	4606      	mov	r6, r0
 8015388:	460c      	mov	r4, r1
 801538a:	b125      	cbz	r5, 8015396 <__swsetup_r+0x16>
 801538c:	69ab      	ldr	r3, [r5, #24]
 801538e:	b913      	cbnz	r3, 8015396 <__swsetup_r+0x16>
 8015390:	4628      	mov	r0, r5
 8015392:	f7ff f847 	bl	8014424 <__sinit>
 8015396:	4b2e      	ldr	r3, [pc, #184]	; (8015450 <__swsetup_r+0xd0>)
 8015398:	429c      	cmp	r4, r3
 801539a:	d10f      	bne.n	80153bc <__swsetup_r+0x3c>
 801539c:	686c      	ldr	r4, [r5, #4]
 801539e:	89a3      	ldrh	r3, [r4, #12]
 80153a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80153a4:	0719      	lsls	r1, r3, #28
 80153a6:	d42c      	bmi.n	8015402 <__swsetup_r+0x82>
 80153a8:	06dd      	lsls	r5, r3, #27
 80153aa:	d411      	bmi.n	80153d0 <__swsetup_r+0x50>
 80153ac:	2309      	movs	r3, #9
 80153ae:	6033      	str	r3, [r6, #0]
 80153b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80153b4:	81a3      	strh	r3, [r4, #12]
 80153b6:	f04f 30ff 	mov.w	r0, #4294967295
 80153ba:	e03e      	b.n	801543a <__swsetup_r+0xba>
 80153bc:	4b25      	ldr	r3, [pc, #148]	; (8015454 <__swsetup_r+0xd4>)
 80153be:	429c      	cmp	r4, r3
 80153c0:	d101      	bne.n	80153c6 <__swsetup_r+0x46>
 80153c2:	68ac      	ldr	r4, [r5, #8]
 80153c4:	e7eb      	b.n	801539e <__swsetup_r+0x1e>
 80153c6:	4b24      	ldr	r3, [pc, #144]	; (8015458 <__swsetup_r+0xd8>)
 80153c8:	429c      	cmp	r4, r3
 80153ca:	bf08      	it	eq
 80153cc:	68ec      	ldreq	r4, [r5, #12]
 80153ce:	e7e6      	b.n	801539e <__swsetup_r+0x1e>
 80153d0:	0758      	lsls	r0, r3, #29
 80153d2:	d512      	bpl.n	80153fa <__swsetup_r+0x7a>
 80153d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80153d6:	b141      	cbz	r1, 80153ea <__swsetup_r+0x6a>
 80153d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80153dc:	4299      	cmp	r1, r3
 80153de:	d002      	beq.n	80153e6 <__swsetup_r+0x66>
 80153e0:	4630      	mov	r0, r6
 80153e2:	f7fd fae3 	bl	80129ac <_free_r>
 80153e6:	2300      	movs	r3, #0
 80153e8:	6363      	str	r3, [r4, #52]	; 0x34
 80153ea:	89a3      	ldrh	r3, [r4, #12]
 80153ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80153f0:	81a3      	strh	r3, [r4, #12]
 80153f2:	2300      	movs	r3, #0
 80153f4:	6063      	str	r3, [r4, #4]
 80153f6:	6923      	ldr	r3, [r4, #16]
 80153f8:	6023      	str	r3, [r4, #0]
 80153fa:	89a3      	ldrh	r3, [r4, #12]
 80153fc:	f043 0308 	orr.w	r3, r3, #8
 8015400:	81a3      	strh	r3, [r4, #12]
 8015402:	6923      	ldr	r3, [r4, #16]
 8015404:	b94b      	cbnz	r3, 801541a <__swsetup_r+0x9a>
 8015406:	89a3      	ldrh	r3, [r4, #12]
 8015408:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801540c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015410:	d003      	beq.n	801541a <__swsetup_r+0x9a>
 8015412:	4621      	mov	r1, r4
 8015414:	4630      	mov	r0, r6
 8015416:	f000 f931 	bl	801567c <__smakebuf_r>
 801541a:	89a0      	ldrh	r0, [r4, #12]
 801541c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015420:	f010 0301 	ands.w	r3, r0, #1
 8015424:	d00a      	beq.n	801543c <__swsetup_r+0xbc>
 8015426:	2300      	movs	r3, #0
 8015428:	60a3      	str	r3, [r4, #8]
 801542a:	6963      	ldr	r3, [r4, #20]
 801542c:	425b      	negs	r3, r3
 801542e:	61a3      	str	r3, [r4, #24]
 8015430:	6923      	ldr	r3, [r4, #16]
 8015432:	b943      	cbnz	r3, 8015446 <__swsetup_r+0xc6>
 8015434:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015438:	d1ba      	bne.n	80153b0 <__swsetup_r+0x30>
 801543a:	bd70      	pop	{r4, r5, r6, pc}
 801543c:	0781      	lsls	r1, r0, #30
 801543e:	bf58      	it	pl
 8015440:	6963      	ldrpl	r3, [r4, #20]
 8015442:	60a3      	str	r3, [r4, #8]
 8015444:	e7f4      	b.n	8015430 <__swsetup_r+0xb0>
 8015446:	2000      	movs	r0, #0
 8015448:	e7f7      	b.n	801543a <__swsetup_r+0xba>
 801544a:	bf00      	nop
 801544c:	2000004c 	.word	0x2000004c
 8015450:	0801983c 	.word	0x0801983c
 8015454:	0801985c 	.word	0x0801985c
 8015458:	0801981c 	.word	0x0801981c

0801545c <abort>:
 801545c:	b508      	push	{r3, lr}
 801545e:	2006      	movs	r0, #6
 8015460:	f000 f9be 	bl	80157e0 <raise>
 8015464:	2001      	movs	r0, #1
 8015466:	f7ee fe1f 	bl	80040a8 <_exit>
	...

0801546c <_close_r>:
 801546c:	b538      	push	{r3, r4, r5, lr}
 801546e:	4d06      	ldr	r5, [pc, #24]	; (8015488 <_close_r+0x1c>)
 8015470:	2300      	movs	r3, #0
 8015472:	4604      	mov	r4, r0
 8015474:	4608      	mov	r0, r1
 8015476:	602b      	str	r3, [r5, #0]
 8015478:	f7ee fe59 	bl	800412e <_close>
 801547c:	1c43      	adds	r3, r0, #1
 801547e:	d102      	bne.n	8015486 <_close_r+0x1a>
 8015480:	682b      	ldr	r3, [r5, #0]
 8015482:	b103      	cbz	r3, 8015486 <_close_r+0x1a>
 8015484:	6023      	str	r3, [r4, #0]
 8015486:	bd38      	pop	{r3, r4, r5, pc}
 8015488:	200090f4 	.word	0x200090f4

0801548c <__sflush_r>:
 801548c:	898a      	ldrh	r2, [r1, #12]
 801548e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015492:	4605      	mov	r5, r0
 8015494:	0710      	lsls	r0, r2, #28
 8015496:	460c      	mov	r4, r1
 8015498:	d458      	bmi.n	801554c <__sflush_r+0xc0>
 801549a:	684b      	ldr	r3, [r1, #4]
 801549c:	2b00      	cmp	r3, #0
 801549e:	dc05      	bgt.n	80154ac <__sflush_r+0x20>
 80154a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	dc02      	bgt.n	80154ac <__sflush_r+0x20>
 80154a6:	2000      	movs	r0, #0
 80154a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80154ae:	2e00      	cmp	r6, #0
 80154b0:	d0f9      	beq.n	80154a6 <__sflush_r+0x1a>
 80154b2:	2300      	movs	r3, #0
 80154b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80154b8:	682f      	ldr	r7, [r5, #0]
 80154ba:	602b      	str	r3, [r5, #0]
 80154bc:	d032      	beq.n	8015524 <__sflush_r+0x98>
 80154be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80154c0:	89a3      	ldrh	r3, [r4, #12]
 80154c2:	075a      	lsls	r2, r3, #29
 80154c4:	d505      	bpl.n	80154d2 <__sflush_r+0x46>
 80154c6:	6863      	ldr	r3, [r4, #4]
 80154c8:	1ac0      	subs	r0, r0, r3
 80154ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80154cc:	b10b      	cbz	r3, 80154d2 <__sflush_r+0x46>
 80154ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80154d0:	1ac0      	subs	r0, r0, r3
 80154d2:	2300      	movs	r3, #0
 80154d4:	4602      	mov	r2, r0
 80154d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80154d8:	6a21      	ldr	r1, [r4, #32]
 80154da:	4628      	mov	r0, r5
 80154dc:	47b0      	blx	r6
 80154de:	1c43      	adds	r3, r0, #1
 80154e0:	89a3      	ldrh	r3, [r4, #12]
 80154e2:	d106      	bne.n	80154f2 <__sflush_r+0x66>
 80154e4:	6829      	ldr	r1, [r5, #0]
 80154e6:	291d      	cmp	r1, #29
 80154e8:	d82c      	bhi.n	8015544 <__sflush_r+0xb8>
 80154ea:	4a2a      	ldr	r2, [pc, #168]	; (8015594 <__sflush_r+0x108>)
 80154ec:	40ca      	lsrs	r2, r1
 80154ee:	07d6      	lsls	r6, r2, #31
 80154f0:	d528      	bpl.n	8015544 <__sflush_r+0xb8>
 80154f2:	2200      	movs	r2, #0
 80154f4:	6062      	str	r2, [r4, #4]
 80154f6:	04d9      	lsls	r1, r3, #19
 80154f8:	6922      	ldr	r2, [r4, #16]
 80154fa:	6022      	str	r2, [r4, #0]
 80154fc:	d504      	bpl.n	8015508 <__sflush_r+0x7c>
 80154fe:	1c42      	adds	r2, r0, #1
 8015500:	d101      	bne.n	8015506 <__sflush_r+0x7a>
 8015502:	682b      	ldr	r3, [r5, #0]
 8015504:	b903      	cbnz	r3, 8015508 <__sflush_r+0x7c>
 8015506:	6560      	str	r0, [r4, #84]	; 0x54
 8015508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801550a:	602f      	str	r7, [r5, #0]
 801550c:	2900      	cmp	r1, #0
 801550e:	d0ca      	beq.n	80154a6 <__sflush_r+0x1a>
 8015510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015514:	4299      	cmp	r1, r3
 8015516:	d002      	beq.n	801551e <__sflush_r+0x92>
 8015518:	4628      	mov	r0, r5
 801551a:	f7fd fa47 	bl	80129ac <_free_r>
 801551e:	2000      	movs	r0, #0
 8015520:	6360      	str	r0, [r4, #52]	; 0x34
 8015522:	e7c1      	b.n	80154a8 <__sflush_r+0x1c>
 8015524:	6a21      	ldr	r1, [r4, #32]
 8015526:	2301      	movs	r3, #1
 8015528:	4628      	mov	r0, r5
 801552a:	47b0      	blx	r6
 801552c:	1c41      	adds	r1, r0, #1
 801552e:	d1c7      	bne.n	80154c0 <__sflush_r+0x34>
 8015530:	682b      	ldr	r3, [r5, #0]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d0c4      	beq.n	80154c0 <__sflush_r+0x34>
 8015536:	2b1d      	cmp	r3, #29
 8015538:	d001      	beq.n	801553e <__sflush_r+0xb2>
 801553a:	2b16      	cmp	r3, #22
 801553c:	d101      	bne.n	8015542 <__sflush_r+0xb6>
 801553e:	602f      	str	r7, [r5, #0]
 8015540:	e7b1      	b.n	80154a6 <__sflush_r+0x1a>
 8015542:	89a3      	ldrh	r3, [r4, #12]
 8015544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015548:	81a3      	strh	r3, [r4, #12]
 801554a:	e7ad      	b.n	80154a8 <__sflush_r+0x1c>
 801554c:	690f      	ldr	r7, [r1, #16]
 801554e:	2f00      	cmp	r7, #0
 8015550:	d0a9      	beq.n	80154a6 <__sflush_r+0x1a>
 8015552:	0793      	lsls	r3, r2, #30
 8015554:	680e      	ldr	r6, [r1, #0]
 8015556:	bf08      	it	eq
 8015558:	694b      	ldreq	r3, [r1, #20]
 801555a:	600f      	str	r7, [r1, #0]
 801555c:	bf18      	it	ne
 801555e:	2300      	movne	r3, #0
 8015560:	eba6 0807 	sub.w	r8, r6, r7
 8015564:	608b      	str	r3, [r1, #8]
 8015566:	f1b8 0f00 	cmp.w	r8, #0
 801556a:	dd9c      	ble.n	80154a6 <__sflush_r+0x1a>
 801556c:	6a21      	ldr	r1, [r4, #32]
 801556e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015570:	4643      	mov	r3, r8
 8015572:	463a      	mov	r2, r7
 8015574:	4628      	mov	r0, r5
 8015576:	47b0      	blx	r6
 8015578:	2800      	cmp	r0, #0
 801557a:	dc06      	bgt.n	801558a <__sflush_r+0xfe>
 801557c:	89a3      	ldrh	r3, [r4, #12]
 801557e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015582:	81a3      	strh	r3, [r4, #12]
 8015584:	f04f 30ff 	mov.w	r0, #4294967295
 8015588:	e78e      	b.n	80154a8 <__sflush_r+0x1c>
 801558a:	4407      	add	r7, r0
 801558c:	eba8 0800 	sub.w	r8, r8, r0
 8015590:	e7e9      	b.n	8015566 <__sflush_r+0xda>
 8015592:	bf00      	nop
 8015594:	20400001 	.word	0x20400001

08015598 <_fflush_r>:
 8015598:	b538      	push	{r3, r4, r5, lr}
 801559a:	690b      	ldr	r3, [r1, #16]
 801559c:	4605      	mov	r5, r0
 801559e:	460c      	mov	r4, r1
 80155a0:	b913      	cbnz	r3, 80155a8 <_fflush_r+0x10>
 80155a2:	2500      	movs	r5, #0
 80155a4:	4628      	mov	r0, r5
 80155a6:	bd38      	pop	{r3, r4, r5, pc}
 80155a8:	b118      	cbz	r0, 80155b2 <_fflush_r+0x1a>
 80155aa:	6983      	ldr	r3, [r0, #24]
 80155ac:	b90b      	cbnz	r3, 80155b2 <_fflush_r+0x1a>
 80155ae:	f7fe ff39 	bl	8014424 <__sinit>
 80155b2:	4b14      	ldr	r3, [pc, #80]	; (8015604 <_fflush_r+0x6c>)
 80155b4:	429c      	cmp	r4, r3
 80155b6:	d11b      	bne.n	80155f0 <_fflush_r+0x58>
 80155b8:	686c      	ldr	r4, [r5, #4]
 80155ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d0ef      	beq.n	80155a2 <_fflush_r+0xa>
 80155c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80155c4:	07d0      	lsls	r0, r2, #31
 80155c6:	d404      	bmi.n	80155d2 <_fflush_r+0x3a>
 80155c8:	0599      	lsls	r1, r3, #22
 80155ca:	d402      	bmi.n	80155d2 <_fflush_r+0x3a>
 80155cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80155ce:	f7fe ffde 	bl	801458e <__retarget_lock_acquire_recursive>
 80155d2:	4628      	mov	r0, r5
 80155d4:	4621      	mov	r1, r4
 80155d6:	f7ff ff59 	bl	801548c <__sflush_r>
 80155da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80155dc:	07da      	lsls	r2, r3, #31
 80155de:	4605      	mov	r5, r0
 80155e0:	d4e0      	bmi.n	80155a4 <_fflush_r+0xc>
 80155e2:	89a3      	ldrh	r3, [r4, #12]
 80155e4:	059b      	lsls	r3, r3, #22
 80155e6:	d4dd      	bmi.n	80155a4 <_fflush_r+0xc>
 80155e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80155ea:	f7fe ffd1 	bl	8014590 <__retarget_lock_release_recursive>
 80155ee:	e7d9      	b.n	80155a4 <_fflush_r+0xc>
 80155f0:	4b05      	ldr	r3, [pc, #20]	; (8015608 <_fflush_r+0x70>)
 80155f2:	429c      	cmp	r4, r3
 80155f4:	d101      	bne.n	80155fa <_fflush_r+0x62>
 80155f6:	68ac      	ldr	r4, [r5, #8]
 80155f8:	e7df      	b.n	80155ba <_fflush_r+0x22>
 80155fa:	4b04      	ldr	r3, [pc, #16]	; (801560c <_fflush_r+0x74>)
 80155fc:	429c      	cmp	r4, r3
 80155fe:	bf08      	it	eq
 8015600:	68ec      	ldreq	r4, [r5, #12]
 8015602:	e7da      	b.n	80155ba <_fflush_r+0x22>
 8015604:	0801983c 	.word	0x0801983c
 8015608:	0801985c 	.word	0x0801985c
 801560c:	0801981c 	.word	0x0801981c

08015610 <_lseek_r>:
 8015610:	b538      	push	{r3, r4, r5, lr}
 8015612:	4d07      	ldr	r5, [pc, #28]	; (8015630 <_lseek_r+0x20>)
 8015614:	4604      	mov	r4, r0
 8015616:	4608      	mov	r0, r1
 8015618:	4611      	mov	r1, r2
 801561a:	2200      	movs	r2, #0
 801561c:	602a      	str	r2, [r5, #0]
 801561e:	461a      	mov	r2, r3
 8015620:	f7ee fdac 	bl	800417c <_lseek>
 8015624:	1c43      	adds	r3, r0, #1
 8015626:	d102      	bne.n	801562e <_lseek_r+0x1e>
 8015628:	682b      	ldr	r3, [r5, #0]
 801562a:	b103      	cbz	r3, 801562e <_lseek_r+0x1e>
 801562c:	6023      	str	r3, [r4, #0]
 801562e:	bd38      	pop	{r3, r4, r5, pc}
 8015630:	200090f4 	.word	0x200090f4

08015634 <__swhatbuf_r>:
 8015634:	b570      	push	{r4, r5, r6, lr}
 8015636:	460e      	mov	r6, r1
 8015638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801563c:	2900      	cmp	r1, #0
 801563e:	b096      	sub	sp, #88	; 0x58
 8015640:	4614      	mov	r4, r2
 8015642:	461d      	mov	r5, r3
 8015644:	da07      	bge.n	8015656 <__swhatbuf_r+0x22>
 8015646:	2300      	movs	r3, #0
 8015648:	602b      	str	r3, [r5, #0]
 801564a:	89b3      	ldrh	r3, [r6, #12]
 801564c:	061a      	lsls	r2, r3, #24
 801564e:	d410      	bmi.n	8015672 <__swhatbuf_r+0x3e>
 8015650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015654:	e00e      	b.n	8015674 <__swhatbuf_r+0x40>
 8015656:	466a      	mov	r2, sp
 8015658:	f000 f8ec 	bl	8015834 <_fstat_r>
 801565c:	2800      	cmp	r0, #0
 801565e:	dbf2      	blt.n	8015646 <__swhatbuf_r+0x12>
 8015660:	9a01      	ldr	r2, [sp, #4]
 8015662:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015666:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801566a:	425a      	negs	r2, r3
 801566c:	415a      	adcs	r2, r3
 801566e:	602a      	str	r2, [r5, #0]
 8015670:	e7ee      	b.n	8015650 <__swhatbuf_r+0x1c>
 8015672:	2340      	movs	r3, #64	; 0x40
 8015674:	2000      	movs	r0, #0
 8015676:	6023      	str	r3, [r4, #0]
 8015678:	b016      	add	sp, #88	; 0x58
 801567a:	bd70      	pop	{r4, r5, r6, pc}

0801567c <__smakebuf_r>:
 801567c:	898b      	ldrh	r3, [r1, #12]
 801567e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015680:	079d      	lsls	r5, r3, #30
 8015682:	4606      	mov	r6, r0
 8015684:	460c      	mov	r4, r1
 8015686:	d507      	bpl.n	8015698 <__smakebuf_r+0x1c>
 8015688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801568c:	6023      	str	r3, [r4, #0]
 801568e:	6123      	str	r3, [r4, #16]
 8015690:	2301      	movs	r3, #1
 8015692:	6163      	str	r3, [r4, #20]
 8015694:	b002      	add	sp, #8
 8015696:	bd70      	pop	{r4, r5, r6, pc}
 8015698:	ab01      	add	r3, sp, #4
 801569a:	466a      	mov	r2, sp
 801569c:	f7ff ffca 	bl	8015634 <__swhatbuf_r>
 80156a0:	9900      	ldr	r1, [sp, #0]
 80156a2:	4605      	mov	r5, r0
 80156a4:	4630      	mov	r0, r6
 80156a6:	f7fd f9d1 	bl	8012a4c <_malloc_r>
 80156aa:	b948      	cbnz	r0, 80156c0 <__smakebuf_r+0x44>
 80156ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156b0:	059a      	lsls	r2, r3, #22
 80156b2:	d4ef      	bmi.n	8015694 <__smakebuf_r+0x18>
 80156b4:	f023 0303 	bic.w	r3, r3, #3
 80156b8:	f043 0302 	orr.w	r3, r3, #2
 80156bc:	81a3      	strh	r3, [r4, #12]
 80156be:	e7e3      	b.n	8015688 <__smakebuf_r+0xc>
 80156c0:	4b0d      	ldr	r3, [pc, #52]	; (80156f8 <__smakebuf_r+0x7c>)
 80156c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80156c4:	89a3      	ldrh	r3, [r4, #12]
 80156c6:	6020      	str	r0, [r4, #0]
 80156c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156cc:	81a3      	strh	r3, [r4, #12]
 80156ce:	9b00      	ldr	r3, [sp, #0]
 80156d0:	6163      	str	r3, [r4, #20]
 80156d2:	9b01      	ldr	r3, [sp, #4]
 80156d4:	6120      	str	r0, [r4, #16]
 80156d6:	b15b      	cbz	r3, 80156f0 <__smakebuf_r+0x74>
 80156d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80156dc:	4630      	mov	r0, r6
 80156de:	f000 f8bb 	bl	8015858 <_isatty_r>
 80156e2:	b128      	cbz	r0, 80156f0 <__smakebuf_r+0x74>
 80156e4:	89a3      	ldrh	r3, [r4, #12]
 80156e6:	f023 0303 	bic.w	r3, r3, #3
 80156ea:	f043 0301 	orr.w	r3, r3, #1
 80156ee:	81a3      	strh	r3, [r4, #12]
 80156f0:	89a0      	ldrh	r0, [r4, #12]
 80156f2:	4305      	orrs	r5, r0
 80156f4:	81a5      	strh	r5, [r4, #12]
 80156f6:	e7cd      	b.n	8015694 <__smakebuf_r+0x18>
 80156f8:	080143bd 	.word	0x080143bd

080156fc <__ascii_mbtowc>:
 80156fc:	b082      	sub	sp, #8
 80156fe:	b901      	cbnz	r1, 8015702 <__ascii_mbtowc+0x6>
 8015700:	a901      	add	r1, sp, #4
 8015702:	b142      	cbz	r2, 8015716 <__ascii_mbtowc+0x1a>
 8015704:	b14b      	cbz	r3, 801571a <__ascii_mbtowc+0x1e>
 8015706:	7813      	ldrb	r3, [r2, #0]
 8015708:	600b      	str	r3, [r1, #0]
 801570a:	7812      	ldrb	r2, [r2, #0]
 801570c:	1e10      	subs	r0, r2, #0
 801570e:	bf18      	it	ne
 8015710:	2001      	movne	r0, #1
 8015712:	b002      	add	sp, #8
 8015714:	4770      	bx	lr
 8015716:	4610      	mov	r0, r2
 8015718:	e7fb      	b.n	8015712 <__ascii_mbtowc+0x16>
 801571a:	f06f 0001 	mvn.w	r0, #1
 801571e:	e7f8      	b.n	8015712 <__ascii_mbtowc+0x16>

08015720 <_realloc_r>:
 8015720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015722:	4607      	mov	r7, r0
 8015724:	4614      	mov	r4, r2
 8015726:	460e      	mov	r6, r1
 8015728:	b921      	cbnz	r1, 8015734 <_realloc_r+0x14>
 801572a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801572e:	4611      	mov	r1, r2
 8015730:	f7fd b98c 	b.w	8012a4c <_malloc_r>
 8015734:	b922      	cbnz	r2, 8015740 <_realloc_r+0x20>
 8015736:	f7fd f939 	bl	80129ac <_free_r>
 801573a:	4625      	mov	r5, r4
 801573c:	4628      	mov	r0, r5
 801573e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015740:	f000 f89a 	bl	8015878 <_malloc_usable_size_r>
 8015744:	42a0      	cmp	r0, r4
 8015746:	d20f      	bcs.n	8015768 <_realloc_r+0x48>
 8015748:	4621      	mov	r1, r4
 801574a:	4638      	mov	r0, r7
 801574c:	f7fd f97e 	bl	8012a4c <_malloc_r>
 8015750:	4605      	mov	r5, r0
 8015752:	2800      	cmp	r0, #0
 8015754:	d0f2      	beq.n	801573c <_realloc_r+0x1c>
 8015756:	4631      	mov	r1, r6
 8015758:	4622      	mov	r2, r4
 801575a:	f7fd f8f7 	bl	801294c <memcpy>
 801575e:	4631      	mov	r1, r6
 8015760:	4638      	mov	r0, r7
 8015762:	f7fd f923 	bl	80129ac <_free_r>
 8015766:	e7e9      	b.n	801573c <_realloc_r+0x1c>
 8015768:	4635      	mov	r5, r6
 801576a:	e7e7      	b.n	801573c <_realloc_r+0x1c>

0801576c <_read_r>:
 801576c:	b538      	push	{r3, r4, r5, lr}
 801576e:	4d07      	ldr	r5, [pc, #28]	; (801578c <_read_r+0x20>)
 8015770:	4604      	mov	r4, r0
 8015772:	4608      	mov	r0, r1
 8015774:	4611      	mov	r1, r2
 8015776:	2200      	movs	r2, #0
 8015778:	602a      	str	r2, [r5, #0]
 801577a:	461a      	mov	r2, r3
 801577c:	f7ee fc9e 	bl	80040bc <_read>
 8015780:	1c43      	adds	r3, r0, #1
 8015782:	d102      	bne.n	801578a <_read_r+0x1e>
 8015784:	682b      	ldr	r3, [r5, #0]
 8015786:	b103      	cbz	r3, 801578a <_read_r+0x1e>
 8015788:	6023      	str	r3, [r4, #0]
 801578a:	bd38      	pop	{r3, r4, r5, pc}
 801578c:	200090f4 	.word	0x200090f4

08015790 <_raise_r>:
 8015790:	291f      	cmp	r1, #31
 8015792:	b538      	push	{r3, r4, r5, lr}
 8015794:	4604      	mov	r4, r0
 8015796:	460d      	mov	r5, r1
 8015798:	d904      	bls.n	80157a4 <_raise_r+0x14>
 801579a:	2316      	movs	r3, #22
 801579c:	6003      	str	r3, [r0, #0]
 801579e:	f04f 30ff 	mov.w	r0, #4294967295
 80157a2:	bd38      	pop	{r3, r4, r5, pc}
 80157a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80157a6:	b112      	cbz	r2, 80157ae <_raise_r+0x1e>
 80157a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80157ac:	b94b      	cbnz	r3, 80157c2 <_raise_r+0x32>
 80157ae:	4620      	mov	r0, r4
 80157b0:	f000 f830 	bl	8015814 <_getpid_r>
 80157b4:	462a      	mov	r2, r5
 80157b6:	4601      	mov	r1, r0
 80157b8:	4620      	mov	r0, r4
 80157ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80157be:	f000 b817 	b.w	80157f0 <_kill_r>
 80157c2:	2b01      	cmp	r3, #1
 80157c4:	d00a      	beq.n	80157dc <_raise_r+0x4c>
 80157c6:	1c59      	adds	r1, r3, #1
 80157c8:	d103      	bne.n	80157d2 <_raise_r+0x42>
 80157ca:	2316      	movs	r3, #22
 80157cc:	6003      	str	r3, [r0, #0]
 80157ce:	2001      	movs	r0, #1
 80157d0:	e7e7      	b.n	80157a2 <_raise_r+0x12>
 80157d2:	2400      	movs	r4, #0
 80157d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80157d8:	4628      	mov	r0, r5
 80157da:	4798      	blx	r3
 80157dc:	2000      	movs	r0, #0
 80157de:	e7e0      	b.n	80157a2 <_raise_r+0x12>

080157e0 <raise>:
 80157e0:	4b02      	ldr	r3, [pc, #8]	; (80157ec <raise+0xc>)
 80157e2:	4601      	mov	r1, r0
 80157e4:	6818      	ldr	r0, [r3, #0]
 80157e6:	f7ff bfd3 	b.w	8015790 <_raise_r>
 80157ea:	bf00      	nop
 80157ec:	2000004c 	.word	0x2000004c

080157f0 <_kill_r>:
 80157f0:	b538      	push	{r3, r4, r5, lr}
 80157f2:	4d07      	ldr	r5, [pc, #28]	; (8015810 <_kill_r+0x20>)
 80157f4:	2300      	movs	r3, #0
 80157f6:	4604      	mov	r4, r0
 80157f8:	4608      	mov	r0, r1
 80157fa:	4611      	mov	r1, r2
 80157fc:	602b      	str	r3, [r5, #0]
 80157fe:	f7ee fc41 	bl	8004084 <_kill>
 8015802:	1c43      	adds	r3, r0, #1
 8015804:	d102      	bne.n	801580c <_kill_r+0x1c>
 8015806:	682b      	ldr	r3, [r5, #0]
 8015808:	b103      	cbz	r3, 801580c <_kill_r+0x1c>
 801580a:	6023      	str	r3, [r4, #0]
 801580c:	bd38      	pop	{r3, r4, r5, pc}
 801580e:	bf00      	nop
 8015810:	200090f4 	.word	0x200090f4

08015814 <_getpid_r>:
 8015814:	f7ee bc2e 	b.w	8004074 <_getpid>

08015818 <__ascii_wctomb>:
 8015818:	b149      	cbz	r1, 801582e <__ascii_wctomb+0x16>
 801581a:	2aff      	cmp	r2, #255	; 0xff
 801581c:	bf85      	ittet	hi
 801581e:	238a      	movhi	r3, #138	; 0x8a
 8015820:	6003      	strhi	r3, [r0, #0]
 8015822:	700a      	strbls	r2, [r1, #0]
 8015824:	f04f 30ff 	movhi.w	r0, #4294967295
 8015828:	bf98      	it	ls
 801582a:	2001      	movls	r0, #1
 801582c:	4770      	bx	lr
 801582e:	4608      	mov	r0, r1
 8015830:	4770      	bx	lr
	...

08015834 <_fstat_r>:
 8015834:	b538      	push	{r3, r4, r5, lr}
 8015836:	4d07      	ldr	r5, [pc, #28]	; (8015854 <_fstat_r+0x20>)
 8015838:	2300      	movs	r3, #0
 801583a:	4604      	mov	r4, r0
 801583c:	4608      	mov	r0, r1
 801583e:	4611      	mov	r1, r2
 8015840:	602b      	str	r3, [r5, #0]
 8015842:	f7ee fc80 	bl	8004146 <_fstat>
 8015846:	1c43      	adds	r3, r0, #1
 8015848:	d102      	bne.n	8015850 <_fstat_r+0x1c>
 801584a:	682b      	ldr	r3, [r5, #0]
 801584c:	b103      	cbz	r3, 8015850 <_fstat_r+0x1c>
 801584e:	6023      	str	r3, [r4, #0]
 8015850:	bd38      	pop	{r3, r4, r5, pc}
 8015852:	bf00      	nop
 8015854:	200090f4 	.word	0x200090f4

08015858 <_isatty_r>:
 8015858:	b538      	push	{r3, r4, r5, lr}
 801585a:	4d06      	ldr	r5, [pc, #24]	; (8015874 <_isatty_r+0x1c>)
 801585c:	2300      	movs	r3, #0
 801585e:	4604      	mov	r4, r0
 8015860:	4608      	mov	r0, r1
 8015862:	602b      	str	r3, [r5, #0]
 8015864:	f7ee fc7f 	bl	8004166 <_isatty>
 8015868:	1c43      	adds	r3, r0, #1
 801586a:	d102      	bne.n	8015872 <_isatty_r+0x1a>
 801586c:	682b      	ldr	r3, [r5, #0]
 801586e:	b103      	cbz	r3, 8015872 <_isatty_r+0x1a>
 8015870:	6023      	str	r3, [r4, #0]
 8015872:	bd38      	pop	{r3, r4, r5, pc}
 8015874:	200090f4 	.word	0x200090f4

08015878 <_malloc_usable_size_r>:
 8015878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801587c:	1f18      	subs	r0, r3, #4
 801587e:	2b00      	cmp	r3, #0
 8015880:	bfbc      	itt	lt
 8015882:	580b      	ldrlt	r3, [r1, r0]
 8015884:	18c0      	addlt	r0, r0, r3
 8015886:	4770      	bx	lr

08015888 <pow>:
 8015888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801588c:	ec59 8b10 	vmov	r8, r9, d0
 8015890:	ec57 6b11 	vmov	r6, r7, d1
 8015894:	f000 f8a8 	bl	80159e8 <__ieee754_pow>
 8015898:	4b4e      	ldr	r3, [pc, #312]	; (80159d4 <pow+0x14c>)
 801589a:	f993 3000 	ldrsb.w	r3, [r3]
 801589e:	3301      	adds	r3, #1
 80158a0:	ec55 4b10 	vmov	r4, r5, d0
 80158a4:	d015      	beq.n	80158d2 <pow+0x4a>
 80158a6:	4632      	mov	r2, r6
 80158a8:	463b      	mov	r3, r7
 80158aa:	4630      	mov	r0, r6
 80158ac:	4639      	mov	r1, r7
 80158ae:	f7eb f94d 	bl	8000b4c <__aeabi_dcmpun>
 80158b2:	b970      	cbnz	r0, 80158d2 <pow+0x4a>
 80158b4:	4642      	mov	r2, r8
 80158b6:	464b      	mov	r3, r9
 80158b8:	4640      	mov	r0, r8
 80158ba:	4649      	mov	r1, r9
 80158bc:	f7eb f946 	bl	8000b4c <__aeabi_dcmpun>
 80158c0:	2200      	movs	r2, #0
 80158c2:	2300      	movs	r3, #0
 80158c4:	b148      	cbz	r0, 80158da <pow+0x52>
 80158c6:	4630      	mov	r0, r6
 80158c8:	4639      	mov	r1, r7
 80158ca:	f7eb f90d 	bl	8000ae8 <__aeabi_dcmpeq>
 80158ce:	2800      	cmp	r0, #0
 80158d0:	d17d      	bne.n	80159ce <pow+0x146>
 80158d2:	ec45 4b10 	vmov	d0, r4, r5
 80158d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158da:	4640      	mov	r0, r8
 80158dc:	4649      	mov	r1, r9
 80158de:	f7eb f903 	bl	8000ae8 <__aeabi_dcmpeq>
 80158e2:	b1e0      	cbz	r0, 801591e <pow+0x96>
 80158e4:	2200      	movs	r2, #0
 80158e6:	2300      	movs	r3, #0
 80158e8:	4630      	mov	r0, r6
 80158ea:	4639      	mov	r1, r7
 80158ec:	f7eb f8fc 	bl	8000ae8 <__aeabi_dcmpeq>
 80158f0:	2800      	cmp	r0, #0
 80158f2:	d16c      	bne.n	80159ce <pow+0x146>
 80158f4:	ec47 6b10 	vmov	d0, r6, r7
 80158f8:	f000 fe55 	bl	80165a6 <finite>
 80158fc:	2800      	cmp	r0, #0
 80158fe:	d0e8      	beq.n	80158d2 <pow+0x4a>
 8015900:	2200      	movs	r2, #0
 8015902:	2300      	movs	r3, #0
 8015904:	4630      	mov	r0, r6
 8015906:	4639      	mov	r1, r7
 8015908:	f7eb f8f8 	bl	8000afc <__aeabi_dcmplt>
 801590c:	2800      	cmp	r0, #0
 801590e:	d0e0      	beq.n	80158d2 <pow+0x4a>
 8015910:	f7fe fd2a 	bl	8014368 <__errno>
 8015914:	2321      	movs	r3, #33	; 0x21
 8015916:	6003      	str	r3, [r0, #0]
 8015918:	2400      	movs	r4, #0
 801591a:	4d2f      	ldr	r5, [pc, #188]	; (80159d8 <pow+0x150>)
 801591c:	e7d9      	b.n	80158d2 <pow+0x4a>
 801591e:	ec45 4b10 	vmov	d0, r4, r5
 8015922:	f000 fe40 	bl	80165a6 <finite>
 8015926:	bbb8      	cbnz	r0, 8015998 <pow+0x110>
 8015928:	ec49 8b10 	vmov	d0, r8, r9
 801592c:	f000 fe3b 	bl	80165a6 <finite>
 8015930:	b390      	cbz	r0, 8015998 <pow+0x110>
 8015932:	ec47 6b10 	vmov	d0, r6, r7
 8015936:	f000 fe36 	bl	80165a6 <finite>
 801593a:	b368      	cbz	r0, 8015998 <pow+0x110>
 801593c:	4622      	mov	r2, r4
 801593e:	462b      	mov	r3, r5
 8015940:	4620      	mov	r0, r4
 8015942:	4629      	mov	r1, r5
 8015944:	f7eb f902 	bl	8000b4c <__aeabi_dcmpun>
 8015948:	b160      	cbz	r0, 8015964 <pow+0xdc>
 801594a:	f7fe fd0d 	bl	8014368 <__errno>
 801594e:	2321      	movs	r3, #33	; 0x21
 8015950:	6003      	str	r3, [r0, #0]
 8015952:	2200      	movs	r2, #0
 8015954:	2300      	movs	r3, #0
 8015956:	4610      	mov	r0, r2
 8015958:	4619      	mov	r1, r3
 801595a:	f7ea ff87 	bl	800086c <__aeabi_ddiv>
 801595e:	4604      	mov	r4, r0
 8015960:	460d      	mov	r5, r1
 8015962:	e7b6      	b.n	80158d2 <pow+0x4a>
 8015964:	f7fe fd00 	bl	8014368 <__errno>
 8015968:	2322      	movs	r3, #34	; 0x22
 801596a:	6003      	str	r3, [r0, #0]
 801596c:	2200      	movs	r2, #0
 801596e:	2300      	movs	r3, #0
 8015970:	4640      	mov	r0, r8
 8015972:	4649      	mov	r1, r9
 8015974:	f7eb f8c2 	bl	8000afc <__aeabi_dcmplt>
 8015978:	2400      	movs	r4, #0
 801597a:	b158      	cbz	r0, 8015994 <pow+0x10c>
 801597c:	ec47 6b10 	vmov	d0, r6, r7
 8015980:	f000 fe26 	bl	80165d0 <rint>
 8015984:	4632      	mov	r2, r6
 8015986:	ec51 0b10 	vmov	r0, r1, d0
 801598a:	463b      	mov	r3, r7
 801598c:	f7eb f8ac 	bl	8000ae8 <__aeabi_dcmpeq>
 8015990:	2800      	cmp	r0, #0
 8015992:	d0c2      	beq.n	801591a <pow+0x92>
 8015994:	4d11      	ldr	r5, [pc, #68]	; (80159dc <pow+0x154>)
 8015996:	e79c      	b.n	80158d2 <pow+0x4a>
 8015998:	2200      	movs	r2, #0
 801599a:	2300      	movs	r3, #0
 801599c:	4620      	mov	r0, r4
 801599e:	4629      	mov	r1, r5
 80159a0:	f7eb f8a2 	bl	8000ae8 <__aeabi_dcmpeq>
 80159a4:	2800      	cmp	r0, #0
 80159a6:	d094      	beq.n	80158d2 <pow+0x4a>
 80159a8:	ec49 8b10 	vmov	d0, r8, r9
 80159ac:	f000 fdfb 	bl	80165a6 <finite>
 80159b0:	2800      	cmp	r0, #0
 80159b2:	d08e      	beq.n	80158d2 <pow+0x4a>
 80159b4:	ec47 6b10 	vmov	d0, r6, r7
 80159b8:	f000 fdf5 	bl	80165a6 <finite>
 80159bc:	2800      	cmp	r0, #0
 80159be:	d088      	beq.n	80158d2 <pow+0x4a>
 80159c0:	f7fe fcd2 	bl	8014368 <__errno>
 80159c4:	2322      	movs	r3, #34	; 0x22
 80159c6:	6003      	str	r3, [r0, #0]
 80159c8:	2400      	movs	r4, #0
 80159ca:	2500      	movs	r5, #0
 80159cc:	e781      	b.n	80158d2 <pow+0x4a>
 80159ce:	4d04      	ldr	r5, [pc, #16]	; (80159e0 <pow+0x158>)
 80159d0:	2400      	movs	r4, #0
 80159d2:	e77e      	b.n	80158d2 <pow+0x4a>
 80159d4:	2000021c 	.word	0x2000021c
 80159d8:	fff00000 	.word	0xfff00000
 80159dc:	7ff00000 	.word	0x7ff00000
 80159e0:	3ff00000 	.word	0x3ff00000
 80159e4:	00000000 	.word	0x00000000

080159e8 <__ieee754_pow>:
 80159e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ec:	ed2d 8b06 	vpush	{d8-d10}
 80159f0:	b08d      	sub	sp, #52	; 0x34
 80159f2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80159f6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80159fa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80159fe:	ea56 0100 	orrs.w	r1, r6, r0
 8015a02:	ec53 2b10 	vmov	r2, r3, d0
 8015a06:	f000 84d1 	beq.w	80163ac <__ieee754_pow+0x9c4>
 8015a0a:	497f      	ldr	r1, [pc, #508]	; (8015c08 <__ieee754_pow+0x220>)
 8015a0c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8015a10:	428c      	cmp	r4, r1
 8015a12:	ee10 8a10 	vmov	r8, s0
 8015a16:	4699      	mov	r9, r3
 8015a18:	dc09      	bgt.n	8015a2e <__ieee754_pow+0x46>
 8015a1a:	d103      	bne.n	8015a24 <__ieee754_pow+0x3c>
 8015a1c:	b97a      	cbnz	r2, 8015a3e <__ieee754_pow+0x56>
 8015a1e:	42a6      	cmp	r6, r4
 8015a20:	dd02      	ble.n	8015a28 <__ieee754_pow+0x40>
 8015a22:	e00c      	b.n	8015a3e <__ieee754_pow+0x56>
 8015a24:	428e      	cmp	r6, r1
 8015a26:	dc02      	bgt.n	8015a2e <__ieee754_pow+0x46>
 8015a28:	428e      	cmp	r6, r1
 8015a2a:	d110      	bne.n	8015a4e <__ieee754_pow+0x66>
 8015a2c:	b178      	cbz	r0, 8015a4e <__ieee754_pow+0x66>
 8015a2e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015a32:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015a36:	ea54 0308 	orrs.w	r3, r4, r8
 8015a3a:	f000 84b7 	beq.w	80163ac <__ieee754_pow+0x9c4>
 8015a3e:	4873      	ldr	r0, [pc, #460]	; (8015c0c <__ieee754_pow+0x224>)
 8015a40:	b00d      	add	sp, #52	; 0x34
 8015a42:	ecbd 8b06 	vpop	{d8-d10}
 8015a46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a4a:	f000 bdb9 	b.w	80165c0 <nan>
 8015a4e:	f1b9 0f00 	cmp.w	r9, #0
 8015a52:	da36      	bge.n	8015ac2 <__ieee754_pow+0xda>
 8015a54:	496e      	ldr	r1, [pc, #440]	; (8015c10 <__ieee754_pow+0x228>)
 8015a56:	428e      	cmp	r6, r1
 8015a58:	dc51      	bgt.n	8015afe <__ieee754_pow+0x116>
 8015a5a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8015a5e:	428e      	cmp	r6, r1
 8015a60:	f340 84af 	ble.w	80163c2 <__ieee754_pow+0x9da>
 8015a64:	1531      	asrs	r1, r6, #20
 8015a66:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8015a6a:	2914      	cmp	r1, #20
 8015a6c:	dd0f      	ble.n	8015a8e <__ieee754_pow+0xa6>
 8015a6e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8015a72:	fa20 fc01 	lsr.w	ip, r0, r1
 8015a76:	fa0c f101 	lsl.w	r1, ip, r1
 8015a7a:	4281      	cmp	r1, r0
 8015a7c:	f040 84a1 	bne.w	80163c2 <__ieee754_pow+0x9da>
 8015a80:	f00c 0c01 	and.w	ip, ip, #1
 8015a84:	f1cc 0102 	rsb	r1, ip, #2
 8015a88:	9100      	str	r1, [sp, #0]
 8015a8a:	b180      	cbz	r0, 8015aae <__ieee754_pow+0xc6>
 8015a8c:	e059      	b.n	8015b42 <__ieee754_pow+0x15a>
 8015a8e:	2800      	cmp	r0, #0
 8015a90:	d155      	bne.n	8015b3e <__ieee754_pow+0x156>
 8015a92:	f1c1 0114 	rsb	r1, r1, #20
 8015a96:	fa46 fc01 	asr.w	ip, r6, r1
 8015a9a:	fa0c f101 	lsl.w	r1, ip, r1
 8015a9e:	42b1      	cmp	r1, r6
 8015aa0:	f040 848c 	bne.w	80163bc <__ieee754_pow+0x9d4>
 8015aa4:	f00c 0c01 	and.w	ip, ip, #1
 8015aa8:	f1cc 0102 	rsb	r1, ip, #2
 8015aac:	9100      	str	r1, [sp, #0]
 8015aae:	4959      	ldr	r1, [pc, #356]	; (8015c14 <__ieee754_pow+0x22c>)
 8015ab0:	428e      	cmp	r6, r1
 8015ab2:	d12d      	bne.n	8015b10 <__ieee754_pow+0x128>
 8015ab4:	2f00      	cmp	r7, #0
 8015ab6:	da79      	bge.n	8015bac <__ieee754_pow+0x1c4>
 8015ab8:	4956      	ldr	r1, [pc, #344]	; (8015c14 <__ieee754_pow+0x22c>)
 8015aba:	2000      	movs	r0, #0
 8015abc:	f7ea fed6 	bl	800086c <__aeabi_ddiv>
 8015ac0:	e016      	b.n	8015af0 <__ieee754_pow+0x108>
 8015ac2:	2100      	movs	r1, #0
 8015ac4:	9100      	str	r1, [sp, #0]
 8015ac6:	2800      	cmp	r0, #0
 8015ac8:	d13b      	bne.n	8015b42 <__ieee754_pow+0x15a>
 8015aca:	494f      	ldr	r1, [pc, #316]	; (8015c08 <__ieee754_pow+0x220>)
 8015acc:	428e      	cmp	r6, r1
 8015ace:	d1ee      	bne.n	8015aae <__ieee754_pow+0xc6>
 8015ad0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8015ad4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015ad8:	ea53 0308 	orrs.w	r3, r3, r8
 8015adc:	f000 8466 	beq.w	80163ac <__ieee754_pow+0x9c4>
 8015ae0:	4b4d      	ldr	r3, [pc, #308]	; (8015c18 <__ieee754_pow+0x230>)
 8015ae2:	429c      	cmp	r4, r3
 8015ae4:	dd0d      	ble.n	8015b02 <__ieee754_pow+0x11a>
 8015ae6:	2f00      	cmp	r7, #0
 8015ae8:	f280 8464 	bge.w	80163b4 <__ieee754_pow+0x9cc>
 8015aec:	2000      	movs	r0, #0
 8015aee:	2100      	movs	r1, #0
 8015af0:	ec41 0b10 	vmov	d0, r0, r1
 8015af4:	b00d      	add	sp, #52	; 0x34
 8015af6:	ecbd 8b06 	vpop	{d8-d10}
 8015afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015afe:	2102      	movs	r1, #2
 8015b00:	e7e0      	b.n	8015ac4 <__ieee754_pow+0xdc>
 8015b02:	2f00      	cmp	r7, #0
 8015b04:	daf2      	bge.n	8015aec <__ieee754_pow+0x104>
 8015b06:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8015b0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015b0e:	e7ef      	b.n	8015af0 <__ieee754_pow+0x108>
 8015b10:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8015b14:	d104      	bne.n	8015b20 <__ieee754_pow+0x138>
 8015b16:	4610      	mov	r0, r2
 8015b18:	4619      	mov	r1, r3
 8015b1a:	f7ea fd7d 	bl	8000618 <__aeabi_dmul>
 8015b1e:	e7e7      	b.n	8015af0 <__ieee754_pow+0x108>
 8015b20:	493e      	ldr	r1, [pc, #248]	; (8015c1c <__ieee754_pow+0x234>)
 8015b22:	428f      	cmp	r7, r1
 8015b24:	d10d      	bne.n	8015b42 <__ieee754_pow+0x15a>
 8015b26:	f1b9 0f00 	cmp.w	r9, #0
 8015b2a:	db0a      	blt.n	8015b42 <__ieee754_pow+0x15a>
 8015b2c:	ec43 2b10 	vmov	d0, r2, r3
 8015b30:	b00d      	add	sp, #52	; 0x34
 8015b32:	ecbd 8b06 	vpop	{d8-d10}
 8015b36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b3a:	f000 bc77 	b.w	801642c <__ieee754_sqrt>
 8015b3e:	2100      	movs	r1, #0
 8015b40:	9100      	str	r1, [sp, #0]
 8015b42:	ec43 2b10 	vmov	d0, r2, r3
 8015b46:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015b4a:	f000 fd23 	bl	8016594 <fabs>
 8015b4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015b52:	ec51 0b10 	vmov	r0, r1, d0
 8015b56:	f1b8 0f00 	cmp.w	r8, #0
 8015b5a:	d12a      	bne.n	8015bb2 <__ieee754_pow+0x1ca>
 8015b5c:	b12c      	cbz	r4, 8015b6a <__ieee754_pow+0x182>
 8015b5e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8015c14 <__ieee754_pow+0x22c>
 8015b62:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8015b66:	45e6      	cmp	lr, ip
 8015b68:	d123      	bne.n	8015bb2 <__ieee754_pow+0x1ca>
 8015b6a:	2f00      	cmp	r7, #0
 8015b6c:	da05      	bge.n	8015b7a <__ieee754_pow+0x192>
 8015b6e:	4602      	mov	r2, r0
 8015b70:	460b      	mov	r3, r1
 8015b72:	2000      	movs	r0, #0
 8015b74:	4927      	ldr	r1, [pc, #156]	; (8015c14 <__ieee754_pow+0x22c>)
 8015b76:	f7ea fe79 	bl	800086c <__aeabi_ddiv>
 8015b7a:	f1b9 0f00 	cmp.w	r9, #0
 8015b7e:	dab7      	bge.n	8015af0 <__ieee754_pow+0x108>
 8015b80:	9b00      	ldr	r3, [sp, #0]
 8015b82:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015b86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015b8a:	4323      	orrs	r3, r4
 8015b8c:	d108      	bne.n	8015ba0 <__ieee754_pow+0x1b8>
 8015b8e:	4602      	mov	r2, r0
 8015b90:	460b      	mov	r3, r1
 8015b92:	4610      	mov	r0, r2
 8015b94:	4619      	mov	r1, r3
 8015b96:	f7ea fb87 	bl	80002a8 <__aeabi_dsub>
 8015b9a:	4602      	mov	r2, r0
 8015b9c:	460b      	mov	r3, r1
 8015b9e:	e78d      	b.n	8015abc <__ieee754_pow+0xd4>
 8015ba0:	9b00      	ldr	r3, [sp, #0]
 8015ba2:	2b01      	cmp	r3, #1
 8015ba4:	d1a4      	bne.n	8015af0 <__ieee754_pow+0x108>
 8015ba6:	4602      	mov	r2, r0
 8015ba8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015bac:	4610      	mov	r0, r2
 8015bae:	4619      	mov	r1, r3
 8015bb0:	e79e      	b.n	8015af0 <__ieee754_pow+0x108>
 8015bb2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8015bb6:	f10c 35ff 	add.w	r5, ip, #4294967295
 8015bba:	950a      	str	r5, [sp, #40]	; 0x28
 8015bbc:	9d00      	ldr	r5, [sp, #0]
 8015bbe:	46ac      	mov	ip, r5
 8015bc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015bc2:	ea5c 0505 	orrs.w	r5, ip, r5
 8015bc6:	d0e4      	beq.n	8015b92 <__ieee754_pow+0x1aa>
 8015bc8:	4b15      	ldr	r3, [pc, #84]	; (8015c20 <__ieee754_pow+0x238>)
 8015bca:	429e      	cmp	r6, r3
 8015bcc:	f340 80fc 	ble.w	8015dc8 <__ieee754_pow+0x3e0>
 8015bd0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8015bd4:	429e      	cmp	r6, r3
 8015bd6:	4b10      	ldr	r3, [pc, #64]	; (8015c18 <__ieee754_pow+0x230>)
 8015bd8:	dd07      	ble.n	8015bea <__ieee754_pow+0x202>
 8015bda:	429c      	cmp	r4, r3
 8015bdc:	dc0a      	bgt.n	8015bf4 <__ieee754_pow+0x20c>
 8015bde:	2f00      	cmp	r7, #0
 8015be0:	da84      	bge.n	8015aec <__ieee754_pow+0x104>
 8015be2:	a307      	add	r3, pc, #28	; (adr r3, 8015c00 <__ieee754_pow+0x218>)
 8015be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015be8:	e795      	b.n	8015b16 <__ieee754_pow+0x12e>
 8015bea:	429c      	cmp	r4, r3
 8015bec:	dbf7      	blt.n	8015bde <__ieee754_pow+0x1f6>
 8015bee:	4b09      	ldr	r3, [pc, #36]	; (8015c14 <__ieee754_pow+0x22c>)
 8015bf0:	429c      	cmp	r4, r3
 8015bf2:	dd17      	ble.n	8015c24 <__ieee754_pow+0x23c>
 8015bf4:	2f00      	cmp	r7, #0
 8015bf6:	dcf4      	bgt.n	8015be2 <__ieee754_pow+0x1fa>
 8015bf8:	e778      	b.n	8015aec <__ieee754_pow+0x104>
 8015bfa:	bf00      	nop
 8015bfc:	f3af 8000 	nop.w
 8015c00:	8800759c 	.word	0x8800759c
 8015c04:	7e37e43c 	.word	0x7e37e43c
 8015c08:	7ff00000 	.word	0x7ff00000
 8015c0c:	0801979d 	.word	0x0801979d
 8015c10:	433fffff 	.word	0x433fffff
 8015c14:	3ff00000 	.word	0x3ff00000
 8015c18:	3fefffff 	.word	0x3fefffff
 8015c1c:	3fe00000 	.word	0x3fe00000
 8015c20:	41e00000 	.word	0x41e00000
 8015c24:	4b64      	ldr	r3, [pc, #400]	; (8015db8 <__ieee754_pow+0x3d0>)
 8015c26:	2200      	movs	r2, #0
 8015c28:	f7ea fb3e 	bl	80002a8 <__aeabi_dsub>
 8015c2c:	a356      	add	r3, pc, #344	; (adr r3, 8015d88 <__ieee754_pow+0x3a0>)
 8015c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c32:	4604      	mov	r4, r0
 8015c34:	460d      	mov	r5, r1
 8015c36:	f7ea fcef 	bl	8000618 <__aeabi_dmul>
 8015c3a:	a355      	add	r3, pc, #340	; (adr r3, 8015d90 <__ieee754_pow+0x3a8>)
 8015c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c40:	4606      	mov	r6, r0
 8015c42:	460f      	mov	r7, r1
 8015c44:	4620      	mov	r0, r4
 8015c46:	4629      	mov	r1, r5
 8015c48:	f7ea fce6 	bl	8000618 <__aeabi_dmul>
 8015c4c:	4b5b      	ldr	r3, [pc, #364]	; (8015dbc <__ieee754_pow+0x3d4>)
 8015c4e:	4682      	mov	sl, r0
 8015c50:	468b      	mov	fp, r1
 8015c52:	2200      	movs	r2, #0
 8015c54:	4620      	mov	r0, r4
 8015c56:	4629      	mov	r1, r5
 8015c58:	f7ea fcde 	bl	8000618 <__aeabi_dmul>
 8015c5c:	4602      	mov	r2, r0
 8015c5e:	460b      	mov	r3, r1
 8015c60:	a14d      	add	r1, pc, #308	; (adr r1, 8015d98 <__ieee754_pow+0x3b0>)
 8015c62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c66:	f7ea fb1f 	bl	80002a8 <__aeabi_dsub>
 8015c6a:	4622      	mov	r2, r4
 8015c6c:	462b      	mov	r3, r5
 8015c6e:	f7ea fcd3 	bl	8000618 <__aeabi_dmul>
 8015c72:	4602      	mov	r2, r0
 8015c74:	460b      	mov	r3, r1
 8015c76:	2000      	movs	r0, #0
 8015c78:	4951      	ldr	r1, [pc, #324]	; (8015dc0 <__ieee754_pow+0x3d8>)
 8015c7a:	f7ea fb15 	bl	80002a8 <__aeabi_dsub>
 8015c7e:	4622      	mov	r2, r4
 8015c80:	4680      	mov	r8, r0
 8015c82:	4689      	mov	r9, r1
 8015c84:	462b      	mov	r3, r5
 8015c86:	4620      	mov	r0, r4
 8015c88:	4629      	mov	r1, r5
 8015c8a:	f7ea fcc5 	bl	8000618 <__aeabi_dmul>
 8015c8e:	4602      	mov	r2, r0
 8015c90:	460b      	mov	r3, r1
 8015c92:	4640      	mov	r0, r8
 8015c94:	4649      	mov	r1, r9
 8015c96:	f7ea fcbf 	bl	8000618 <__aeabi_dmul>
 8015c9a:	a341      	add	r3, pc, #260	; (adr r3, 8015da0 <__ieee754_pow+0x3b8>)
 8015c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ca0:	f7ea fcba 	bl	8000618 <__aeabi_dmul>
 8015ca4:	4602      	mov	r2, r0
 8015ca6:	460b      	mov	r3, r1
 8015ca8:	4650      	mov	r0, sl
 8015caa:	4659      	mov	r1, fp
 8015cac:	f7ea fafc 	bl	80002a8 <__aeabi_dsub>
 8015cb0:	4602      	mov	r2, r0
 8015cb2:	460b      	mov	r3, r1
 8015cb4:	4680      	mov	r8, r0
 8015cb6:	4689      	mov	r9, r1
 8015cb8:	4630      	mov	r0, r6
 8015cba:	4639      	mov	r1, r7
 8015cbc:	f7ea faf6 	bl	80002ac <__adddf3>
 8015cc0:	2400      	movs	r4, #0
 8015cc2:	4632      	mov	r2, r6
 8015cc4:	463b      	mov	r3, r7
 8015cc6:	4620      	mov	r0, r4
 8015cc8:	460d      	mov	r5, r1
 8015cca:	f7ea faed 	bl	80002a8 <__aeabi_dsub>
 8015cce:	4602      	mov	r2, r0
 8015cd0:	460b      	mov	r3, r1
 8015cd2:	4640      	mov	r0, r8
 8015cd4:	4649      	mov	r1, r9
 8015cd6:	f7ea fae7 	bl	80002a8 <__aeabi_dsub>
 8015cda:	9b00      	ldr	r3, [sp, #0]
 8015cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015cde:	3b01      	subs	r3, #1
 8015ce0:	4313      	orrs	r3, r2
 8015ce2:	4682      	mov	sl, r0
 8015ce4:	468b      	mov	fp, r1
 8015ce6:	f040 81f1 	bne.w	80160cc <__ieee754_pow+0x6e4>
 8015cea:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8015da8 <__ieee754_pow+0x3c0>
 8015cee:	eeb0 8a47 	vmov.f32	s16, s14
 8015cf2:	eef0 8a67 	vmov.f32	s17, s15
 8015cf6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015cfa:	2600      	movs	r6, #0
 8015cfc:	4632      	mov	r2, r6
 8015cfe:	463b      	mov	r3, r7
 8015d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d04:	f7ea fad0 	bl	80002a8 <__aeabi_dsub>
 8015d08:	4622      	mov	r2, r4
 8015d0a:	462b      	mov	r3, r5
 8015d0c:	f7ea fc84 	bl	8000618 <__aeabi_dmul>
 8015d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015d14:	4680      	mov	r8, r0
 8015d16:	4689      	mov	r9, r1
 8015d18:	4650      	mov	r0, sl
 8015d1a:	4659      	mov	r1, fp
 8015d1c:	f7ea fc7c 	bl	8000618 <__aeabi_dmul>
 8015d20:	4602      	mov	r2, r0
 8015d22:	460b      	mov	r3, r1
 8015d24:	4640      	mov	r0, r8
 8015d26:	4649      	mov	r1, r9
 8015d28:	f7ea fac0 	bl	80002ac <__adddf3>
 8015d2c:	4632      	mov	r2, r6
 8015d2e:	463b      	mov	r3, r7
 8015d30:	4680      	mov	r8, r0
 8015d32:	4689      	mov	r9, r1
 8015d34:	4620      	mov	r0, r4
 8015d36:	4629      	mov	r1, r5
 8015d38:	f7ea fc6e 	bl	8000618 <__aeabi_dmul>
 8015d3c:	460b      	mov	r3, r1
 8015d3e:	4604      	mov	r4, r0
 8015d40:	460d      	mov	r5, r1
 8015d42:	4602      	mov	r2, r0
 8015d44:	4649      	mov	r1, r9
 8015d46:	4640      	mov	r0, r8
 8015d48:	f7ea fab0 	bl	80002ac <__adddf3>
 8015d4c:	4b1d      	ldr	r3, [pc, #116]	; (8015dc4 <__ieee754_pow+0x3dc>)
 8015d4e:	4299      	cmp	r1, r3
 8015d50:	ec45 4b19 	vmov	d9, r4, r5
 8015d54:	4606      	mov	r6, r0
 8015d56:	460f      	mov	r7, r1
 8015d58:	468b      	mov	fp, r1
 8015d5a:	f340 82fe 	ble.w	801635a <__ieee754_pow+0x972>
 8015d5e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015d62:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015d66:	4303      	orrs	r3, r0
 8015d68:	f000 81f0 	beq.w	801614c <__ieee754_pow+0x764>
 8015d6c:	a310      	add	r3, pc, #64	; (adr r3, 8015db0 <__ieee754_pow+0x3c8>)
 8015d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d72:	ec51 0b18 	vmov	r0, r1, d8
 8015d76:	f7ea fc4f 	bl	8000618 <__aeabi_dmul>
 8015d7a:	a30d      	add	r3, pc, #52	; (adr r3, 8015db0 <__ieee754_pow+0x3c8>)
 8015d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d80:	e6cb      	b.n	8015b1a <__ieee754_pow+0x132>
 8015d82:	bf00      	nop
 8015d84:	f3af 8000 	nop.w
 8015d88:	60000000 	.word	0x60000000
 8015d8c:	3ff71547 	.word	0x3ff71547
 8015d90:	f85ddf44 	.word	0xf85ddf44
 8015d94:	3e54ae0b 	.word	0x3e54ae0b
 8015d98:	55555555 	.word	0x55555555
 8015d9c:	3fd55555 	.word	0x3fd55555
 8015da0:	652b82fe 	.word	0x652b82fe
 8015da4:	3ff71547 	.word	0x3ff71547
 8015da8:	00000000 	.word	0x00000000
 8015dac:	bff00000 	.word	0xbff00000
 8015db0:	8800759c 	.word	0x8800759c
 8015db4:	7e37e43c 	.word	0x7e37e43c
 8015db8:	3ff00000 	.word	0x3ff00000
 8015dbc:	3fd00000 	.word	0x3fd00000
 8015dc0:	3fe00000 	.word	0x3fe00000
 8015dc4:	408fffff 	.word	0x408fffff
 8015dc8:	4bd7      	ldr	r3, [pc, #860]	; (8016128 <__ieee754_pow+0x740>)
 8015dca:	ea03 0309 	and.w	r3, r3, r9
 8015dce:	2200      	movs	r2, #0
 8015dd0:	b92b      	cbnz	r3, 8015dde <__ieee754_pow+0x3f6>
 8015dd2:	4bd6      	ldr	r3, [pc, #856]	; (801612c <__ieee754_pow+0x744>)
 8015dd4:	f7ea fc20 	bl	8000618 <__aeabi_dmul>
 8015dd8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8015ddc:	460c      	mov	r4, r1
 8015dde:	1523      	asrs	r3, r4, #20
 8015de0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015de4:	4413      	add	r3, r2
 8015de6:	9309      	str	r3, [sp, #36]	; 0x24
 8015de8:	4bd1      	ldr	r3, [pc, #836]	; (8016130 <__ieee754_pow+0x748>)
 8015dea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8015dee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8015df2:	429c      	cmp	r4, r3
 8015df4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015df8:	dd08      	ble.n	8015e0c <__ieee754_pow+0x424>
 8015dfa:	4bce      	ldr	r3, [pc, #824]	; (8016134 <__ieee754_pow+0x74c>)
 8015dfc:	429c      	cmp	r4, r3
 8015dfe:	f340 8163 	ble.w	80160c8 <__ieee754_pow+0x6e0>
 8015e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e04:	3301      	adds	r3, #1
 8015e06:	9309      	str	r3, [sp, #36]	; 0x24
 8015e08:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8015e0c:	2400      	movs	r4, #0
 8015e0e:	00e3      	lsls	r3, r4, #3
 8015e10:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e12:	4bc9      	ldr	r3, [pc, #804]	; (8016138 <__ieee754_pow+0x750>)
 8015e14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015e18:	ed93 7b00 	vldr	d7, [r3]
 8015e1c:	4629      	mov	r1, r5
 8015e1e:	ec53 2b17 	vmov	r2, r3, d7
 8015e22:	eeb0 8a47 	vmov.f32	s16, s14
 8015e26:	eef0 8a67 	vmov.f32	s17, s15
 8015e2a:	4682      	mov	sl, r0
 8015e2c:	f7ea fa3c 	bl	80002a8 <__aeabi_dsub>
 8015e30:	4652      	mov	r2, sl
 8015e32:	4606      	mov	r6, r0
 8015e34:	460f      	mov	r7, r1
 8015e36:	462b      	mov	r3, r5
 8015e38:	ec51 0b18 	vmov	r0, r1, d8
 8015e3c:	f7ea fa36 	bl	80002ac <__adddf3>
 8015e40:	4602      	mov	r2, r0
 8015e42:	460b      	mov	r3, r1
 8015e44:	2000      	movs	r0, #0
 8015e46:	49bd      	ldr	r1, [pc, #756]	; (801613c <__ieee754_pow+0x754>)
 8015e48:	f7ea fd10 	bl	800086c <__aeabi_ddiv>
 8015e4c:	ec41 0b19 	vmov	d9, r0, r1
 8015e50:	4602      	mov	r2, r0
 8015e52:	460b      	mov	r3, r1
 8015e54:	4630      	mov	r0, r6
 8015e56:	4639      	mov	r1, r7
 8015e58:	f7ea fbde 	bl	8000618 <__aeabi_dmul>
 8015e5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015e60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015e64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015e68:	2300      	movs	r3, #0
 8015e6a:	9304      	str	r3, [sp, #16]
 8015e6c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8015e70:	46ab      	mov	fp, r5
 8015e72:	106d      	asrs	r5, r5, #1
 8015e74:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015e78:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015e7c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8015e80:	2200      	movs	r2, #0
 8015e82:	4640      	mov	r0, r8
 8015e84:	4649      	mov	r1, r9
 8015e86:	4614      	mov	r4, r2
 8015e88:	461d      	mov	r5, r3
 8015e8a:	f7ea fbc5 	bl	8000618 <__aeabi_dmul>
 8015e8e:	4602      	mov	r2, r0
 8015e90:	460b      	mov	r3, r1
 8015e92:	4630      	mov	r0, r6
 8015e94:	4639      	mov	r1, r7
 8015e96:	f7ea fa07 	bl	80002a8 <__aeabi_dsub>
 8015e9a:	ec53 2b18 	vmov	r2, r3, d8
 8015e9e:	4606      	mov	r6, r0
 8015ea0:	460f      	mov	r7, r1
 8015ea2:	4620      	mov	r0, r4
 8015ea4:	4629      	mov	r1, r5
 8015ea6:	f7ea f9ff 	bl	80002a8 <__aeabi_dsub>
 8015eaa:	4602      	mov	r2, r0
 8015eac:	460b      	mov	r3, r1
 8015eae:	4650      	mov	r0, sl
 8015eb0:	4659      	mov	r1, fp
 8015eb2:	f7ea f9f9 	bl	80002a8 <__aeabi_dsub>
 8015eb6:	4642      	mov	r2, r8
 8015eb8:	464b      	mov	r3, r9
 8015eba:	f7ea fbad 	bl	8000618 <__aeabi_dmul>
 8015ebe:	4602      	mov	r2, r0
 8015ec0:	460b      	mov	r3, r1
 8015ec2:	4630      	mov	r0, r6
 8015ec4:	4639      	mov	r1, r7
 8015ec6:	f7ea f9ef 	bl	80002a8 <__aeabi_dsub>
 8015eca:	ec53 2b19 	vmov	r2, r3, d9
 8015ece:	f7ea fba3 	bl	8000618 <__aeabi_dmul>
 8015ed2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015ed6:	ec41 0b18 	vmov	d8, r0, r1
 8015eda:	4610      	mov	r0, r2
 8015edc:	4619      	mov	r1, r3
 8015ede:	f7ea fb9b 	bl	8000618 <__aeabi_dmul>
 8015ee2:	a37d      	add	r3, pc, #500	; (adr r3, 80160d8 <__ieee754_pow+0x6f0>)
 8015ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ee8:	4604      	mov	r4, r0
 8015eea:	460d      	mov	r5, r1
 8015eec:	f7ea fb94 	bl	8000618 <__aeabi_dmul>
 8015ef0:	a37b      	add	r3, pc, #492	; (adr r3, 80160e0 <__ieee754_pow+0x6f8>)
 8015ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ef6:	f7ea f9d9 	bl	80002ac <__adddf3>
 8015efa:	4622      	mov	r2, r4
 8015efc:	462b      	mov	r3, r5
 8015efe:	f7ea fb8b 	bl	8000618 <__aeabi_dmul>
 8015f02:	a379      	add	r3, pc, #484	; (adr r3, 80160e8 <__ieee754_pow+0x700>)
 8015f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f08:	f7ea f9d0 	bl	80002ac <__adddf3>
 8015f0c:	4622      	mov	r2, r4
 8015f0e:	462b      	mov	r3, r5
 8015f10:	f7ea fb82 	bl	8000618 <__aeabi_dmul>
 8015f14:	a376      	add	r3, pc, #472	; (adr r3, 80160f0 <__ieee754_pow+0x708>)
 8015f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f1a:	f7ea f9c7 	bl	80002ac <__adddf3>
 8015f1e:	4622      	mov	r2, r4
 8015f20:	462b      	mov	r3, r5
 8015f22:	f7ea fb79 	bl	8000618 <__aeabi_dmul>
 8015f26:	a374      	add	r3, pc, #464	; (adr r3, 80160f8 <__ieee754_pow+0x710>)
 8015f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f2c:	f7ea f9be 	bl	80002ac <__adddf3>
 8015f30:	4622      	mov	r2, r4
 8015f32:	462b      	mov	r3, r5
 8015f34:	f7ea fb70 	bl	8000618 <__aeabi_dmul>
 8015f38:	a371      	add	r3, pc, #452	; (adr r3, 8016100 <__ieee754_pow+0x718>)
 8015f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f3e:	f7ea f9b5 	bl	80002ac <__adddf3>
 8015f42:	4622      	mov	r2, r4
 8015f44:	4606      	mov	r6, r0
 8015f46:	460f      	mov	r7, r1
 8015f48:	462b      	mov	r3, r5
 8015f4a:	4620      	mov	r0, r4
 8015f4c:	4629      	mov	r1, r5
 8015f4e:	f7ea fb63 	bl	8000618 <__aeabi_dmul>
 8015f52:	4602      	mov	r2, r0
 8015f54:	460b      	mov	r3, r1
 8015f56:	4630      	mov	r0, r6
 8015f58:	4639      	mov	r1, r7
 8015f5a:	f7ea fb5d 	bl	8000618 <__aeabi_dmul>
 8015f5e:	4642      	mov	r2, r8
 8015f60:	4604      	mov	r4, r0
 8015f62:	460d      	mov	r5, r1
 8015f64:	464b      	mov	r3, r9
 8015f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015f6a:	f7ea f99f 	bl	80002ac <__adddf3>
 8015f6e:	ec53 2b18 	vmov	r2, r3, d8
 8015f72:	f7ea fb51 	bl	8000618 <__aeabi_dmul>
 8015f76:	4622      	mov	r2, r4
 8015f78:	462b      	mov	r3, r5
 8015f7a:	f7ea f997 	bl	80002ac <__adddf3>
 8015f7e:	4642      	mov	r2, r8
 8015f80:	4682      	mov	sl, r0
 8015f82:	468b      	mov	fp, r1
 8015f84:	464b      	mov	r3, r9
 8015f86:	4640      	mov	r0, r8
 8015f88:	4649      	mov	r1, r9
 8015f8a:	f7ea fb45 	bl	8000618 <__aeabi_dmul>
 8015f8e:	4b6c      	ldr	r3, [pc, #432]	; (8016140 <__ieee754_pow+0x758>)
 8015f90:	2200      	movs	r2, #0
 8015f92:	4606      	mov	r6, r0
 8015f94:	460f      	mov	r7, r1
 8015f96:	f7ea f989 	bl	80002ac <__adddf3>
 8015f9a:	4652      	mov	r2, sl
 8015f9c:	465b      	mov	r3, fp
 8015f9e:	f7ea f985 	bl	80002ac <__adddf3>
 8015fa2:	9c04      	ldr	r4, [sp, #16]
 8015fa4:	460d      	mov	r5, r1
 8015fa6:	4622      	mov	r2, r4
 8015fa8:	460b      	mov	r3, r1
 8015faa:	4640      	mov	r0, r8
 8015fac:	4649      	mov	r1, r9
 8015fae:	f7ea fb33 	bl	8000618 <__aeabi_dmul>
 8015fb2:	4b63      	ldr	r3, [pc, #396]	; (8016140 <__ieee754_pow+0x758>)
 8015fb4:	4680      	mov	r8, r0
 8015fb6:	4689      	mov	r9, r1
 8015fb8:	2200      	movs	r2, #0
 8015fba:	4620      	mov	r0, r4
 8015fbc:	4629      	mov	r1, r5
 8015fbe:	f7ea f973 	bl	80002a8 <__aeabi_dsub>
 8015fc2:	4632      	mov	r2, r6
 8015fc4:	463b      	mov	r3, r7
 8015fc6:	f7ea f96f 	bl	80002a8 <__aeabi_dsub>
 8015fca:	4602      	mov	r2, r0
 8015fcc:	460b      	mov	r3, r1
 8015fce:	4650      	mov	r0, sl
 8015fd0:	4659      	mov	r1, fp
 8015fd2:	f7ea f969 	bl	80002a8 <__aeabi_dsub>
 8015fd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015fda:	f7ea fb1d 	bl	8000618 <__aeabi_dmul>
 8015fde:	4622      	mov	r2, r4
 8015fe0:	4606      	mov	r6, r0
 8015fe2:	460f      	mov	r7, r1
 8015fe4:	462b      	mov	r3, r5
 8015fe6:	ec51 0b18 	vmov	r0, r1, d8
 8015fea:	f7ea fb15 	bl	8000618 <__aeabi_dmul>
 8015fee:	4602      	mov	r2, r0
 8015ff0:	460b      	mov	r3, r1
 8015ff2:	4630      	mov	r0, r6
 8015ff4:	4639      	mov	r1, r7
 8015ff6:	f7ea f959 	bl	80002ac <__adddf3>
 8015ffa:	4606      	mov	r6, r0
 8015ffc:	460f      	mov	r7, r1
 8015ffe:	4602      	mov	r2, r0
 8016000:	460b      	mov	r3, r1
 8016002:	4640      	mov	r0, r8
 8016004:	4649      	mov	r1, r9
 8016006:	f7ea f951 	bl	80002ac <__adddf3>
 801600a:	9c04      	ldr	r4, [sp, #16]
 801600c:	a33e      	add	r3, pc, #248	; (adr r3, 8016108 <__ieee754_pow+0x720>)
 801600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016012:	4620      	mov	r0, r4
 8016014:	460d      	mov	r5, r1
 8016016:	f7ea faff 	bl	8000618 <__aeabi_dmul>
 801601a:	4642      	mov	r2, r8
 801601c:	ec41 0b18 	vmov	d8, r0, r1
 8016020:	464b      	mov	r3, r9
 8016022:	4620      	mov	r0, r4
 8016024:	4629      	mov	r1, r5
 8016026:	f7ea f93f 	bl	80002a8 <__aeabi_dsub>
 801602a:	4602      	mov	r2, r0
 801602c:	460b      	mov	r3, r1
 801602e:	4630      	mov	r0, r6
 8016030:	4639      	mov	r1, r7
 8016032:	f7ea f939 	bl	80002a8 <__aeabi_dsub>
 8016036:	a336      	add	r3, pc, #216	; (adr r3, 8016110 <__ieee754_pow+0x728>)
 8016038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801603c:	f7ea faec 	bl	8000618 <__aeabi_dmul>
 8016040:	a335      	add	r3, pc, #212	; (adr r3, 8016118 <__ieee754_pow+0x730>)
 8016042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016046:	4606      	mov	r6, r0
 8016048:	460f      	mov	r7, r1
 801604a:	4620      	mov	r0, r4
 801604c:	4629      	mov	r1, r5
 801604e:	f7ea fae3 	bl	8000618 <__aeabi_dmul>
 8016052:	4602      	mov	r2, r0
 8016054:	460b      	mov	r3, r1
 8016056:	4630      	mov	r0, r6
 8016058:	4639      	mov	r1, r7
 801605a:	f7ea f927 	bl	80002ac <__adddf3>
 801605e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016060:	4b38      	ldr	r3, [pc, #224]	; (8016144 <__ieee754_pow+0x75c>)
 8016062:	4413      	add	r3, r2
 8016064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016068:	f7ea f920 	bl	80002ac <__adddf3>
 801606c:	4682      	mov	sl, r0
 801606e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016070:	468b      	mov	fp, r1
 8016072:	f7ea fa67 	bl	8000544 <__aeabi_i2d>
 8016076:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016078:	4b33      	ldr	r3, [pc, #204]	; (8016148 <__ieee754_pow+0x760>)
 801607a:	4413      	add	r3, r2
 801607c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016080:	4606      	mov	r6, r0
 8016082:	460f      	mov	r7, r1
 8016084:	4652      	mov	r2, sl
 8016086:	465b      	mov	r3, fp
 8016088:	ec51 0b18 	vmov	r0, r1, d8
 801608c:	f7ea f90e 	bl	80002ac <__adddf3>
 8016090:	4642      	mov	r2, r8
 8016092:	464b      	mov	r3, r9
 8016094:	f7ea f90a 	bl	80002ac <__adddf3>
 8016098:	4632      	mov	r2, r6
 801609a:	463b      	mov	r3, r7
 801609c:	f7ea f906 	bl	80002ac <__adddf3>
 80160a0:	9c04      	ldr	r4, [sp, #16]
 80160a2:	4632      	mov	r2, r6
 80160a4:	463b      	mov	r3, r7
 80160a6:	4620      	mov	r0, r4
 80160a8:	460d      	mov	r5, r1
 80160aa:	f7ea f8fd 	bl	80002a8 <__aeabi_dsub>
 80160ae:	4642      	mov	r2, r8
 80160b0:	464b      	mov	r3, r9
 80160b2:	f7ea f8f9 	bl	80002a8 <__aeabi_dsub>
 80160b6:	ec53 2b18 	vmov	r2, r3, d8
 80160ba:	f7ea f8f5 	bl	80002a8 <__aeabi_dsub>
 80160be:	4602      	mov	r2, r0
 80160c0:	460b      	mov	r3, r1
 80160c2:	4650      	mov	r0, sl
 80160c4:	4659      	mov	r1, fp
 80160c6:	e606      	b.n	8015cd6 <__ieee754_pow+0x2ee>
 80160c8:	2401      	movs	r4, #1
 80160ca:	e6a0      	b.n	8015e0e <__ieee754_pow+0x426>
 80160cc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8016120 <__ieee754_pow+0x738>
 80160d0:	e60d      	b.n	8015cee <__ieee754_pow+0x306>
 80160d2:	bf00      	nop
 80160d4:	f3af 8000 	nop.w
 80160d8:	4a454eef 	.word	0x4a454eef
 80160dc:	3fca7e28 	.word	0x3fca7e28
 80160e0:	93c9db65 	.word	0x93c9db65
 80160e4:	3fcd864a 	.word	0x3fcd864a
 80160e8:	a91d4101 	.word	0xa91d4101
 80160ec:	3fd17460 	.word	0x3fd17460
 80160f0:	518f264d 	.word	0x518f264d
 80160f4:	3fd55555 	.word	0x3fd55555
 80160f8:	db6fabff 	.word	0xdb6fabff
 80160fc:	3fdb6db6 	.word	0x3fdb6db6
 8016100:	33333303 	.word	0x33333303
 8016104:	3fe33333 	.word	0x3fe33333
 8016108:	e0000000 	.word	0xe0000000
 801610c:	3feec709 	.word	0x3feec709
 8016110:	dc3a03fd 	.word	0xdc3a03fd
 8016114:	3feec709 	.word	0x3feec709
 8016118:	145b01f5 	.word	0x145b01f5
 801611c:	be3e2fe0 	.word	0xbe3e2fe0
 8016120:	00000000 	.word	0x00000000
 8016124:	3ff00000 	.word	0x3ff00000
 8016128:	7ff00000 	.word	0x7ff00000
 801612c:	43400000 	.word	0x43400000
 8016130:	0003988e 	.word	0x0003988e
 8016134:	000bb679 	.word	0x000bb679
 8016138:	080199f8 	.word	0x080199f8
 801613c:	3ff00000 	.word	0x3ff00000
 8016140:	40080000 	.word	0x40080000
 8016144:	08019a18 	.word	0x08019a18
 8016148:	08019a08 	.word	0x08019a08
 801614c:	a3b5      	add	r3, pc, #724	; (adr r3, 8016424 <__ieee754_pow+0xa3c>)
 801614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016152:	4640      	mov	r0, r8
 8016154:	4649      	mov	r1, r9
 8016156:	f7ea f8a9 	bl	80002ac <__adddf3>
 801615a:	4622      	mov	r2, r4
 801615c:	ec41 0b1a 	vmov	d10, r0, r1
 8016160:	462b      	mov	r3, r5
 8016162:	4630      	mov	r0, r6
 8016164:	4639      	mov	r1, r7
 8016166:	f7ea f89f 	bl	80002a8 <__aeabi_dsub>
 801616a:	4602      	mov	r2, r0
 801616c:	460b      	mov	r3, r1
 801616e:	ec51 0b1a 	vmov	r0, r1, d10
 8016172:	f7ea fce1 	bl	8000b38 <__aeabi_dcmpgt>
 8016176:	2800      	cmp	r0, #0
 8016178:	f47f adf8 	bne.w	8015d6c <__ieee754_pow+0x384>
 801617c:	4aa4      	ldr	r2, [pc, #656]	; (8016410 <__ieee754_pow+0xa28>)
 801617e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016182:	4293      	cmp	r3, r2
 8016184:	f340 810b 	ble.w	801639e <__ieee754_pow+0x9b6>
 8016188:	151b      	asrs	r3, r3, #20
 801618a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801618e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016192:	fa4a f303 	asr.w	r3, sl, r3
 8016196:	445b      	add	r3, fp
 8016198:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801619c:	4e9d      	ldr	r6, [pc, #628]	; (8016414 <__ieee754_pow+0xa2c>)
 801619e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80161a2:	4116      	asrs	r6, r2
 80161a4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80161a8:	2000      	movs	r0, #0
 80161aa:	ea23 0106 	bic.w	r1, r3, r6
 80161ae:	f1c2 0214 	rsb	r2, r2, #20
 80161b2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80161b6:	fa4a fa02 	asr.w	sl, sl, r2
 80161ba:	f1bb 0f00 	cmp.w	fp, #0
 80161be:	4602      	mov	r2, r0
 80161c0:	460b      	mov	r3, r1
 80161c2:	4620      	mov	r0, r4
 80161c4:	4629      	mov	r1, r5
 80161c6:	bfb8      	it	lt
 80161c8:	f1ca 0a00 	rsblt	sl, sl, #0
 80161cc:	f7ea f86c 	bl	80002a8 <__aeabi_dsub>
 80161d0:	ec41 0b19 	vmov	d9, r0, r1
 80161d4:	4642      	mov	r2, r8
 80161d6:	464b      	mov	r3, r9
 80161d8:	ec51 0b19 	vmov	r0, r1, d9
 80161dc:	f7ea f866 	bl	80002ac <__adddf3>
 80161e0:	2400      	movs	r4, #0
 80161e2:	a379      	add	r3, pc, #484	; (adr r3, 80163c8 <__ieee754_pow+0x9e0>)
 80161e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e8:	4620      	mov	r0, r4
 80161ea:	460d      	mov	r5, r1
 80161ec:	f7ea fa14 	bl	8000618 <__aeabi_dmul>
 80161f0:	ec53 2b19 	vmov	r2, r3, d9
 80161f4:	4606      	mov	r6, r0
 80161f6:	460f      	mov	r7, r1
 80161f8:	4620      	mov	r0, r4
 80161fa:	4629      	mov	r1, r5
 80161fc:	f7ea f854 	bl	80002a8 <__aeabi_dsub>
 8016200:	4602      	mov	r2, r0
 8016202:	460b      	mov	r3, r1
 8016204:	4640      	mov	r0, r8
 8016206:	4649      	mov	r1, r9
 8016208:	f7ea f84e 	bl	80002a8 <__aeabi_dsub>
 801620c:	a370      	add	r3, pc, #448	; (adr r3, 80163d0 <__ieee754_pow+0x9e8>)
 801620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016212:	f7ea fa01 	bl	8000618 <__aeabi_dmul>
 8016216:	a370      	add	r3, pc, #448	; (adr r3, 80163d8 <__ieee754_pow+0x9f0>)
 8016218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801621c:	4680      	mov	r8, r0
 801621e:	4689      	mov	r9, r1
 8016220:	4620      	mov	r0, r4
 8016222:	4629      	mov	r1, r5
 8016224:	f7ea f9f8 	bl	8000618 <__aeabi_dmul>
 8016228:	4602      	mov	r2, r0
 801622a:	460b      	mov	r3, r1
 801622c:	4640      	mov	r0, r8
 801622e:	4649      	mov	r1, r9
 8016230:	f7ea f83c 	bl	80002ac <__adddf3>
 8016234:	4604      	mov	r4, r0
 8016236:	460d      	mov	r5, r1
 8016238:	4602      	mov	r2, r0
 801623a:	460b      	mov	r3, r1
 801623c:	4630      	mov	r0, r6
 801623e:	4639      	mov	r1, r7
 8016240:	f7ea f834 	bl	80002ac <__adddf3>
 8016244:	4632      	mov	r2, r6
 8016246:	463b      	mov	r3, r7
 8016248:	4680      	mov	r8, r0
 801624a:	4689      	mov	r9, r1
 801624c:	f7ea f82c 	bl	80002a8 <__aeabi_dsub>
 8016250:	4602      	mov	r2, r0
 8016252:	460b      	mov	r3, r1
 8016254:	4620      	mov	r0, r4
 8016256:	4629      	mov	r1, r5
 8016258:	f7ea f826 	bl	80002a8 <__aeabi_dsub>
 801625c:	4642      	mov	r2, r8
 801625e:	4606      	mov	r6, r0
 8016260:	460f      	mov	r7, r1
 8016262:	464b      	mov	r3, r9
 8016264:	4640      	mov	r0, r8
 8016266:	4649      	mov	r1, r9
 8016268:	f7ea f9d6 	bl	8000618 <__aeabi_dmul>
 801626c:	a35c      	add	r3, pc, #368	; (adr r3, 80163e0 <__ieee754_pow+0x9f8>)
 801626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016272:	4604      	mov	r4, r0
 8016274:	460d      	mov	r5, r1
 8016276:	f7ea f9cf 	bl	8000618 <__aeabi_dmul>
 801627a:	a35b      	add	r3, pc, #364	; (adr r3, 80163e8 <__ieee754_pow+0xa00>)
 801627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016280:	f7ea f812 	bl	80002a8 <__aeabi_dsub>
 8016284:	4622      	mov	r2, r4
 8016286:	462b      	mov	r3, r5
 8016288:	f7ea f9c6 	bl	8000618 <__aeabi_dmul>
 801628c:	a358      	add	r3, pc, #352	; (adr r3, 80163f0 <__ieee754_pow+0xa08>)
 801628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016292:	f7ea f80b 	bl	80002ac <__adddf3>
 8016296:	4622      	mov	r2, r4
 8016298:	462b      	mov	r3, r5
 801629a:	f7ea f9bd 	bl	8000618 <__aeabi_dmul>
 801629e:	a356      	add	r3, pc, #344	; (adr r3, 80163f8 <__ieee754_pow+0xa10>)
 80162a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162a4:	f7ea f800 	bl	80002a8 <__aeabi_dsub>
 80162a8:	4622      	mov	r2, r4
 80162aa:	462b      	mov	r3, r5
 80162ac:	f7ea f9b4 	bl	8000618 <__aeabi_dmul>
 80162b0:	a353      	add	r3, pc, #332	; (adr r3, 8016400 <__ieee754_pow+0xa18>)
 80162b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162b6:	f7e9 fff9 	bl	80002ac <__adddf3>
 80162ba:	4622      	mov	r2, r4
 80162bc:	462b      	mov	r3, r5
 80162be:	f7ea f9ab 	bl	8000618 <__aeabi_dmul>
 80162c2:	4602      	mov	r2, r0
 80162c4:	460b      	mov	r3, r1
 80162c6:	4640      	mov	r0, r8
 80162c8:	4649      	mov	r1, r9
 80162ca:	f7e9 ffed 	bl	80002a8 <__aeabi_dsub>
 80162ce:	4604      	mov	r4, r0
 80162d0:	460d      	mov	r5, r1
 80162d2:	4602      	mov	r2, r0
 80162d4:	460b      	mov	r3, r1
 80162d6:	4640      	mov	r0, r8
 80162d8:	4649      	mov	r1, r9
 80162da:	f7ea f99d 	bl	8000618 <__aeabi_dmul>
 80162de:	2200      	movs	r2, #0
 80162e0:	ec41 0b19 	vmov	d9, r0, r1
 80162e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80162e8:	4620      	mov	r0, r4
 80162ea:	4629      	mov	r1, r5
 80162ec:	f7e9 ffdc 	bl	80002a8 <__aeabi_dsub>
 80162f0:	4602      	mov	r2, r0
 80162f2:	460b      	mov	r3, r1
 80162f4:	ec51 0b19 	vmov	r0, r1, d9
 80162f8:	f7ea fab8 	bl	800086c <__aeabi_ddiv>
 80162fc:	4632      	mov	r2, r6
 80162fe:	4604      	mov	r4, r0
 8016300:	460d      	mov	r5, r1
 8016302:	463b      	mov	r3, r7
 8016304:	4640      	mov	r0, r8
 8016306:	4649      	mov	r1, r9
 8016308:	f7ea f986 	bl	8000618 <__aeabi_dmul>
 801630c:	4632      	mov	r2, r6
 801630e:	463b      	mov	r3, r7
 8016310:	f7e9 ffcc 	bl	80002ac <__adddf3>
 8016314:	4602      	mov	r2, r0
 8016316:	460b      	mov	r3, r1
 8016318:	4620      	mov	r0, r4
 801631a:	4629      	mov	r1, r5
 801631c:	f7e9 ffc4 	bl	80002a8 <__aeabi_dsub>
 8016320:	4642      	mov	r2, r8
 8016322:	464b      	mov	r3, r9
 8016324:	f7e9 ffc0 	bl	80002a8 <__aeabi_dsub>
 8016328:	460b      	mov	r3, r1
 801632a:	4602      	mov	r2, r0
 801632c:	493a      	ldr	r1, [pc, #232]	; (8016418 <__ieee754_pow+0xa30>)
 801632e:	2000      	movs	r0, #0
 8016330:	f7e9 ffba 	bl	80002a8 <__aeabi_dsub>
 8016334:	e9cd 0100 	strd	r0, r1, [sp]
 8016338:	9b01      	ldr	r3, [sp, #4]
 801633a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801633e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016342:	da2f      	bge.n	80163a4 <__ieee754_pow+0x9bc>
 8016344:	4650      	mov	r0, sl
 8016346:	ed9d 0b00 	vldr	d0, [sp]
 801634a:	f000 f9cd 	bl	80166e8 <scalbn>
 801634e:	ec51 0b10 	vmov	r0, r1, d0
 8016352:	ec53 2b18 	vmov	r2, r3, d8
 8016356:	f7ff bbe0 	b.w	8015b1a <__ieee754_pow+0x132>
 801635a:	4b30      	ldr	r3, [pc, #192]	; (801641c <__ieee754_pow+0xa34>)
 801635c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016360:	429e      	cmp	r6, r3
 8016362:	f77f af0b 	ble.w	801617c <__ieee754_pow+0x794>
 8016366:	4b2e      	ldr	r3, [pc, #184]	; (8016420 <__ieee754_pow+0xa38>)
 8016368:	440b      	add	r3, r1
 801636a:	4303      	orrs	r3, r0
 801636c:	d00b      	beq.n	8016386 <__ieee754_pow+0x99e>
 801636e:	a326      	add	r3, pc, #152	; (adr r3, 8016408 <__ieee754_pow+0xa20>)
 8016370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016374:	ec51 0b18 	vmov	r0, r1, d8
 8016378:	f7ea f94e 	bl	8000618 <__aeabi_dmul>
 801637c:	a322      	add	r3, pc, #136	; (adr r3, 8016408 <__ieee754_pow+0xa20>)
 801637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016382:	f7ff bbca 	b.w	8015b1a <__ieee754_pow+0x132>
 8016386:	4622      	mov	r2, r4
 8016388:	462b      	mov	r3, r5
 801638a:	f7e9 ff8d 	bl	80002a8 <__aeabi_dsub>
 801638e:	4642      	mov	r2, r8
 8016390:	464b      	mov	r3, r9
 8016392:	f7ea fbc7 	bl	8000b24 <__aeabi_dcmpge>
 8016396:	2800      	cmp	r0, #0
 8016398:	f43f aef0 	beq.w	801617c <__ieee754_pow+0x794>
 801639c:	e7e7      	b.n	801636e <__ieee754_pow+0x986>
 801639e:	f04f 0a00 	mov.w	sl, #0
 80163a2:	e717      	b.n	80161d4 <__ieee754_pow+0x7ec>
 80163a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80163a8:	4619      	mov	r1, r3
 80163aa:	e7d2      	b.n	8016352 <__ieee754_pow+0x96a>
 80163ac:	491a      	ldr	r1, [pc, #104]	; (8016418 <__ieee754_pow+0xa30>)
 80163ae:	2000      	movs	r0, #0
 80163b0:	f7ff bb9e 	b.w	8015af0 <__ieee754_pow+0x108>
 80163b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80163b8:	f7ff bb9a 	b.w	8015af0 <__ieee754_pow+0x108>
 80163bc:	9000      	str	r0, [sp, #0]
 80163be:	f7ff bb76 	b.w	8015aae <__ieee754_pow+0xc6>
 80163c2:	2100      	movs	r1, #0
 80163c4:	f7ff bb60 	b.w	8015a88 <__ieee754_pow+0xa0>
 80163c8:	00000000 	.word	0x00000000
 80163cc:	3fe62e43 	.word	0x3fe62e43
 80163d0:	fefa39ef 	.word	0xfefa39ef
 80163d4:	3fe62e42 	.word	0x3fe62e42
 80163d8:	0ca86c39 	.word	0x0ca86c39
 80163dc:	be205c61 	.word	0xbe205c61
 80163e0:	72bea4d0 	.word	0x72bea4d0
 80163e4:	3e663769 	.word	0x3e663769
 80163e8:	c5d26bf1 	.word	0xc5d26bf1
 80163ec:	3ebbbd41 	.word	0x3ebbbd41
 80163f0:	af25de2c 	.word	0xaf25de2c
 80163f4:	3f11566a 	.word	0x3f11566a
 80163f8:	16bebd93 	.word	0x16bebd93
 80163fc:	3f66c16c 	.word	0x3f66c16c
 8016400:	5555553e 	.word	0x5555553e
 8016404:	3fc55555 	.word	0x3fc55555
 8016408:	c2f8f359 	.word	0xc2f8f359
 801640c:	01a56e1f 	.word	0x01a56e1f
 8016410:	3fe00000 	.word	0x3fe00000
 8016414:	000fffff 	.word	0x000fffff
 8016418:	3ff00000 	.word	0x3ff00000
 801641c:	4090cbff 	.word	0x4090cbff
 8016420:	3f6f3400 	.word	0x3f6f3400
 8016424:	652b82fe 	.word	0x652b82fe
 8016428:	3c971547 	.word	0x3c971547

0801642c <__ieee754_sqrt>:
 801642c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016430:	ec55 4b10 	vmov	r4, r5, d0
 8016434:	4e56      	ldr	r6, [pc, #344]	; (8016590 <__ieee754_sqrt+0x164>)
 8016436:	43ae      	bics	r6, r5
 8016438:	ee10 0a10 	vmov	r0, s0
 801643c:	ee10 3a10 	vmov	r3, s0
 8016440:	4629      	mov	r1, r5
 8016442:	462a      	mov	r2, r5
 8016444:	d110      	bne.n	8016468 <__ieee754_sqrt+0x3c>
 8016446:	ee10 2a10 	vmov	r2, s0
 801644a:	462b      	mov	r3, r5
 801644c:	f7ea f8e4 	bl	8000618 <__aeabi_dmul>
 8016450:	4602      	mov	r2, r0
 8016452:	460b      	mov	r3, r1
 8016454:	4620      	mov	r0, r4
 8016456:	4629      	mov	r1, r5
 8016458:	f7e9 ff28 	bl	80002ac <__adddf3>
 801645c:	4604      	mov	r4, r0
 801645e:	460d      	mov	r5, r1
 8016460:	ec45 4b10 	vmov	d0, r4, r5
 8016464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016468:	2d00      	cmp	r5, #0
 801646a:	dc10      	bgt.n	801648e <__ieee754_sqrt+0x62>
 801646c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016470:	4330      	orrs	r0, r6
 8016472:	d0f5      	beq.n	8016460 <__ieee754_sqrt+0x34>
 8016474:	b15d      	cbz	r5, 801648e <__ieee754_sqrt+0x62>
 8016476:	ee10 2a10 	vmov	r2, s0
 801647a:	462b      	mov	r3, r5
 801647c:	ee10 0a10 	vmov	r0, s0
 8016480:	f7e9 ff12 	bl	80002a8 <__aeabi_dsub>
 8016484:	4602      	mov	r2, r0
 8016486:	460b      	mov	r3, r1
 8016488:	f7ea f9f0 	bl	800086c <__aeabi_ddiv>
 801648c:	e7e6      	b.n	801645c <__ieee754_sqrt+0x30>
 801648e:	1509      	asrs	r1, r1, #20
 8016490:	d076      	beq.n	8016580 <__ieee754_sqrt+0x154>
 8016492:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016496:	07ce      	lsls	r6, r1, #31
 8016498:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801649c:	bf5e      	ittt	pl
 801649e:	0fda      	lsrpl	r2, r3, #31
 80164a0:	005b      	lslpl	r3, r3, #1
 80164a2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80164a6:	0fda      	lsrs	r2, r3, #31
 80164a8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80164ac:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80164b0:	2000      	movs	r0, #0
 80164b2:	106d      	asrs	r5, r5, #1
 80164b4:	005b      	lsls	r3, r3, #1
 80164b6:	f04f 0e16 	mov.w	lr, #22
 80164ba:	4684      	mov	ip, r0
 80164bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80164c0:	eb0c 0401 	add.w	r4, ip, r1
 80164c4:	4294      	cmp	r4, r2
 80164c6:	bfde      	ittt	le
 80164c8:	1b12      	suble	r2, r2, r4
 80164ca:	eb04 0c01 	addle.w	ip, r4, r1
 80164ce:	1840      	addle	r0, r0, r1
 80164d0:	0052      	lsls	r2, r2, #1
 80164d2:	f1be 0e01 	subs.w	lr, lr, #1
 80164d6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80164da:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80164de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80164e2:	d1ed      	bne.n	80164c0 <__ieee754_sqrt+0x94>
 80164e4:	4671      	mov	r1, lr
 80164e6:	2720      	movs	r7, #32
 80164e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80164ec:	4562      	cmp	r2, ip
 80164ee:	eb04 060e 	add.w	r6, r4, lr
 80164f2:	dc02      	bgt.n	80164fa <__ieee754_sqrt+0xce>
 80164f4:	d113      	bne.n	801651e <__ieee754_sqrt+0xf2>
 80164f6:	429e      	cmp	r6, r3
 80164f8:	d811      	bhi.n	801651e <__ieee754_sqrt+0xf2>
 80164fa:	2e00      	cmp	r6, #0
 80164fc:	eb06 0e04 	add.w	lr, r6, r4
 8016500:	da43      	bge.n	801658a <__ieee754_sqrt+0x15e>
 8016502:	f1be 0f00 	cmp.w	lr, #0
 8016506:	db40      	blt.n	801658a <__ieee754_sqrt+0x15e>
 8016508:	f10c 0801 	add.w	r8, ip, #1
 801650c:	eba2 020c 	sub.w	r2, r2, ip
 8016510:	429e      	cmp	r6, r3
 8016512:	bf88      	it	hi
 8016514:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016518:	1b9b      	subs	r3, r3, r6
 801651a:	4421      	add	r1, r4
 801651c:	46c4      	mov	ip, r8
 801651e:	0052      	lsls	r2, r2, #1
 8016520:	3f01      	subs	r7, #1
 8016522:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8016526:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801652a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801652e:	d1dd      	bne.n	80164ec <__ieee754_sqrt+0xc0>
 8016530:	4313      	orrs	r3, r2
 8016532:	d006      	beq.n	8016542 <__ieee754_sqrt+0x116>
 8016534:	1c4c      	adds	r4, r1, #1
 8016536:	bf13      	iteet	ne
 8016538:	3101      	addne	r1, #1
 801653a:	3001      	addeq	r0, #1
 801653c:	4639      	moveq	r1, r7
 801653e:	f021 0101 	bicne.w	r1, r1, #1
 8016542:	1043      	asrs	r3, r0, #1
 8016544:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016548:	0849      	lsrs	r1, r1, #1
 801654a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801654e:	07c2      	lsls	r2, r0, #31
 8016550:	bf48      	it	mi
 8016552:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8016556:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801655a:	460c      	mov	r4, r1
 801655c:	463d      	mov	r5, r7
 801655e:	e77f      	b.n	8016460 <__ieee754_sqrt+0x34>
 8016560:	0ada      	lsrs	r2, r3, #11
 8016562:	3815      	subs	r0, #21
 8016564:	055b      	lsls	r3, r3, #21
 8016566:	2a00      	cmp	r2, #0
 8016568:	d0fa      	beq.n	8016560 <__ieee754_sqrt+0x134>
 801656a:	02d7      	lsls	r7, r2, #11
 801656c:	d50a      	bpl.n	8016584 <__ieee754_sqrt+0x158>
 801656e:	f1c1 0420 	rsb	r4, r1, #32
 8016572:	fa23 f404 	lsr.w	r4, r3, r4
 8016576:	1e4d      	subs	r5, r1, #1
 8016578:	408b      	lsls	r3, r1
 801657a:	4322      	orrs	r2, r4
 801657c:	1b41      	subs	r1, r0, r5
 801657e:	e788      	b.n	8016492 <__ieee754_sqrt+0x66>
 8016580:	4608      	mov	r0, r1
 8016582:	e7f0      	b.n	8016566 <__ieee754_sqrt+0x13a>
 8016584:	0052      	lsls	r2, r2, #1
 8016586:	3101      	adds	r1, #1
 8016588:	e7ef      	b.n	801656a <__ieee754_sqrt+0x13e>
 801658a:	46e0      	mov	r8, ip
 801658c:	e7be      	b.n	801650c <__ieee754_sqrt+0xe0>
 801658e:	bf00      	nop
 8016590:	7ff00000 	.word	0x7ff00000

08016594 <fabs>:
 8016594:	ec51 0b10 	vmov	r0, r1, d0
 8016598:	ee10 2a10 	vmov	r2, s0
 801659c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80165a0:	ec43 2b10 	vmov	d0, r2, r3
 80165a4:	4770      	bx	lr

080165a6 <finite>:
 80165a6:	b082      	sub	sp, #8
 80165a8:	ed8d 0b00 	vstr	d0, [sp]
 80165ac:	9801      	ldr	r0, [sp, #4]
 80165ae:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80165b2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80165b6:	0fc0      	lsrs	r0, r0, #31
 80165b8:	b002      	add	sp, #8
 80165ba:	4770      	bx	lr
 80165bc:	0000      	movs	r0, r0
	...

080165c0 <nan>:
 80165c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80165c8 <nan+0x8>
 80165c4:	4770      	bx	lr
 80165c6:	bf00      	nop
 80165c8:	00000000 	.word	0x00000000
 80165cc:	7ff80000 	.word	0x7ff80000

080165d0 <rint>:
 80165d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80165d2:	ec51 0b10 	vmov	r0, r1, d0
 80165d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80165da:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80165de:	2e13      	cmp	r6, #19
 80165e0:	ee10 4a10 	vmov	r4, s0
 80165e4:	460b      	mov	r3, r1
 80165e6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80165ea:	dc58      	bgt.n	801669e <rint+0xce>
 80165ec:	2e00      	cmp	r6, #0
 80165ee:	da2b      	bge.n	8016648 <rint+0x78>
 80165f0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80165f4:	4302      	orrs	r2, r0
 80165f6:	d023      	beq.n	8016640 <rint+0x70>
 80165f8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80165fc:	4302      	orrs	r2, r0
 80165fe:	4254      	negs	r4, r2
 8016600:	4314      	orrs	r4, r2
 8016602:	0c4b      	lsrs	r3, r1, #17
 8016604:	0b24      	lsrs	r4, r4, #12
 8016606:	045b      	lsls	r3, r3, #17
 8016608:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801660c:	ea44 0103 	orr.w	r1, r4, r3
 8016610:	4b32      	ldr	r3, [pc, #200]	; (80166dc <rint+0x10c>)
 8016612:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016616:	e9d3 6700 	ldrd	r6, r7, [r3]
 801661a:	4602      	mov	r2, r0
 801661c:	460b      	mov	r3, r1
 801661e:	4630      	mov	r0, r6
 8016620:	4639      	mov	r1, r7
 8016622:	f7e9 fe43 	bl	80002ac <__adddf3>
 8016626:	e9cd 0100 	strd	r0, r1, [sp]
 801662a:	463b      	mov	r3, r7
 801662c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016630:	4632      	mov	r2, r6
 8016632:	f7e9 fe39 	bl	80002a8 <__aeabi_dsub>
 8016636:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801663a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801663e:	4639      	mov	r1, r7
 8016640:	ec41 0b10 	vmov	d0, r0, r1
 8016644:	b003      	add	sp, #12
 8016646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016648:	4a25      	ldr	r2, [pc, #148]	; (80166e0 <rint+0x110>)
 801664a:	4132      	asrs	r2, r6
 801664c:	ea01 0702 	and.w	r7, r1, r2
 8016650:	4307      	orrs	r7, r0
 8016652:	d0f5      	beq.n	8016640 <rint+0x70>
 8016654:	0851      	lsrs	r1, r2, #1
 8016656:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801665a:	4314      	orrs	r4, r2
 801665c:	d00c      	beq.n	8016678 <rint+0xa8>
 801665e:	ea23 0201 	bic.w	r2, r3, r1
 8016662:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016666:	2e13      	cmp	r6, #19
 8016668:	fa43 f606 	asr.w	r6, r3, r6
 801666c:	bf0c      	ite	eq
 801666e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8016672:	2400      	movne	r4, #0
 8016674:	ea42 0306 	orr.w	r3, r2, r6
 8016678:	4918      	ldr	r1, [pc, #96]	; (80166dc <rint+0x10c>)
 801667a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801667e:	4622      	mov	r2, r4
 8016680:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016684:	4620      	mov	r0, r4
 8016686:	4629      	mov	r1, r5
 8016688:	f7e9 fe10 	bl	80002ac <__adddf3>
 801668c:	e9cd 0100 	strd	r0, r1, [sp]
 8016690:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016694:	4622      	mov	r2, r4
 8016696:	462b      	mov	r3, r5
 8016698:	f7e9 fe06 	bl	80002a8 <__aeabi_dsub>
 801669c:	e7d0      	b.n	8016640 <rint+0x70>
 801669e:	2e33      	cmp	r6, #51	; 0x33
 80166a0:	dd07      	ble.n	80166b2 <rint+0xe2>
 80166a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80166a6:	d1cb      	bne.n	8016640 <rint+0x70>
 80166a8:	ee10 2a10 	vmov	r2, s0
 80166ac:	f7e9 fdfe 	bl	80002ac <__adddf3>
 80166b0:	e7c6      	b.n	8016640 <rint+0x70>
 80166b2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80166b6:	f04f 36ff 	mov.w	r6, #4294967295
 80166ba:	40d6      	lsrs	r6, r2
 80166bc:	4230      	tst	r0, r6
 80166be:	d0bf      	beq.n	8016640 <rint+0x70>
 80166c0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80166c4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80166c8:	bf1f      	itttt	ne
 80166ca:	ea24 0101 	bicne.w	r1, r4, r1
 80166ce:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80166d2:	fa44 f202 	asrne.w	r2, r4, r2
 80166d6:	ea41 0402 	orrne.w	r4, r1, r2
 80166da:	e7cd      	b.n	8016678 <rint+0xa8>
 80166dc:	08019a28 	.word	0x08019a28
 80166e0:	000fffff 	.word	0x000fffff
 80166e4:	00000000 	.word	0x00000000

080166e8 <scalbn>:
 80166e8:	b570      	push	{r4, r5, r6, lr}
 80166ea:	ec55 4b10 	vmov	r4, r5, d0
 80166ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80166f2:	4606      	mov	r6, r0
 80166f4:	462b      	mov	r3, r5
 80166f6:	b99a      	cbnz	r2, 8016720 <scalbn+0x38>
 80166f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80166fc:	4323      	orrs	r3, r4
 80166fe:	d036      	beq.n	801676e <scalbn+0x86>
 8016700:	4b39      	ldr	r3, [pc, #228]	; (80167e8 <scalbn+0x100>)
 8016702:	4629      	mov	r1, r5
 8016704:	ee10 0a10 	vmov	r0, s0
 8016708:	2200      	movs	r2, #0
 801670a:	f7e9 ff85 	bl	8000618 <__aeabi_dmul>
 801670e:	4b37      	ldr	r3, [pc, #220]	; (80167ec <scalbn+0x104>)
 8016710:	429e      	cmp	r6, r3
 8016712:	4604      	mov	r4, r0
 8016714:	460d      	mov	r5, r1
 8016716:	da10      	bge.n	801673a <scalbn+0x52>
 8016718:	a32b      	add	r3, pc, #172	; (adr r3, 80167c8 <scalbn+0xe0>)
 801671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801671e:	e03a      	b.n	8016796 <scalbn+0xae>
 8016720:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016724:	428a      	cmp	r2, r1
 8016726:	d10c      	bne.n	8016742 <scalbn+0x5a>
 8016728:	ee10 2a10 	vmov	r2, s0
 801672c:	4620      	mov	r0, r4
 801672e:	4629      	mov	r1, r5
 8016730:	f7e9 fdbc 	bl	80002ac <__adddf3>
 8016734:	4604      	mov	r4, r0
 8016736:	460d      	mov	r5, r1
 8016738:	e019      	b.n	801676e <scalbn+0x86>
 801673a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801673e:	460b      	mov	r3, r1
 8016740:	3a36      	subs	r2, #54	; 0x36
 8016742:	4432      	add	r2, r6
 8016744:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016748:	428a      	cmp	r2, r1
 801674a:	dd08      	ble.n	801675e <scalbn+0x76>
 801674c:	2d00      	cmp	r5, #0
 801674e:	a120      	add	r1, pc, #128	; (adr r1, 80167d0 <scalbn+0xe8>)
 8016750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016754:	da1c      	bge.n	8016790 <scalbn+0xa8>
 8016756:	a120      	add	r1, pc, #128	; (adr r1, 80167d8 <scalbn+0xf0>)
 8016758:	e9d1 0100 	ldrd	r0, r1, [r1]
 801675c:	e018      	b.n	8016790 <scalbn+0xa8>
 801675e:	2a00      	cmp	r2, #0
 8016760:	dd08      	ble.n	8016774 <scalbn+0x8c>
 8016762:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016766:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801676a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801676e:	ec45 4b10 	vmov	d0, r4, r5
 8016772:	bd70      	pop	{r4, r5, r6, pc}
 8016774:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016778:	da19      	bge.n	80167ae <scalbn+0xc6>
 801677a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801677e:	429e      	cmp	r6, r3
 8016780:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8016784:	dd0a      	ble.n	801679c <scalbn+0xb4>
 8016786:	a112      	add	r1, pc, #72	; (adr r1, 80167d0 <scalbn+0xe8>)
 8016788:	e9d1 0100 	ldrd	r0, r1, [r1]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d1e2      	bne.n	8016756 <scalbn+0x6e>
 8016790:	a30f      	add	r3, pc, #60	; (adr r3, 80167d0 <scalbn+0xe8>)
 8016792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016796:	f7e9 ff3f 	bl	8000618 <__aeabi_dmul>
 801679a:	e7cb      	b.n	8016734 <scalbn+0x4c>
 801679c:	a10a      	add	r1, pc, #40	; (adr r1, 80167c8 <scalbn+0xe0>)
 801679e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d0b8      	beq.n	8016718 <scalbn+0x30>
 80167a6:	a10e      	add	r1, pc, #56	; (adr r1, 80167e0 <scalbn+0xf8>)
 80167a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167ac:	e7b4      	b.n	8016718 <scalbn+0x30>
 80167ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80167b2:	3236      	adds	r2, #54	; 0x36
 80167b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80167b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80167bc:	4620      	mov	r0, r4
 80167be:	4b0c      	ldr	r3, [pc, #48]	; (80167f0 <scalbn+0x108>)
 80167c0:	2200      	movs	r2, #0
 80167c2:	e7e8      	b.n	8016796 <scalbn+0xae>
 80167c4:	f3af 8000 	nop.w
 80167c8:	c2f8f359 	.word	0xc2f8f359
 80167cc:	01a56e1f 	.word	0x01a56e1f
 80167d0:	8800759c 	.word	0x8800759c
 80167d4:	7e37e43c 	.word	0x7e37e43c
 80167d8:	8800759c 	.word	0x8800759c
 80167dc:	fe37e43c 	.word	0xfe37e43c
 80167e0:	c2f8f359 	.word	0xc2f8f359
 80167e4:	81a56e1f 	.word	0x81a56e1f
 80167e8:	43500000 	.word	0x43500000
 80167ec:	ffff3cb0 	.word	0xffff3cb0
 80167f0:	3c900000 	.word	0x3c900000

080167f4 <_init>:
 80167f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167f6:	bf00      	nop
 80167f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167fa:	bc08      	pop	{r3}
 80167fc:	469e      	mov	lr, r3
 80167fe:	4770      	bx	lr

08016800 <_fini>:
 8016800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016802:	bf00      	nop
 8016804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016806:	bc08      	pop	{r3}
 8016808:	469e      	mov	lr, r3
 801680a:	4770      	bx	lr
