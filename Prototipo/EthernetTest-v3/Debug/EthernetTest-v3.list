
EthernetTest-v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c20  0800de44  0800de44  0001de44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a64  08010a64  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08010a64  08010a64  00020a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a6c  08010a6c  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a6c  08010a6c  00020a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a70  08010a70  00020a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08010a74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          00008a04  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20008a7c  20008a7c  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027fcb  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005030  00000000  00000000  00058073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  0005d0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f50  00000000  00000000  0005e060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b903  00000000  00000000  0005efb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e3c0  00000000  00000000  0008a8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8f3b  00000000  00000000  000a8c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00181bae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004670  00000000  00000000  00181c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800de2c 	.word	0x0800de2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800de2c 	.word	0x0800de2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fa34 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f808 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f876 	bl	8000664 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000578:	f002 faf4 	bl	8002b64 <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 800057c:	f002 fc24 	bl	8002dc8 <MX_LWIP_Process>
 8000580:	e7fc      	b.n	800057c <main+0x14>
	...

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f00c fc28 	bl	800cde8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b2b      	ldr	r3, [pc, #172]	; (800065c <SystemClock_Config+0xd8>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a2a      	ldr	r2, [pc, #168]	; (800065c <SystemClock_Config+0xd8>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <SystemClock_Config+0xd8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <SystemClock_Config+0xdc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a24      	ldr	r2, [pc, #144]	; (8000660 <SystemClock_Config+0xdc>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <SystemClock_Config+0xdc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005f4:	230c      	movs	r3, #12
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005f8:	2360      	movs	r3, #96	; 0x60
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fe23 	bl	8002254 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000614:	f000 f882 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2101      	movs	r1, #1
 8000636:	4618      	mov	r0, r3
 8000638:	f002 f884 	bl	8002744 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000642:	f000 f86b 	bl	800071c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 800064c:	2000      	movs	r0, #0
 800064e:	f002 f95f 	bl	8002910 <HAL_RCC_MCOConfig>
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	; 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <MX_GPIO_Init+0xb0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a24      	ldr	r2, [pc, #144]	; (8000714 <MX_GPIO_Init+0xb0>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <MX_GPIO_Init+0xb0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_GPIO_Init+0xb0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a1d      	ldr	r2, [pc, #116]	; (8000714 <MX_GPIO_Init+0xb0>)
 80006a0:	f043 0304 	orr.w	r3, r3, #4
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_GPIO_Init+0xb0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0304 	and.w	r3, r3, #4
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_GPIO_Init+0xb0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a16      	ldr	r2, [pc, #88]	; (8000714 <MX_GPIO_Init+0xb0>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_GPIO_Init+0xb0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_GPIO_Init+0xb0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <MX_GPIO_Init+0xb0>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_GPIO_Init+0xb0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_GPIO_Init+0xb4>)
 8000708:	f001 fc08 	bl	8001f1c <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40020000 	.word	0x40020000

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_MspInit+0x4c>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <HAL_MspInit+0x4c>)
 8000738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073c:	6453      	str	r3, [r2, #68]	; 0x44
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <HAL_MspInit+0x4c>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x4c>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_MspInit+0x4c>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	6413      	str	r3, [r2, #64]	; 0x40
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_MspInit+0x4c>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800077c:	e7fe      	b.n	800077c <NMI_Handler+0x4>

0800077e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <MemManage_Handler+0x4>

0800078a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <UsageFault_Handler+0x4>

08000796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 f95a 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	return 1;
 80007d0:	2301      	movs	r3, #1
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <_kill>:

int _kill(int pid, int sig)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <_kill+0x20>)
 80007e8:	2216      	movs	r2, #22
 80007ea:	601a      	str	r2, [r3, #0]
	return -1;
 80007ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	20008a6c 	.word	0x20008a6c

08000800 <_exit>:

void _exit (int status)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000808:	f04f 31ff 	mov.w	r1, #4294967295
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ffe5 	bl	80007dc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000812:	e7fe      	b.n	8000812 <_exit+0x12>

08000814 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	e00a      	b.n	800083c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000826:	f3af 8000 	nop.w
 800082a:	4601      	mov	r1, r0
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	60ba      	str	r2, [r7, #8]
 8000832:	b2ca      	uxtb	r2, r1
 8000834:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	3301      	adds	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	dbf0      	blt.n	8000826 <_read+0x12>
	}

return len;
 8000844:	687b      	ldr	r3, [r7, #4]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	e009      	b.n	8000874 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	60ba      	str	r2, [r7, #8]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbf1      	blt.n	8000860 <_write+0x12>
	}
	return len;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_close>:

int _close(int file)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
	return -1;
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ae:	605a      	str	r2, [r3, #4]
	return 0;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <_isatty>:

int _isatty(int file)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
	return 1;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
	return 0;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b087      	sub	sp, #28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f8:	4a14      	ldr	r2, [pc, #80]	; (800094c <_sbrk+0x5c>)
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <_sbrk+0x60>)
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <_sbrk+0x64>)
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <_sbrk+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	429a      	cmp	r2, r3
 800091e:	d205      	bcs.n	800092c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <_sbrk+0x6c>)
 8000922:	220c      	movs	r2, #12
 8000924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	e009      	b.n	8000940 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	4a06      	ldr	r2, [pc, #24]	; (8000954 <_sbrk+0x64>)
 800093c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	4618      	mov	r0, r3
 8000942:	371c      	adds	r7, #28
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	20020000 	.word	0x20020000
 8000950:	00004000 	.word	0x00004000
 8000954:	20000094 	.word	0x20000094
 8000958:	20008a80 	.word	0x20008a80
 800095c:	20008a6c 	.word	0x20008a6c

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a0:	4c0b      	ldr	r4, [pc, #44]	; (80009d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ae:	f7ff ffd7 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f00c f9d9 	bl	800cd68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fdd7 	bl	8000568 <main>
  bx  lr    
 80009ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80009c8:	08010a74 	.word	0x08010a74
  ldr r2, =_sbss
 80009cc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80009d0:	20008a7c 	.word	0x20008a7c

080009d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <HAL_Init+0x40>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_Init+0x40>)
 80009ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_Init+0x40>)
 80009fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f931 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	200f      	movs	r0, #15
 8000a08:	f000 f808 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff fe8c 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023c00 	.word	0x40023c00

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x54>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x58>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f93b 	bl	8000cb6 <HAL_SYSTICK_Config>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00e      	b.n	8000a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d80a      	bhi.n	8000a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 f911 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <HAL_InitTick+0x5c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000004 	.word	0x20000004

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000210 	.word	0x20000210

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000210 	.word	0x20000210

08000abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac4:	f7ff ffee 	bl	8000aa4 <HAL_GetTick>
 8000ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad4:	d005      	beq.n	8000ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_Delay+0x44>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4413      	add	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ae2:	bf00      	nop
 8000ae4:	f7ff ffde 	bl	8000aa4 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d8f7      	bhi.n	8000ae4 <HAL_Delay+0x28>
  {
  }
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f7ff ff8e 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff47 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff5c 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff8e 	bl	8000bbc <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffb0 	bl	8000c24 <SysTick_Config>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000ce0:	4baa      	ldr	r3, [pc, #680]	; (8000f8c <HAL_ETH_Init+0x2bc>)
 8000ce2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e183      	b.n	8000ffe <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d106      	bne.n	8000d10 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f002 f868 	bl	8002de0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4b9e      	ldr	r3, [pc, #632]	; (8000f90 <HAL_ETH_Init+0x2c0>)
 8000d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d18:	4a9d      	ldr	r2, [pc, #628]	; (8000f90 <HAL_ETH_Init+0x2c0>)
 8000d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d20:	4b9b      	ldr	r3, [pc, #620]	; (8000f90 <HAL_ETH_Init+0x2c0>)
 8000d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000d2c:	4b99      	ldr	r3, [pc, #612]	; (8000f94 <HAL_ETH_Init+0x2c4>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4a98      	ldr	r2, [pc, #608]	; (8000f94 <HAL_ETH_Init+0x2c4>)
 8000d32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d36:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000d38:	4b96      	ldr	r3, [pc, #600]	; (8000f94 <HAL_ETH_Init+0x2c4>)
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	4994      	ldr	r1, [pc, #592]	; (8000f94 <HAL_ETH_Init+0x2c4>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f042 0201 	orr.w	r2, r2, #1
 8000d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d5c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000d5e:	f7ff fea1 	bl	8000aa4 <HAL_GetTick>
 8000d62:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d64:	e011      	b.n	8000d8a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000d66:	f7ff fe9d 	bl	8000aa4 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d74:	d909      	bls.n	8000d8a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2203      	movs	r2, #3
 8000d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e139      	b.n	8000ffe <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1e4      	bne.n	8000d66 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f023 031c 	bic.w	r3, r3, #28
 8000daa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000dac:	f001 fece 	bl	8002b4c <HAL_RCC_GetHCLKFreq>
 8000db0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	4a78      	ldr	r2, [pc, #480]	; (8000f98 <HAL_ETH_Init+0x2c8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d908      	bls.n	8000dcc <HAL_ETH_Init+0xfc>
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	4a77      	ldr	r2, [pc, #476]	; (8000f9c <HAL_ETH_Init+0x2cc>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d804      	bhi.n	8000dcc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	e027      	b.n	8000e1c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	4a73      	ldr	r2, [pc, #460]	; (8000f9c <HAL_ETH_Init+0x2cc>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d908      	bls.n	8000de6 <HAL_ETH_Init+0x116>
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	4a6d      	ldr	r2, [pc, #436]	; (8000f8c <HAL_ETH_Init+0x2bc>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d204      	bcs.n	8000de6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f043 030c 	orr.w	r3, r3, #12
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	e01a      	b.n	8000e1c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	4a68      	ldr	r2, [pc, #416]	; (8000f8c <HAL_ETH_Init+0x2bc>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d303      	bcc.n	8000df6 <HAL_ETH_Init+0x126>
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	4a6b      	ldr	r2, [pc, #428]	; (8000fa0 <HAL_ETH_Init+0x2d0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d911      	bls.n	8000e1a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	4a69      	ldr	r2, [pc, #420]	; (8000fa0 <HAL_ETH_Init+0x2d0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d908      	bls.n	8000e10 <HAL_ETH_Init+0x140>
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4a68      	ldr	r2, [pc, #416]	; (8000fa4 <HAL_ETH_Init+0x2d4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d804      	bhi.n	8000e10 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e005      	b.n	8000e1c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	e000      	b.n	8000e1c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000e1a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000e24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e28:	2100      	movs	r1, #0
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 fb98 	bl	8001560 <HAL_ETH_WritePHYRegister>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00b      	beq.n	8000e4e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000e3a:	6939      	ldr	r1, [r7, #16]
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 fd4d 	bl	80018dc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2201      	movs	r2, #1
 8000e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e0d7      	b.n	8000ffe <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000e4e:	20ff      	movs	r0, #255	; 0xff
 8000e50:	f7ff fe34 	bl	8000abc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 80a5 	beq.w	8000fa8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000e5e:	f7ff fe21 	bl	8000aa4 <HAL_GetTick>
 8000e62:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 fb0f 	bl	8001490 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000e72:	f7ff fe17 	bl	8000aa4 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d90f      	bls.n	8000ea4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000e88:	6939      	ldr	r1, [r7, #16]
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 fd26 	bl	80018dc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e0ac      	b.n	8000ffe <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0da      	beq.n	8000e64 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000eae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 fb53 	bl	8001560 <HAL_ETH_WritePHYRegister>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00b      	beq.n	8000ed8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ec4:	6939      	ldr	r1, [r7, #16]
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 fd08 	bl	80018dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e092      	b.n	8000ffe <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000ed8:	f7ff fde4 	bl	8000aa4 <HAL_GetTick>
 8000edc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 fad2 	bl	8001490 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000eec:	f7ff fdda 	bl	8000aa4 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d90f      	bls.n	8000f1e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f02:	6939      	ldr	r1, [r7, #16]
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 fce9 	bl	80018dc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e06f      	b.n	8000ffe <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f003 0320 	and.w	r3, r3, #32
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0da      	beq.n	8000ede <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	211f      	movs	r1, #31
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 faad 	bl	8001490 <HAL_ETH_ReadPHYRegister>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00b      	beq.n	8000f54 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f40:	6939      	ldr	r1, [r7, #16]
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 fcca 	bl	80018dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000f50:	2301      	movs	r3, #1
 8000f52:	e054      	b.n	8000ffe <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d004      	beq.n	8000f68 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	e002      	b.n	8000f6e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	e035      	b.n	8000fec <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	e030      	b.n	8000fec <HAL_ETH_Init+0x31c>
 8000f8a:	bf00      	nop
 8000f8c:	03938700 	.word	0x03938700
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40013800 	.word	0x40013800
 8000f98:	01312cff 	.word	0x01312cff
 8000f9c:	02160ebf 	.word	0x02160ebf
 8000fa0:	05f5e0ff 	.word	0x05f5e0ff
 8000fa4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	085b      	lsrs	r3, r3, #1
 8000fb6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 facd 	bl	8001560 <HAL_ETH_WritePHYRegister>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00b      	beq.n	8000fe4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000fd0:	6939      	ldr	r1, [r7, #16]
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fc82 	bl	80018dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e00c      	b.n	8000ffe <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000fe4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000fe8:	f7ff fd68 	bl	8000abc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000fec:	6939      	ldr	r1, [r7, #16]
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fc74 	bl	80018dc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop

08001008 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001020:	2b01      	cmp	r3, #1
 8001022:	d101      	bne.n	8001028 <HAL_ETH_DMATxDescListInit+0x20>
 8001024:	2302      	movs	r3, #2
 8001026:	e052      	b.n	80010ce <HAL_ETH_DMATxDescListInit+0xc6>
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2202      	movs	r2, #2
 8001034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e030      	b.n	80010a6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	015b      	lsls	r3, r3, #5
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	4413      	add	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001054:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	461a      	mov	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d105      	bne.n	800107e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	3b01      	subs	r3, #1
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	429a      	cmp	r2, r3
 8001086:	d208      	bcs.n	800109a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3301      	adds	r3, #1
 800108c:	015b      	lsls	r3, r3, #5
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	4413      	add	r3, r2
 8001092:	461a      	mov	r2, r3
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	e002      	b.n	80010a0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3301      	adds	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d3ca      	bcc.n	8001044 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010b8:	3310      	adds	r3, #16
 80010ba:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	371c      	adds	r7, #28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80010da:	b480      	push	{r7}
 80010dc:	b087      	sub	sp, #28
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <HAL_ETH_DMARxDescListInit+0x20>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e056      	b.n	80011a8 <HAL_ETH_DMARxDescListInit+0xce>
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2202      	movs	r2, #2
 8001106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e034      	b.n	8001180 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	015b      	lsls	r3, r3, #5
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	4413      	add	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001126:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800112e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	461a      	mov	r2, r3
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d105      	bne.n	8001158 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	3b01      	subs	r3, #1
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	429a      	cmp	r2, r3
 8001160:	d208      	bcs.n	8001174 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	3301      	adds	r3, #1
 8001166:	015b      	lsls	r3, r3, #5
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	4413      	add	r3, r2
 800116c:	461a      	mov	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	e002      	b.n	800117a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d3c6      	bcc.n	8001116 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001192:	330c      	adds	r3, #12
 8001194:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	371c      	adds	r7, #28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <HAL_ETH_TransmitFrame+0x24>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e0cd      	b.n	8001374 <HAL_ETH_TransmitFrame+0x1c0>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2202      	movs	r2, #2
 80011e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d109      	bne.n	8001202 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80011fe:	2301      	movs	r3, #1
 8001200:	e0b8      	b.n	8001374 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	da09      	bge.n	8001220 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2212      	movs	r2, #18
 8001210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e0a9      	b.n	8001374 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001226:	4293      	cmp	r3, r2
 8001228:	d915      	bls.n	8001256 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	4a54      	ldr	r2, [pc, #336]	; (8001380 <HAL_ETH_TransmitFrame+0x1cc>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	0a9b      	lsrs	r3, r3, #10
 8001234:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	4b51      	ldr	r3, [pc, #324]	; (8001380 <HAL_ETH_TransmitFrame+0x1cc>)
 800123a:	fba3 1302 	umull	r1, r3, r3, r2
 800123e:	0a9b      	lsrs	r3, r3, #10
 8001240:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001244:	fb01 f303 	mul.w	r3, r1, r3
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	e001      	b.n	800125a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001256:	2301      	movs	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d11c      	bne.n	800129a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800126e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800127a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001286:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800128a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	461a      	mov	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
 8001298:	e04b      	b.n	8001332 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	e044      	b.n	800132a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ae:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d107      	bne.n	80012c6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012c4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012ce:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d116      	bne.n	8001308 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80012e8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	4a25      	ldr	r2, [pc, #148]	; (8001384 <HAL_ETH_TransmitFrame+0x1d0>)
 80012ee:	fb02 f203 	mul.w	r2, r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	4413      	add	r3, r2
 80012f6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80012fa:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001306:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001316:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	3301      	adds	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	429a      	cmp	r2, r3
 8001330:	d3b6      	bcc.n	80012a0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800133a:	3314      	adds	r3, #20
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00d      	beq.n	8001362 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800134e:	3314      	adds	r3, #20
 8001350:	2204      	movs	r2, #4
 8001352:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800135c:	3304      	adds	r3, #4
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	ac02b00b 	.word	0xac02b00b
 8001384:	fffffa0c 	.word	0xfffffa0c

08001388 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_ETH_GetReceivedFrame+0x1a>
 800139e:	2302      	movs	r3, #2
 80013a0:	e070      	b.n	8001484 <HAL_ETH_GetReceivedFrame+0xfc>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2202      	movs	r2, #2
 80013ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db5a      	blt.n	8001472 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d030      	beq.n	800142c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d103      	bne.n	80013e4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0c1b      	lsrs	r3, r3, #16
 80013f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80013f8:	3b04      	subs	r3, #4
 80013fa:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	461a      	mov	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	e02b      	b.n	8001484 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001436:	2b00      	cmp	r3, #0
 8001438:	d010      	beq.n	800145c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	461a      	mov	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
 800145a:	e00a      	b.n	8001472 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	461a      	mov	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	460b      	mov	r3, r1
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b82      	cmp	r3, #130	; 0x82
 80014b0:	d101      	bne.n	80014b6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80014b2:	2302      	movs	r3, #2
 80014b4:	e050      	b.n	8001558 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2282      	movs	r2, #130	; 0x82
 80014ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 031c 	and.w	r3, r3, #28
 80014cc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8a1b      	ldrh	r3, [r3, #16]
 80014d2:	02db      	lsls	r3, r3, #11
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4313      	orrs	r3, r2
 80014da:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80014dc:	897b      	ldrh	r3, [r7, #10]
 80014de:	019b      	lsls	r3, r3, #6
 80014e0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f023 0302 	bic.w	r3, r3, #2
 80014f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001502:	f7ff facf 	bl	8000aa4 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001508:	e015      	b.n	8001536 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800150a:	f7ff facb 	bl	8000aa4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001518:	d309      	bcc.n	800152e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e014      	b.n	8001558 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e4      	bne.n	800150a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	b29b      	uxth	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	460b      	mov	r3, r1
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b42      	cmp	r3, #66	; 0x42
 8001580:	d101      	bne.n	8001586 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001582:	2302      	movs	r3, #2
 8001584:	e04e      	b.n	8001624 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2242      	movs	r2, #66	; 0x42
 800158a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f003 031c 	and.w	r3, r3, #28
 800159c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8a1b      	ldrh	r3, [r3, #16]
 80015a2:	02db      	lsls	r3, r3, #11
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80015ac:	897b      	ldrh	r3, [r7, #10]
 80015ae:	019b      	lsls	r3, r3, #6
 80015b0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015dc:	f7ff fa62 	bl	8000aa4 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015e2:	e015      	b.n	8001610 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80015e4:	f7ff fa5e 	bl	8000aa4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f2:	d309      	bcc.n	8001608 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e00d      	b.n	8001624 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1e4      	bne.n	80015e4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_ETH_Start+0x16>
 800163e:	2302      	movs	r3, #2
 8001640:	e01f      	b.n	8001682 <HAL_ETH_Start+0x56>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2202      	movs	r2, #2
 800164e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fb44 	bl	8001ce0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fb7b 	bl	8001d54 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fc12 	bl	8001e88 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fbaf 	bl	8001dc8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 fbdc 	bl	8001e28 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_ETH_Stop+0x16>
 800169c:	2302      	movs	r3, #2
 800169e:	e01f      	b.n	80016e0 <HAL_ETH_Stop+0x56>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 fba1 	bl	8001df8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fbce 	bl	8001e58 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 fb66 	bl	8001d8e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fbe0 	bl	8001e88 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 fb26 	bl	8001d1a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_ETH_ConfigMAC+0x1c>
 8001700:	2302      	movs	r3, #2
 8001702:	e0e4      	b.n	80018ce <HAL_ETH_ConfigMAC+0x1e6>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2202      	movs	r2, #2
 8001710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 80b1 	beq.w	800187e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	4b6c      	ldr	r3, [pc, #432]	; (80018d8 <HAL_ETH_ConfigMAC+0x1f0>)
 8001728:	4013      	ands	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001734:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800173a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001740:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001746:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800174c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001752:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001758:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800175e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001764:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800176a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001770:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001776:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800178e:	2001      	movs	r0, #1
 8001790:	f7ff f994 	bl	8000abc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017a4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80017aa:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80017b0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80017b6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80017bc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80017c2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80017ce:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017d0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80017da:	2001      	movs	r0, #1
 80017dc:	f7ff f96e 	bl	8000abc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017f0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017fa:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	f64f 7341 	movw	r3, #65345	; 0xff41
 800180a:	4013      	ands	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001818:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800181e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001824:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800182a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001830:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4313      	orrs	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff f937 	bl	8000abc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800186e:	2001      	movs	r0, #1
 8001870:	f7ff f924 	bl	8000abc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	61da      	str	r2, [r3, #28]
 800187c:	e01e      	b.n	80018bc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800188c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff f904 	bl	8000abc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	ff20810f 	.word	0xff20810f

080018dc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b0b0      	sub	sp, #192	; 0xc0
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018f8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001900:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800190a:	2300      	movs	r3, #0
 800190c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001926:	663b      	str	r3, [r7, #96]	; 0x60
 8001928:	e001      	b.n	800192e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800192e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001932:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001938:	2300      	movs	r3, #0
 800193a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001948:	2340      	movs	r3, #64	; 0x40
 800194a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001982:	2300      	movs	r3, #0
 8001984:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80019b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019b4:	4bac      	ldr	r3, [pc, #688]	; (8001c68 <ETH_MACDMAConfig+0x38c>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80019bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80019be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80019c0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80019c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80019c4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80019c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80019c8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80019ce:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80019d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80019d2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80019d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80019d6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80019dc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80019de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80019e0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80019e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80019e4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80019e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80019e8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80019ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80019ec:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80019ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80019f0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80019f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019f6:	4313      	orrs	r3, r2
 80019f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a04:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a10:	2001      	movs	r0, #1
 8001a12:	f7ff f853 	bl	8000abc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a1e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a24:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001a26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001a28:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001a2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001a2e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001a34:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001a3a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001a40:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001a44:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001a4c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a4e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7ff f82e 	bl	8000abc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a68:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a72:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a7c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a8c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a90:	4013      	ands	r3, r2
 8001a92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001a96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a9a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001a9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001aa0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001aa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001aa6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001aa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001aac:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001ab2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ab4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ab8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001aba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001acc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7fe ffef 	bl	8000abc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ae6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001ae8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001aec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b02:	2001      	movs	r0, #1
 8001b04:	f7fe ffda 	bl	8000abc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b10:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b1a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001b20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b24:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001b36:	2304      	movs	r3, #4
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b66:	3318      	adds	r3, #24
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001b6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b72:	4b3e      	ldr	r3, [pc, #248]	; (8001c6c <ETH_MACDMAConfig+0x390>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b7a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b7e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001b80:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001b82:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001b84:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001b86:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001b88:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001b8a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001b8c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001b8e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001b90:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001b92:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001b96:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001b9a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bae:	3318      	adds	r3, #24
 8001bb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bb4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbe:	3318      	adds	r3, #24
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f7fe ff78 	bl	8000abc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd4:	3318      	adds	r3, #24
 8001bd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bda:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001be0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001be4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001be8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001bec:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bf0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001bf2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001bf6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c04:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c14:	2001      	movs	r0, #1
 8001c16:	f7fe ff51 	bl	8000abc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c26:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d10f      	bne.n	8001c50 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c38:	331c      	adds	r3, #28
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4c:	331c      	adds	r3, #28
 8001c4e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	461a      	mov	r2, r3
 8001c56:	2100      	movs	r1, #0
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f809 	bl	8001c70 <ETH_MACAddressConfig>
}
 8001c5e:	bf00      	nop
 8001c60:	37c0      	adds	r7, #192	; 0xc0
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	ff20810f 	.word	0xff20810f
 8001c6c:	f8de3f23 	.word	0xf8de3f23

08001c70 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3305      	adds	r3, #5
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	3204      	adds	r2, #4
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <ETH_MACAddressConfig+0x68>)
 8001c92:	4413      	add	r3, r2
 8001c94:	461a      	mov	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3303      	adds	r3, #3
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	061a      	lsls	r2, r3, #24
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	041b      	lsls	r3, r3, #16
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <ETH_MACAddressConfig+0x6c>)
 8001cc2:	4413      	add	r3, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	6013      	str	r3, [r2, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40028040 	.word	0x40028040
 8001cdc:	40028044 	.word	0x40028044

08001ce0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0208 	orr.w	r2, r2, #8
 8001cfa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d04:	2001      	movs	r0, #1
 8001d06:	f000 f8e9 	bl	8001edc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	601a      	str	r2, [r3, #0]
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0208 	bic.w	r2, r2, #8
 8001d34:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f000 f8cc 	bl	8001edc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	601a      	str	r2, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0204 	orr.w	r2, r2, #4
 8001d6e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f000 f8af 	bl	8001edc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	601a      	str	r2, [r3, #0]
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0204 	bic.w	r2, r2, #4
 8001da8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001db2:	2001      	movs	r0, #1
 8001db4:	f000 f892 	bl	8001edc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd8:	3318      	adds	r3, #24
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de8:	3318      	adds	r3, #24
 8001dea:	601a      	str	r2, [r3, #0]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e08:	3318      	adds	r3, #24
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e18:	3318      	adds	r3, #24
 8001e1a:	601a      	str	r2, [r3, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e38:	3318      	adds	r3, #24
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0202 	orr.w	r2, r2, #2
 8001e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e48:	3318      	adds	r3, #24
 8001e4a:	601a      	str	r2, [r3, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e68:	3318      	adds	r3, #24
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0202 	bic.w	r2, r2, #2
 8001e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e78:	3318      	adds	r3, #24
 8001e7a:	601a      	str	r2, [r3, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9c:	3318      	adds	r3, #24
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eac:	3318      	adds	r3, #24
 8001eae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb8:	3318      	adds	r3, #24
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f000 f80c 	bl	8001edc <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ece:	3318      	adds	r3, #24
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <ETH_Delay+0x38>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <ETH_Delay+0x3c>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	0a5b      	lsrs	r3, r3, #9
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	fb02 f303 	mul.w	r3, r2, r3
 8001ef6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001ef8:	bf00      	nop
  } 
  while (Delay --);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1e5a      	subs	r2, r3, #1
 8001efe:	60fa      	str	r2, [r7, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f9      	bne.n	8001ef8 <ETH_Delay+0x1c>
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000000 	.word	0x20000000
 8001f18:	10624dd3 	.word	0x10624dd3

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	; 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e16b      	b.n	8002210 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	f040 815a 	bne.w	800220a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d005      	beq.n	8001f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d130      	bne.n	8001fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 0201 	and.w	r2, r3, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d017      	beq.n	800200c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d123      	bne.n	8002060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3208      	adds	r2, #8
 800205a:	69b9      	ldr	r1, [r7, #24]
 800205c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0203 	and.w	r2, r3, #3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80b4 	beq.w	800220a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b60      	ldr	r3, [pc, #384]	; (8002228 <HAL_GPIO_Init+0x30c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	4a5f      	ldr	r2, [pc, #380]	; (8002228 <HAL_GPIO_Init+0x30c>)
 80020ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b0:	6453      	str	r3, [r2, #68]	; 0x44
 80020b2:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <HAL_GPIO_Init+0x30c>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020be:	4a5b      	ldr	r2, [pc, #364]	; (800222c <HAL_GPIO_Init+0x310>)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3302      	adds	r3, #2
 80020c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	220f      	movs	r2, #15
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a52      	ldr	r2, [pc, #328]	; (8002230 <HAL_GPIO_Init+0x314>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02b      	beq.n	8002142 <HAL_GPIO_Init+0x226>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a51      	ldr	r2, [pc, #324]	; (8002234 <HAL_GPIO_Init+0x318>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d025      	beq.n	800213e <HAL_GPIO_Init+0x222>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a50      	ldr	r2, [pc, #320]	; (8002238 <HAL_GPIO_Init+0x31c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01f      	beq.n	800213a <HAL_GPIO_Init+0x21e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4f      	ldr	r2, [pc, #316]	; (800223c <HAL_GPIO_Init+0x320>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d019      	beq.n	8002136 <HAL_GPIO_Init+0x21a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4e      	ldr	r2, [pc, #312]	; (8002240 <HAL_GPIO_Init+0x324>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_GPIO_Init+0x216>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4d      	ldr	r2, [pc, #308]	; (8002244 <HAL_GPIO_Init+0x328>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00d      	beq.n	800212e <HAL_GPIO_Init+0x212>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4c      	ldr	r2, [pc, #304]	; (8002248 <HAL_GPIO_Init+0x32c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d007      	beq.n	800212a <HAL_GPIO_Init+0x20e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4b      	ldr	r2, [pc, #300]	; (800224c <HAL_GPIO_Init+0x330>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d101      	bne.n	8002126 <HAL_GPIO_Init+0x20a>
 8002122:	2307      	movs	r3, #7
 8002124:	e00e      	b.n	8002144 <HAL_GPIO_Init+0x228>
 8002126:	2308      	movs	r3, #8
 8002128:	e00c      	b.n	8002144 <HAL_GPIO_Init+0x228>
 800212a:	2306      	movs	r3, #6
 800212c:	e00a      	b.n	8002144 <HAL_GPIO_Init+0x228>
 800212e:	2305      	movs	r3, #5
 8002130:	e008      	b.n	8002144 <HAL_GPIO_Init+0x228>
 8002132:	2304      	movs	r3, #4
 8002134:	e006      	b.n	8002144 <HAL_GPIO_Init+0x228>
 8002136:	2303      	movs	r3, #3
 8002138:	e004      	b.n	8002144 <HAL_GPIO_Init+0x228>
 800213a:	2302      	movs	r3, #2
 800213c:	e002      	b.n	8002144 <HAL_GPIO_Init+0x228>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <HAL_GPIO_Init+0x228>
 8002142:	2300      	movs	r3, #0
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	f002 0203 	and.w	r2, r2, #3
 800214a:	0092      	lsls	r2, r2, #2
 800214c:	4093      	lsls	r3, r2
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002154:	4935      	ldr	r1, [pc, #212]	; (800222c <HAL_GPIO_Init+0x310>)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	3302      	adds	r3, #2
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002162:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <HAL_GPIO_Init+0x334>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002186:	4a32      	ldr	r2, [pc, #200]	; (8002250 <HAL_GPIO_Init+0x334>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800218c:	4b30      	ldr	r3, [pc, #192]	; (8002250 <HAL_GPIO_Init+0x334>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021b0:	4a27      	ldr	r2, [pc, #156]	; (8002250 <HAL_GPIO_Init+0x334>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <HAL_GPIO_Init+0x334>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021da:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_GPIO_Init+0x334>)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_GPIO_Init+0x334>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002204:	4a12      	ldr	r2, [pc, #72]	; (8002250 <HAL_GPIO_Init+0x334>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3301      	adds	r3, #1
 800220e:	61fb      	str	r3, [r7, #28]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	2b0f      	cmp	r3, #15
 8002214:	f67f ae90 	bls.w	8001f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	40013800 	.word	0x40013800
 8002230:	40020000 	.word	0x40020000
 8002234:	40020400 	.word	0x40020400
 8002238:	40020800 	.word	0x40020800
 800223c:	40020c00 	.word	0x40020c00
 8002240:	40021000 	.word	0x40021000
 8002244:	40021400 	.word	0x40021400
 8002248:	40021800 	.word	0x40021800
 800224c:	40021c00 	.word	0x40021c00
 8002250:	40013c00 	.word	0x40013c00

08002254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e264      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d075      	beq.n	800235e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002272:	4ba3      	ldr	r3, [pc, #652]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b04      	cmp	r3, #4
 800227c:	d00c      	beq.n	8002298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227e:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002286:	2b08      	cmp	r3, #8
 8002288:	d112      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228a:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002296:	d10b      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	4b99      	ldr	r3, [pc, #612]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d05b      	beq.n	800235c <HAL_RCC_OscConfig+0x108>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d157      	bne.n	800235c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e23f      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d106      	bne.n	80022c8 <HAL_RCC_OscConfig+0x74>
 80022ba:	4b91      	ldr	r3, [pc, #580]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a90      	ldr	r2, [pc, #576]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e01d      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x98>
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a8a      	ldr	r2, [pc, #552]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a87      	ldr	r2, [pc, #540]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022ec:	4b84      	ldr	r3, [pc, #528]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a83      	ldr	r2, [pc, #524]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a80      	ldr	r2, [pc, #512]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d013      	beq.n	8002334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7fe fbca 	bl	8000aa4 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7fe fbc6 	bl	8000aa4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e204      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0xc0>
 8002332:	e014      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe fbb6 	bl	8000aa4 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800233c:	f7fe fbb2 	bl	8000aa4 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1f0      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0xe8>
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d063      	beq.n	8002432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002376:	4b62      	ldr	r3, [pc, #392]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800237e:	2b08      	cmp	r3, #8
 8002380:	d11c      	bne.n	80023bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002382:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d116      	bne.n	80023bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_RCC_OscConfig+0x152>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e1c4      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b56      	ldr	r3, [pc, #344]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4952      	ldr	r1, [pc, #328]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ba:	e03a      	b.n	8002432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c4:	4b4f      	ldr	r3, [pc, #316]	; (8002504 <HAL_RCC_OscConfig+0x2b0>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe fb6b 	bl	8000aa4 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d2:	f7fe fb67 	bl	8000aa4 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e1a5      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	4b46      	ldr	r3, [pc, #280]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	4b43      	ldr	r3, [pc, #268]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4940      	ldr	r1, [pc, #256]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
 8002404:	e015      	b.n	8002432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002406:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_OscConfig+0x2b0>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe fb4a 	bl	8000aa4 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002414:	f7fe fb46 	bl	8000aa4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e184      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d030      	beq.n	80024a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d016      	beq.n	8002474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002446:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_RCC_OscConfig+0x2b4>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7fe fb2a 	bl	8000aa4 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002454:	f7fe fb26 	bl	8000aa4 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e164      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x200>
 8002472:	e015      	b.n	80024a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_OscConfig+0x2b4>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7fe fb13 	bl	8000aa4 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002482:	f7fe fb0f 	bl	8000aa4 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e14d      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80a0 	beq.w	80025ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10f      	bne.n	80024de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024da:	2301      	movs	r3, #1
 80024dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d121      	bne.n	800252e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fad5 	bl	8000aa4 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	e011      	b.n	8002522 <HAL_RCC_OscConfig+0x2ce>
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	42470000 	.word	0x42470000
 8002508:	42470e80 	.word	0x42470e80
 800250c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002510:	f7fe fac8 	bl	8000aa4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e106      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	4b85      	ldr	r3, [pc, #532]	; (8002738 <HAL_RCC_OscConfig+0x4e4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x2f0>
 8002536:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a80      	ldr	r2, [pc, #512]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	e01c      	b.n	800257e <HAL_RCC_OscConfig+0x32a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x312>
 800254c:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4a7a      	ldr	r2, [pc, #488]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
 8002558:	4b78      	ldr	r3, [pc, #480]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	4a77      	ldr	r2, [pc, #476]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6713      	str	r3, [r2, #112]	; 0x70
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x32a>
 8002566:	4b75      	ldr	r3, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a74      	ldr	r2, [pc, #464]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
 8002572:	4b72      	ldr	r3, [pc, #456]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a71      	ldr	r2, [pc, #452]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d015      	beq.n	80025b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7fe fa8d 	bl	8000aa4 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe fa89 	bl	8000aa4 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0c5      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ee      	beq.n	800258e <HAL_RCC_OscConfig+0x33a>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7fe fa77 	bl	8000aa4 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe fa73 	bl	8000aa4 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0af      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	4b5a      	ldr	r3, [pc, #360]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a55      	ldr	r2, [pc, #340]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 809b 	beq.w	800272e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d05c      	beq.n	80026be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d141      	bne.n	8002690 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe fa47 	bl	8000aa4 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe fa43 	bl	8000aa4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e081      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	019b      	lsls	r3, r3, #6
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	3b01      	subs	r3, #1
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
 800265c:	4937      	ldr	r1, [pc, #220]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002662:	4b37      	ldr	r3, [pc, #220]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe fa1c 	bl	8000aa4 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fa18 	bl	8000aa4 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e056      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x41c>
 800268e:	e04e      	b.n	800272e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe fa05 	bl	8000aa4 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe fa01 	bl	8000aa4 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e03f      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x44a>
 80026bc:	e037      	b.n	800272e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e032      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d028      	beq.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d121      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d11a      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026fa:	4013      	ands	r3, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002700:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002702:	4293      	cmp	r3, r2
 8002704:	d111      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	3b01      	subs	r3, #1
 8002714:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d107      	bne.n	800272a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40007000 	.word	0x40007000
 800273c:	40023800 	.word	0x40023800
 8002740:	42470060 	.word	0x42470060

08002744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0cc      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002758:	4b68      	ldr	r3, [pc, #416]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d90c      	bls.n	8002780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b65      	ldr	r3, [pc, #404]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0b8      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002798:	4b59      	ldr	r3, [pc, #356]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a58      	ldr	r2, [pc, #352]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b0:	4b53      	ldr	r3, [pc, #332]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a52      	ldr	r2, [pc, #328]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b50      	ldr	r3, [pc, #320]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	494d      	ldr	r1, [pc, #308]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d044      	beq.n	8002864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d119      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e07f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e067      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f023 0203 	bic.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4934      	ldr	r1, [pc, #208]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002834:	f7fe f936 	bl	8000aa4 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7fe f932 	bl	8000aa4 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e04f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 020c 	and.w	r2, r3, #12
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	429a      	cmp	r2, r3
 8002862:	d1eb      	bne.n	800283c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d20c      	bcs.n	800288c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e032      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4916      	ldr	r1, [pc, #88]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	490e      	ldr	r1, [pc, #56]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ca:	f000 f889 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 80028ce:	4602      	mov	r2, r0
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	490a      	ldr	r1, [pc, #40]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	5ccb      	ldrb	r3, [r1, r3]
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe f896 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00
 8002900:	40023800 	.word	0x40023800
 8002904:	08010824 	.word	0x08010824
 8002908:	20000000 	.word	0x20000000
 800290c:	20000004 	.word	0x20000004

08002910 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08c      	sub	sp, #48	; 0x30
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d129      	bne.n	8002976 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <HAL_RCC_MCOConfig+0xc4>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <HAL_RCC_MCOConfig+0xc4>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <HAL_RCC_MCOConfig+0xc4>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800293e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002948:	2303      	movs	r3, #3
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002950:	2300      	movs	r3, #0
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002954:	f107 031c 	add.w	r3, r7, #28
 8002958:	4619      	mov	r1, r3
 800295a:	481f      	ldr	r0, [pc, #124]	; (80029d8 <HAL_RCC_MCOConfig+0xc8>)
 800295c:	f7ff fade 	bl	8001f1c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002960:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <HAL_RCC_MCOConfig+0xc4>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	430b      	orrs	r3, r1
 800296e:	4919      	ldr	r1, [pc, #100]	; (80029d4 <HAL_RCC_MCOConfig+0xc4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002974:	e029      	b.n	80029ca <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_RCC_MCOConfig+0xc4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <HAL_RCC_MCOConfig+0xc4>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_RCC_MCOConfig+0xc4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80029a8:	f107 031c 	add.w	r3, r7, #28
 80029ac:	4619      	mov	r1, r3
 80029ae:	480b      	ldr	r0, [pc, #44]	; (80029dc <HAL_RCC_MCOConfig+0xcc>)
 80029b0:	f7ff fab4 	bl	8001f1c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80029b4:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_RCC_MCOConfig+0xc4>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	00d9      	lsls	r1, r3, #3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	430b      	orrs	r3, r1
 80029c4:	4903      	ldr	r1, [pc, #12]	; (80029d4 <HAL_RCC_MCOConfig+0xc4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
}
 80029ca:	bf00      	nop
 80029cc:	3730      	adds	r7, #48	; 0x30
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40020000 	.word	0x40020000
 80029dc:	40020800 	.word	0x40020800

080029e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	b5b0      	push	{r4, r5, r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029e6:	2100      	movs	r1, #0
 80029e8:	6079      	str	r1, [r7, #4]
 80029ea:	2100      	movs	r1, #0
 80029ec:	60f9      	str	r1, [r7, #12]
 80029ee:	2100      	movs	r1, #0
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029f2:	2100      	movs	r1, #0
 80029f4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029f6:	4952      	ldr	r1, [pc, #328]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	6889      	ldr	r1, [r1, #8]
 80029fa:	f001 010c 	and.w	r1, r1, #12
 80029fe:	2908      	cmp	r1, #8
 8002a00:	d00d      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x3e>
 8002a02:	2908      	cmp	r1, #8
 8002a04:	f200 8094 	bhi.w	8002b30 <HAL_RCC_GetSysClockFreq+0x150>
 8002a08:	2900      	cmp	r1, #0
 8002a0a:	d002      	beq.n	8002a12 <HAL_RCC_GetSysClockFreq+0x32>
 8002a0c:	2904      	cmp	r1, #4
 8002a0e:	d003      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x38>
 8002a10:	e08e      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a12:	4b4c      	ldr	r3, [pc, #304]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a14:	60bb      	str	r3, [r7, #8]
       break;
 8002a16:	e08e      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a18:	4b4b      	ldr	r3, [pc, #300]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a1a:	60bb      	str	r3, [r7, #8]
      break;
 8002a1c:	e08b      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a1e:	4948      	ldr	r1, [pc, #288]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a20:	6849      	ldr	r1, [r1, #4]
 8002a22:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002a26:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a28:	4945      	ldr	r1, [pc, #276]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a2a:	6849      	ldr	r1, [r1, #4]
 8002a2c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002a30:	2900      	cmp	r1, #0
 8002a32:	d024      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a34:	4942      	ldr	r1, [pc, #264]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a36:	6849      	ldr	r1, [r1, #4]
 8002a38:	0989      	lsrs	r1, r1, #6
 8002a3a:	4608      	mov	r0, r1
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002a44:	f04f 0500 	mov.w	r5, #0
 8002a48:	ea00 0204 	and.w	r2, r0, r4
 8002a4c:	ea01 0305 	and.w	r3, r1, r5
 8002a50:	493d      	ldr	r1, [pc, #244]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a52:	fb01 f003 	mul.w	r0, r1, r3
 8002a56:	2100      	movs	r1, #0
 8002a58:	fb01 f102 	mul.w	r1, r1, r2
 8002a5c:	1844      	adds	r4, r0, r1
 8002a5e:	493a      	ldr	r1, [pc, #232]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a60:	fba2 0101 	umull	r0, r1, r2, r1
 8002a64:	1863      	adds	r3, r4, r1
 8002a66:	4619      	mov	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	f7fd fbfe 	bl	8000270 <__aeabi_uldivmod>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4613      	mov	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e04a      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7e:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	099b      	lsrs	r3, r3, #6
 8002a84:	461a      	mov	r2, r3
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a8e:	f04f 0100 	mov.w	r1, #0
 8002a92:	ea02 0400 	and.w	r4, r2, r0
 8002a96:	ea03 0501 	and.w	r5, r3, r1
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	014b      	lsls	r3, r1, #5
 8002aa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002aac:	0142      	lsls	r2, r0, #5
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	1b00      	subs	r0, r0, r4
 8002ab4:	eb61 0105 	sbc.w	r1, r1, r5
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	018b      	lsls	r3, r1, #6
 8002ac2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ac6:	0182      	lsls	r2, r0, #6
 8002ac8:	1a12      	subs	r2, r2, r0
 8002aca:	eb63 0301 	sbc.w	r3, r3, r1
 8002ace:	f04f 0000 	mov.w	r0, #0
 8002ad2:	f04f 0100 	mov.w	r1, #0
 8002ad6:	00d9      	lsls	r1, r3, #3
 8002ad8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002adc:	00d0      	lsls	r0, r2, #3
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	1912      	adds	r2, r2, r4
 8002ae4:	eb45 0303 	adc.w	r3, r5, r3
 8002ae8:	f04f 0000 	mov.w	r0, #0
 8002aec:	f04f 0100 	mov.w	r1, #0
 8002af0:	0299      	lsls	r1, r3, #10
 8002af2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002af6:	0290      	lsls	r0, r2, #10
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	f7fd fbb2 	bl	8000270 <__aeabi_uldivmod>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4613      	mov	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	60bb      	str	r3, [r7, #8]
      break;
 8002b2e:	e002      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b32:	60bb      	str	r3, [r7, #8]
      break;
 8002b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b36:	68bb      	ldr	r3, [r7, #8]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b40:	40023800 	.word	0x40023800
 8002b44:	00f42400 	.word	0x00f42400
 8002b48:	017d7840 	.word	0x017d7840

08002b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000000 	.word	0x20000000

08002b64 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002b6a:	4b8d      	ldr	r3, [pc, #564]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002b6c:	22c0      	movs	r2, #192	; 0xc0
 8002b6e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002b70:	4b8b      	ldr	r3, [pc, #556]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002b72:	22a8      	movs	r2, #168	; 0xa8
 8002b74:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8002b76:	4b8a      	ldr	r3, [pc, #552]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8002b7c:	4b88      	ldr	r3, [pc, #544]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002b7e:	226f      	movs	r2, #111	; 0x6f
 8002b80:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002b82:	4b88      	ldr	r3, [pc, #544]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002b84:	22ff      	movs	r2, #255	; 0xff
 8002b86:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002b88:	4b86      	ldr	r3, [pc, #536]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002b8a:	22ff      	movs	r2, #255	; 0xff
 8002b8c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002b8e:	4b85      	ldr	r3, [pc, #532]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002b90:	22ff      	movs	r2, #255	; 0xff
 8002b92:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002b94:	4b83      	ldr	r3, [pc, #524]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002b9a:	4b83      	ldr	r3, [pc, #524]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002b9c:	22c0      	movs	r2, #192	; 0xc0
 8002b9e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002ba0:	4b81      	ldr	r3, [pc, #516]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002ba2:	22a8      	movs	r2, #168	; 0xa8
 8002ba4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8002ba6:	4b80      	ldr	r3, [pc, #512]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002bac:	4b7e      	ldr	r3, [pc, #504]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002bb2:	f000 fcab 	bl	800350c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002bb6:	4b7a      	ldr	r3, [pc, #488]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	061a      	lsls	r2, r3, #24
 8002bbc:	4b78      	ldr	r3, [pc, #480]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	041b      	lsls	r3, r3, #16
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	4b76      	ldr	r3, [pc, #472]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002bc6:	789b      	ldrb	r3, [r3, #2]
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	4a74      	ldr	r2, [pc, #464]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002bce:	78d2      	ldrb	r2, [r2, #3]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	061a      	lsls	r2, r3, #24
 8002bd4:	4b72      	ldr	r3, [pc, #456]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	0619      	lsls	r1, r3, #24
 8002bda:	4b71      	ldr	r3, [pc, #452]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002bdc:	785b      	ldrb	r3, [r3, #1]
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	4319      	orrs	r1, r3
 8002be2:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002be4:	789b      	ldrb	r3, [r3, #2]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	430b      	orrs	r3, r1
 8002bea:	496d      	ldr	r1, [pc, #436]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002bec:	78c9      	ldrb	r1, [r1, #3]
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	4b69      	ldr	r3, [pc, #420]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	0619      	lsls	r1, r3, #24
 8002bfe:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002c00:	785b      	ldrb	r3, [r3, #1]
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	4319      	orrs	r1, r3
 8002c06:	4b66      	ldr	r3, [pc, #408]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002c08:	789b      	ldrb	r3, [r3, #2]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	4964      	ldr	r1, [pc, #400]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002c10:	78c9      	ldrb	r1, [r1, #3]
 8002c12:	430b      	orrs	r3, r1
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	4b60      	ldr	r3, [pc, #384]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	0619      	lsls	r1, r3, #24
 8002c22:	4b5f      	ldr	r3, [pc, #380]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	4319      	orrs	r1, r3
 8002c2a:	4b5d      	ldr	r3, [pc, #372]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002c2c:	789b      	ldrb	r3, [r3, #2]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	430b      	orrs	r3, r1
 8002c32:	495b      	ldr	r1, [pc, #364]	; (8002da0 <MX_LWIP_Init+0x23c>)
 8002c34:	78c9      	ldrb	r1, [r1, #3]
 8002c36:	430b      	orrs	r3, r1
 8002c38:	0e1b      	lsrs	r3, r3, #24
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	4a5b      	ldr	r2, [pc, #364]	; (8002dac <MX_LWIP_Init+0x248>)
 8002c3e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002c40:	4b58      	ldr	r3, [pc, #352]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	061a      	lsls	r2, r3, #24
 8002c46:	4b57      	ldr	r3, [pc, #348]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002c48:	785b      	ldrb	r3, [r3, #1]
 8002c4a:	041b      	lsls	r3, r3, #16
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	4b55      	ldr	r3, [pc, #340]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002c50:	789b      	ldrb	r3, [r3, #2]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	4313      	orrs	r3, r2
 8002c56:	4a53      	ldr	r2, [pc, #332]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002c58:	78d2      	ldrb	r2, [r2, #3]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	061a      	lsls	r2, r3, #24
 8002c5e:	4b51      	ldr	r3, [pc, #324]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	0619      	lsls	r1, r3, #24
 8002c64:	4b4f      	ldr	r3, [pc, #316]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002c66:	785b      	ldrb	r3, [r3, #1]
 8002c68:	041b      	lsls	r3, r3, #16
 8002c6a:	4319      	orrs	r1, r3
 8002c6c:	4b4d      	ldr	r3, [pc, #308]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002c6e:	789b      	ldrb	r3, [r3, #2]
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	430b      	orrs	r3, r1
 8002c74:	494b      	ldr	r1, [pc, #300]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002c76:	78c9      	ldrb	r1, [r1, #3]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c80:	431a      	orrs	r2, r3
 8002c82:	4b48      	ldr	r3, [pc, #288]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	0619      	lsls	r1, r3, #24
 8002c88:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	4319      	orrs	r1, r3
 8002c90:	4b44      	ldr	r3, [pc, #272]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002c92:	789b      	ldrb	r3, [r3, #2]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	430b      	orrs	r3, r1
 8002c98:	4942      	ldr	r1, [pc, #264]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002c9a:	78c9      	ldrb	r1, [r1, #3]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	4b3f      	ldr	r3, [pc, #252]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	0619      	lsls	r1, r3, #24
 8002cac:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002cae:	785b      	ldrb	r3, [r3, #1]
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	4319      	orrs	r1, r3
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002cb6:	789b      	ldrb	r3, [r3, #2]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	4939      	ldr	r1, [pc, #228]	; (8002da4 <MX_LWIP_Init+0x240>)
 8002cbe:	78c9      	ldrb	r1, [r1, #3]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	0e1b      	lsrs	r3, r3, #24
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	4a3a      	ldr	r2, [pc, #232]	; (8002db0 <MX_LWIP_Init+0x24c>)
 8002cc8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002cca:	4b37      	ldr	r3, [pc, #220]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	061a      	lsls	r2, r3, #24
 8002cd0:	4b35      	ldr	r3, [pc, #212]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002cd2:	785b      	ldrb	r3, [r3, #1]
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	4b33      	ldr	r3, [pc, #204]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002cda:	789b      	ldrb	r3, [r3, #2]
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	4a31      	ldr	r2, [pc, #196]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002ce2:	78d2      	ldrb	r2, [r2, #3]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	061a      	lsls	r2, r3, #24
 8002ce8:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	0619      	lsls	r1, r3, #24
 8002cee:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	041b      	lsls	r3, r3, #16
 8002cf4:	4319      	orrs	r1, r3
 8002cf6:	4b2c      	ldr	r3, [pc, #176]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002cf8:	789b      	ldrb	r3, [r3, #2]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	492a      	ldr	r1, [pc, #168]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002d00:	78c9      	ldrb	r1, [r1, #3]
 8002d02:	430b      	orrs	r3, r1
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	0619      	lsls	r1, r3, #24
 8002d12:	4b25      	ldr	r3, [pc, #148]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002d14:	785b      	ldrb	r3, [r3, #1]
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	4319      	orrs	r1, r3
 8002d1a:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002d1c:	789b      	ldrb	r3, [r3, #2]
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	430b      	orrs	r3, r1
 8002d22:	4921      	ldr	r1, [pc, #132]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002d24:	78c9      	ldrb	r1, [r1, #3]
 8002d26:	430b      	orrs	r3, r1
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	0619      	lsls	r1, r3, #24
 8002d36:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002d38:	785b      	ldrb	r3, [r3, #1]
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	4319      	orrs	r1, r3
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002d40:	789b      	ldrb	r3, [r3, #2]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	430b      	orrs	r3, r1
 8002d46:	4918      	ldr	r1, [pc, #96]	; (8002da8 <MX_LWIP_Init+0x244>)
 8002d48:	78c9      	ldrb	r1, [r1, #3]
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	0e1b      	lsrs	r3, r3, #24
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <MX_LWIP_Init+0x250>)
 8002d52:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002d54:	4b18      	ldr	r3, [pc, #96]	; (8002db8 <MX_LWIP_Init+0x254>)
 8002d56:	9302      	str	r3, [sp, #8]
 8002d58:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <MX_LWIP_Init+0x258>)
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <MX_LWIP_Init+0x250>)
 8002d62:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <MX_LWIP_Init+0x24c>)
 8002d64:	4911      	ldr	r1, [pc, #68]	; (8002dac <MX_LWIP_Init+0x248>)
 8002d66:	4816      	ldr	r0, [pc, #88]	; (8002dc0 <MX_LWIP_Init+0x25c>)
 8002d68:	f001 f876 	bl	8003e58 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002d6c:	4814      	ldr	r0, [pc, #80]	; (8002dc0 <MX_LWIP_Init+0x25c>)
 8002d6e:	f001 fa25 	bl	80041bc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002d72:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <MX_LWIP_Init+0x25c>)
 8002d74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d78:	089b      	lsrs	r3, r3, #2
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002d84:	480e      	ldr	r0, [pc, #56]	; (8002dc0 <MX_LWIP_Init+0x25c>)
 8002d86:	f001 fa29 	bl	80041dc <netif_set_up>
 8002d8a:	e002      	b.n	8002d92 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002d8c:	480c      	ldr	r0, [pc, #48]	; (8002dc0 <MX_LWIP_Init+0x25c>)
 8002d8e:	f001 fa91 	bl	80042b4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8002d92:	490c      	ldr	r1, [pc, #48]	; (8002dc4 <MX_LWIP_Init+0x260>)
 8002d94:	480a      	ldr	r0, [pc, #40]	; (8002dc0 <MX_LWIP_Init+0x25c>)
 8002d96:	f001 fabf 	bl	8004318 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002d9a:	bf00      	nop
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20000258 	.word	0x20000258
 8002da4:	20000254 	.word	0x20000254
 8002da8:	20000214 	.word	0x20000214
 8002dac:	20000250 	.word	0x20000250
 8002db0:	2000025c 	.word	0x2000025c
 8002db4:	20000260 	.word	0x20000260
 8002db8:	0800cbbd 	.word	0x0800cbbd
 8002dbc:	08003339 	.word	0x08003339
 8002dc0:	20000218 	.word	0x20000218
 8002dc4:	080033a5 	.word	0x080033a5

08002dc8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8002dcc:	4803      	ldr	r0, [pc, #12]	; (8002ddc <MX_LWIP_Process+0x14>)
 8002dce:	f000 fa93 	bl	80032f8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8002dd2:	f007 fb0f 	bl	800a3f4 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000218 	.word	0x20000218

08002de0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08e      	sub	sp, #56	; 0x38
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a46      	ldr	r2, [pc, #280]	; (8002f18 <HAL_ETH_MspInit+0x138>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	f040 8085 	bne.w	8002f0e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	4b44      	ldr	r3, [pc, #272]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	4a43      	ldr	r2, [pc, #268]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e12:	6313      	str	r3, [r2, #48]	; 0x30
 8002e14:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	623b      	str	r3, [r7, #32]
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	4b3d      	ldr	r3, [pc, #244]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	4a3c      	ldr	r2, [pc, #240]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e30:	4b3a      	ldr	r3, [pc, #232]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	4a35      	ldr	r2, [pc, #212]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4c:	4b33      	ldr	r3, [pc, #204]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	4a2e      	ldr	r2, [pc, #184]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e62:	f043 0304 	orr.w	r3, r3, #4
 8002e66:	6313      	str	r3, [r2, #48]	; 0x30
 8002e68:	4b2c      	ldr	r3, [pc, #176]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	4a27      	ldr	r2, [pc, #156]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6313      	str	r3, [r2, #48]	; 0x30
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	4a20      	ldr	r2, [pc, #128]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002e9a:	f043 0302 	orr.w	r3, r3, #2
 8002e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <HAL_ETH_MspInit+0x13c>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002eac:	2332      	movs	r3, #50	; 0x32
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ebc:	230b      	movs	r3, #11
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4816      	ldr	r0, [pc, #88]	; (8002f20 <HAL_ETH_MspInit+0x140>)
 8002ec8:	f7ff f828 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002ecc:	2386      	movs	r3, #134	; 0x86
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002edc:	230b      	movs	r3, #11
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	480f      	ldr	r0, [pc, #60]	; (8002f24 <HAL_ETH_MspInit+0x144>)
 8002ee8:	f7ff f818 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002eec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002efe:	230b      	movs	r3, #11
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f06:	4619      	mov	r1, r3
 8002f08:	4807      	ldr	r0, [pc, #28]	; (8002f28 <HAL_ETH_MspInit+0x148>)
 8002f0a:	f7ff f807 	bl	8001f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002f0e:	bf00      	nop
 8002f10:	3738      	adds	r7, #56	; 0x38
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40028000 	.word	0x40028000
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40020800 	.word	0x40020800
 8002f24:	40020000 	.word	0x40020000
 8002f28:	40020400 	.word	0x40020400

08002f2c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002f34:	4b41      	ldr	r3, [pc, #260]	; (800303c <low_level_init+0x110>)
 8002f36:	4a42      	ldr	r2, [pc, #264]	; (8003040 <low_level_init+0x114>)
 8002f38:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002f3a:	4b40      	ldr	r3, [pc, #256]	; (800303c <low_level_init+0x110>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8002f40:	4b3e      	ldr	r3, [pc, #248]	; (800303c <low_level_init+0x110>)
 8002f42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f46:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8002f48:	4b3c      	ldr	r3, [pc, #240]	; (800303c <low_level_init+0x110>)
 8002f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f4e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8720A_PHY_ADDRESS;
 8002f50:	4b3a      	ldr	r3, [pc, #232]	; (800303c <low_level_init+0x110>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8002f56:	2300      	movs	r3, #0
 8002f58:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8002f5e:	23e1      	movs	r3, #225	; 0xe1
 8002f60:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8002f62:	2300      	movs	r3, #0
 8002f64:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8002f66:	2300      	movs	r3, #0
 8002f68:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8002f6e:	4a33      	ldr	r2, [pc, #204]	; (800303c <low_level_init+0x110>)
 8002f70:	f107 0308 	add.w	r3, r7, #8
 8002f74:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002f76:	4b31      	ldr	r3, [pc, #196]	; (800303c <low_level_init+0x110>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002f7c:	4b2f      	ldr	r3, [pc, #188]	; (800303c <low_level_init+0x110>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002f82:	4b2e      	ldr	r3, [pc, #184]	; (800303c <low_level_init+0x110>)
 8002f84:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f88:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002f8a:	482c      	ldr	r0, [pc, #176]	; (800303c <low_level_init+0x110>)
 8002f8c:	f7fd fea0 	bl	8000cd0 <HAL_ETH_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	73fb      	strb	r3, [r7, #15]

  if (hal_eth_init_status == HAL_OK)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d108      	bne.n	8002fac <low_level_init+0x80>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8002fac:	2304      	movs	r3, #4
 8002fae:	4a25      	ldr	r2, [pc, #148]	; (8003044 <low_level_init+0x118>)
 8002fb0:	4925      	ldr	r1, [pc, #148]	; (8003048 <low_level_init+0x11c>)
 8002fb2:	4822      	ldr	r0, [pc, #136]	; (800303c <low_level_init+0x110>)
 8002fb4:	f7fe f828 	bl	8001008 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8002fb8:	2304      	movs	r3, #4
 8002fba:	4a24      	ldr	r2, [pc, #144]	; (800304c <low_level_init+0x120>)
 8002fbc:	4924      	ldr	r1, [pc, #144]	; (8003050 <low_level_init+0x124>)
 8002fbe:	481f      	ldr	r0, [pc, #124]	; (800303c <low_level_init+0x110>)
 8002fc0:	f7fe f88b 	bl	80010da <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2206      	movs	r2, #6
 8002fc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <low_level_init+0x110>)
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <low_level_init+0x110>)
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	785a      	ldrb	r2, [r3, #1]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8002fe4:	4b15      	ldr	r3, [pc, #84]	; (800303c <low_level_init+0x110>)
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	789a      	ldrb	r2, [r3, #2]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <low_level_init+0x110>)
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	78da      	ldrb	r2, [r3, #3]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <low_level_init+0x110>)
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	791a      	ldrb	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <low_level_init+0x110>)
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	795a      	ldrb	r2, [r3, #5]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003022:	f043 030a 	orr.w	r3, r3, #10
 8003026:	b2da      	uxtb	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800302e:	4803      	ldr	r0, [pc, #12]	; (800303c <low_level_init+0x110>)
 8003030:	f7fe fafc 	bl	800162c <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20001b34 	.word	0x20001b34
 8003040:	40028000 	.word	0x40028000
 8003044:	20001b7c 	.word	0x20001b7c
 8003048:	20000264 	.word	0x20000264
 800304c:	200002e4 	.word	0x200002e4
 8003050:	20001ab4 	.word	0x20001ab4

08003054 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800305e:	4b4b      	ldr	r3, [pc, #300]	; (800318c <low_level_output+0x138>)
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003076:	4b45      	ldr	r3, [pc, #276]	; (800318c <low_level_output+0x138>)
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	623b      	str	r3, [r7, #32]
 8003084:	e05a      	b.n	800313c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	da03      	bge.n	8003096 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800308e:	23f8      	movs	r3, #248	; 0xf8
 8003090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003094:	e05c      	b.n	8003150 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	895b      	ldrh	r3, [r3, #10]
 800309a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80030a0:	e02f      	b.n	8003102 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	18d0      	adds	r0, r2, r3
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	18d1      	adds	r1, r2, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80030b6:	3304      	adds	r3, #4
 80030b8:	461a      	mov	r2, r3
 80030ba:	f009 fe87 	bl	800cdcc <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	da03      	bge.n	80030d4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80030cc:	23f8      	movs	r3, #248	; 0xf8
 80030ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80030d2:	e03d      	b.n	8003150 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80030e4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80030f0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80030fc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4413      	add	r3, r2
 8003108:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800310c:	4293      	cmp	r3, r2
 800310e:	d8c8      	bhi.n	80030a2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	18d0      	adds	r0, r2, r3
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4413      	add	r3, r2
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4619      	mov	r1, r3
 8003122:	f009 fe53 	bl	800cdcc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	623b      	str	r3, [r7, #32]
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1a1      	bne.n	8003086 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003142:	6979      	ldr	r1, [r7, #20]
 8003144:	4811      	ldr	r0, [pc, #68]	; (800318c <low_level_output+0x138>)
 8003146:	f7fe f835 	bl	80011b4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003150:	4b0e      	ldr	r3, [pc, #56]	; (800318c <low_level_output+0x138>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003158:	3314      	adds	r3, #20
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <low_level_output+0x138>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800316c:	3314      	adds	r3, #20
 800316e:	2220      	movs	r2, #32
 8003170:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <low_level_output+0x138>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800317a:	3304      	adds	r3, #4
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003180:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003184:	4618      	mov	r0, r3
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20001b34 	.word	0x20001b34

08003190 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08c      	sub	sp, #48	; 0x30
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003198:	2300      	movs	r3, #0
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800319c:	2300      	movs	r3, #0
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80031b4:	484f      	ldr	r0, [pc, #316]	; (80032f4 <low_level_input+0x164>)
 80031b6:	f7fe f8e7 	bl	8001388 <HAL_ETH_GetReceivedFrame>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <low_level_input+0x34>

    return NULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e092      	b.n	80032ea <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80031c4:	4b4b      	ldr	r3, [pc, #300]	; (80032f4 <low_level_input+0x164>)
 80031c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80031ca:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <low_level_input+0x164>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80031d0:	89fb      	ldrh	r3, [r7, #14]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80031d6:	89fb      	ldrh	r3, [r7, #14]
 80031d8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80031dc:	4619      	mov	r1, r3
 80031de:	2000      	movs	r0, #0
 80031e0:	f001 f936 	bl	8004450 <pbuf_alloc>
 80031e4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d04b      	beq.n	8003284 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80031ec:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <low_level_input+0x164>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80031f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031fa:	e040      	b.n	800327e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80031fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fe:	895b      	ldrh	r3, [r3, #10]
 8003200:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003206:	e021      	b.n	800324c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	18d0      	adds	r0, r2, r3
 8003210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	18d1      	adds	r1, r2, r3
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800321c:	3304      	adds	r3, #4
 800321e:	461a      	mov	r2, r3
 8003220:	f009 fdd4 	bl	800cdcc <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	4413      	add	r3, r2
 8003236:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800323a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003246:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	4413      	add	r3, r2
 8003252:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003256:	4293      	cmp	r3, r2
 8003258:	d8d6      	bhi.n	8003208 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	18d0      	adds	r0, r2, r3
 8003262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	4413      	add	r3, r2
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4619      	mov	r1, r3
 800326c:	f009 fdae 	bl	800cdcc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	4413      	add	r3, r2
 8003276:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1bb      	bne.n	80031fc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <low_level_input+0x164>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	e00b      	b.n	80032a8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	3301      	adds	r3, #1
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <low_level_input+0x164>)
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d3ee      	bcc.n	8003290 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <low_level_input+0x164>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80032b8:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <low_level_input+0x164>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c0:	3314      	adds	r3, #20
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <low_level_input+0x164>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d4:	3314      	adds	r3, #20
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <low_level_input+0x164>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032e2:	3308      	adds	r3, #8
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
  }
  return p;
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3730      	adds	r7, #48	; 0x30
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20001b34 	.word	0x20001b34

080032f8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff ff45 	bl	8003190 <low_level_input>
 8003306:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d010      	beq.n	8003330 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	4798      	blx	r3
 8003318:	4603      	mov	r3, r0
 800331a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800331c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d006      	beq.n	8003332 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f001 fb77 	bl	8004a18 <pbuf_free>
    p = NULL;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	e000      	b.n	8003332 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003330:	bf00      	nop
  }
}
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <ethernetif_init+0x1c>
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <ethernetif_init+0x48>)
 8003348:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800334c:	490d      	ldr	r1, [pc, #52]	; (8003384 <ethernetif_init+0x4c>)
 800334e:	480e      	ldr	r0, [pc, #56]	; (8003388 <ethernetif_init+0x50>)
 8003350:	f009 fd52 	bl	800cdf8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2273      	movs	r2, #115	; 0x73
 8003358:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2274      	movs	r2, #116	; 0x74
 8003360:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a09      	ldr	r2, [pc, #36]	; (800338c <ethernetif_init+0x54>)
 8003368:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a08      	ldr	r2, [pc, #32]	; (8003390 <ethernetif_init+0x58>)
 800336e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff fddb 	bl	8002f2c <low_level_init>

  return ERR_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	0800de44 	.word	0x0800de44
 8003384:	0800de60 	.word	0x0800de60
 8003388:	0800de70 	.word	0x0800de70
 800338c:	0800b085 	.word	0x0800b085
 8003390:	08003055 	.word	0x08003055

08003394 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003398:	f7fd fb84 	bl	8000aa4 <HAL_GetTick>
 800339c:	4603      	mov	r3, r0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d05d      	beq.n	8003482 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80033c6:	4b34      	ldr	r3, [pc, #208]	; (8003498 <ethernetif_update_config+0xf4>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d03f      	beq.n	800344e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80033ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033d2:	2100      	movs	r1, #0
 80033d4:	4830      	ldr	r0, [pc, #192]	; (8003498 <ethernetif_update_config+0xf4>)
 80033d6:	f7fe f8c3 	bl	8001560 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80033da:	f7fd fb63 	bl	8000aa4 <HAL_GetTick>
 80033de:	4603      	mov	r3, r0
 80033e0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80033e2:	f107 0308 	add.w	r3, r7, #8
 80033e6:	461a      	mov	r2, r3
 80033e8:	2101      	movs	r1, #1
 80033ea:	482b      	ldr	r0, [pc, #172]	; (8003498 <ethernetif_update_config+0xf4>)
 80033ec:	f7fe f850 	bl	8001490 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80033f0:	f7fd fb58 	bl	8000aa4 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033fe:	d828      	bhi.n	8003452 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0eb      	beq.n	80033e2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800340a:	f107 0308 	add.w	r3, r7, #8
 800340e:	461a      	mov	r2, r3
 8003410:	211f      	movs	r1, #31
 8003412:	4821      	ldr	r0, [pc, #132]	; (8003498 <ethernetif_update_config+0xf4>)
 8003414:	f7fe f83c 	bl	8001490 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003422:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <ethernetif_update_config+0xf4>)
 8003424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	e002      	b.n	8003432 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <ethernetif_update_config+0xf4>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800343c:	4b16      	ldr	r3, [pc, #88]	; (8003498 <ethernetif_update_config+0xf4>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	e016      	b.n	8003472 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <ethernetif_update_config+0xf4>)
 8003446:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	e011      	b.n	8003472 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800344e:	bf00      	nop
 8003450:	e000      	b.n	8003454 <ethernetif_update_config+0xb0>
          goto error;
 8003452:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003454:	4b10      	ldr	r3, [pc, #64]	; (8003498 <ethernetif_update_config+0xf4>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	08db      	lsrs	r3, r3, #3
 800345a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <ethernetif_update_config+0xf4>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003464:	4313      	orrs	r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	2100      	movs	r1, #0
 800346c:	480a      	ldr	r0, [pc, #40]	; (8003498 <ethernetif_update_config+0xf4>)
 800346e:	f7fe f877 	bl	8001560 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003472:	2100      	movs	r1, #0
 8003474:	4808      	ldr	r0, [pc, #32]	; (8003498 <ethernetif_update_config+0xf4>)
 8003476:	f7fe f937 	bl	80016e8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800347a:	4807      	ldr	r0, [pc, #28]	; (8003498 <ethernetif_update_config+0xf4>)
 800347c:	f7fe f8d6 	bl	800162c <HAL_ETH_Start>
 8003480:	e002      	b.n	8003488 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003482:	4805      	ldr	r0, [pc, #20]	; (8003498 <ethernetif_update_config+0xf4>)
 8003484:	f7fe f901 	bl	800168a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f807 	bl	800349c <ethernetif_notify_conn_changed>
}
 800348e:	bf00      	nop
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20001b34 	.word	0x20001b34

0800349c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	b21a      	sxth	r2, r3
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	b21b      	sxth	r3, r3
 80034c8:	4313      	orrs	r3, r2
 80034ca:	b21b      	sxth	r3, r3
 80034cc:	b29b      	uxth	r3, r3
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	061a      	lsls	r2, r3, #24
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	0e1b      	lsrs	r3, r3, #24
 80034fe:	4313      	orrs	r3, r2
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003516:	f000 f8d5 	bl	80036c4 <mem_init>
  memp_init();
 800351a:	f000 fbdb 	bl	8003cd4 <memp_init>
  pbuf_init();
  netif_init();
 800351e:	f000 fc93 	bl	8003e48 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003522:	f006 ffa9 	bl	800a478 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003526:	f001 fd05 	bl	8004f34 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800352a:	f006 ff1b 	bl	800a364 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <ptr_to_mem+0x20>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	4413      	add	r3, r2
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	20000098 	.word	0x20000098

0800355c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <mem_to_ptr+0x20>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	b29b      	uxth	r3, r3
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000098 	.word	0x20000098

08003580 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003588:	4b45      	ldr	r3, [pc, #276]	; (80036a0 <plug_holes+0x120>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	d206      	bcs.n	80035a0 <plug_holes+0x20>
 8003592:	4b44      	ldr	r3, [pc, #272]	; (80036a4 <plug_holes+0x124>)
 8003594:	f240 12df 	movw	r2, #479	; 0x1df
 8003598:	4943      	ldr	r1, [pc, #268]	; (80036a8 <plug_holes+0x128>)
 800359a:	4844      	ldr	r0, [pc, #272]	; (80036ac <plug_holes+0x12c>)
 800359c:	f009 fc2c 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80035a0:	4b43      	ldr	r3, [pc, #268]	; (80036b0 <plug_holes+0x130>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d306      	bcc.n	80035b8 <plug_holes+0x38>
 80035aa:	4b3e      	ldr	r3, [pc, #248]	; (80036a4 <plug_holes+0x124>)
 80035ac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80035b0:	4940      	ldr	r1, [pc, #256]	; (80036b4 <plug_holes+0x134>)
 80035b2:	483e      	ldr	r0, [pc, #248]	; (80036ac <plug_holes+0x12c>)
 80035b4:	f009 fc20 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	791b      	ldrb	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d006      	beq.n	80035ce <plug_holes+0x4e>
 80035c0:	4b38      	ldr	r3, [pc, #224]	; (80036a4 <plug_holes+0x124>)
 80035c2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80035c6:	493c      	ldr	r1, [pc, #240]	; (80036b8 <plug_holes+0x138>)
 80035c8:	4838      	ldr	r0, [pc, #224]	; (80036ac <plug_holes+0x12c>)
 80035ca:	f009 fc15 	bl	800cdf8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80035d6:	d906      	bls.n	80035e6 <plug_holes+0x66>
 80035d8:	4b32      	ldr	r3, [pc, #200]	; (80036a4 <plug_holes+0x124>)
 80035da:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80035de:	4937      	ldr	r1, [pc, #220]	; (80036bc <plug_holes+0x13c>)
 80035e0:	4832      	ldr	r0, [pc, #200]	; (80036ac <plug_holes+0x12c>)
 80035e2:	f009 fc09 	bl	800cdf8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff ffa4 	bl	8003538 <ptr_to_mem>
 80035f0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d024      	beq.n	8003644 <plug_holes+0xc4>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	791b      	ldrb	r3, [r3, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d120      	bne.n	8003644 <plug_holes+0xc4>
 8003602:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <plug_holes+0x130>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	429a      	cmp	r2, r3
 800360a:	d01b      	beq.n	8003644 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800360c:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <plug_holes+0x140>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	429a      	cmp	r2, r3
 8003614:	d102      	bne.n	800361c <plug_holes+0x9c>
      lfree = mem;
 8003616:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <plug_holes+0x140>)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	881a      	ldrh	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800362c:	d00a      	beq.n	8003644 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ff80 	bl	8003538 <ptr_to_mem>
 8003638:	4604      	mov	r4, r0
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff ff8e 	bl	800355c <mem_to_ptr>
 8003640:	4603      	mov	r3, r0
 8003642:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	885b      	ldrh	r3, [r3, #2]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ff75 	bl	8003538 <ptr_to_mem>
 800364e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	429a      	cmp	r2, r3
 8003656:	d01f      	beq.n	8003698 <plug_holes+0x118>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	791b      	ldrb	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d11b      	bne.n	8003698 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <plug_holes+0x140>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	429a      	cmp	r2, r3
 8003668:	d102      	bne.n	8003670 <plug_holes+0xf0>
      lfree = pmem;
 800366a:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <plug_holes+0x140>)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	881a      	ldrh	r2, [r3, #0]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003680:	d00a      	beq.n	8003698 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff ff56 	bl	8003538 <ptr_to_mem>
 800368c:	4604      	mov	r4, r0
 800368e:	68b8      	ldr	r0, [r7, #8]
 8003690:	f7ff ff64 	bl	800355c <mem_to_ptr>
 8003694:	4603      	mov	r3, r0
 8003696:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	bd90      	pop	{r4, r7, pc}
 80036a0:	20000098 	.word	0x20000098
 80036a4:	0800de98 	.word	0x0800de98
 80036a8:	0800dec8 	.word	0x0800dec8
 80036ac:	0800dee0 	.word	0x0800dee0
 80036b0:	2000009c 	.word	0x2000009c
 80036b4:	0800df08 	.word	0x0800df08
 80036b8:	0800df24 	.word	0x0800df24
 80036bc:	0800df40 	.word	0x0800df40
 80036c0:	200000a0 	.word	0x200000a0

080036c4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80036ca:	4b18      	ldr	r3, [pc, #96]	; (800372c <mem_init+0x68>)
 80036cc:	3303      	adds	r3, #3
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b16      	ldr	r3, [pc, #88]	; (8003730 <mem_init+0x6c>)
 80036d6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80036d8:	4b15      	ldr	r3, [pc, #84]	; (8003730 <mem_init+0x6c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80036e4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80036f2:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80036f6:	f7ff ff1f 	bl	8003538 <ptr_to_mem>
 80036fa:	4603      	mov	r3, r0
 80036fc:	4a0d      	ldr	r2, [pc, #52]	; (8003734 <mem_init+0x70>)
 80036fe:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <mem_init+0x70>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2201      	movs	r2, #1
 8003706:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003708:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <mem_init+0x70>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003710:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <mem_init+0x70>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800371a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <mem_init+0x6c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a05      	ldr	r2, [pc, #20]	; (8003738 <mem_init+0x74>)
 8003722:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20003364 	.word	0x20003364
 8003730:	20000098 	.word	0x20000098
 8003734:	2000009c 	.word	0x2000009c
 8003738:	200000a0 	.word	0x200000a0

0800373c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ff09 	bl	800355c <mem_to_ptr>
 800374a:	4603      	mov	r3, r0
 800374c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fef0 	bl	8003538 <ptr_to_mem>
 8003758:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	885b      	ldrh	r3, [r3, #2]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff feea 	bl	8003538 <ptr_to_mem>
 8003764:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800376e:	d818      	bhi.n	80037a2 <mem_link_valid+0x66>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	885b      	ldrh	r3, [r3, #2]
 8003774:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003778:	d813      	bhi.n	80037a2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800377e:	8afa      	ldrh	r2, [r7, #22]
 8003780:	429a      	cmp	r2, r3
 8003782:	d004      	beq.n	800378e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	8afa      	ldrh	r2, [r7, #22]
 800378a:	429a      	cmp	r2, r3
 800378c:	d109      	bne.n	80037a2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800378e:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <mem_link_valid+0x74>)
 8003790:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	429a      	cmp	r2, r3
 8003796:	d006      	beq.n	80037a6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	885b      	ldrh	r3, [r3, #2]
 800379c:	8afa      	ldrh	r2, [r7, #22]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d001      	beq.n	80037a6 <mem_link_valid+0x6a>
    return 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e000      	b.n	80037a8 <mem_link_valid+0x6c>
  }
  return 1;
 80037a6:	2301      	movs	r3, #1
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	2000009c 	.word	0x2000009c

080037b4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d04c      	beq.n	800385c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80037cc:	4b25      	ldr	r3, [pc, #148]	; (8003864 <mem_free+0xb0>)
 80037ce:	f240 2273 	movw	r2, #627	; 0x273
 80037d2:	4925      	ldr	r1, [pc, #148]	; (8003868 <mem_free+0xb4>)
 80037d4:	4825      	ldr	r0, [pc, #148]	; (800386c <mem_free+0xb8>)
 80037d6:	f009 fb0f 	bl	800cdf8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80037da:	e040      	b.n	800385e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b08      	subs	r3, #8
 80037e0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80037e2:	4b23      	ldr	r3, [pc, #140]	; (8003870 <mem_free+0xbc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d306      	bcc.n	80037fa <mem_free+0x46>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f103 020c 	add.w	r2, r3, #12
 80037f2:	4b20      	ldr	r3, [pc, #128]	; (8003874 <mem_free+0xc0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d907      	bls.n	800380a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80037fa:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <mem_free+0xb0>)
 80037fc:	f240 227f 	movw	r2, #639	; 0x27f
 8003800:	491d      	ldr	r1, [pc, #116]	; (8003878 <mem_free+0xc4>)
 8003802:	481a      	ldr	r0, [pc, #104]	; (800386c <mem_free+0xb8>)
 8003804:	f009 faf8 	bl	800cdf8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003808:	e029      	b.n	800385e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	791b      	ldrb	r3, [r3, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d107      	bne.n	8003822 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003812:	4b14      	ldr	r3, [pc, #80]	; (8003864 <mem_free+0xb0>)
 8003814:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003818:	4918      	ldr	r1, [pc, #96]	; (800387c <mem_free+0xc8>)
 800381a:	4814      	ldr	r0, [pc, #80]	; (800386c <mem_free+0xb8>)
 800381c:	f009 faec 	bl	800cdf8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003820:	e01d      	b.n	800385e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f7ff ff8a 	bl	800373c <mem_link_valid>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800382e:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <mem_free+0xb0>)
 8003830:	f240 2295 	movw	r2, #661	; 0x295
 8003834:	4912      	ldr	r1, [pc, #72]	; (8003880 <mem_free+0xcc>)
 8003836:	480d      	ldr	r0, [pc, #52]	; (800386c <mem_free+0xb8>)
 8003838:	f009 fade 	bl	800cdf8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800383c:	e00f      	b.n	800385e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <mem_free+0xd0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	429a      	cmp	r2, r3
 800384c:	d202      	bcs.n	8003854 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800384e:	4a0d      	ldr	r2, [pc, #52]	; (8003884 <mem_free+0xd0>)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f7ff fe93 	bl	8003580 <plug_holes>
 800385a:	e000      	b.n	800385e <mem_free+0xaa>
    return;
 800385c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	0800de98 	.word	0x0800de98
 8003868:	0800df6c 	.word	0x0800df6c
 800386c:	0800dee0 	.word	0x0800dee0
 8003870:	20000098 	.word	0x20000098
 8003874:	2000009c 	.word	0x2000009c
 8003878:	0800df90 	.word	0x0800df90
 800387c:	0800dfac 	.word	0x0800dfac
 8003880:	0800dfd4 	.word	0x0800dfd4
 8003884:	200000a0 	.word	0x200000a0

08003888 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003894:	887b      	ldrh	r3, [r7, #2]
 8003896:	3303      	adds	r3, #3
 8003898:	b29b      	uxth	r3, r3
 800389a:	f023 0303 	bic.w	r3, r3, #3
 800389e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80038a0:	8bfb      	ldrh	r3, [r7, #30]
 80038a2:	2b0b      	cmp	r3, #11
 80038a4:	d801      	bhi.n	80038aa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80038a6:	230c      	movs	r3, #12
 80038a8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80038aa:	8bfb      	ldrh	r3, [r7, #30]
 80038ac:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80038b0:	d803      	bhi.n	80038ba <mem_trim+0x32>
 80038b2:	8bfa      	ldrh	r2, [r7, #30]
 80038b4:	887b      	ldrh	r3, [r7, #2]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d201      	bcs.n	80038be <mem_trim+0x36>
    return NULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e0cc      	b.n	8003a58 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80038be:	4b68      	ldr	r3, [pc, #416]	; (8003a60 <mem_trim+0x1d8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d304      	bcc.n	80038d2 <mem_trim+0x4a>
 80038c8:	4b66      	ldr	r3, [pc, #408]	; (8003a64 <mem_trim+0x1dc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d306      	bcc.n	80038e0 <mem_trim+0x58>
 80038d2:	4b65      	ldr	r3, [pc, #404]	; (8003a68 <mem_trim+0x1e0>)
 80038d4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80038d8:	4964      	ldr	r1, [pc, #400]	; (8003a6c <mem_trim+0x1e4>)
 80038da:	4865      	ldr	r0, [pc, #404]	; (8003a70 <mem_trim+0x1e8>)
 80038dc:	f009 fa8c 	bl	800cdf8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80038e0:	4b5f      	ldr	r3, [pc, #380]	; (8003a60 <mem_trim+0x1d8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d304      	bcc.n	80038f4 <mem_trim+0x6c>
 80038ea:	4b5e      	ldr	r3, [pc, #376]	; (8003a64 <mem_trim+0x1dc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d301      	bcc.n	80038f8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	e0af      	b.n	8003a58 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3b08      	subs	r3, #8
 80038fc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80038fe:	69b8      	ldr	r0, [r7, #24]
 8003900:	f7ff fe2c 	bl	800355c <mem_to_ptr>
 8003904:	4603      	mov	r3, r0
 8003906:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	881a      	ldrh	r2, [r3, #0]
 800390c:	8afb      	ldrh	r3, [r7, #22]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b08      	subs	r3, #8
 8003914:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003916:	8bfa      	ldrh	r2, [r7, #30]
 8003918:	8abb      	ldrh	r3, [r7, #20]
 800391a:	429a      	cmp	r2, r3
 800391c:	d906      	bls.n	800392c <mem_trim+0xa4>
 800391e:	4b52      	ldr	r3, [pc, #328]	; (8003a68 <mem_trim+0x1e0>)
 8003920:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003924:	4953      	ldr	r1, [pc, #332]	; (8003a74 <mem_trim+0x1ec>)
 8003926:	4852      	ldr	r0, [pc, #328]	; (8003a70 <mem_trim+0x1e8>)
 8003928:	f009 fa66 	bl	800cdf8 <iprintf>
  if (newsize > size) {
 800392c:	8bfa      	ldrh	r2, [r7, #30]
 800392e:	8abb      	ldrh	r3, [r7, #20]
 8003930:	429a      	cmp	r2, r3
 8003932:	d901      	bls.n	8003938 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003934:	2300      	movs	r3, #0
 8003936:	e08f      	b.n	8003a58 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003938:	8bfa      	ldrh	r2, [r7, #30]
 800393a:	8abb      	ldrh	r3, [r7, #20]
 800393c:	429a      	cmp	r2, r3
 800393e:	d101      	bne.n	8003944 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	e089      	b.n	8003a58 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fdf5 	bl	8003538 <ptr_to_mem>
 800394e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	791b      	ldrb	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d13f      	bne.n	80039d8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003960:	d106      	bne.n	8003970 <mem_trim+0xe8>
 8003962:	4b41      	ldr	r3, [pc, #260]	; (8003a68 <mem_trim+0x1e0>)
 8003964:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003968:	4943      	ldr	r1, [pc, #268]	; (8003a78 <mem_trim+0x1f0>)
 800396a:	4841      	ldr	r0, [pc, #260]	; (8003a70 <mem_trim+0x1e8>)
 800396c:	f009 fa44 	bl	800cdf8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003976:	8afa      	ldrh	r2, [r7, #22]
 8003978:	8bfb      	ldrh	r3, [r7, #30]
 800397a:	4413      	add	r3, r2
 800397c:	b29b      	uxth	r3, r3
 800397e:	3308      	adds	r3, #8
 8003980:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003982:	4b3e      	ldr	r3, [pc, #248]	; (8003a7c <mem_trim+0x1f4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	429a      	cmp	r2, r3
 800398a:	d106      	bne.n	800399a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800398c:	89fb      	ldrh	r3, [r7, #14]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fdd2 	bl	8003538 <ptr_to_mem>
 8003994:	4603      	mov	r3, r0
 8003996:	4a39      	ldr	r2, [pc, #228]	; (8003a7c <mem_trim+0x1f4>)
 8003998:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800399a:	89fb      	ldrh	r3, [r7, #14]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fdcb 	bl	8003538 <ptr_to_mem>
 80039a2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2200      	movs	r2, #0
 80039a8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	89ba      	ldrh	r2, [r7, #12]
 80039ae:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	8afa      	ldrh	r2, [r7, #22]
 80039b4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	89fa      	ldrh	r2, [r7, #14]
 80039ba:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80039c4:	d047      	beq.n	8003a56 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff fdb4 	bl	8003538 <ptr_to_mem>
 80039d0:	4602      	mov	r2, r0
 80039d2:	89fb      	ldrh	r3, [r7, #14]
 80039d4:	8053      	strh	r3, [r2, #2]
 80039d6:	e03e      	b.n	8003a56 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80039d8:	8bfb      	ldrh	r3, [r7, #30]
 80039da:	f103 0214 	add.w	r2, r3, #20
 80039de:	8abb      	ldrh	r3, [r7, #20]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d838      	bhi.n	8003a56 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80039e4:	8afa      	ldrh	r2, [r7, #22]
 80039e6:	8bfb      	ldrh	r3, [r7, #30]
 80039e8:	4413      	add	r3, r2
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3308      	adds	r3, #8
 80039ee:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80039f8:	d106      	bne.n	8003a08 <mem_trim+0x180>
 80039fa:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <mem_trim+0x1e0>)
 80039fc:	f240 3216 	movw	r2, #790	; 0x316
 8003a00:	491d      	ldr	r1, [pc, #116]	; (8003a78 <mem_trim+0x1f0>)
 8003a02:	481b      	ldr	r0, [pc, #108]	; (8003a70 <mem_trim+0x1e8>)
 8003a04:	f009 f9f8 	bl	800cdf8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003a08:	89fb      	ldrh	r3, [r7, #14]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fd94 	bl	8003538 <ptr_to_mem>
 8003a10:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003a12:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <mem_trim+0x1f4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d202      	bcs.n	8003a22 <mem_trim+0x19a>
      lfree = mem2;
 8003a1c:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <mem_trim+0x1f4>)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2200      	movs	r2, #0
 8003a26:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	881a      	ldrh	r2, [r3, #0]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	8afa      	ldrh	r2, [r7, #22]
 8003a34:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	89fa      	ldrh	r2, [r7, #14]
 8003a3a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003a44:	d007      	beq.n	8003a56 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff fd74 	bl	8003538 <ptr_to_mem>
 8003a50:	4602      	mov	r2, r0
 8003a52:	89fb      	ldrh	r3, [r7, #14]
 8003a54:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003a56:	687b      	ldr	r3, [r7, #4]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3720      	adds	r7, #32
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20000098 	.word	0x20000098
 8003a64:	2000009c 	.word	0x2000009c
 8003a68:	0800de98 	.word	0x0800de98
 8003a6c:	0800e008 	.word	0x0800e008
 8003a70:	0800dee0 	.word	0x0800dee0
 8003a74:	0800e020 	.word	0x0800e020
 8003a78:	0800e040 	.word	0x0800e040
 8003a7c:	200000a0 	.word	0x200000a0

08003a80 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <mem_malloc+0x14>
    return NULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e0d9      	b.n	8003c48 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	3303      	adds	r3, #3
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003aa0:	8bbb      	ldrh	r3, [r7, #28]
 8003aa2:	2b0b      	cmp	r3, #11
 8003aa4:	d801      	bhi.n	8003aaa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003aa6:	230c      	movs	r3, #12
 8003aa8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003aaa:	8bbb      	ldrh	r3, [r7, #28]
 8003aac:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003ab0:	d803      	bhi.n	8003aba <mem_malloc+0x3a>
 8003ab2:	8bba      	ldrh	r2, [r7, #28]
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d201      	bcs.n	8003abe <mem_malloc+0x3e>
    return NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e0c4      	b.n	8003c48 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003abe:	4b64      	ldr	r3, [pc, #400]	; (8003c50 <mem_malloc+0x1d0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff fd4a 	bl	800355c <mem_to_ptr>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	83fb      	strh	r3, [r7, #30]
 8003acc:	e0b4      	b.n	8003c38 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003ace:	8bfb      	ldrh	r3, [r7, #30]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff fd31 	bl	8003538 <ptr_to_mem>
 8003ad6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	791b      	ldrb	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f040 80a4 	bne.w	8003c2a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	8bfb      	ldrh	r3, [r7, #30]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f1a3 0208 	sub.w	r2, r3, #8
 8003af0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8003af2:	429a      	cmp	r2, r3
 8003af4:	f0c0 8099 	bcc.w	8003c2a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	8bfb      	ldrh	r3, [r7, #30]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f1a3 0208 	sub.w	r2, r3, #8
 8003b06:	8bbb      	ldrh	r3, [r7, #28]
 8003b08:	3314      	adds	r3, #20
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d333      	bcc.n	8003b76 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003b0e:	8bfa      	ldrh	r2, [r7, #30]
 8003b10:	8bbb      	ldrh	r3, [r7, #28]
 8003b12:	4413      	add	r3, r2
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3308      	adds	r3, #8
 8003b18:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003b1a:	8a7b      	ldrh	r3, [r7, #18]
 8003b1c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003b20:	d106      	bne.n	8003b30 <mem_malloc+0xb0>
 8003b22:	4b4c      	ldr	r3, [pc, #304]	; (8003c54 <mem_malloc+0x1d4>)
 8003b24:	f240 3287 	movw	r2, #903	; 0x387
 8003b28:	494b      	ldr	r1, [pc, #300]	; (8003c58 <mem_malloc+0x1d8>)
 8003b2a:	484c      	ldr	r0, [pc, #304]	; (8003c5c <mem_malloc+0x1dc>)
 8003b2c:	f009 f964 	bl	800cdf8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003b30:	8a7b      	ldrh	r3, [r7, #18]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff fd00 	bl	8003538 <ptr_to_mem>
 8003b38:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	881a      	ldrh	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8bfa      	ldrh	r2, [r7, #30]
 8003b4c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	8a7a      	ldrh	r2, [r7, #18]
 8003b52:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2201      	movs	r2, #1
 8003b58:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003b62:	d00b      	beq.n	8003b7c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fce5 	bl	8003538 <ptr_to_mem>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	8a7b      	ldrh	r3, [r7, #18]
 8003b72:	8053      	strh	r3, [r2, #2]
 8003b74:	e002      	b.n	8003b7c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003b7c:	4b34      	ldr	r3, [pc, #208]	; (8003c50 <mem_malloc+0x1d0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d127      	bne.n	8003bd6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003b86:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <mem_malloc+0x1d0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003b8c:	e005      	b.n	8003b9a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fcd0 	bl	8003538 <ptr_to_mem>
 8003b98:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	791b      	ldrb	r3, [r3, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <mem_malloc+0x12c>
 8003ba2:	4b2f      	ldr	r3, [pc, #188]	; (8003c60 <mem_malloc+0x1e0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1f0      	bne.n	8003b8e <mem_malloc+0x10e>
          }
          lfree = cur;
 8003bac:	4a28      	ldr	r2, [pc, #160]	; (8003c50 <mem_malloc+0x1d0>)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003bb2:	4b27      	ldr	r3, [pc, #156]	; (8003c50 <mem_malloc+0x1d0>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <mem_malloc+0x1e0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d00b      	beq.n	8003bd6 <mem_malloc+0x156>
 8003bbe:	4b24      	ldr	r3, [pc, #144]	; (8003c50 <mem_malloc+0x1d0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	791b      	ldrb	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d006      	beq.n	8003bd6 <mem_malloc+0x156>
 8003bc8:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <mem_malloc+0x1d4>)
 8003bca:	f240 32b5 	movw	r2, #949	; 0x3b5
 8003bce:	4925      	ldr	r1, [pc, #148]	; (8003c64 <mem_malloc+0x1e4>)
 8003bd0:	4822      	ldr	r0, [pc, #136]	; (8003c5c <mem_malloc+0x1dc>)
 8003bd2:	f009 f911 	bl	800cdf8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003bd6:	8bba      	ldrh	r2, [r7, #28]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	4413      	add	r3, r2
 8003bdc:	3308      	adds	r3, #8
 8003bde:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <mem_malloc+0x1e0>)
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d906      	bls.n	8003bf4 <mem_malloc+0x174>
 8003be6:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <mem_malloc+0x1d4>)
 8003be8:	f240 32b9 	movw	r2, #953	; 0x3b9
 8003bec:	491e      	ldr	r1, [pc, #120]	; (8003c68 <mem_malloc+0x1e8>)
 8003bee:	481b      	ldr	r0, [pc, #108]	; (8003c5c <mem_malloc+0x1dc>)
 8003bf0:	f009 f902 	bl	800cdf8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <mem_malloc+0x18c>
 8003bfe:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <mem_malloc+0x1d4>)
 8003c00:	f240 32bb 	movw	r2, #955	; 0x3bb
 8003c04:	4919      	ldr	r1, [pc, #100]	; (8003c6c <mem_malloc+0x1ec>)
 8003c06:	4815      	ldr	r0, [pc, #84]	; (8003c5c <mem_malloc+0x1dc>)
 8003c08:	f009 f8f6 	bl	800cdf8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d006      	beq.n	8003c24 <mem_malloc+0x1a4>
 8003c16:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <mem_malloc+0x1d4>)
 8003c18:	f240 32bd 	movw	r2, #957	; 0x3bd
 8003c1c:	4914      	ldr	r1, [pc, #80]	; (8003c70 <mem_malloc+0x1f0>)
 8003c1e:	480f      	ldr	r0, [pc, #60]	; (8003c5c <mem_malloc+0x1dc>)
 8003c20:	f009 f8ea 	bl	800cdf8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	3308      	adds	r3, #8
 8003c28:	e00e      	b.n	8003c48 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8003c2a:	8bfb      	ldrh	r3, [r7, #30]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff fc83 	bl	8003538 <ptr_to_mem>
 8003c32:	4603      	mov	r3, r0
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003c38:	8bfa      	ldrh	r2, [r7, #30]
 8003c3a:	8bbb      	ldrh	r3, [r7, #28]
 8003c3c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8003c40:	429a      	cmp	r2, r3
 8003c42:	f4ff af44 	bcc.w	8003ace <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	200000a0 	.word	0x200000a0
 8003c54:	0800de98 	.word	0x0800de98
 8003c58:	0800e040 	.word	0x0800e040
 8003c5c:	0800dee0 	.word	0x0800dee0
 8003c60:	2000009c 	.word	0x2000009c
 8003c64:	0800e054 	.word	0x0800e054
 8003c68:	0800e070 	.word	0x0800e070
 8003c6c:	0800e0a0 	.word	0x0800e0a0
 8003c70:	0800e0d0 	.word	0x0800e0d0

08003c74 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	3303      	adds	r3, #3
 8003c8a:	f023 0303 	bic.w	r3, r3, #3
 8003c8e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e011      	b.n	8003cba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	885b      	ldrh	r3, [r3, #2]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	dbe7      	blt.n	8003c96 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003cda:	2300      	movs	r3, #0
 8003cdc:	80fb      	strh	r3, [r7, #6]
 8003cde:	e009      	b.n	8003cf4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <memp_init+0x30>)
 8003ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff ffc3 	bl	8003c74 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	80fb      	strh	r3, [r7, #6]
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d9f2      	bls.n	8003ce0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	080108a0 	.word	0x080108a0

08003d08 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d012      	beq.n	8003d44 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d006      	beq.n	8003d40 <do_memp_malloc_pool+0x38>
 8003d32:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <do_memp_malloc_pool+0x48>)
 8003d34:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003d38:	4906      	ldr	r1, [pc, #24]	; (8003d54 <do_memp_malloc_pool+0x4c>)
 8003d3a:	4807      	ldr	r0, [pc, #28]	; (8003d58 <do_memp_malloc_pool+0x50>)
 8003d3c:	f009 f85c 	bl	800cdf8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	e000      	b.n	8003d46 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	0800e0f4 	.word	0x0800e0f4
 8003d54:	0800e124 	.word	0x0800e124
 8003d58:	0800e148 	.word	0x0800e148

08003d5c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d908      	bls.n	8003d7e <memp_malloc+0x22>
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <memp_malloc+0x3c>)
 8003d6e:	f240 1257 	movw	r2, #343	; 0x157
 8003d72:	490a      	ldr	r1, [pc, #40]	; (8003d9c <memp_malloc+0x40>)
 8003d74:	480a      	ldr	r0, [pc, #40]	; (8003da0 <memp_malloc+0x44>)
 8003d76:	f009 f83f 	bl	800cdf8 <iprintf>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e008      	b.n	8003d90 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	4a08      	ldr	r2, [pc, #32]	; (8003da4 <memp_malloc+0x48>)
 8003d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff ffbe 	bl	8003d08 <do_memp_malloc_pool>
 8003d8c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	0800e0f4 	.word	0x0800e0f4
 8003d9c:	0800e184 	.word	0x0800e184
 8003da0:	0800e148 	.word	0x0800e148
 8003da4:	080108a0 	.word	0x080108a0

08003da8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d006      	beq.n	8003dca <do_memp_free_pool+0x22>
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <do_memp_free_pool+0x40>)
 8003dbe:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8003dc2:	490a      	ldr	r1, [pc, #40]	; (8003dec <do_memp_free_pool+0x44>)
 8003dc4:	480a      	ldr	r0, [pc, #40]	; (8003df0 <do_memp_free_pool+0x48>)
 8003dc6:	f009 f817 	bl	800cdf8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8003de0:	bf00      	nop
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	0800e0f4 	.word	0x0800e0f4
 8003dec:	0800e1a4 	.word	0x0800e1a4
 8003df0:	0800e148 	.word	0x0800e148

08003df4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d907      	bls.n	8003e16 <memp_free+0x22>
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <memp_free+0x44>)
 8003e08:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8003e0c:	490b      	ldr	r1, [pc, #44]	; (8003e3c <memp_free+0x48>)
 8003e0e:	480c      	ldr	r0, [pc, #48]	; (8003e40 <memp_free+0x4c>)
 8003e10:	f008 fff2 	bl	800cdf8 <iprintf>
 8003e14:	e00c      	b.n	8003e30 <memp_free+0x3c>

  if (mem == NULL) {
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <memp_free+0x50>)
 8003e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e24:	6839      	ldr	r1, [r7, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ffbe 	bl	8003da8 <do_memp_free_pool>
 8003e2c:	e000      	b.n	8003e30 <memp_free+0x3c>
    return;
 8003e2e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	0800e0f4 	.word	0x0800e0f4
 8003e3c:	0800e1c4 	.word	0x0800e1c4
 8003e40:	0800e148 	.word	0x0800e148
 8003e44:	080108a0 	.word	0x080108a0

08003e48 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d108      	bne.n	8003e7e <netif_add+0x26>
 8003e6c:	4b57      	ldr	r3, [pc, #348]	; (8003fcc <netif_add+0x174>)
 8003e6e:	f240 1227 	movw	r2, #295	; 0x127
 8003e72:	4957      	ldr	r1, [pc, #348]	; (8003fd0 <netif_add+0x178>)
 8003e74:	4857      	ldr	r0, [pc, #348]	; (8003fd4 <netif_add+0x17c>)
 8003e76:	f008 ffbf 	bl	800cdf8 <iprintf>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e0a2      	b.n	8003fc4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d108      	bne.n	8003e96 <netif_add+0x3e>
 8003e84:	4b51      	ldr	r3, [pc, #324]	; (8003fcc <netif_add+0x174>)
 8003e86:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003e8a:	4953      	ldr	r1, [pc, #332]	; (8003fd8 <netif_add+0x180>)
 8003e8c:	4851      	ldr	r0, [pc, #324]	; (8003fd4 <netif_add+0x17c>)
 8003e8e:	f008 ffb3 	bl	800cdf8 <iprintf>
 8003e92:	2300      	movs	r3, #0
 8003e94:	e096      	b.n	8003fc4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8003e9c:	4b4f      	ldr	r3, [pc, #316]	; (8003fdc <netif_add+0x184>)
 8003e9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8003ea6:	4b4d      	ldr	r3, [pc, #308]	; (8003fdc <netif_add+0x184>)
 8003ea8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8003eb0:	4b4a      	ldr	r3, [pc, #296]	; (8003fdc <netif_add+0x184>)
 8003eb2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a45      	ldr	r2, [pc, #276]	; (8003fe0 <netif_add+0x188>)
 8003eca:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a3a      	ldr	r2, [r7, #32]
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 8003ee6:	4b3f      	ldr	r3, [pc, #252]	; (8003fe4 <netif_add+0x18c>)
 8003ee8:	781a      	ldrb	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f913 	bl	8004128 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	4798      	blx	r3
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <netif_add+0xba>
    return NULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e058      	b.n	8003fc4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f18:	2bff      	cmp	r3, #255	; 0xff
 8003f1a:	d103      	bne.n	8003f24 <netif_add+0xcc>
        netif->num = 0;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003f28:	4b2f      	ldr	r3, [pc, #188]	; (8003fe8 <netif_add+0x190>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e02b      	b.n	8003f88 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d106      	bne.n	8003f46 <netif_add+0xee>
 8003f38:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <netif_add+0x174>)
 8003f3a:	f240 128b 	movw	r2, #395	; 0x18b
 8003f3e:	492b      	ldr	r1, [pc, #172]	; (8003fec <netif_add+0x194>)
 8003f40:	4824      	ldr	r0, [pc, #144]	; (8003fd4 <netif_add+0x17c>)
 8003f42:	f008 ff59 	bl	800cdf8 <iprintf>
        num_netifs++;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2bff      	cmp	r3, #255	; 0xff
 8003f50:	dd06      	ble.n	8003f60 <netif_add+0x108>
 8003f52:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <netif_add+0x174>)
 8003f54:	f240 128d 	movw	r2, #397	; 0x18d
 8003f58:	4925      	ldr	r1, [pc, #148]	; (8003ff0 <netif_add+0x198>)
 8003f5a:	481e      	ldr	r0, [pc, #120]	; (8003fd4 <netif_add+0x17c>)
 8003f5c:	f008 ff4c 	bl	800cdf8 <iprintf>
        if (netif2->num == netif->num) {
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d108      	bne.n	8003f82 <netif_add+0x12a>
          netif->num++;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f76:	3301      	adds	r3, #1
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8003f80:	e005      	b.n	8003f8e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1d0      	bne.n	8003f30 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1be      	bne.n	8003f12 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f9a:	2bfe      	cmp	r3, #254	; 0xfe
 8003f9c:	d103      	bne.n	8003fa6 <netif_add+0x14e>
    netif_num = 0;
 8003f9e:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <netif_add+0x18c>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	e006      	b.n	8003fb4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fac:	3301      	adds	r3, #1
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <netif_add+0x18c>)
 8003fb2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <netif_add+0x190>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <netif_add+0x190>)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	0800e1e0 	.word	0x0800e1e0
 8003fd0:	0800e274 	.word	0x0800e274
 8003fd4:	0800e230 	.word	0x0800e230
 8003fd8:	0800e290 	.word	0x0800e290
 8003fdc:	08010904 	.word	0x08010904
 8003fe0:	0800433b 	.word	0x0800433b
 8003fe4:	200000c8 	.word	0x200000c8
 8003fe8:	20008a40 	.word	0x20008a40
 8003fec:	0800e2b4 	.word	0x0800e2b4
 8003ff0:	0800e2c8 	.word	0x0800e2c8

08003ff4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8003ffe:	6839      	ldr	r1, [r7, #0]
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f002 fadf 	bl	80065c4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004006:	6839      	ldr	r1, [r7, #0]
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f006 fbbf 	bl	800a78c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <netif_do_set_ipaddr+0x20>
 800402a:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <netif_do_set_ipaddr+0x88>)
 800402c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004030:	491c      	ldr	r1, [pc, #112]	; (80040a4 <netif_do_set_ipaddr+0x8c>)
 8004032:	481d      	ldr	r0, [pc, #116]	; (80040a8 <netif_do_set_ipaddr+0x90>)
 8004034:	f008 fee0 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <netif_do_set_ipaddr+0x34>
 800403e:	4b18      	ldr	r3, [pc, #96]	; (80040a0 <netif_do_set_ipaddr+0x88>)
 8004040:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004044:	4917      	ldr	r1, [pc, #92]	; (80040a4 <netif_do_set_ipaddr+0x8c>)
 8004046:	4818      	ldr	r0, [pc, #96]	; (80040a8 <netif_do_set_ipaddr+0x90>)
 8004048:	f008 fed6 	bl	800cdf8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3304      	adds	r3, #4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d01c      	beq.n	8004094 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3304      	adds	r3, #4
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800406a:	f107 0314 	add.w	r3, r7, #20
 800406e:	4619      	mov	r1, r3
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ffbf 	bl	8003ff4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <netif_do_set_ipaddr+0x6a>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	e000      	b.n	8004084 <netif_do_set_ipaddr+0x6c>
 8004082:	2300      	movs	r3, #0
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004088:	2101      	movs	r1, #1
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f8d2 	bl	8004234 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	0800e1e0 	.word	0x0800e1e0
 80040a4:	0800e2f8 	.word	0x0800e2f8
 80040a8:	0800e230 	.word	0x0800e230

080040ac <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3308      	adds	r3, #8
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d00a      	beq.n	80040dc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <netif_do_set_netmask+0x26>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	e000      	b.n	80040d4 <netif_do_set_netmask+0x28>
 80040d2:	2300      	movs	r3, #0
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	330c      	adds	r3, #12
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d00a      	beq.n	800411a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <netif_do_set_gw+0x26>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	e000      	b.n	8004112 <netif_do_set_gw+0x28>
 8004110:	2300      	movs	r3, #0
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800413a:	2300      	movs	r3, #0
 800413c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004144:	4b1c      	ldr	r3, [pc, #112]	; (80041b8 <netif_set_addr+0x90>)
 8004146:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800414e:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <netif_set_addr+0x90>)
 8004150:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004158:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <netif_set_addr+0x90>)
 800415a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <netif_set_addr+0x42>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <netif_set_addr+0x46>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <netif_set_addr+0x48>
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004178:	f107 0310 	add.w	r3, r7, #16
 800417c:	461a      	mov	r2, r3
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f7ff ff49 	bl	8004018 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f7ff ff8e 	bl	80040ac <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	6839      	ldr	r1, [r7, #0]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f7ff ffa8 	bl	80040ea <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80041a0:	f107 0310 	add.w	r3, r7, #16
 80041a4:	461a      	mov	r2, r3
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f7ff ff35 	bl	8004018 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80041ae:	bf00      	nop
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	08010904 	.word	0x08010904

080041bc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80041c4:	4a04      	ldr	r2, [pc, #16]	; (80041d8 <netif_set_default+0x1c>)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20008a44 	.word	0x20008a44

080041dc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d107      	bne.n	80041fa <netif_set_up+0x1e>
 80041ea:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <netif_set_up+0x4c>)
 80041ec:	f44f 7254 	mov.w	r2, #848	; 0x350
 80041f0:	490e      	ldr	r1, [pc, #56]	; (800422c <netif_set_up+0x50>)
 80041f2:	480f      	ldr	r0, [pc, #60]	; (8004230 <netif_set_up+0x54>)
 80041f4:	f008 fe00 	bl	800cdf8 <iprintf>
 80041f8:	e013      	b.n	8004222 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10c      	bne.n	8004222 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	b2da      	uxtb	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800421a:	2103      	movs	r1, #3
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f809 	bl	8004234 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	0800e1e0 	.word	0x0800e1e0
 800422c:	0800e368 	.word	0x0800e368
 8004230:	0800e230 	.word	0x0800e230

08004234 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <netif_issue_reports+0x20>
 8004246:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <netif_issue_reports+0x74>)
 8004248:	f240 326d 	movw	r2, #877	; 0x36d
 800424c:	4917      	ldr	r1, [pc, #92]	; (80042ac <netif_issue_reports+0x78>)
 800424e:	4818      	ldr	r0, [pc, #96]	; (80042b0 <netif_issue_reports+0x7c>)
 8004250:	f008 fdd2 	bl	800cdf8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01e      	beq.n	80042a0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004268:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800426c:	2b00      	cmp	r3, #0
 800426e:	d017      	beq.n	80042a0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d013      	beq.n	80042a2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3304      	adds	r3, #4
 800427e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00e      	beq.n	80042a2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d007      	beq.n	80042a2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3304      	adds	r3, #4
 8004296:	4619      	mov	r1, r3
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f007 f9e1 	bl	800b660 <etharp_request>
 800429e:	e000      	b.n	80042a2 <netif_issue_reports+0x6e>
    return;
 80042a0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	0800e1e0 	.word	0x0800e1e0
 80042ac:	0800e384 	.word	0x0800e384
 80042b0:	0800e230 	.word	0x0800e230

080042b4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d107      	bne.n	80042d2 <netif_set_down+0x1e>
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <netif_set_down+0x58>)
 80042c4:	f240 329b 	movw	r2, #923	; 0x39b
 80042c8:	4911      	ldr	r1, [pc, #68]	; (8004310 <netif_set_down+0x5c>)
 80042ca:	4812      	ldr	r0, [pc, #72]	; (8004314 <netif_set_down+0x60>)
 80042cc:	f008 fd94 	bl	800cdf8 <iprintf>
 80042d0:	e019      	b.n	8004306 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d012      	beq.n	8004306 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f006 fd6b 	bl	800addc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	0800e1e0 	.word	0x0800e1e0
 8004310:	0800e3a8 	.word	0x0800e3a8
 8004314:	0800e230 	.word	0x0800e230

08004318 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	61da      	str	r2, [r3, #28]
  }
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004346:	f06f 030b 	mvn.w	r3, #11
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d013      	beq.n	8004390 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004368:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <netif_get_by_index+0x48>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	e00c      	b.n	800438a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004376:	3301      	adds	r3, #1
 8004378:	b2db      	uxtb	r3, r3
 800437a:	79fa      	ldrb	r2, [r7, #7]
 800437c:	429a      	cmp	r2, r3
 800437e:	d101      	bne.n	8004384 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	e006      	b.n	8004392 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1ef      	bne.n	8004370 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20008a40 	.word	0x20008a40

080043a4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80043aa:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <pbuf_free_ooseq+0x38>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <pbuf_free_ooseq+0x3c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	607b      	str	r3, [r7, #4]
 80043b6:	e00a      	b.n	80043ce <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f002 f93d 	bl	8006640 <tcp_free_ooseq>
      return;
 80043c6:	e005      	b.n	80043d4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f1      	bne.n	80043b8 <pbuf_free_ooseq+0x14>
    }
  }
}
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20008a48 	.word	0x20008a48
 80043e0:	20008a50 	.word	0x20008a50

080043e4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <pbuf_pool_is_empty+0x14>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80043ee:	bf00      	nop
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	20008a48 	.word	0x20008a48

080043fc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	4611      	mov	r1, r2
 8004408:	461a      	mov	r2, r3
 800440a:	460b      	mov	r3, r1
 800440c:	80fb      	strh	r3, [r7, #6]
 800440e:	4613      	mov	r3, r2
 8004410:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	88fa      	ldrh	r2, [r7, #6]
 8004422:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	88ba      	ldrh	r2, [r7, #4]
 8004428:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800442a:	8b3b      	ldrh	r3, [r7, #24]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	7f3a      	ldrb	r2, [r7, #28]
 8004436:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	73da      	strb	r2, [r3, #15]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08c      	sub	sp, #48	; 0x30
 8004454:	af02      	add	r7, sp, #8
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
 800445a:	460b      	mov	r3, r1
 800445c:	80bb      	strh	r3, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004466:	887b      	ldrh	r3, [r7, #2]
 8004468:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800446c:	d07f      	beq.n	800456e <pbuf_alloc+0x11e>
 800446e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004472:	f300 80c8 	bgt.w	8004606 <pbuf_alloc+0x1b6>
 8004476:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800447a:	d010      	beq.n	800449e <pbuf_alloc+0x4e>
 800447c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004480:	f300 80c1 	bgt.w	8004606 <pbuf_alloc+0x1b6>
 8004484:	2b01      	cmp	r3, #1
 8004486:	d002      	beq.n	800448e <pbuf_alloc+0x3e>
 8004488:	2b41      	cmp	r3, #65	; 0x41
 800448a:	f040 80bc 	bne.w	8004606 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800448e:	887a      	ldrh	r2, [r7, #2]
 8004490:	88bb      	ldrh	r3, [r7, #4]
 8004492:	4619      	mov	r1, r3
 8004494:	2000      	movs	r0, #0
 8004496:	f000 f8d1 	bl	800463c <pbuf_alloc_reference>
 800449a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800449c:	e0bd      	b.n	800461a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80044a6:	88bb      	ldrh	r3, [r7, #4]
 80044a8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80044aa:	2008      	movs	r0, #8
 80044ac:	f7ff fc56 	bl	8003d5c <memp_malloc>
 80044b0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d109      	bne.n	80044cc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80044b8:	f7ff ff94 	bl	80043e4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80044c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044c4:	f000 faa8 	bl	8004a18 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e0a7      	b.n	800461c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80044cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044ce:	3303      	adds	r3, #3
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	f023 0303 	bic.w	r3, r3, #3
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80044dc:	b29b      	uxth	r3, r3
 80044de:	8b7a      	ldrh	r2, [r7, #26]
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bf28      	it	cs
 80044e4:	4613      	movcs	r3, r2
 80044e6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80044e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044ea:	3310      	adds	r3, #16
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	3303      	adds	r3, #3
 80044f2:	f023 0303 	bic.w	r3, r3, #3
 80044f6:	4618      	mov	r0, r3
 80044f8:	89f9      	ldrh	r1, [r7, #14]
 80044fa:	8b7a      	ldrh	r2, [r7, #26]
 80044fc:	2300      	movs	r3, #0
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	887b      	ldrh	r3, [r7, #2]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	460b      	mov	r3, r1
 8004506:	4601      	mov	r1, r0
 8004508:	6938      	ldr	r0, [r7, #16]
 800450a:	f7ff ff77 	bl	80043fc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d006      	beq.n	8004528 <pbuf_alloc+0xd8>
 800451a:	4b42      	ldr	r3, [pc, #264]	; (8004624 <pbuf_alloc+0x1d4>)
 800451c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004520:	4941      	ldr	r1, [pc, #260]	; (8004628 <pbuf_alloc+0x1d8>)
 8004522:	4842      	ldr	r0, [pc, #264]	; (800462c <pbuf_alloc+0x1dc>)
 8004524:	f008 fc68 	bl	800cdf8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004528:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800452a:	3303      	adds	r3, #3
 800452c:	f023 0303 	bic.w	r3, r3, #3
 8004530:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004534:	d106      	bne.n	8004544 <pbuf_alloc+0xf4>
 8004536:	4b3b      	ldr	r3, [pc, #236]	; (8004624 <pbuf_alloc+0x1d4>)
 8004538:	f44f 7281 	mov.w	r2, #258	; 0x102
 800453c:	493c      	ldr	r1, [pc, #240]	; (8004630 <pbuf_alloc+0x1e0>)
 800453e:	483b      	ldr	r0, [pc, #236]	; (800462c <pbuf_alloc+0x1dc>)
 8004540:	f008 fc5a 	bl	800cdf8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	2b00      	cmp	r3, #0
 8004548:	d102      	bne.n	8004550 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
 800454e:	e002      	b.n	8004556 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800455a:	8b7a      	ldrh	r2, [r7, #26]
 800455c:	89fb      	ldrh	r3, [r7, #14]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004566:	8b7b      	ldrh	r3, [r7, #26]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d19e      	bne.n	80044aa <pbuf_alloc+0x5a>
      break;
 800456c:	e055      	b.n	800461a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800456e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004570:	3303      	adds	r3, #3
 8004572:	b29b      	uxth	r3, r3
 8004574:	f023 0303 	bic.w	r3, r3, #3
 8004578:	b29a      	uxth	r2, r3
 800457a:	88bb      	ldrh	r3, [r7, #4]
 800457c:	3303      	adds	r3, #3
 800457e:	b29b      	uxth	r3, r3
 8004580:	f023 0303 	bic.w	r3, r3, #3
 8004584:	b29b      	uxth	r3, r3
 8004586:	4413      	add	r3, r2
 8004588:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800458a:	8b3b      	ldrh	r3, [r7, #24]
 800458c:	3310      	adds	r3, #16
 800458e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004590:	8b3a      	ldrh	r2, [r7, #24]
 8004592:	88bb      	ldrh	r3, [r7, #4]
 8004594:	3303      	adds	r3, #3
 8004596:	f023 0303 	bic.w	r3, r3, #3
 800459a:	429a      	cmp	r2, r3
 800459c:	d306      	bcc.n	80045ac <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800459e:	8afa      	ldrh	r2, [r7, #22]
 80045a0:	88bb      	ldrh	r3, [r7, #4]
 80045a2:	3303      	adds	r3, #3
 80045a4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d201      	bcs.n	80045b0 <pbuf_alloc+0x160>
        return NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e035      	b.n	800461c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80045b0:	8afb      	ldrh	r3, [r7, #22]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff fa64 	bl	8003a80 <mem_malloc>
 80045b8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <pbuf_alloc+0x174>
        return NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e02b      	b.n	800461c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80045c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045c6:	3310      	adds	r3, #16
 80045c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ca:	4413      	add	r3, r2
 80045cc:	3303      	adds	r3, #3
 80045ce:	f023 0303 	bic.w	r3, r3, #3
 80045d2:	4618      	mov	r0, r3
 80045d4:	88b9      	ldrh	r1, [r7, #4]
 80045d6:	88ba      	ldrh	r2, [r7, #4]
 80045d8:	2300      	movs	r3, #0
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	887b      	ldrh	r3, [r7, #2]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	460b      	mov	r3, r1
 80045e2:	4601      	mov	r1, r0
 80045e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045e6:	f7ff ff09 	bl	80043fc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d010      	beq.n	8004618 <pbuf_alloc+0x1c8>
 80045f6:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <pbuf_alloc+0x1d4>)
 80045f8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80045fc:	490d      	ldr	r1, [pc, #52]	; (8004634 <pbuf_alloc+0x1e4>)
 80045fe:	480b      	ldr	r0, [pc, #44]	; (800462c <pbuf_alloc+0x1dc>)
 8004600:	f008 fbfa 	bl	800cdf8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004604:	e008      	b.n	8004618 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004606:	4b07      	ldr	r3, [pc, #28]	; (8004624 <pbuf_alloc+0x1d4>)
 8004608:	f240 1227 	movw	r2, #295	; 0x127
 800460c:	490a      	ldr	r1, [pc, #40]	; (8004638 <pbuf_alloc+0x1e8>)
 800460e:	4807      	ldr	r0, [pc, #28]	; (800462c <pbuf_alloc+0x1dc>)
 8004610:	f008 fbf2 	bl	800cdf8 <iprintf>
      return NULL;
 8004614:	2300      	movs	r3, #0
 8004616:	e001      	b.n	800461c <pbuf_alloc+0x1cc>
      break;
 8004618:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800461c:	4618      	mov	r0, r3
 800461e:	3728      	adds	r7, #40	; 0x28
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	0800e410 	.word	0x0800e410
 8004628:	0800e440 	.word	0x0800e440
 800462c:	0800e470 	.word	0x0800e470
 8004630:	0800e498 	.word	0x0800e498
 8004634:	0800e4cc 	.word	0x0800e4cc
 8004638:	0800e4f8 	.word	0x0800e4f8

0800463c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af02      	add	r7, sp, #8
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	807b      	strh	r3, [r7, #2]
 8004648:	4613      	mov	r3, r2
 800464a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800464c:	883b      	ldrh	r3, [r7, #0]
 800464e:	2b41      	cmp	r3, #65	; 0x41
 8004650:	d009      	beq.n	8004666 <pbuf_alloc_reference+0x2a>
 8004652:	883b      	ldrh	r3, [r7, #0]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d006      	beq.n	8004666 <pbuf_alloc_reference+0x2a>
 8004658:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <pbuf_alloc_reference+0x5c>)
 800465a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800465e:	490f      	ldr	r1, [pc, #60]	; (800469c <pbuf_alloc_reference+0x60>)
 8004660:	480f      	ldr	r0, [pc, #60]	; (80046a0 <pbuf_alloc_reference+0x64>)
 8004662:	f008 fbc9 	bl	800cdf8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004666:	2007      	movs	r0, #7
 8004668:	f7ff fb78 	bl	8003d5c <memp_malloc>
 800466c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004674:	2300      	movs	r3, #0
 8004676:	e00b      	b.n	8004690 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004678:	8879      	ldrh	r1, [r7, #2]
 800467a:	887a      	ldrh	r2, [r7, #2]
 800467c:	2300      	movs	r3, #0
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	883b      	ldrh	r3, [r7, #0]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	460b      	mov	r3, r1
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7ff feb7 	bl	80043fc <pbuf_init_alloced_pbuf>
  return p;
 800468e:	68fb      	ldr	r3, [r7, #12]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	0800e410 	.word	0x0800e410
 800469c:	0800e514 	.word	0x0800e514
 80046a0:	0800e470 	.word	0x0800e470

080046a4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	4603      	mov	r3, r0
 80046ae:	73fb      	strb	r3, [r7, #15]
 80046b0:	460b      	mov	r3, r1
 80046b2:	81bb      	strh	r3, [r7, #12]
 80046b4:	4613      	mov	r3, r2
 80046b6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80046bc:	8a7b      	ldrh	r3, [r7, #18]
 80046be:	3303      	adds	r3, #3
 80046c0:	f023 0203 	bic.w	r2, r3, #3
 80046c4:	89bb      	ldrh	r3, [r7, #12]
 80046c6:	441a      	add	r2, r3
 80046c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d901      	bls.n	80046d2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e018      	b.n	8004704 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80046d8:	8a7b      	ldrh	r3, [r7, #18]
 80046da:	3303      	adds	r3, #3
 80046dc:	f023 0303 	bic.w	r3, r3, #3
 80046e0:	6a3a      	ldr	r2, [r7, #32]
 80046e2:	4413      	add	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e001      	b.n	80046ec <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	89b9      	ldrh	r1, [r7, #12]
 80046f0:	89ba      	ldrh	r2, [r7, #12]
 80046f2:	2302      	movs	r3, #2
 80046f4:	9301      	str	r3, [sp, #4]
 80046f6:	897b      	ldrh	r3, [r7, #10]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	460b      	mov	r3, r1
 80046fc:	6979      	ldr	r1, [r7, #20]
 80046fe:	f7ff fe7d 	bl	80043fc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004702:	687b      	ldr	r3, [r7, #4]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <pbuf_realloc+0x20>
 800471e:	4b3a      	ldr	r3, [pc, #232]	; (8004808 <pbuf_realloc+0xfc>)
 8004720:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004724:	4939      	ldr	r1, [pc, #228]	; (800480c <pbuf_realloc+0x100>)
 8004726:	483a      	ldr	r0, [pc, #232]	; (8004810 <pbuf_realloc+0x104>)
 8004728:	f008 fb66 	bl	800cdf8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	891b      	ldrh	r3, [r3, #8]
 8004730:	887a      	ldrh	r2, [r7, #2]
 8004732:	429a      	cmp	r2, r3
 8004734:	d263      	bcs.n	80047fe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	891a      	ldrh	r2, [r3, #8]
 800473a:	887b      	ldrh	r3, [r7, #2]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004740:	887b      	ldrh	r3, [r7, #2]
 8004742:	817b      	strh	r3, [r7, #10]
  q = p;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004748:	e018      	b.n	800477c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	895b      	ldrh	r3, [r3, #10]
 800474e:	897a      	ldrh	r2, [r7, #10]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	891a      	ldrh	r2, [r3, #8]
 8004758:	893b      	ldrh	r3, [r7, #8]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <pbuf_realloc+0x70>
 800476e:	4b26      	ldr	r3, [pc, #152]	; (8004808 <pbuf_realloc+0xfc>)
 8004770:	f240 12af 	movw	r2, #431	; 0x1af
 8004774:	4927      	ldr	r1, [pc, #156]	; (8004814 <pbuf_realloc+0x108>)
 8004776:	4826      	ldr	r0, [pc, #152]	; (8004810 <pbuf_realloc+0x104>)
 8004778:	f008 fb3e 	bl	800cdf8 <iprintf>
  while (rem_len > q->len) {
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	895b      	ldrh	r3, [r3, #10]
 8004780:	897a      	ldrh	r2, [r7, #10]
 8004782:	429a      	cmp	r2, r3
 8004784:	d8e1      	bhi.n	800474a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	7b1b      	ldrb	r3, [r3, #12]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	2b00      	cmp	r3, #0
 8004790:	d121      	bne.n	80047d6 <pbuf_realloc+0xca>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	895b      	ldrh	r3, [r3, #10]
 8004796:	897a      	ldrh	r2, [r7, #10]
 8004798:	429a      	cmp	r2, r3
 800479a:	d01c      	beq.n	80047d6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	7b5b      	ldrb	r3, [r3, #13]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d116      	bne.n	80047d6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	897b      	ldrh	r3, [r7, #10]
 80047b4:	4413      	add	r3, r2
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	4619      	mov	r1, r3
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7ff f864 	bl	8003888 <mem_trim>
 80047c0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <pbuf_realloc+0xca>
 80047c8:	4b0f      	ldr	r3, [pc, #60]	; (8004808 <pbuf_realloc+0xfc>)
 80047ca:	f240 12bd 	movw	r2, #445	; 0x1bd
 80047ce:	4912      	ldr	r1, [pc, #72]	; (8004818 <pbuf_realloc+0x10c>)
 80047d0:	480f      	ldr	r0, [pc, #60]	; (8004810 <pbuf_realloc+0x104>)
 80047d2:	f008 fb11 	bl	800cdf8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	897a      	ldrh	r2, [r7, #10]
 80047da:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	895a      	ldrh	r2, [r3, #10]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d004      	beq.n	80047f6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 f911 	bl	8004a18 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e000      	b.n	8004800 <pbuf_realloc+0xf4>
    return;
 80047fe:	bf00      	nop

}
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	0800e410 	.word	0x0800e410
 800480c:	0800e528 	.word	0x0800e528
 8004810:	0800e470 	.word	0x0800e470
 8004814:	0800e540 	.word	0x0800e540
 8004818:	0800e558 	.word	0x0800e558

0800481c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	4613      	mov	r3, r2
 8004828:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d106      	bne.n	800483e <pbuf_add_header_impl+0x22>
 8004830:	4b2b      	ldr	r3, [pc, #172]	; (80048e0 <pbuf_add_header_impl+0xc4>)
 8004832:	f240 12df 	movw	r2, #479	; 0x1df
 8004836:	492b      	ldr	r1, [pc, #172]	; (80048e4 <pbuf_add_header_impl+0xc8>)
 8004838:	482b      	ldr	r0, [pc, #172]	; (80048e8 <pbuf_add_header_impl+0xcc>)
 800483a:	f008 fadd 	bl	800cdf8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <pbuf_add_header_impl+0x30>
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484a:	d301      	bcc.n	8004850 <pbuf_add_header_impl+0x34>
    return 1;
 800484c:	2301      	movs	r3, #1
 800484e:	e043      	b.n	80048d8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <pbuf_add_header_impl+0x3e>
    return 0;
 8004856:	2300      	movs	r3, #0
 8004858:	e03e      	b.n	80048d8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	891a      	ldrh	r2, [r3, #8]
 8004862:	8a7b      	ldrh	r3, [r7, #18]
 8004864:	4413      	add	r3, r2
 8004866:	b29b      	uxth	r3, r3
 8004868:	8a7a      	ldrh	r2, [r7, #18]
 800486a:	429a      	cmp	r2, r3
 800486c:	d901      	bls.n	8004872 <pbuf_add_header_impl+0x56>
    return 1;
 800486e:	2301      	movs	r3, #1
 8004870:	e032      	b.n	80048d8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	7b1b      	ldrb	r3, [r3, #12]
 8004876:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004878:	8a3b      	ldrh	r3, [r7, #16]
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00c      	beq.n	800489c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	425b      	negs	r3, r3
 800488a:	4413      	add	r3, r2
 800488c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3310      	adds	r3, #16
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	429a      	cmp	r2, r3
 8004896:	d20d      	bcs.n	80048b4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004898:	2301      	movs	r3, #1
 800489a:	e01d      	b.n	80048d8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d006      	beq.n	80048b0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	425b      	negs	r3, r3
 80048aa:	4413      	add	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	e001      	b.n	80048b4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e011      	b.n	80048d8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	895a      	ldrh	r2, [r3, #10]
 80048be:	8a7b      	ldrh	r3, [r7, #18]
 80048c0:	4413      	add	r3, r2
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	891a      	ldrh	r2, [r3, #8]
 80048cc:	8a7b      	ldrh	r3, [r7, #18]
 80048ce:	4413      	add	r3, r2
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	811a      	strh	r2, [r3, #8]


  return 0;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	0800e410 	.word	0x0800e410
 80048e4:	0800e574 	.word	0x0800e574
 80048e8:	0800e470 	.word	0x0800e470

080048ec <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80048f6:	2200      	movs	r2, #0
 80048f8:	6839      	ldr	r1, [r7, #0]
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff ff8e 	bl	800481c <pbuf_add_header_impl>
 8004900:	4603      	mov	r3, r0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d106      	bne.n	800492a <pbuf_remove_header+0x1e>
 800491c:	4b20      	ldr	r3, [pc, #128]	; (80049a0 <pbuf_remove_header+0x94>)
 800491e:	f240 224b 	movw	r2, #587	; 0x24b
 8004922:	4920      	ldr	r1, [pc, #128]	; (80049a4 <pbuf_remove_header+0x98>)
 8004924:	4820      	ldr	r0, [pc, #128]	; (80049a8 <pbuf_remove_header+0x9c>)
 8004926:	f008 fa67 	bl	800cdf8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <pbuf_remove_header+0x2c>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004936:	d301      	bcc.n	800493c <pbuf_remove_header+0x30>
    return 1;
 8004938:	2301      	movs	r3, #1
 800493a:	e02c      	b.n	8004996 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <pbuf_remove_header+0x3a>
    return 0;
 8004942:	2300      	movs	r3, #0
 8004944:	e027      	b.n	8004996 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	895b      	ldrh	r3, [r3, #10]
 800494e:	89fa      	ldrh	r2, [r7, #14]
 8004950:	429a      	cmp	r2, r3
 8004952:	d908      	bls.n	8004966 <pbuf_remove_header+0x5a>
 8004954:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <pbuf_remove_header+0x94>)
 8004956:	f240 2255 	movw	r2, #597	; 0x255
 800495a:	4914      	ldr	r1, [pc, #80]	; (80049ac <pbuf_remove_header+0xa0>)
 800495c:	4812      	ldr	r0, [pc, #72]	; (80049a8 <pbuf_remove_header+0x9c>)
 800495e:	f008 fa4b 	bl	800cdf8 <iprintf>
 8004962:	2301      	movs	r3, #1
 8004964:	e017      	b.n	8004996 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	441a      	add	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	895a      	ldrh	r2, [r3, #10]
 800497c:	89fb      	ldrh	r3, [r7, #14]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	891a      	ldrh	r2, [r3, #8]
 800498a:	89fb      	ldrh	r3, [r7, #14]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	b29a      	uxth	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	0800e410 	.word	0x0800e410
 80049a4:	0800e574 	.word	0x0800e574
 80049a8:	0800e470 	.word	0x0800e470
 80049ac:	0800e580 	.word	0x0800e580

080049b0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
 80049bc:	4613      	mov	r3, r2
 80049be:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80049c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	da08      	bge.n	80049da <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80049c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049cc:	425b      	negs	r3, r3
 80049ce:	4619      	mov	r1, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff ff9b 	bl	800490c <pbuf_remove_header>
 80049d6:	4603      	mov	r3, r0
 80049d8:	e007      	b.n	80049ea <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80049da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049de:	787a      	ldrb	r2, [r7, #1]
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff ff1a 	bl	800481c <pbuf_add_header_impl>
 80049e8:	4603      	mov	r3, r0
  }
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	460b      	mov	r3, r1
 80049fc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80049fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a02:	2201      	movs	r2, #1
 8004a04:	4619      	mov	r1, r3
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff ffd2 	bl	80049b0 <pbuf_header_impl>
 8004a0c:	4603      	mov	r3, r0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d106      	bne.n	8004a3a <pbuf_free+0x22>
 8004a2c:	4b38      	ldr	r3, [pc, #224]	; (8004b10 <pbuf_free+0xf8>)
 8004a2e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004a32:	4938      	ldr	r1, [pc, #224]	; (8004b14 <pbuf_free+0xfc>)
 8004a34:	4838      	ldr	r0, [pc, #224]	; (8004b18 <pbuf_free+0x100>)
 8004a36:	f008 f9df 	bl	800cdf8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e063      	b.n	8004b06 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004a42:	e05c      	b.n	8004afe <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	7b9b      	ldrb	r3, [r3, #14]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <pbuf_free+0x42>
 8004a4c:	4b30      	ldr	r3, [pc, #192]	; (8004b10 <pbuf_free+0xf8>)
 8004a4e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8004a52:	4932      	ldr	r1, [pc, #200]	; (8004b1c <pbuf_free+0x104>)
 8004a54:	4830      	ldr	r0, [pc, #192]	; (8004b18 <pbuf_free+0x100>)
 8004a56:	f008 f9cf 	bl	800cdf8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	7b9b      	ldrb	r3, [r3, #14]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	739a      	strb	r2, [r3, #14]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	7b9b      	ldrb	r3, [r3, #14]
 8004a6a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004a6c:	7dbb      	ldrb	r3, [r7, #22]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d143      	bne.n	8004afa <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	7b1b      	ldrb	r3, [r3, #12]
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	7b5b      	ldrb	r3, [r3, #13]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d011      	beq.n	8004ab2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <pbuf_free+0x90>
 8004a9a:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <pbuf_free+0xf8>)
 8004a9c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8004aa0:	491f      	ldr	r1, [pc, #124]	; (8004b20 <pbuf_free+0x108>)
 8004aa2:	481d      	ldr	r0, [pc, #116]	; (8004b18 <pbuf_free+0x100>)
 8004aa4:	f008 f9a8 	bl	800cdf8 <iprintf>
        pc->custom_free_function(p);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4798      	blx	r3
 8004ab0:	e01d      	b.n	8004aee <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d104      	bne.n	8004ac2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	2008      	movs	r0, #8
 8004abc:	f7ff f99a 	bl	8003df4 <memp_free>
 8004ac0:	e015      	b.n	8004aee <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d104      	bne.n	8004ad2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	2007      	movs	r0, #7
 8004acc:	f7ff f992 	bl	8003df4 <memp_free>
 8004ad0:	e00d      	b.n	8004aee <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d103      	bne.n	8004ae0 <pbuf_free+0xc8>
          mem_free(p);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7fe fe6b 	bl	80037b4 <mem_free>
 8004ade:	e006      	b.n	8004aee <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <pbuf_free+0xf8>)
 8004ae2:	f240 320f 	movw	r2, #783	; 0x30f
 8004ae6:	490f      	ldr	r1, [pc, #60]	; (8004b24 <pbuf_free+0x10c>)
 8004ae8:	480b      	ldr	r0, [pc, #44]	; (8004b18 <pbuf_free+0x100>)
 8004aea:	f008 f985 	bl	800cdf8 <iprintf>
        }
      }
      count++;
 8004aee:	7dfb      	ldrb	r3, [r7, #23]
 8004af0:	3301      	adds	r3, #1
 8004af2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	e001      	b.n	8004afe <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d19f      	bne.n	8004a44 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	0800e410 	.word	0x0800e410
 8004b14:	0800e574 	.word	0x0800e574
 8004b18:	0800e470 	.word	0x0800e470
 8004b1c:	0800e5a0 	.word	0x0800e5a0
 8004b20:	0800e5b8 	.word	0x0800e5b8
 8004b24:	0800e5dc 	.word	0x0800e5dc

08004b28 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004b34:	e005      	b.n	8004b42 <pbuf_clen+0x1a>
    ++len;
 8004b36:	89fb      	ldrh	r3, [r7, #14]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f6      	bne.n	8004b36 <pbuf_clen+0xe>
  }
  return len;
 8004b48:	89fb      	ldrh	r3, [r7, #14]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d010      	beq.n	8004b88 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	7b9b      	ldrb	r3, [r3, #14]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	7b9b      	ldrb	r3, [r3, #14]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <pbuf_ref+0x30>
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <pbuf_ref+0x38>)
 8004b7c:	f240 3242 	movw	r2, #834	; 0x342
 8004b80:	4904      	ldr	r1, [pc, #16]	; (8004b94 <pbuf_ref+0x3c>)
 8004b82:	4805      	ldr	r0, [pc, #20]	; (8004b98 <pbuf_ref+0x40>)
 8004b84:	f008 f938 	bl	800cdf8 <iprintf>
  }
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	0800e410 	.word	0x0800e410
 8004b94:	0800e5f0 	.word	0x0800e5f0
 8004b98:	0800e470 	.word	0x0800e470

08004b9c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <pbuf_cat+0x16>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d107      	bne.n	8004bc2 <pbuf_cat+0x26>
 8004bb2:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <pbuf_cat+0x98>)
 8004bb4:	f240 3259 	movw	r2, #857	; 0x359
 8004bb8:	491f      	ldr	r1, [pc, #124]	; (8004c38 <pbuf_cat+0x9c>)
 8004bba:	4820      	ldr	r0, [pc, #128]	; (8004c3c <pbuf_cat+0xa0>)
 8004bbc:	f008 f91c 	bl	800cdf8 <iprintf>
 8004bc0:	e034      	b.n	8004c2c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	e00a      	b.n	8004bde <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	891a      	ldrh	r2, [r3, #8]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	891b      	ldrh	r3, [r3, #8]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	891a      	ldrh	r2, [r3, #8]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	895b      	ldrh	r3, [r3, #10]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d006      	beq.n	8004c00 <pbuf_cat+0x64>
 8004bf2:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <pbuf_cat+0x98>)
 8004bf4:	f240 3262 	movw	r2, #866	; 0x362
 8004bf8:	4911      	ldr	r1, [pc, #68]	; (8004c40 <pbuf_cat+0xa4>)
 8004bfa:	4810      	ldr	r0, [pc, #64]	; (8004c3c <pbuf_cat+0xa0>)
 8004bfc:	f008 f8fc 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d006      	beq.n	8004c16 <pbuf_cat+0x7a>
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <pbuf_cat+0x98>)
 8004c0a:	f240 3263 	movw	r2, #867	; 0x363
 8004c0e:	490d      	ldr	r1, [pc, #52]	; (8004c44 <pbuf_cat+0xa8>)
 8004c10:	480a      	ldr	r0, [pc, #40]	; (8004c3c <pbuf_cat+0xa0>)
 8004c12:	f008 f8f1 	bl	800cdf8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	891a      	ldrh	r2, [r3, #8]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	891b      	ldrh	r3, [r3, #8]
 8004c1e:	4413      	add	r3, r2
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	0800e410 	.word	0x0800e410
 8004c38:	0800e604 	.word	0x0800e604
 8004c3c:	0800e470 	.word	0x0800e470
 8004c40:	0800e63c 	.word	0x0800e63c
 8004c44:	0800e66c 	.word	0x0800e66c

08004c48 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <pbuf_copy+0x2a>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d005      	beq.n	8004c72 <pbuf_copy+0x2a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	891a      	ldrh	r2, [r3, #8]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	891b      	ldrh	r3, [r3, #8]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d209      	bcs.n	8004c86 <pbuf_copy+0x3e>
 8004c72:	4b57      	ldr	r3, [pc, #348]	; (8004dd0 <pbuf_copy+0x188>)
 8004c74:	f240 32c9 	movw	r2, #969	; 0x3c9
 8004c78:	4956      	ldr	r1, [pc, #344]	; (8004dd4 <pbuf_copy+0x18c>)
 8004c7a:	4857      	ldr	r0, [pc, #348]	; (8004dd8 <pbuf_copy+0x190>)
 8004c7c:	f008 f8bc 	bl	800cdf8 <iprintf>
 8004c80:	f06f 030f 	mvn.w	r3, #15
 8004c84:	e09f      	b.n	8004dc6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	895b      	ldrh	r3, [r3, #10]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	1ad2      	subs	r2, r2, r3
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	895b      	ldrh	r3, [r3, #10]
 8004c94:	4619      	mov	r1, r3
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1acb      	subs	r3, r1, r3
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d306      	bcc.n	8004cac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	895b      	ldrh	r3, [r3, #10]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	e005      	b.n	8004cb8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	895b      	ldrh	r3, [r3, #10]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	18d0      	adds	r0, r2, r3
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	f008 f87e 	bl	800cdcc <memcpy>
    offset_to += len;
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	895b      	ldrh	r3, [r3, #10]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d906      	bls.n	8004cfa <pbuf_copy+0xb2>
 8004cec:	4b38      	ldr	r3, [pc, #224]	; (8004dd0 <pbuf_copy+0x188>)
 8004cee:	f240 32d9 	movw	r2, #985	; 0x3d9
 8004cf2:	493a      	ldr	r1, [pc, #232]	; (8004ddc <pbuf_copy+0x194>)
 8004cf4:	4838      	ldr	r0, [pc, #224]	; (8004dd8 <pbuf_copy+0x190>)
 8004cf6:	f008 f87f 	bl	800cdf8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	895b      	ldrh	r3, [r3, #10]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d906      	bls.n	8004d14 <pbuf_copy+0xcc>
 8004d06:	4b32      	ldr	r3, [pc, #200]	; (8004dd0 <pbuf_copy+0x188>)
 8004d08:	f240 32da 	movw	r2, #986	; 0x3da
 8004d0c:	4934      	ldr	r1, [pc, #208]	; (8004de0 <pbuf_copy+0x198>)
 8004d0e:	4832      	ldr	r0, [pc, #200]	; (8004dd8 <pbuf_copy+0x190>)
 8004d10:	f008 f872 	bl	800cdf8 <iprintf>
    if (offset_from >= p_from->len) {
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	895b      	ldrh	r3, [r3, #10]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d304      	bcc.n	8004d2a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	895b      	ldrh	r3, [r3, #10]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d114      	bne.n	8004d60 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10c      	bne.n	8004d60 <pbuf_copy+0x118>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d009      	beq.n	8004d60 <pbuf_copy+0x118>
 8004d4c:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <pbuf_copy+0x188>)
 8004d4e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8004d52:	4924      	ldr	r1, [pc, #144]	; (8004de4 <pbuf_copy+0x19c>)
 8004d54:	4820      	ldr	r0, [pc, #128]	; (8004dd8 <pbuf_copy+0x190>)
 8004d56:	f008 f84f 	bl	800cdf8 <iprintf>
 8004d5a:	f06f 030f 	mvn.w	r3, #15
 8004d5e:	e032      	b.n	8004dc6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d013      	beq.n	8004d8e <pbuf_copy+0x146>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	895a      	ldrh	r2, [r3, #10]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	891b      	ldrh	r3, [r3, #8]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d10d      	bne.n	8004d8e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <pbuf_copy+0x146>
 8004d7a:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <pbuf_copy+0x188>)
 8004d7c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8004d80:	4919      	ldr	r1, [pc, #100]	; (8004de8 <pbuf_copy+0x1a0>)
 8004d82:	4815      	ldr	r0, [pc, #84]	; (8004dd8 <pbuf_copy+0x190>)
 8004d84:	f008 f838 	bl	800cdf8 <iprintf>
 8004d88:	f06f 0305 	mvn.w	r3, #5
 8004d8c:	e01b      	b.n	8004dc6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d013      	beq.n	8004dbc <pbuf_copy+0x174>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	895a      	ldrh	r2, [r3, #10]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	891b      	ldrh	r3, [r3, #8]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d10d      	bne.n	8004dbc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d009      	beq.n	8004dbc <pbuf_copy+0x174>
 8004da8:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <pbuf_copy+0x188>)
 8004daa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8004dae:	490e      	ldr	r1, [pc, #56]	; (8004de8 <pbuf_copy+0x1a0>)
 8004db0:	4809      	ldr	r0, [pc, #36]	; (8004dd8 <pbuf_copy+0x190>)
 8004db2:	f008 f821 	bl	800cdf8 <iprintf>
 8004db6:	f06f 0305 	mvn.w	r3, #5
 8004dba:	e004      	b.n	8004dc6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f47f af61 	bne.w	8004c86 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	0800e410 	.word	0x0800e410
 8004dd4:	0800e6b8 	.word	0x0800e6b8
 8004dd8:	0800e470 	.word	0x0800e470
 8004ddc:	0800e6e8 	.word	0x0800e6e8
 8004de0:	0800e700 	.word	0x0800e700
 8004de4:	0800e71c 	.word	0x0800e71c
 8004de8:	0800e72c 	.word	0x0800e72c

08004dec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	4611      	mov	r1, r2
 8004df8:	461a      	mov	r2, r3
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	80fb      	strh	r3, [r7, #6]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d108      	bne.n	8004e22 <pbuf_copy_partial+0x36>
 8004e10:	4b2b      	ldr	r3, [pc, #172]	; (8004ec0 <pbuf_copy_partial+0xd4>)
 8004e12:	f240 420a 	movw	r2, #1034	; 0x40a
 8004e16:	492b      	ldr	r1, [pc, #172]	; (8004ec4 <pbuf_copy_partial+0xd8>)
 8004e18:	482b      	ldr	r0, [pc, #172]	; (8004ec8 <pbuf_copy_partial+0xdc>)
 8004e1a:	f007 ffed 	bl	800cdf8 <iprintf>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e04a      	b.n	8004eb8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d108      	bne.n	8004e3a <pbuf_copy_partial+0x4e>
 8004e28:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <pbuf_copy_partial+0xd4>)
 8004e2a:	f240 420b 	movw	r2, #1035	; 0x40b
 8004e2e:	4927      	ldr	r1, [pc, #156]	; (8004ecc <pbuf_copy_partial+0xe0>)
 8004e30:	4825      	ldr	r0, [pc, #148]	; (8004ec8 <pbuf_copy_partial+0xdc>)
 8004e32:	f007 ffe1 	bl	800cdf8 <iprintf>
 8004e36:	2300      	movs	r3, #0
 8004e38:	e03e      	b.n	8004eb8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	e034      	b.n	8004eaa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8004e40:	88bb      	ldrh	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <pbuf_copy_partial+0x70>
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	895b      	ldrh	r3, [r3, #10]
 8004e4a:	88ba      	ldrh	r2, [r7, #4]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d305      	bcc.n	8004e5c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	895b      	ldrh	r3, [r3, #10]
 8004e54:	88ba      	ldrh	r2, [r7, #4]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	80bb      	strh	r3, [r7, #4]
 8004e5a:	e023      	b.n	8004ea4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	895a      	ldrh	r2, [r3, #10]
 8004e60:	88bb      	ldrh	r3, [r7, #4]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8004e66:	8b3a      	ldrh	r2, [r7, #24]
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d901      	bls.n	8004e72 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8004e72:	8b7b      	ldrh	r3, [r7, #26]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	18d0      	adds	r0, r2, r3
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	88bb      	ldrh	r3, [r7, #4]
 8004e7e:	4413      	add	r3, r2
 8004e80:	8b3a      	ldrh	r2, [r7, #24]
 8004e82:	4619      	mov	r1, r3
 8004e84:	f007 ffa2 	bl	800cdcc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8004e88:	8afa      	ldrh	r2, [r7, #22]
 8004e8a:	8b3b      	ldrh	r3, [r7, #24]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8004e90:	8b7a      	ldrh	r2, [r7, #26]
 8004e92:	8b3b      	ldrh	r3, [r7, #24]
 8004e94:	4413      	add	r3, r2
 8004e96:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8004e98:	88fa      	ldrh	r2, [r7, #6]
 8004e9a:	8b3b      	ldrh	r3, [r7, #24]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	88fb      	ldrh	r3, [r7, #6]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <pbuf_copy_partial+0xca>
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1c4      	bne.n	8004e40 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8004eb6:	8afb      	ldrh	r3, [r7, #22]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3720      	adds	r7, #32
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	0800e410 	.word	0x0800e410
 8004ec4:	0800e758 	.word	0x0800e758
 8004ec8:	0800e470 	.word	0x0800e470
 8004ecc:	0800e778 	.word	0x0800e778

08004ed0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	603a      	str	r2, [r7, #0]
 8004eda:	71fb      	strb	r3, [r7, #7]
 8004edc:	460b      	mov	r3, r1
 8004ede:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	8919      	ldrh	r1, [r3, #8]
 8004ee4:	88ba      	ldrh	r2, [r7, #4]
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff fab1 	bl	8004450 <pbuf_alloc>
 8004eee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <pbuf_clone+0x2a>
    return NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e011      	b.n	8004f1e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8004efa:	6839      	ldr	r1, [r7, #0]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7ff fea3 	bl	8004c48 <pbuf_copy>
 8004f02:	4603      	mov	r3, r0
 8004f04:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8004f06:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d006      	beq.n	8004f1c <pbuf_clone+0x4c>
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <pbuf_clone+0x58>)
 8004f10:	f240 5224 	movw	r2, #1316	; 0x524
 8004f14:	4905      	ldr	r1, [pc, #20]	; (8004f2c <pbuf_clone+0x5c>)
 8004f16:	4806      	ldr	r0, [pc, #24]	; (8004f30 <pbuf_clone+0x60>)
 8004f18:	f007 ff6e 	bl	800cdf8 <iprintf>
  return q;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	0800e410 	.word	0x0800e410
 8004f2c:	0800e884 	.word	0x0800e884
 8004f30:	0800e470 	.word	0x0800e470

08004f34 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8004f38:	f007 ff76 	bl	800ce28 <rand>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	4b01      	ldr	r3, [pc, #4]	; (8004f54 <tcp_init+0x20>)
 8004f4e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8004f50:	bf00      	nop
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	2000000a 	.word	0x2000000a

08004f58 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	7d1b      	ldrb	r3, [r3, #20]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d105      	bne.n	8004f74 <tcp_free+0x1c>
 8004f68:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <tcp_free+0x2c>)
 8004f6a:	22d4      	movs	r2, #212	; 0xd4
 8004f6c:	4906      	ldr	r1, [pc, #24]	; (8004f88 <tcp_free+0x30>)
 8004f6e:	4807      	ldr	r0, [pc, #28]	; (8004f8c <tcp_free+0x34>)
 8004f70:	f007 ff42 	bl	800cdf8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	2001      	movs	r0, #1
 8004f78:	f7fe ff3c 	bl	8003df4 <memp_free>
}
 8004f7c:	bf00      	nop
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	0800e910 	.word	0x0800e910
 8004f88:	0800e940 	.word	0x0800e940
 8004f8c:	0800e954 	.word	0x0800e954

08004f90 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	7d1b      	ldrb	r3, [r3, #20]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d105      	bne.n	8004fac <tcp_free_listen+0x1c>
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <tcp_free_listen+0x2c>)
 8004fa2:	22df      	movs	r2, #223	; 0xdf
 8004fa4:	4906      	ldr	r1, [pc, #24]	; (8004fc0 <tcp_free_listen+0x30>)
 8004fa6:	4807      	ldr	r0, [pc, #28]	; (8004fc4 <tcp_free_listen+0x34>)
 8004fa8:	f007 ff26 	bl	800cdf8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	2002      	movs	r0, #2
 8004fb0:	f7fe ff20 	bl	8003df4 <memp_free>
}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	0800e910 	.word	0x0800e910
 8004fc0:	0800e97c 	.word	0x0800e97c
 8004fc4:	0800e954 	.word	0x0800e954

08004fc8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8004fcc:	f000 fea2 	bl	8005d14 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <tcp_tmr+0x28>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <tcp_tmr+0x28>)
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <tcp_tmr+0x28>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8004fe8:	f000 fb54 	bl	8005694 <tcp_slowtmr>
  }
}
 8004fec:	bf00      	nop
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	200000c9 	.word	0x200000c9

08004ff4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d105      	bne.n	8005010 <tcp_remove_listener+0x1c>
 8005004:	4b0d      	ldr	r3, [pc, #52]	; (800503c <tcp_remove_listener+0x48>)
 8005006:	22ff      	movs	r2, #255	; 0xff
 8005008:	490d      	ldr	r1, [pc, #52]	; (8005040 <tcp_remove_listener+0x4c>)
 800500a:	480e      	ldr	r0, [pc, #56]	; (8005044 <tcp_remove_listener+0x50>)
 800500c:	f007 fef4 	bl	800cdf8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	e00a      	b.n	800502c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d102      	bne.n	8005026 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f1      	bne.n	8005016 <tcp_remove_listener+0x22>
    }
  }
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	0800e910 	.word	0x0800e910
 8005040:	0800e998 	.word	0x0800e998
 8005044:	0800e954 	.word	0x0800e954

08005048 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <tcp_listen_closed+0x1c>
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <tcp_listen_closed+0x60>)
 8005058:	f240 1211 	movw	r2, #273	; 0x111
 800505c:	4913      	ldr	r1, [pc, #76]	; (80050ac <tcp_listen_closed+0x64>)
 800505e:	4814      	ldr	r0, [pc, #80]	; (80050b0 <tcp_listen_closed+0x68>)
 8005060:	f007 feca 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	7d1b      	ldrb	r3, [r3, #20]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d006      	beq.n	800507a <tcp_listen_closed+0x32>
 800506c:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <tcp_listen_closed+0x60>)
 800506e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005072:	4910      	ldr	r1, [pc, #64]	; (80050b4 <tcp_listen_closed+0x6c>)
 8005074:	480e      	ldr	r0, [pc, #56]	; (80050b0 <tcp_listen_closed+0x68>)
 8005076:	f007 febf 	bl	800cdf8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800507a:	2301      	movs	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	e00b      	b.n	8005098 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005080:	4a0d      	ldr	r2, [pc, #52]	; (80050b8 <tcp_listen_closed+0x70>)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff ffb1 	bl	8004ff4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3301      	adds	r3, #1
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d9f0      	bls.n	8005080 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800509e:	bf00      	nop
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	0800e910 	.word	0x0800e910
 80050ac:	0800e9c0 	.word	0x0800e9c0
 80050b0:	0800e954 	.word	0x0800e954
 80050b4:	0800e9cc 	.word	0x0800e9cc
 80050b8:	080108dc 	.word	0x080108dc

080050bc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80050bc:	b5b0      	push	{r4, r5, r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af04      	add	r7, sp, #16
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <tcp_close_shutdown+0x20>
 80050ce:	4b63      	ldr	r3, [pc, #396]	; (800525c <tcp_close_shutdown+0x1a0>)
 80050d0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80050d4:	4962      	ldr	r1, [pc, #392]	; (8005260 <tcp_close_shutdown+0x1a4>)
 80050d6:	4863      	ldr	r0, [pc, #396]	; (8005264 <tcp_close_shutdown+0x1a8>)
 80050d8:	f007 fe8e 	bl	800cdf8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d066      	beq.n	80051b0 <tcp_close_shutdown+0xf4>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	7d1b      	ldrb	r3, [r3, #20]
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d003      	beq.n	80050f2 <tcp_close_shutdown+0x36>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	7d1b      	ldrb	r3, [r3, #20]
 80050ee:	2b07      	cmp	r3, #7
 80050f0:	d15e      	bne.n	80051b0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d104      	bne.n	8005104 <tcp_close_shutdown+0x48>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005102:	d055      	beq.n	80051b0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8b5b      	ldrh	r3, [r3, #26]
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b00      	cmp	r3, #0
 800510e:	d106      	bne.n	800511e <tcp_close_shutdown+0x62>
 8005110:	4b52      	ldr	r3, [pc, #328]	; (800525c <tcp_close_shutdown+0x1a0>)
 8005112:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005116:	4954      	ldr	r1, [pc, #336]	; (8005268 <tcp_close_shutdown+0x1ac>)
 8005118:	4852      	ldr	r0, [pc, #328]	; (8005264 <tcp_close_shutdown+0x1a8>)
 800511a:	f007 fe6d 	bl	800cdf8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005126:	687d      	ldr	r5, [r7, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	8ad2      	ldrh	r2, [r2, #22]
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	8b09      	ldrh	r1, [r1, #24]
 8005134:	9102      	str	r1, [sp, #8]
 8005136:	9201      	str	r2, [sp, #4]
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	462b      	mov	r3, r5
 800513c:	4622      	mov	r2, r4
 800513e:	4601      	mov	r1, r0
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f004 fe8d 	bl	8009e60 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f001 f8c6 	bl	80062d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800514c:	4b47      	ldr	r3, [pc, #284]	; (800526c <tcp_close_shutdown+0x1b0>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	429a      	cmp	r2, r3
 8005154:	d105      	bne.n	8005162 <tcp_close_shutdown+0xa6>
 8005156:	4b45      	ldr	r3, [pc, #276]	; (800526c <tcp_close_shutdown+0x1b0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4a43      	ldr	r2, [pc, #268]	; (800526c <tcp_close_shutdown+0x1b0>)
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	e013      	b.n	800518a <tcp_close_shutdown+0xce>
 8005162:	4b42      	ldr	r3, [pc, #264]	; (800526c <tcp_close_shutdown+0x1b0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	e00c      	b.n	8005184 <tcp_close_shutdown+0xc8>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	429a      	cmp	r2, r3
 8005172:	d104      	bne.n	800517e <tcp_close_shutdown+0xc2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	60da      	str	r2, [r3, #12]
 800517c:	e005      	b.n	800518a <tcp_close_shutdown+0xce>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1ef      	bne.n	800516a <tcp_close_shutdown+0xae>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	60da      	str	r2, [r3, #12]
 8005190:	4b37      	ldr	r3, [pc, #220]	; (8005270 <tcp_close_shutdown+0x1b4>)
 8005192:	2201      	movs	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005196:	4b37      	ldr	r3, [pc, #220]	; (8005274 <tcp_close_shutdown+0x1b8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	429a      	cmp	r2, r3
 800519e:	d102      	bne.n	80051a6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80051a0:	f003 fd5a 	bl	8008c58 <tcp_trigger_input_pcb_close>
 80051a4:	e002      	b.n	80051ac <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff fed6 	bl	8004f58 <tcp_free>
      }
      return ERR_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	e050      	b.n	8005252 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	7d1b      	ldrb	r3, [r3, #20]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d03b      	beq.n	8005230 <tcp_close_shutdown+0x174>
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	dc44      	bgt.n	8005246 <tcp_close_shutdown+0x18a>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <tcp_close_shutdown+0x10a>
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d02a      	beq.n	800521a <tcp_close_shutdown+0x15e>
 80051c4:	e03f      	b.n	8005246 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	8adb      	ldrh	r3, [r3, #22]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d021      	beq.n	8005212 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80051ce:	4b2a      	ldr	r3, [pc, #168]	; (8005278 <tcp_close_shutdown+0x1bc>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d105      	bne.n	80051e4 <tcp_close_shutdown+0x128>
 80051d8:	4b27      	ldr	r3, [pc, #156]	; (8005278 <tcp_close_shutdown+0x1bc>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	4a26      	ldr	r2, [pc, #152]	; (8005278 <tcp_close_shutdown+0x1bc>)
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e013      	b.n	800520c <tcp_close_shutdown+0x150>
 80051e4:	4b24      	ldr	r3, [pc, #144]	; (8005278 <tcp_close_shutdown+0x1bc>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	e00c      	b.n	8005206 <tcp_close_shutdown+0x14a>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d104      	bne.n	8005200 <tcp_close_shutdown+0x144>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	60da      	str	r2, [r3, #12]
 80051fe:	e005      	b.n	800520c <tcp_close_shutdown+0x150>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	60bb      	str	r3, [r7, #8]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1ef      	bne.n	80051ec <tcp_close_shutdown+0x130>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff fea0 	bl	8004f58 <tcp_free>
      break;
 8005218:	e01a      	b.n	8005250 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff ff14 	bl	8005048 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4816      	ldr	r0, [pc, #88]	; (800527c <tcp_close_shutdown+0x1c0>)
 8005224:	f001 f8a8 	bl	8006378 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff feb1 	bl	8004f90 <tcp_free_listen>
      break;
 800522e:	e00f      	b.n	8005250 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	480e      	ldr	r0, [pc, #56]	; (800526c <tcp_close_shutdown+0x1b0>)
 8005234:	f001 f8a0 	bl	8006378 <tcp_pcb_remove>
 8005238:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <tcp_close_shutdown+0x1b4>)
 800523a:	2201      	movs	r2, #1
 800523c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff fe8a 	bl	8004f58 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005244:	e004      	b.n	8005250 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f81a 	bl	8005280 <tcp_close_shutdown_fin>
 800524c:	4603      	mov	r3, r0
 800524e:	e000      	b.n	8005252 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bdb0      	pop	{r4, r5, r7, pc}
 800525a:	bf00      	nop
 800525c:	0800e910 	.word	0x0800e910
 8005260:	0800e9e4 	.word	0x0800e9e4
 8005264:	0800e954 	.word	0x0800e954
 8005268:	0800ea04 	.word	0x0800ea04
 800526c:	20008a50 	.word	0x20008a50
 8005270:	20008a4c 	.word	0x20008a4c
 8005274:	20008a64 	.word	0x20008a64
 8005278:	20008a5c 	.word	0x20008a5c
 800527c:	20008a58 	.word	0x20008a58

08005280 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <tcp_close_shutdown_fin+0x1c>
 800528e:	4b2e      	ldr	r3, [pc, #184]	; (8005348 <tcp_close_shutdown_fin+0xc8>)
 8005290:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005294:	492d      	ldr	r1, [pc, #180]	; (800534c <tcp_close_shutdown_fin+0xcc>)
 8005296:	482e      	ldr	r0, [pc, #184]	; (8005350 <tcp_close_shutdown_fin+0xd0>)
 8005298:	f007 fdae 	bl	800cdf8 <iprintf>

  switch (pcb->state) {
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	7d1b      	ldrb	r3, [r3, #20]
 80052a0:	2b07      	cmp	r3, #7
 80052a2:	d020      	beq.n	80052e6 <tcp_close_shutdown_fin+0x66>
 80052a4:	2b07      	cmp	r3, #7
 80052a6:	dc2b      	bgt.n	8005300 <tcp_close_shutdown_fin+0x80>
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d002      	beq.n	80052b2 <tcp_close_shutdown_fin+0x32>
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d00d      	beq.n	80052cc <tcp_close_shutdown_fin+0x4c>
 80052b0:	e026      	b.n	8005300 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f003 fee2 	bl	800907c <tcp_send_fin>
 80052b8:	4603      	mov	r3, r0
 80052ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80052bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d11f      	bne.n	8005304 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2205      	movs	r2, #5
 80052c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80052ca:	e01b      	b.n	8005304 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f003 fed5 	bl	800907c <tcp_send_fin>
 80052d2:	4603      	mov	r3, r0
 80052d4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80052d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d114      	bne.n	8005308 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2205      	movs	r2, #5
 80052e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80052e4:	e010      	b.n	8005308 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f003 fec8 	bl	800907c <tcp_send_fin>
 80052ec:	4603      	mov	r3, r0
 80052ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80052f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d109      	bne.n	800530c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2209      	movs	r2, #9
 80052fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80052fe:	e005      	b.n	800530c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	e01c      	b.n	800533e <tcp_close_shutdown_fin+0xbe>
      break;
 8005304:	bf00      	nop
 8005306:	e002      	b.n	800530e <tcp_close_shutdown_fin+0x8e>
      break;
 8005308:	bf00      	nop
 800530a:	e000      	b.n	800530e <tcp_close_shutdown_fin+0x8e>
      break;
 800530c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800530e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d103      	bne.n	800531e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f003 ffee 	bl	80092f8 <tcp_output>
 800531c:	e00d      	b.n	800533a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800531e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d108      	bne.n	800533a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	8b5b      	ldrh	r3, [r3, #26]
 800532c:	f043 0308 	orr.w	r3, r3, #8
 8005330:	b29a      	uxth	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e001      	b.n	800533e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800533a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	0800e910 	.word	0x0800e910
 800534c:	0800e9c0 	.word	0x0800e9c0
 8005350:	0800e954 	.word	0x0800e954

08005354 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <tcp_close+0x22>
 8005362:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <tcp_close+0x4c>)
 8005364:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005368:	490e      	ldr	r1, [pc, #56]	; (80053a4 <tcp_close+0x50>)
 800536a:	480f      	ldr	r0, [pc, #60]	; (80053a8 <tcp_close+0x54>)
 800536c:	f007 fd44 	bl	800cdf8 <iprintf>
 8005370:	f06f 030f 	mvn.w	r3, #15
 8005374:	e00f      	b.n	8005396 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	7d1b      	ldrb	r3, [r3, #20]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d006      	beq.n	800538c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	8b5b      	ldrh	r3, [r3, #26]
 8005382:	f043 0310 	orr.w	r3, r3, #16
 8005386:	b29a      	uxth	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800538c:	2101      	movs	r1, #1
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff fe94 	bl	80050bc <tcp_close_shutdown>
 8005394:	4603      	mov	r3, r0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	0800e910 	.word	0x0800e910
 80053a4:	0800ea20 	.word	0x0800ea20
 80053a8:	0800e954 	.word	0x0800e954

080053ac <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08e      	sub	sp, #56	; 0x38
 80053b0:	af04      	add	r7, sp, #16
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d107      	bne.n	80053cc <tcp_abandon+0x20>
 80053bc:	4b52      	ldr	r3, [pc, #328]	; (8005508 <tcp_abandon+0x15c>)
 80053be:	f240 223d 	movw	r2, #573	; 0x23d
 80053c2:	4952      	ldr	r1, [pc, #328]	; (800550c <tcp_abandon+0x160>)
 80053c4:	4852      	ldr	r0, [pc, #328]	; (8005510 <tcp_abandon+0x164>)
 80053c6:	f007 fd17 	bl	800cdf8 <iprintf>
 80053ca:	e099      	b.n	8005500 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	7d1b      	ldrb	r3, [r3, #20]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d106      	bne.n	80053e2 <tcp_abandon+0x36>
 80053d4:	4b4c      	ldr	r3, [pc, #304]	; (8005508 <tcp_abandon+0x15c>)
 80053d6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80053da:	494e      	ldr	r1, [pc, #312]	; (8005514 <tcp_abandon+0x168>)
 80053dc:	484c      	ldr	r0, [pc, #304]	; (8005510 <tcp_abandon+0x164>)
 80053de:	f007 fd0b 	bl	800cdf8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	7d1b      	ldrb	r3, [r3, #20]
 80053e6:	2b0a      	cmp	r3, #10
 80053e8:	d107      	bne.n	80053fa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	484a      	ldr	r0, [pc, #296]	; (8005518 <tcp_abandon+0x16c>)
 80053ee:	f000 ffc3 	bl	8006378 <tcp_pcb_remove>
    tcp_free(pcb);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff fdb0 	bl	8004f58 <tcp_free>
 80053f8:	e082      	b.n	8005500 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80053fe:	2300      	movs	r3, #0
 8005400:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005406:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005414:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	7d1b      	ldrb	r3, [r3, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d126      	bne.n	8005472 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8adb      	ldrh	r3, [r3, #22]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d02e      	beq.n	800548a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800542c:	4b3b      	ldr	r3, [pc, #236]	; (800551c <tcp_abandon+0x170>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d105      	bne.n	8005442 <tcp_abandon+0x96>
 8005436:	4b39      	ldr	r3, [pc, #228]	; (800551c <tcp_abandon+0x170>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4a37      	ldr	r2, [pc, #220]	; (800551c <tcp_abandon+0x170>)
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	e013      	b.n	800546a <tcp_abandon+0xbe>
 8005442:	4b36      	ldr	r3, [pc, #216]	; (800551c <tcp_abandon+0x170>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e00c      	b.n	8005464 <tcp_abandon+0xb8>
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d104      	bne.n	800545e <tcp_abandon+0xb2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	60da      	str	r2, [r3, #12]
 800545c:	e005      	b.n	800546a <tcp_abandon+0xbe>
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	61fb      	str	r3, [r7, #28]
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1ef      	bne.n	800544a <tcp_abandon+0x9e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	60da      	str	r2, [r3, #12]
 8005470:	e00b      	b.n	800548a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8adb      	ldrh	r3, [r3, #22]
 800547a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	4828      	ldr	r0, [pc, #160]	; (8005520 <tcp_abandon+0x174>)
 8005480:	f000 ff7a 	bl	8006378 <tcp_pcb_remove>
 8005484:	4b27      	ldr	r3, [pc, #156]	; (8005524 <tcp_abandon+0x178>)
 8005486:	2201      	movs	r2, #1
 8005488:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548e:	2b00      	cmp	r3, #0
 8005490:	d004      	beq.n	800549c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fd1c 	bl	8005ed4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fd13 	bl	8005ed4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d004      	beq.n	80054c0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fd0a 	bl	8005ed4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00e      	beq.n	80054e4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	8b12      	ldrh	r2, [r2, #24]
 80054d0:	9202      	str	r2, [sp, #8]
 80054d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80054d4:	9201      	str	r2, [sp, #4]
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	460b      	mov	r3, r1
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	69b9      	ldr	r1, [r7, #24]
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f004 fcbe 	bl	8009e60 <tcp_rst>
    }
    last_state = pcb->state;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	7d1b      	ldrb	r3, [r3, #20]
 80054e8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7ff fd34 	bl	8004f58 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d004      	beq.n	8005500 <tcp_abandon+0x154>
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f06f 010c 	mvn.w	r1, #12
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	4798      	blx	r3
  }
}
 8005500:	3728      	adds	r7, #40	; 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	0800e910 	.word	0x0800e910
 800550c:	0800ea54 	.word	0x0800ea54
 8005510:	0800e954 	.word	0x0800e954
 8005514:	0800ea70 	.word	0x0800ea70
 8005518:	20008a60 	.word	0x20008a60
 800551c:	20008a5c 	.word	0x20008a5c
 8005520:	20008a50 	.word	0x20008a50
 8005524:	20008a4c 	.word	0x20008a4c

08005528 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005530:	2101      	movs	r1, #1
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff ff3a 	bl	80053ac <tcp_abandon>
}
 8005538:	bf00      	nop
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <tcp_update_rcv_ann_wnd+0x1c>
 800554e:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <tcp_update_rcv_ann_wnd+0xa4>)
 8005550:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005554:	4924      	ldr	r1, [pc, #144]	; (80055e8 <tcp_update_rcv_ann_wnd+0xa8>)
 8005556:	4825      	ldr	r0, [pc, #148]	; (80055ec <tcp_update_rcv_ann_wnd+0xac>)
 8005558:	f007 fc4e 	bl	800cdf8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005564:	4413      	add	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005570:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005574:	bf28      	it	cs
 8005576:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800557a:	b292      	uxth	r2, r2
 800557c:	4413      	add	r3, r2
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	db08      	blt.n	8005598 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	e020      	b.n	80055da <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	dd03      	ble.n	80055ae <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055ac:	e014      	b.n	80055d8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c0:	d306      	bcc.n	80055d0 <tcp_update_rcv_ann_wnd+0x90>
 80055c2:	4b08      	ldr	r3, [pc, #32]	; (80055e4 <tcp_update_rcv_ann_wnd+0xa4>)
 80055c4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80055c8:	4909      	ldr	r1, [pc, #36]	; (80055f0 <tcp_update_rcv_ann_wnd+0xb0>)
 80055ca:	4808      	ldr	r0, [pc, #32]	; (80055ec <tcp_update_rcv_ann_wnd+0xac>)
 80055cc:	f007 fc14 	bl	800cdf8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80055d8:	2300      	movs	r3, #0
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	0800e910 	.word	0x0800e910
 80055e8:	0800eb6c 	.word	0x0800eb6c
 80055ec:	0800e954 	.word	0x0800e954
 80055f0:	0800eb90 	.word	0x0800eb90

080055f4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d107      	bne.n	8005616 <tcp_recved+0x22>
 8005606:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <tcp_recved+0x90>)
 8005608:	f240 32cf 	movw	r2, #975	; 0x3cf
 800560c:	491e      	ldr	r1, [pc, #120]	; (8005688 <tcp_recved+0x94>)
 800560e:	481f      	ldr	r0, [pc, #124]	; (800568c <tcp_recved+0x98>)
 8005610:	f007 fbf2 	bl	800cdf8 <iprintf>
 8005614:	e032      	b.n	800567c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	7d1b      	ldrb	r3, [r3, #20]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d106      	bne.n	800562c <tcp_recved+0x38>
 800561e:	4b19      	ldr	r3, [pc, #100]	; (8005684 <tcp_recved+0x90>)
 8005620:	f240 32d2 	movw	r2, #978	; 0x3d2
 8005624:	491a      	ldr	r1, [pc, #104]	; (8005690 <tcp_recved+0x9c>)
 8005626:	4819      	ldr	r0, [pc, #100]	; (800568c <tcp_recved+0x98>)
 8005628:	f007 fbe6 	bl	800cdf8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005630:	887b      	ldrh	r3, [r7, #2]
 8005632:	4413      	add	r3, r2
 8005634:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005636:	89fb      	ldrh	r3, [r7, #14]
 8005638:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800563c:	d804      	bhi.n	8005648 <tcp_recved+0x54>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005642:	89fa      	ldrh	r2, [r7, #14]
 8005644:	429a      	cmp	r2, r3
 8005646:	d204      	bcs.n	8005652 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800564e:	851a      	strh	r2, [r3, #40]	; 0x28
 8005650:	e002      	b.n	8005658 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	89fa      	ldrh	r2, [r7, #14]
 8005656:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff ff71 	bl	8005540 <tcp_update_rcv_ann_wnd>
 800565e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005666:	d309      	bcc.n	800567c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	8b5b      	ldrh	r3, [r3, #26]
 800566c:	f043 0302 	orr.w	r3, r3, #2
 8005670:	b29a      	uxth	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f003 fe3e 	bl	80092f8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	0800e910 	.word	0x0800e910
 8005688:	0800ebac 	.word	0x0800ebac
 800568c:	0800e954 	.word	0x0800e954
 8005690:	0800ebc4 	.word	0x0800ebc4

08005694 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005694:	b5b0      	push	{r4, r5, r7, lr}
 8005696:	b090      	sub	sp, #64	; 0x40
 8005698:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80056a0:	4b94      	ldr	r3, [pc, #592]	; (80058f4 <tcp_slowtmr+0x260>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3301      	adds	r3, #1
 80056a6:	4a93      	ldr	r2, [pc, #588]	; (80058f4 <tcp_slowtmr+0x260>)
 80056a8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80056aa:	4b93      	ldr	r3, [pc, #588]	; (80058f8 <tcp_slowtmr+0x264>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	3301      	adds	r3, #1
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	4b91      	ldr	r3, [pc, #580]	; (80058f8 <tcp_slowtmr+0x264>)
 80056b4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80056ba:	4b90      	ldr	r3, [pc, #576]	; (80058fc <tcp_slowtmr+0x268>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80056c0:	e29f      	b.n	8005c02 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	7d1b      	ldrb	r3, [r3, #20]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <tcp_slowtmr+0x44>
 80056ca:	4b8d      	ldr	r3, [pc, #564]	; (8005900 <tcp_slowtmr+0x26c>)
 80056cc:	f240 42be 	movw	r2, #1214	; 0x4be
 80056d0:	498c      	ldr	r1, [pc, #560]	; (8005904 <tcp_slowtmr+0x270>)
 80056d2:	488d      	ldr	r0, [pc, #564]	; (8005908 <tcp_slowtmr+0x274>)
 80056d4:	f007 fb90 	bl	800cdf8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	7d1b      	ldrb	r3, [r3, #20]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d106      	bne.n	80056ee <tcp_slowtmr+0x5a>
 80056e0:	4b87      	ldr	r3, [pc, #540]	; (8005900 <tcp_slowtmr+0x26c>)
 80056e2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80056e6:	4989      	ldr	r1, [pc, #548]	; (800590c <tcp_slowtmr+0x278>)
 80056e8:	4887      	ldr	r0, [pc, #540]	; (8005908 <tcp_slowtmr+0x274>)
 80056ea:	f007 fb85 	bl	800cdf8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	7d1b      	ldrb	r3, [r3, #20]
 80056f2:	2b0a      	cmp	r3, #10
 80056f4:	d106      	bne.n	8005704 <tcp_slowtmr+0x70>
 80056f6:	4b82      	ldr	r3, [pc, #520]	; (8005900 <tcp_slowtmr+0x26c>)
 80056f8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80056fc:	4984      	ldr	r1, [pc, #528]	; (8005910 <tcp_slowtmr+0x27c>)
 80056fe:	4882      	ldr	r0, [pc, #520]	; (8005908 <tcp_slowtmr+0x274>)
 8005700:	f007 fb7a 	bl	800cdf8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005706:	7f9a      	ldrb	r2, [r3, #30]
 8005708:	4b7b      	ldr	r3, [pc, #492]	; (80058f8 <tcp_slowtmr+0x264>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d105      	bne.n	800571c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800571a:	e272      	b.n	8005c02 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800571c:	4b76      	ldr	r3, [pc, #472]	; (80058f8 <tcp_slowtmr+0x264>)
 800571e:	781a      	ldrb	r2, [r3, #0]
 8005720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005722:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005724:	2300      	movs	r3, #0
 8005726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005732:	7d1b      	ldrb	r3, [r3, #20]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d10a      	bne.n	800574e <tcp_slowtmr+0xba>
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800573e:	2b05      	cmp	r3, #5
 8005740:	d905      	bls.n	800574e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005746:	3301      	adds	r3, #1
 8005748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800574c:	e11e      	b.n	800598c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005754:	2b0b      	cmp	r3, #11
 8005756:	d905      	bls.n	8005764 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8005758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800575c:	3301      	adds	r3, #1
 800575e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005762:	e113      	b.n	800598c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800576a:	2b00      	cmp	r3, #0
 800576c:	d075      	beq.n	800585a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800576e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	2b00      	cmp	r3, #0
 8005774:	d006      	beq.n	8005784 <tcp_slowtmr+0xf0>
 8005776:	4b62      	ldr	r3, [pc, #392]	; (8005900 <tcp_slowtmr+0x26c>)
 8005778:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800577c:	4965      	ldr	r1, [pc, #404]	; (8005914 <tcp_slowtmr+0x280>)
 800577e:	4862      	ldr	r0, [pc, #392]	; (8005908 <tcp_slowtmr+0x274>)
 8005780:	f007 fb3a 	bl	800cdf8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <tcp_slowtmr+0x106>
 800578c:	4b5c      	ldr	r3, [pc, #368]	; (8005900 <tcp_slowtmr+0x26c>)
 800578e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005792:	4961      	ldr	r1, [pc, #388]	; (8005918 <tcp_slowtmr+0x284>)
 8005794:	485c      	ldr	r0, [pc, #368]	; (8005908 <tcp_slowtmr+0x274>)
 8005796:	f007 fb2f 	bl	800cdf8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80057a0:	2b0b      	cmp	r3, #11
 80057a2:	d905      	bls.n	80057b0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80057a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057a8:	3301      	adds	r3, #1
 80057aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057ae:	e0ed      	b.n	800598c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80057b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80057b6:	3b01      	subs	r3, #1
 80057b8:	4a58      	ldr	r2, [pc, #352]	; (800591c <tcp_slowtmr+0x288>)
 80057ba:	5cd3      	ldrb	r3, [r2, r3]
 80057bc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80057be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80057c4:	7c7a      	ldrb	r2, [r7, #17]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d907      	bls.n	80057da <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80057d0:	3301      	adds	r3, #1
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80057e0:	7c7a      	ldrb	r2, [r7, #17]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	f200 80d2 	bhi.w	800598c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80057e8:	2301      	movs	r3, #1
 80057ea:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80057ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d108      	bne.n	8005808 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80057f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057f8:	f004 fc26 	bl	800a048 <tcp_zero_window_probe>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d014      	beq.n	800582c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8005802:	2300      	movs	r3, #0
 8005804:	623b      	str	r3, [r7, #32]
 8005806:	e011      	b.n	800582c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800580e:	4619      	mov	r1, r3
 8005810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005812:	f003 faeb 	bl	8008dec <tcp_split_unsent_seg>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d107      	bne.n	800582c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800581c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800581e:	f003 fd6b 	bl	80092f8 <tcp_output>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 80ac 	beq.w	800598c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005842:	2b06      	cmp	r3, #6
 8005844:	f200 80a2 	bhi.w	800598c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800584e:	3301      	adds	r3, #1
 8005850:	b2da      	uxtb	r2, r3
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8005858:	e098      	b.n	800598c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005860:	2b00      	cmp	r3, #0
 8005862:	db0f      	blt.n	8005884 <tcp_slowtmr+0x1f0>
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800586a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800586e:	4293      	cmp	r3, r2
 8005870:	d008      	beq.n	8005884 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005878:	b29b      	uxth	r3, r3
 800587a:	3301      	adds	r3, #1
 800587c:	b29b      	uxth	r3, r3
 800587e:	b21a      	sxth	r2, r3
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005886:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005890:	429a      	cmp	r2, r3
 8005892:	db7b      	blt.n	800598c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005896:	f004 f821 	bl	80098dc <tcp_rexmit_rto_prepare>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <tcp_slowtmr+0x21c>
 80058a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d171      	bne.n	800598c <tcp_slowtmr+0x2f8>
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d06d      	beq.n	800598c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80058b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b2:	7d1b      	ldrb	r3, [r3, #20]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d03a      	beq.n	800592e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058be:	2b0c      	cmp	r3, #12
 80058c0:	bf28      	it	cs
 80058c2:	230c      	movcs	r3, #12
 80058c4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80058cc:	10db      	asrs	r3, r3, #3
 80058ce:	b21b      	sxth	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80058d8:	4413      	add	r3, r2
 80058da:	7efa      	ldrb	r2, [r7, #27]
 80058dc:	4910      	ldr	r1, [pc, #64]	; (8005920 <tcp_slowtmr+0x28c>)
 80058de:	5c8a      	ldrb	r2, [r1, r2]
 80058e0:	4093      	lsls	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80058ea:	4293      	cmp	r3, r2
 80058ec:	dc1a      	bgt.n	8005924 <tcp_slowtmr+0x290>
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	b21a      	sxth	r2, r3
 80058f2:	e019      	b.n	8005928 <tcp_slowtmr+0x294>
 80058f4:	20008a54 	.word	0x20008a54
 80058f8:	200000ca 	.word	0x200000ca
 80058fc:	20008a50 	.word	0x20008a50
 8005900:	0800e910 	.word	0x0800e910
 8005904:	0800ec54 	.word	0x0800ec54
 8005908:	0800e954 	.word	0x0800e954
 800590c:	0800ec80 	.word	0x0800ec80
 8005910:	0800ecac 	.word	0x0800ecac
 8005914:	0800ecdc 	.word	0x0800ecdc
 8005918:	0800ed10 	.word	0x0800ed10
 800591c:	080108d4 	.word	0x080108d4
 8005920:	080108c4 	.word	0x080108c4
 8005924:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005930:	2200      	movs	r2, #0
 8005932:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005940:	4293      	cmp	r3, r2
 8005942:	bf28      	it	cs
 8005944:	4613      	movcs	r3, r2
 8005946:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8005948:	8a7b      	ldrh	r3, [r7, #18]
 800594a:	085b      	lsrs	r3, r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005950:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	b29b      	uxth	r3, r3
 8005962:	429a      	cmp	r2, r3
 8005964:	d206      	bcs.n	8005974 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800597e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005980:	2200      	movs	r2, #0
 8005982:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8005986:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005988:	f004 f818 	bl	80099bc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800598c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598e:	7d1b      	ldrb	r3, [r3, #20]
 8005990:	2b06      	cmp	r3, #6
 8005992:	d111      	bne.n	80059b8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005996:	8b5b      	ldrh	r3, [r3, #26]
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80059a0:	4b9d      	ldr	r3, [pc, #628]	; (8005c18 <tcp_slowtmr+0x584>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b28      	cmp	r3, #40	; 0x28
 80059ac:	d904      	bls.n	80059b8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80059ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059b2:	3301      	adds	r3, #1
 80059b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	7a5b      	ldrb	r3, [r3, #9]
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d04c      	beq.n	8005a5e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d003      	beq.n	80059d4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80059cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80059d0:	2b07      	cmp	r3, #7
 80059d2:	d144      	bne.n	8005a5e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80059d4:	4b90      	ldr	r3, [pc, #576]	; (8005c18 <tcp_slowtmr+0x584>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80059de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80059e8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80059ec:	498b      	ldr	r1, [pc, #556]	; (8005c1c <tcp_slowtmr+0x588>)
 80059ee:	fba1 1303 	umull	r1, r3, r1, r3
 80059f2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d90a      	bls.n	8005a0e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80059f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059fc:	3301      	adds	r3, #1
 80059fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8005a02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a06:	3301      	adds	r3, #1
 8005a08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a0c:	e027      	b.n	8005a5e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005a0e:	4b82      	ldr	r3, [pc, #520]	; (8005c18 <tcp_slowtmr+0x584>)
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005a24:	4618      	mov	r0, r3
 8005a26:	4b7e      	ldr	r3, [pc, #504]	; (8005c20 <tcp_slowtmr+0x58c>)
 8005a28:	fb03 f300 	mul.w	r3, r3, r0
 8005a2c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8005a2e:	497b      	ldr	r1, [pc, #492]	; (8005c1c <tcp_slowtmr+0x588>)
 8005a30:	fba1 1303 	umull	r1, r3, r1, r3
 8005a34:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d911      	bls.n	8005a5e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8005a3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a3c:	f004 fac4 	bl	8009fc8 <tcp_keepalive>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8005a46:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d107      	bne.n	8005a5e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005a54:	3301      	adds	r3, #1
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d011      	beq.n	8005a8a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8005a66:	4b6c      	ldr	r3, [pc, #432]	; (8005c18 <tcp_slowtmr+0x584>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	1ad2      	subs	r2, r2, r3
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005a76:	4619      	mov	r1, r3
 8005a78:	460b      	mov	r3, r1
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	440b      	add	r3, r1
 8005a7e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d302      	bcc.n	8005a8a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8005a84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a86:	f000 fddb 	bl	8006640 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	7d1b      	ldrb	r3, [r3, #20]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d10b      	bne.n	8005aaa <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005a92:	4b61      	ldr	r3, [pc, #388]	; (8005c18 <tcp_slowtmr+0x584>)
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b28      	cmp	r3, #40	; 0x28
 8005a9e:	d904      	bls.n	8005aaa <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	7d1b      	ldrb	r3, [r3, #20]
 8005aae:	2b09      	cmp	r3, #9
 8005ab0:	d10b      	bne.n	8005aca <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005ab2:	4b59      	ldr	r3, [pc, #356]	; (8005c18 <tcp_slowtmr+0x584>)
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2bf0      	cmp	r3, #240	; 0xf0
 8005abe:	d904      	bls.n	8005aca <tcp_slowtmr+0x436>
        ++pcb_remove;
 8005ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005aca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d060      	beq.n	8005b94 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005ada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005adc:	f000 fbfc 	bl	80062d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d010      	beq.n	8005b08 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005ae6:	4b4f      	ldr	r3, [pc, #316]	; (8005c24 <tcp_slowtmr+0x590>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d106      	bne.n	8005afe <tcp_slowtmr+0x46a>
 8005af0:	4b4d      	ldr	r3, [pc, #308]	; (8005c28 <tcp_slowtmr+0x594>)
 8005af2:	f240 526d 	movw	r2, #1389	; 0x56d
 8005af6:	494d      	ldr	r1, [pc, #308]	; (8005c2c <tcp_slowtmr+0x598>)
 8005af8:	484d      	ldr	r0, [pc, #308]	; (8005c30 <tcp_slowtmr+0x59c>)
 8005afa:	f007 f97d 	bl	800cdf8 <iprintf>
        prev->next = pcb->next;
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b04:	60da      	str	r2, [r3, #12]
 8005b06:	e00f      	b.n	8005b28 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005b08:	4b46      	ldr	r3, [pc, #280]	; (8005c24 <tcp_slowtmr+0x590>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d006      	beq.n	8005b20 <tcp_slowtmr+0x48c>
 8005b12:	4b45      	ldr	r3, [pc, #276]	; (8005c28 <tcp_slowtmr+0x594>)
 8005b14:	f240 5271 	movw	r2, #1393	; 0x571
 8005b18:	4946      	ldr	r1, [pc, #280]	; (8005c34 <tcp_slowtmr+0x5a0>)
 8005b1a:	4845      	ldr	r0, [pc, #276]	; (8005c30 <tcp_slowtmr+0x59c>)
 8005b1c:	f007 f96c 	bl	800cdf8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4a3f      	ldr	r2, [pc, #252]	; (8005c24 <tcp_slowtmr+0x590>)
 8005b26:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005b28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d013      	beq.n	8005b58 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005b38:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b40:	8ad2      	ldrh	r2, [r2, #22]
 8005b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b44:	8b09      	ldrh	r1, [r1, #24]
 8005b46:	9102      	str	r1, [sp, #8]
 8005b48:	9201      	str	r2, [sp, #4]
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	462b      	mov	r3, r5
 8005b4e:	4622      	mov	r2, r4
 8005b50:	4601      	mov	r1, r0
 8005b52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b54:	f004 f984 	bl	8009e60 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	7d1b      	ldrb	r3, [r3, #20]
 8005b62:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b66:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8005b6e:	6838      	ldr	r0, [r7, #0]
 8005b70:	f7ff f9f2 	bl	8004f58 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8005b74:	4b30      	ldr	r3, [pc, #192]	; (8005c38 <tcp_slowtmr+0x5a4>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d004      	beq.n	8005b8a <tcp_slowtmr+0x4f6>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f06f 010c 	mvn.w	r1, #12
 8005b86:	68b8      	ldr	r0, [r7, #8]
 8005b88:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005b8a:	4b2b      	ldr	r3, [pc, #172]	; (8005c38 <tcp_slowtmr+0x5a4>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d037      	beq.n	8005c02 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8005b92:	e590      	b.n	80056b6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	7f1b      	ldrb	r3, [r3, #28]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	7f1a      	ldrb	r2, [r3, #28]
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	7f5b      	ldrb	r3, [r3, #29]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d325      	bcc.n	8005c02 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	2200      	movs	r2, #0
 8005bba:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8005bbc:	4b1e      	ldr	r3, [pc, #120]	; (8005c38 <tcp_slowtmr+0x5a4>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00b      	beq.n	8005be4 <tcp_slowtmr+0x550>
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bd4:	6912      	ldr	r2, [r2, #16]
 8005bd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bd8:	4610      	mov	r0, r2
 8005bda:	4798      	blx	r3
 8005bdc:	4603      	mov	r3, r0
 8005bde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005be2:	e002      	b.n	8005bea <tcp_slowtmr+0x556>
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8005bea:	4b13      	ldr	r3, [pc, #76]	; (8005c38 <tcp_slowtmr+0x5a4>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d000      	beq.n	8005bf4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8005bf2:	e560      	b.n	80056b6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8005bf4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d102      	bne.n	8005c02 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8005bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bfe:	f003 fb7b 	bl	80092f8 <tcp_output>
  while (pcb != NULL) {
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f47f ad5c 	bne.w	80056c2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <tcp_slowtmr+0x5a8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8005c14:	e067      	b.n	8005ce6 <tcp_slowtmr+0x652>
 8005c16:	bf00      	nop
 8005c18:	20008a54 	.word	0x20008a54
 8005c1c:	10624dd3 	.word	0x10624dd3
 8005c20:	000124f8 	.word	0x000124f8
 8005c24:	20008a50 	.word	0x20008a50
 8005c28:	0800e910 	.word	0x0800e910
 8005c2c:	0800ed48 	.word	0x0800ed48
 8005c30:	0800e954 	.word	0x0800e954
 8005c34:	0800ed74 	.word	0x0800ed74
 8005c38:	20008a4c 	.word	0x20008a4c
 8005c3c:	20008a60 	.word	0x20008a60
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	7d1b      	ldrb	r3, [r3, #20]
 8005c44:	2b0a      	cmp	r3, #10
 8005c46:	d006      	beq.n	8005c56 <tcp_slowtmr+0x5c2>
 8005c48:	4b2b      	ldr	r3, [pc, #172]	; (8005cf8 <tcp_slowtmr+0x664>)
 8005c4a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8005c4e:	492b      	ldr	r1, [pc, #172]	; (8005cfc <tcp_slowtmr+0x668>)
 8005c50:	482b      	ldr	r0, [pc, #172]	; (8005d00 <tcp_slowtmr+0x66c>)
 8005c52:	f007 f8d1 	bl	800cdf8 <iprintf>
    pcb_remove = 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005c5c:	4b29      	ldr	r3, [pc, #164]	; (8005d04 <tcp_slowtmr+0x670>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2bf0      	cmp	r3, #240	; 0xf0
 8005c68:	d904      	bls.n	8005c74 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8005c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c6e:	3301      	adds	r3, #1
 8005c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d02f      	beq.n	8005cdc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8005c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c7e:	f000 fb2b 	bl	80062d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d010      	beq.n	8005caa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005c88:	4b1f      	ldr	r3, [pc, #124]	; (8005d08 <tcp_slowtmr+0x674>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d106      	bne.n	8005ca0 <tcp_slowtmr+0x60c>
 8005c92:	4b19      	ldr	r3, [pc, #100]	; (8005cf8 <tcp_slowtmr+0x664>)
 8005c94:	f240 52af 	movw	r2, #1455	; 0x5af
 8005c98:	491c      	ldr	r1, [pc, #112]	; (8005d0c <tcp_slowtmr+0x678>)
 8005c9a:	4819      	ldr	r0, [pc, #100]	; (8005d00 <tcp_slowtmr+0x66c>)
 8005c9c:	f007 f8ac 	bl	800cdf8 <iprintf>
        prev->next = pcb->next;
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	60da      	str	r2, [r3, #12]
 8005ca8:	e00f      	b.n	8005cca <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005caa:	4b17      	ldr	r3, [pc, #92]	; (8005d08 <tcp_slowtmr+0x674>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d006      	beq.n	8005cc2 <tcp_slowtmr+0x62e>
 8005cb4:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <tcp_slowtmr+0x664>)
 8005cb6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8005cba:	4915      	ldr	r1, [pc, #84]	; (8005d10 <tcp_slowtmr+0x67c>)
 8005cbc:	4810      	ldr	r0, [pc, #64]	; (8005d00 <tcp_slowtmr+0x66c>)
 8005cbe:	f007 f89b 	bl	800cdf8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	4a10      	ldr	r2, [pc, #64]	; (8005d08 <tcp_slowtmr+0x674>)
 8005cc8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ccc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8005cd4:	69f8      	ldr	r0, [r7, #28]
 8005cd6:	f7ff f93f 	bl	8004f58 <tcp_free>
 8005cda:	e004      	b.n	8005ce6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1a9      	bne.n	8005c40 <tcp_slowtmr+0x5ac>
    }
  }
}
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	3730      	adds	r7, #48	; 0x30
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	0800e910 	.word	0x0800e910
 8005cfc:	0800eda0 	.word	0x0800eda0
 8005d00:	0800e954 	.word	0x0800e954
 8005d04:	20008a54 	.word	0x20008a54
 8005d08:	20008a60 	.word	0x20008a60
 8005d0c:	0800edd0 	.word	0x0800edd0
 8005d10:	0800edf8 	.word	0x0800edf8

08005d14 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8005d1a:	4b2d      	ldr	r3, [pc, #180]	; (8005dd0 <tcp_fasttmr+0xbc>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	4b2b      	ldr	r3, [pc, #172]	; (8005dd0 <tcp_fasttmr+0xbc>)
 8005d24:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8005d26:	4b2b      	ldr	r3, [pc, #172]	; (8005dd4 <tcp_fasttmr+0xc0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8005d2c:	e048      	b.n	8005dc0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	7f9a      	ldrb	r2, [r3, #30]
 8005d32:	4b27      	ldr	r3, [pc, #156]	; (8005dd0 <tcp_fasttmr+0xbc>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d03f      	beq.n	8005dba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8005d3a:	4b25      	ldr	r3, [pc, #148]	; (8005dd0 <tcp_fasttmr+0xbc>)
 8005d3c:	781a      	ldrb	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	8b5b      	ldrh	r3, [r3, #26]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d010      	beq.n	8005d70 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	8b5b      	ldrh	r3, [r3, #26]
 8005d52:	f043 0302 	orr.w	r3, r3, #2
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f003 facb 	bl	80092f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8b5b      	ldrh	r3, [r3, #26]
 8005d66:	f023 0303 	bic.w	r3, r3, #3
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8b5b      	ldrh	r3, [r3, #26]
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d009      	beq.n	8005d90 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	8b5b      	ldrh	r3, [r3, #26]
 8005d80:	f023 0308 	bic.w	r3, r3, #8
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff fa78 	bl	8005280 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8005d9e:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <tcp_fasttmr+0xc4>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f819 	bl	8005ddc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8005daa:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <tcp_fasttmr+0xc4>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d000      	beq.n	8005db4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8005db2:	e7b8      	b.n	8005d26 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	607b      	str	r3, [r7, #4]
 8005db8:	e002      	b.n	8005dc0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1b3      	bne.n	8005d2e <tcp_fasttmr+0x1a>
    }
  }
}
 8005dc6:	bf00      	nop
 8005dc8:	bf00      	nop
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	200000ca 	.word	0x200000ca
 8005dd4:	20008a50 	.word	0x20008a50
 8005dd8:	20008a4c 	.word	0x20008a4c

08005ddc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d109      	bne.n	8005dfe <tcp_process_refused_data+0x22>
 8005dea:	4b37      	ldr	r3, [pc, #220]	; (8005ec8 <tcp_process_refused_data+0xec>)
 8005dec:	f240 6209 	movw	r2, #1545	; 0x609
 8005df0:	4936      	ldr	r1, [pc, #216]	; (8005ecc <tcp_process_refused_data+0xf0>)
 8005df2:	4837      	ldr	r0, [pc, #220]	; (8005ed0 <tcp_process_refused_data+0xf4>)
 8005df4:	f007 f800 	bl	800cdf8 <iprintf>
 8005df8:	f06f 030f 	mvn.w	r3, #15
 8005dfc:	e060      	b.n	8005ec0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e02:	7b5b      	ldrb	r3, [r3, #13]
 8005e04:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e0a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <tcp_process_refused_data+0x58>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6918      	ldr	r0, [r3, #16]
 8005e26:	2300      	movs	r3, #0
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	47a0      	blx	r4
 8005e2e:	4603      	mov	r3, r0
 8005e30:	73fb      	strb	r3, [r7, #15]
 8005e32:	e007      	b.n	8005e44 <tcp_process_refused_data+0x68>
 8005e34:	2300      	movs	r3, #0
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	6879      	ldr	r1, [r7, #4]
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	f000 f8a4 	bl	8005f88 <tcp_recv_null>
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d12a      	bne.n	8005ea2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8005e4c:	7bbb      	ldrb	r3, [r7, #14]
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d033      	beq.n	8005ebe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005e5e:	d005      	beq.n	8005e6c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e64:	3301      	adds	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <tcp_process_refused_data+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6918      	ldr	r0, [r3, #16]
 8005e80:	2300      	movs	r3, #0
 8005e82:	2200      	movs	r2, #0
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	47a0      	blx	r4
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73fb      	strb	r3, [r7, #15]
 8005e8c:	e001      	b.n	8005e92 <tcp_process_refused_data+0xb6>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8005e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e96:	f113 0f0d 	cmn.w	r3, #13
 8005e9a:	d110      	bne.n	8005ebe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8005e9c:	f06f 030c 	mvn.w	r3, #12
 8005ea0:	e00e      	b.n	8005ec0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8005ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea6:	f113 0f0d 	cmn.w	r3, #13
 8005eaa:	d102      	bne.n	8005eb2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8005eac:	f06f 030c 	mvn.w	r3, #12
 8005eb0:	e006      	b.n	8005ec0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8005eb8:	f06f 0304 	mvn.w	r3, #4
 8005ebc:	e000      	b.n	8005ec0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd90      	pop	{r4, r7, pc}
 8005ec8:	0800e910 	.word	0x0800e910
 8005ecc:	0800ee20 	.word	0x0800ee20
 8005ed0:	0800e954 	.word	0x0800e954

08005ed4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8005edc:	e007      	b.n	8005eee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f80a 	bl	8005efe <tcp_seg_free>
    seg = next;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1f4      	bne.n	8005ede <tcp_segs_free+0xa>
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00c      	beq.n	8005f26 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d004      	beq.n	8005f1e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe fd7d 	bl	8004a18 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	2003      	movs	r0, #3
 8005f22:	f7fd ff67 	bl	8003df4 <memp_free>
  }
}
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
	...

08005f30 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <tcp_seg_copy+0x1c>
 8005f3e:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <tcp_seg_copy+0x4c>)
 8005f40:	f240 6282 	movw	r2, #1666	; 0x682
 8005f44:	490e      	ldr	r1, [pc, #56]	; (8005f80 <tcp_seg_copy+0x50>)
 8005f46:	480f      	ldr	r0, [pc, #60]	; (8005f84 <tcp_seg_copy+0x54>)
 8005f48:	f006 ff56 	bl	800cdf8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8005f4c:	2003      	movs	r0, #3
 8005f4e:	f7fd ff05 	bl	8003d5c <memp_malloc>
 8005f52:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <tcp_seg_copy+0x2e>
    return NULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e00a      	b.n	8005f74 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8005f5e:	2210      	movs	r2, #16
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f006 ff32 	bl	800cdcc <memcpy>
  pbuf_ref(cseg->p);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fe fdf3 	bl	8004b58 <pbuf_ref>
  return cseg;
 8005f72:	68fb      	ldr	r3, [r7, #12]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	0800e910 	.word	0x0800e910
 8005f80:	0800ee64 	.word	0x0800ee64
 8005f84:	0800e954 	.word	0x0800e954

08005f88 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d109      	bne.n	8005fb0 <tcp_recv_null+0x28>
 8005f9c:	4b12      	ldr	r3, [pc, #72]	; (8005fe8 <tcp_recv_null+0x60>)
 8005f9e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8005fa2:	4912      	ldr	r1, [pc, #72]	; (8005fec <tcp_recv_null+0x64>)
 8005fa4:	4812      	ldr	r0, [pc, #72]	; (8005ff0 <tcp_recv_null+0x68>)
 8005fa6:	f006 ff27 	bl	800cdf8 <iprintf>
 8005faa:	f06f 030f 	mvn.w	r3, #15
 8005fae:	e016      	b.n	8005fde <tcp_recv_null+0x56>

  if (p != NULL) {
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d009      	beq.n	8005fca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	891b      	ldrh	r3, [r3, #8]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	68b8      	ldr	r0, [r7, #8]
 8005fbe:	f7ff fb19 	bl	80055f4 <tcp_recved>
    pbuf_free(p);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fe fd28 	bl	8004a18 <pbuf_free>
 8005fc8:	e008      	b.n	8005fdc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8005fca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8005fd2:	68b8      	ldr	r0, [r7, #8]
 8005fd4:	f7ff f9be 	bl	8005354 <tcp_close>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	e000      	b.n	8005fde <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	0800e910 	.word	0x0800e910
 8005fec:	0800ee80 	.word	0x0800ee80
 8005ff0:	0800e954 	.word	0x0800e954

08005ff4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8005ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006002:	2b00      	cmp	r3, #0
 8006004:	db01      	blt.n	800600a <tcp_kill_prio+0x16>
 8006006:	79fb      	ldrb	r3, [r7, #7]
 8006008:	e000      	b.n	800600c <tcp_kill_prio+0x18>
 800600a:	237f      	movs	r3, #127	; 0x7f
 800600c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d034      	beq.n	800607e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006014:	7afb      	ldrb	r3, [r7, #11]
 8006016:	3b01      	subs	r3, #1
 8006018:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006022:	4b19      	ldr	r3, [pc, #100]	; (8006088 <tcp_kill_prio+0x94>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e01f      	b.n	800606a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	7d5b      	ldrb	r3, [r3, #21]
 800602e:	7afa      	ldrb	r2, [r7, #11]
 8006030:	429a      	cmp	r2, r3
 8006032:	d80c      	bhi.n	800604e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006038:	7afa      	ldrb	r2, [r7, #11]
 800603a:	429a      	cmp	r2, r3
 800603c:	d112      	bne.n	8006064 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800603e:	4b13      	ldr	r3, [pc, #76]	; (800608c <tcp_kill_prio+0x98>)
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	429a      	cmp	r2, r3
 800604c:	d80a      	bhi.n	8006064 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800604e:	4b0f      	ldr	r3, [pc, #60]	; (800608c <tcp_kill_prio+0x98>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	7d5b      	ldrb	r3, [r3, #21]
 8006062:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1dc      	bne.n	800602a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d004      	beq.n	8006080 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006076:	6938      	ldr	r0, [r7, #16]
 8006078:	f7ff fa56 	bl	8005528 <tcp_abort>
 800607c:	e000      	b.n	8006080 <tcp_kill_prio+0x8c>
    return;
 800607e:	bf00      	nop
  }
}
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20008a50 	.word	0x20008a50
 800608c:	20008a54 	.word	0x20008a54

08006090 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	4603      	mov	r3, r0
 8006098:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	2b08      	cmp	r3, #8
 800609e:	d009      	beq.n	80060b4 <tcp_kill_state+0x24>
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	2b09      	cmp	r3, #9
 80060a4:	d006      	beq.n	80060b4 <tcp_kill_state+0x24>
 80060a6:	4b1a      	ldr	r3, [pc, #104]	; (8006110 <tcp_kill_state+0x80>)
 80060a8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80060ac:	4919      	ldr	r1, [pc, #100]	; (8006114 <tcp_kill_state+0x84>)
 80060ae:	481a      	ldr	r0, [pc, #104]	; (8006118 <tcp_kill_state+0x88>)
 80060b0:	f006 fea2 	bl	800cdf8 <iprintf>

  inactivity = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80060bc:	4b17      	ldr	r3, [pc, #92]	; (800611c <tcp_kill_state+0x8c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	e017      	b.n	80060f4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	7d1b      	ldrb	r3, [r3, #20]
 80060c8:	79fa      	ldrb	r2, [r7, #7]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d10f      	bne.n	80060ee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80060ce:	4b14      	ldr	r3, [pc, #80]	; (8006120 <tcp_kill_state+0x90>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d807      	bhi.n	80060ee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80060de:	4b10      	ldr	r3, [pc, #64]	; (8006120 <tcp_kill_state+0x90>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e4      	bne.n	80060c4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006100:	2100      	movs	r1, #0
 8006102:	6938      	ldr	r0, [r7, #16]
 8006104:	f7ff f952 	bl	80053ac <tcp_abandon>
  }
}
 8006108:	bf00      	nop
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	0800e910 	.word	0x0800e910
 8006114:	0800ee9c 	.word	0x0800ee9c
 8006118:	0800e954 	.word	0x0800e954
 800611c:	20008a50 	.word	0x20008a50
 8006120:	20008a54 	.word	0x20008a54

08006124 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006132:	4b12      	ldr	r3, [pc, #72]	; (800617c <tcp_kill_timewait+0x58>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	e012      	b.n	8006160 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800613a:	4b11      	ldr	r3, [pc, #68]	; (8006180 <tcp_kill_timewait+0x5c>)
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	429a      	cmp	r2, r3
 8006148:	d807      	bhi.n	800615a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800614a:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <tcp_kill_timewait+0x5c>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e9      	bne.n	800613a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800616c:	68b8      	ldr	r0, [r7, #8]
 800616e:	f7ff f9db 	bl	8005528 <tcp_abort>
  }
}
 8006172:	bf00      	nop
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	20008a60 	.word	0x20008a60
 8006180:	20008a54 	.word	0x20008a54

08006184 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800618a:	4b10      	ldr	r3, [pc, #64]	; (80061cc <tcp_handle_closepend+0x48>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006190:	e014      	b.n	80061bc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8b5b      	ldrh	r3, [r3, #26]
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d009      	beq.n	80061b8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	8b5b      	ldrh	r3, [r3, #26]
 80061a8:	f023 0308 	bic.w	r3, r3, #8
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff f864 	bl	8005280 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e7      	bne.n	8006192 <tcp_handle_closepend+0xe>
  }
}
 80061c2:	bf00      	nop
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20008a50 	.word	0x20008a50

080061d0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	4603      	mov	r3, r0
 80061d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80061da:	2001      	movs	r0, #1
 80061dc:	f7fd fdbe 	bl	8003d5c <memp_malloc>
 80061e0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d126      	bne.n	8006236 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80061e8:	f7ff ffcc 	bl	8006184 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80061ec:	f7ff ff9a 	bl	8006124 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80061f0:	2001      	movs	r0, #1
 80061f2:	f7fd fdb3 	bl	8003d5c <memp_malloc>
 80061f6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d11b      	bne.n	8006236 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80061fe:	2009      	movs	r0, #9
 8006200:	f7ff ff46 	bl	8006090 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006204:	2001      	movs	r0, #1
 8006206:	f7fd fda9 	bl	8003d5c <memp_malloc>
 800620a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d111      	bne.n	8006236 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006212:	2008      	movs	r0, #8
 8006214:	f7ff ff3c 	bl	8006090 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006218:	2001      	movs	r0, #1
 800621a:	f7fd fd9f 	bl	8003d5c <memp_malloc>
 800621e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d107      	bne.n	8006236 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff fee3 	bl	8005ff4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800622e:	2001      	movs	r0, #1
 8006230:	f7fd fd94 	bl	8003d5c <memp_malloc>
 8006234:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d03f      	beq.n	80062bc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800623c:	229c      	movs	r2, #156	; 0x9c
 800623e:	2100      	movs	r1, #0
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f006 fdd1 	bl	800cde8 <memset>
    pcb->prio = prio;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	79fa      	ldrb	r2, [r7, #7]
 800624a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006252:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800625c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	22ff      	movs	r2, #255	; 0xff
 800626a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006272:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2206      	movs	r2, #6
 8006278:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2206      	movs	r2, #6
 8006280:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006288:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006292:	4b0d      	ldr	r3, [pc, #52]	; (80062c8 <tcp_alloc+0xf8>)
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800629a:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <tcp_alloc+0xfc>)
 800629c:	781a      	ldrb	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80062a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4a08      	ldr	r2, [pc, #32]	; (80062d0 <tcp_alloc+0x100>)
 80062b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4a07      	ldr	r2, [pc, #28]	; (80062d4 <tcp_alloc+0x104>)
 80062b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80062bc:	68fb      	ldr	r3, [r7, #12]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20008a54 	.word	0x20008a54
 80062cc:	200000ca 	.word	0x200000ca
 80062d0:	08005f89 	.word	0x08005f89
 80062d4:	006ddd00 	.word	0x006ddd00

080062d8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d107      	bne.n	80062f6 <tcp_pcb_purge+0x1e>
 80062e6:	4b21      	ldr	r3, [pc, #132]	; (800636c <tcp_pcb_purge+0x94>)
 80062e8:	f640 0251 	movw	r2, #2129	; 0x851
 80062ec:	4920      	ldr	r1, [pc, #128]	; (8006370 <tcp_pcb_purge+0x98>)
 80062ee:	4821      	ldr	r0, [pc, #132]	; (8006374 <tcp_pcb_purge+0x9c>)
 80062f0:	f006 fd82 	bl	800cdf8 <iprintf>
 80062f4:	e037      	b.n	8006366 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	7d1b      	ldrb	r3, [r3, #20]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d033      	beq.n	8006366 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006302:	2b0a      	cmp	r3, #10
 8006304:	d02f      	beq.n	8006366 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800630a:	2b01      	cmp	r3, #1
 800630c:	d02b      	beq.n	8006366 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe fb7c 	bl	8004a18 <pbuf_free>
      pcb->refused_data = NULL;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f986 	bl	8006640 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800633a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff fdc7 	bl	8005ed4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff fdc2 	bl	8005ed4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	66da      	str	r2, [r3, #108]	; 0x6c
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	0800e910 	.word	0x0800e910
 8006370:	0800ef5c 	.word	0x0800ef5c
 8006374:	0800e954 	.word	0x0800e954

08006378 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d106      	bne.n	8006396 <tcp_pcb_remove+0x1e>
 8006388:	4b3e      	ldr	r3, [pc, #248]	; (8006484 <tcp_pcb_remove+0x10c>)
 800638a:	f640 0283 	movw	r2, #2179	; 0x883
 800638e:	493e      	ldr	r1, [pc, #248]	; (8006488 <tcp_pcb_remove+0x110>)
 8006390:	483e      	ldr	r0, [pc, #248]	; (800648c <tcp_pcb_remove+0x114>)
 8006392:	f006 fd31 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d106      	bne.n	80063aa <tcp_pcb_remove+0x32>
 800639c:	4b39      	ldr	r3, [pc, #228]	; (8006484 <tcp_pcb_remove+0x10c>)
 800639e:	f640 0284 	movw	r2, #2180	; 0x884
 80063a2:	493b      	ldr	r1, [pc, #236]	; (8006490 <tcp_pcb_remove+0x118>)
 80063a4:	4839      	ldr	r0, [pc, #228]	; (800648c <tcp_pcb_remove+0x114>)
 80063a6:	f006 fd27 	bl	800cdf8 <iprintf>

  TCP_RMV(pcblist, pcb);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d105      	bne.n	80063c0 <tcp_pcb_remove+0x48>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e013      	b.n	80063e8 <tcp_pcb_remove+0x70>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	e00c      	b.n	80063e2 <tcp_pcb_remove+0x6a>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d104      	bne.n	80063dc <tcp_pcb_remove+0x64>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	60da      	str	r2, [r3, #12]
 80063da:	e005      	b.n	80063e8 <tcp_pcb_remove+0x70>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1ef      	bne.n	80063c8 <tcp_pcb_remove+0x50>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2200      	movs	r2, #0
 80063ec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80063ee:	6838      	ldr	r0, [r7, #0]
 80063f0:	f7ff ff72 	bl	80062d8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	7d1b      	ldrb	r3, [r3, #20]
 80063f8:	2b0a      	cmp	r3, #10
 80063fa:	d013      	beq.n	8006424 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006400:	2b01      	cmp	r3, #1
 8006402:	d00f      	beq.n	8006424 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	8b5b      	ldrh	r3, [r3, #26]
 8006408:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800640c:	2b00      	cmp	r3, #0
 800640e:	d009      	beq.n	8006424 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	8b5b      	ldrh	r3, [r3, #26]
 8006414:	f043 0302 	orr.w	r3, r3, #2
 8006418:	b29a      	uxth	r2, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800641e:	6838      	ldr	r0, [r7, #0]
 8006420:	f002 ff6a 	bl	80092f8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	7d1b      	ldrb	r3, [r3, #20]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d020      	beq.n	800646e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006430:	2b00      	cmp	r3, #0
 8006432:	d006      	beq.n	8006442 <tcp_pcb_remove+0xca>
 8006434:	4b13      	ldr	r3, [pc, #76]	; (8006484 <tcp_pcb_remove+0x10c>)
 8006436:	f640 0293 	movw	r2, #2195	; 0x893
 800643a:	4916      	ldr	r1, [pc, #88]	; (8006494 <tcp_pcb_remove+0x11c>)
 800643c:	4813      	ldr	r0, [pc, #76]	; (800648c <tcp_pcb_remove+0x114>)
 800643e:	f006 fcdb 	bl	800cdf8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006446:	2b00      	cmp	r3, #0
 8006448:	d006      	beq.n	8006458 <tcp_pcb_remove+0xe0>
 800644a:	4b0e      	ldr	r3, [pc, #56]	; (8006484 <tcp_pcb_remove+0x10c>)
 800644c:	f640 0294 	movw	r2, #2196	; 0x894
 8006450:	4911      	ldr	r1, [pc, #68]	; (8006498 <tcp_pcb_remove+0x120>)
 8006452:	480e      	ldr	r0, [pc, #56]	; (800648c <tcp_pcb_remove+0x114>)
 8006454:	f006 fcd0 	bl	800cdf8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800645c:	2b00      	cmp	r3, #0
 800645e:	d006      	beq.n	800646e <tcp_pcb_remove+0xf6>
 8006460:	4b08      	ldr	r3, [pc, #32]	; (8006484 <tcp_pcb_remove+0x10c>)
 8006462:	f640 0296 	movw	r2, #2198	; 0x896
 8006466:	490d      	ldr	r1, [pc, #52]	; (800649c <tcp_pcb_remove+0x124>)
 8006468:	4808      	ldr	r0, [pc, #32]	; (800648c <tcp_pcb_remove+0x114>)
 800646a:	f006 fcc5 	bl	800cdf8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2200      	movs	r2, #0
 8006472:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2200      	movs	r2, #0
 8006478:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800647a:	bf00      	nop
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	0800e910 	.word	0x0800e910
 8006488:	0800ef78 	.word	0x0800ef78
 800648c:	0800e954 	.word	0x0800e954
 8006490:	0800ef94 	.word	0x0800ef94
 8006494:	0800efb4 	.word	0x0800efb4
 8006498:	0800efcc 	.word	0x0800efcc
 800649c:	0800efe8 	.word	0x0800efe8

080064a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <tcp_next_iss+0x1c>
 80064ae:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <tcp_next_iss+0x38>)
 80064b0:	f640 02af 	movw	r2, #2223	; 0x8af
 80064b4:	4909      	ldr	r1, [pc, #36]	; (80064dc <tcp_next_iss+0x3c>)
 80064b6:	480a      	ldr	r0, [pc, #40]	; (80064e0 <tcp_next_iss+0x40>)
 80064b8:	f006 fc9e 	bl	800cdf8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80064bc:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <tcp_next_iss+0x44>)
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	4b09      	ldr	r3, [pc, #36]	; (80064e8 <tcp_next_iss+0x48>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4413      	add	r3, r2
 80064c6:	4a07      	ldr	r2, [pc, #28]	; (80064e4 <tcp_next_iss+0x44>)
 80064c8:	6013      	str	r3, [r2, #0]
  return iss;
 80064ca:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <tcp_next_iss+0x44>)
 80064cc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	0800e910 	.word	0x0800e910
 80064dc:	0800f000 	.word	0x0800f000
 80064e0:	0800e954 	.word	0x0800e954
 80064e4:	2000000c 	.word	0x2000000c
 80064e8:	20008a54 	.word	0x20008a54

080064ec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4603      	mov	r3, r0
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d106      	bne.n	800650e <tcp_eff_send_mss_netif+0x22>
 8006500:	4b14      	ldr	r3, [pc, #80]	; (8006554 <tcp_eff_send_mss_netif+0x68>)
 8006502:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006506:	4914      	ldr	r1, [pc, #80]	; (8006558 <tcp_eff_send_mss_netif+0x6c>)
 8006508:	4814      	ldr	r0, [pc, #80]	; (800655c <tcp_eff_send_mss_netif+0x70>)
 800650a:	f006 fc75 	bl	800cdf8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006514:	89fb      	ldrh	r3, [r7, #14]
 8006516:	e019      	b.n	800654c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800651e:	8afb      	ldrh	r3, [r7, #22]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d012      	beq.n	800654a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006524:	2328      	movs	r3, #40	; 0x28
 8006526:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006528:	8afa      	ldrh	r2, [r7, #22]
 800652a:	8abb      	ldrh	r3, [r7, #20]
 800652c:	429a      	cmp	r2, r3
 800652e:	d904      	bls.n	800653a <tcp_eff_send_mss_netif+0x4e>
 8006530:	8afa      	ldrh	r2, [r7, #22]
 8006532:	8abb      	ldrh	r3, [r7, #20]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	b29b      	uxth	r3, r3
 8006538:	e000      	b.n	800653c <tcp_eff_send_mss_netif+0x50>
 800653a:	2300      	movs	r3, #0
 800653c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800653e:	8a7a      	ldrh	r2, [r7, #18]
 8006540:	89fb      	ldrh	r3, [r7, #14]
 8006542:	4293      	cmp	r3, r2
 8006544:	bf28      	it	cs
 8006546:	4613      	movcs	r3, r2
 8006548:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800654a:	89fb      	ldrh	r3, [r7, #14]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	0800e910 	.word	0x0800e910
 8006558:	0800f01c 	.word	0x0800f01c
 800655c:	0800e954 	.word	0x0800e954

08006560 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d119      	bne.n	80065a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006574:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006576:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800657a:	4910      	ldr	r1, [pc, #64]	; (80065bc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800657c:	4810      	ldr	r0, [pc, #64]	; (80065c0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800657e:	f006 fc3b 	bl	800cdf8 <iprintf>

  while (pcb != NULL) {
 8006582:	e011      	b.n	80065a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d108      	bne.n	80065a2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7fe ffc6 	bl	8005528 <tcp_abort>
      pcb = next;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	e002      	b.n	80065a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1ea      	bne.n	8006584 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80065ae:	bf00      	nop
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	0800e910 	.word	0x0800e910
 80065bc:	0800f044 	.word	0x0800f044
 80065c0:	0800e954 	.word	0x0800e954

080065c4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d02a      	beq.n	800662a <tcp_netif_ip_addr_changed+0x66>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d026      	beq.n	800662a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80065dc:	4b15      	ldr	r3, [pc, #84]	; (8006634 <tcp_netif_ip_addr_changed+0x70>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff ffbc 	bl	8006560 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80065e8:	4b13      	ldr	r3, [pc, #76]	; (8006638 <tcp_netif_ip_addr_changed+0x74>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff ffb6 	bl	8006560 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d017      	beq.n	800662a <tcp_netif_ip_addr_changed+0x66>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d013      	beq.n	800662a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006602:	4b0e      	ldr	r3, [pc, #56]	; (800663c <tcp_netif_ip_addr_changed+0x78>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	e00c      	b.n	8006624 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d103      	bne.n	800661e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1ef      	bne.n	800660a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800662a:	bf00      	nop
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20008a50 	.word	0x20008a50
 8006638:	20008a5c 	.word	0x20008a5c
 800663c:	20008a58 	.word	0x20008a58

08006640 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fc3d 	bl	8005ed4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006660:	bf00      	nop
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006668:	b590      	push	{r4, r7, lr}
 800666a:	b08d      	sub	sp, #52	; 0x34
 800666c:	af04      	add	r7, sp, #16
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <tcp_input+0x1c>
 8006678:	4b9b      	ldr	r3, [pc, #620]	; (80068e8 <tcp_input+0x280>)
 800667a:	2283      	movs	r2, #131	; 0x83
 800667c:	499b      	ldr	r1, [pc, #620]	; (80068ec <tcp_input+0x284>)
 800667e:	489c      	ldr	r0, [pc, #624]	; (80068f0 <tcp_input+0x288>)
 8006680:	f006 fbba 	bl	800cdf8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	4a9a      	ldr	r2, [pc, #616]	; (80068f4 <tcp_input+0x28c>)
 800668a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	895b      	ldrh	r3, [r3, #10]
 8006690:	2b13      	cmp	r3, #19
 8006692:	f240 83c4 	bls.w	8006e1e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006696:	4b98      	ldr	r3, [pc, #608]	; (80068f8 <tcp_input+0x290>)
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	4a97      	ldr	r2, [pc, #604]	; (80068f8 <tcp_input+0x290>)
 800669c:	6812      	ldr	r2, [r2, #0]
 800669e:	4611      	mov	r1, r2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f005 fc11 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f040 83ba 	bne.w	8006e22 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80066ae:	4b92      	ldr	r3, [pc, #584]	; (80068f8 <tcp_input+0x290>)
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80066b6:	2be0      	cmp	r3, #224	; 0xe0
 80066b8:	f000 83b3 	beq.w	8006e22 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80066bc:	4b8d      	ldr	r3, [pc, #564]	; (80068f4 <tcp_input+0x28c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	899b      	ldrh	r3, [r3, #12]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fc fef3 	bl	80034b0 <lwip_htons>
 80066ca:	4603      	mov	r3, r0
 80066cc:	0b1b      	lsrs	r3, r3, #12
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80066d6:	7cbb      	ldrb	r3, [r7, #18]
 80066d8:	2b13      	cmp	r3, #19
 80066da:	f240 83a4 	bls.w	8006e26 <tcp_input+0x7be>
 80066de:	7cbb      	ldrb	r3, [r7, #18]
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	891b      	ldrh	r3, [r3, #8]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	f200 839d 	bhi.w	8006e26 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80066ec:	7cbb      	ldrb	r3, [r7, #18]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b14      	subs	r3, #20
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	4b81      	ldr	r3, [pc, #516]	; (80068fc <tcp_input+0x294>)
 80066f6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80066f8:	4b81      	ldr	r3, [pc, #516]	; (8006900 <tcp_input+0x298>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	895a      	ldrh	r2, [r3, #10]
 8006702:	7cbb      	ldrb	r3, [r7, #18]
 8006704:	b29b      	uxth	r3, r3
 8006706:	429a      	cmp	r2, r3
 8006708:	d309      	bcc.n	800671e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800670a:	4b7c      	ldr	r3, [pc, #496]	; (80068fc <tcp_input+0x294>)
 800670c:	881a      	ldrh	r2, [r3, #0]
 800670e:	4b7d      	ldr	r3, [pc, #500]	; (8006904 <tcp_input+0x29c>)
 8006710:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006712:	7cbb      	ldrb	r3, [r7, #18]
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7fe f8f8 	bl	800490c <pbuf_remove_header>
 800671c:	e04e      	b.n	80067bc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d105      	bne.n	8006732 <tcp_input+0xca>
 8006726:	4b70      	ldr	r3, [pc, #448]	; (80068e8 <tcp_input+0x280>)
 8006728:	22c2      	movs	r2, #194	; 0xc2
 800672a:	4977      	ldr	r1, [pc, #476]	; (8006908 <tcp_input+0x2a0>)
 800672c:	4870      	ldr	r0, [pc, #448]	; (80068f0 <tcp_input+0x288>)
 800672e:	f006 fb63 	bl	800cdf8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006732:	2114      	movs	r1, #20
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7fe f8e9 	bl	800490c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	895a      	ldrh	r2, [r3, #10]
 800673e:	4b71      	ldr	r3, [pc, #452]	; (8006904 <tcp_input+0x29c>)
 8006740:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006742:	4b6e      	ldr	r3, [pc, #440]	; (80068fc <tcp_input+0x294>)
 8006744:	881a      	ldrh	r2, [r3, #0]
 8006746:	4b6f      	ldr	r3, [pc, #444]	; (8006904 <tcp_input+0x29c>)
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800674e:	4b6d      	ldr	r3, [pc, #436]	; (8006904 <tcp_input+0x29c>)
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7fe f8d9 	bl	800490c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	895b      	ldrh	r3, [r3, #10]
 8006760:	8a3a      	ldrh	r2, [r7, #16]
 8006762:	429a      	cmp	r2, r3
 8006764:	f200 8361 	bhi.w	8006e2a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	4a64      	ldr	r2, [pc, #400]	; (8006900 <tcp_input+0x298>)
 8006770:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	8a3a      	ldrh	r2, [r7, #16]
 8006778:	4611      	mov	r1, r2
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe f8c6 	bl	800490c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	891a      	ldrh	r2, [r3, #8]
 8006784:	8a3b      	ldrh	r3, [r7, #16]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	b29a      	uxth	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	895b      	ldrh	r3, [r3, #10]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d005      	beq.n	80067a2 <tcp_input+0x13a>
 8006796:	4b54      	ldr	r3, [pc, #336]	; (80068e8 <tcp_input+0x280>)
 8006798:	22df      	movs	r2, #223	; 0xdf
 800679a:	495c      	ldr	r1, [pc, #368]	; (800690c <tcp_input+0x2a4>)
 800679c:	4854      	ldr	r0, [pc, #336]	; (80068f0 <tcp_input+0x288>)
 800679e:	f006 fb2b 	bl	800cdf8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	891a      	ldrh	r2, [r3, #8]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	891b      	ldrh	r3, [r3, #8]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d005      	beq.n	80067bc <tcp_input+0x154>
 80067b0:	4b4d      	ldr	r3, [pc, #308]	; (80068e8 <tcp_input+0x280>)
 80067b2:	22e0      	movs	r2, #224	; 0xe0
 80067b4:	4956      	ldr	r1, [pc, #344]	; (8006910 <tcp_input+0x2a8>)
 80067b6:	484e      	ldr	r0, [pc, #312]	; (80068f0 <tcp_input+0x288>)
 80067b8:	f006 fb1e 	bl	800cdf8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80067bc:	4b4d      	ldr	r3, [pc, #308]	; (80068f4 <tcp_input+0x28c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	4a4b      	ldr	r2, [pc, #300]	; (80068f4 <tcp_input+0x28c>)
 80067c6:	6814      	ldr	r4, [r2, #0]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fc fe71 	bl	80034b0 <lwip_htons>
 80067ce:	4603      	mov	r3, r0
 80067d0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80067d2:	4b48      	ldr	r3, [pc, #288]	; (80068f4 <tcp_input+0x28c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	885b      	ldrh	r3, [r3, #2]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	4a46      	ldr	r2, [pc, #280]	; (80068f4 <tcp_input+0x28c>)
 80067dc:	6814      	ldr	r4, [r2, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fc fe66 	bl	80034b0 <lwip_htons>
 80067e4:	4603      	mov	r3, r0
 80067e6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80067e8:	4b42      	ldr	r3, [pc, #264]	; (80068f4 <tcp_input+0x28c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	4a41      	ldr	r2, [pc, #260]	; (80068f4 <tcp_input+0x28c>)
 80067f0:	6814      	ldr	r4, [r2, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fc fe71 	bl	80034da <lwip_htonl>
 80067f8:	4603      	mov	r3, r0
 80067fa:	6063      	str	r3, [r4, #4]
 80067fc:	6863      	ldr	r3, [r4, #4]
 80067fe:	4a45      	ldr	r2, [pc, #276]	; (8006914 <tcp_input+0x2ac>)
 8006800:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006802:	4b3c      	ldr	r3, [pc, #240]	; (80068f4 <tcp_input+0x28c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	4a3a      	ldr	r2, [pc, #232]	; (80068f4 <tcp_input+0x28c>)
 800680a:	6814      	ldr	r4, [r2, #0]
 800680c:	4618      	mov	r0, r3
 800680e:	f7fc fe64 	bl	80034da <lwip_htonl>
 8006812:	4603      	mov	r3, r0
 8006814:	60a3      	str	r3, [r4, #8]
 8006816:	68a3      	ldr	r3, [r4, #8]
 8006818:	4a3f      	ldr	r2, [pc, #252]	; (8006918 <tcp_input+0x2b0>)
 800681a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800681c:	4b35      	ldr	r3, [pc, #212]	; (80068f4 <tcp_input+0x28c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	89db      	ldrh	r3, [r3, #14]
 8006822:	b29b      	uxth	r3, r3
 8006824:	4a33      	ldr	r2, [pc, #204]	; (80068f4 <tcp_input+0x28c>)
 8006826:	6814      	ldr	r4, [r2, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f7fc fe41 	bl	80034b0 <lwip_htons>
 800682e:	4603      	mov	r3, r0
 8006830:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006832:	4b30      	ldr	r3, [pc, #192]	; (80068f4 <tcp_input+0x28c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	899b      	ldrh	r3, [r3, #12]
 8006838:	b29b      	uxth	r3, r3
 800683a:	4618      	mov	r0, r3
 800683c:	f7fc fe38 	bl	80034b0 <lwip_htons>
 8006840:	4603      	mov	r3, r0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006848:	b2da      	uxtb	r2, r3
 800684a:	4b34      	ldr	r3, [pc, #208]	; (800691c <tcp_input+0x2b4>)
 800684c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	891a      	ldrh	r2, [r3, #8]
 8006852:	4b33      	ldr	r3, [pc, #204]	; (8006920 <tcp_input+0x2b8>)
 8006854:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006856:	4b31      	ldr	r3, [pc, #196]	; (800691c <tcp_input+0x2b4>)
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00c      	beq.n	800687c <tcp_input+0x214>
    tcplen++;
 8006862:	4b2f      	ldr	r3, [pc, #188]	; (8006920 <tcp_input+0x2b8>)
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	3301      	adds	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	4b2d      	ldr	r3, [pc, #180]	; (8006920 <tcp_input+0x2b8>)
 800686c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	891a      	ldrh	r2, [r3, #8]
 8006872:	4b2b      	ldr	r3, [pc, #172]	; (8006920 <tcp_input+0x2b8>)
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	429a      	cmp	r2, r3
 8006878:	f200 82d9 	bhi.w	8006e2e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800687c:	2300      	movs	r3, #0
 800687e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006880:	4b28      	ldr	r3, [pc, #160]	; (8006924 <tcp_input+0x2bc>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	e09d      	b.n	80069c4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	7d1b      	ldrb	r3, [r3, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d105      	bne.n	800689c <tcp_input+0x234>
 8006890:	4b15      	ldr	r3, [pc, #84]	; (80068e8 <tcp_input+0x280>)
 8006892:	22fb      	movs	r2, #251	; 0xfb
 8006894:	4924      	ldr	r1, [pc, #144]	; (8006928 <tcp_input+0x2c0>)
 8006896:	4816      	ldr	r0, [pc, #88]	; (80068f0 <tcp_input+0x288>)
 8006898:	f006 faae 	bl	800cdf8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	7d1b      	ldrb	r3, [r3, #20]
 80068a0:	2b0a      	cmp	r3, #10
 80068a2:	d105      	bne.n	80068b0 <tcp_input+0x248>
 80068a4:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <tcp_input+0x280>)
 80068a6:	22fc      	movs	r2, #252	; 0xfc
 80068a8:	4920      	ldr	r1, [pc, #128]	; (800692c <tcp_input+0x2c4>)
 80068aa:	4811      	ldr	r0, [pc, #68]	; (80068f0 <tcp_input+0x288>)
 80068ac:	f006 faa4 	bl	800cdf8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	7d1b      	ldrb	r3, [r3, #20]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d105      	bne.n	80068c4 <tcp_input+0x25c>
 80068b8:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <tcp_input+0x280>)
 80068ba:	22fd      	movs	r2, #253	; 0xfd
 80068bc:	491c      	ldr	r1, [pc, #112]	; (8006930 <tcp_input+0x2c8>)
 80068be:	480c      	ldr	r0, [pc, #48]	; (80068f0 <tcp_input+0x288>)
 80068c0:	f006 fa9a 	bl	800cdf8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	7a1b      	ldrb	r3, [r3, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d033      	beq.n	8006934 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	7a1a      	ldrb	r2, [r3, #8]
 80068d0:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <tcp_input+0x290>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068d8:	3301      	adds	r3, #1
 80068da:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80068dc:	429a      	cmp	r2, r3
 80068de:	d029      	beq.n	8006934 <tcp_input+0x2cc>
      prev = pcb;
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	61bb      	str	r3, [r7, #24]
      continue;
 80068e4:	e06b      	b.n	80069be <tcp_input+0x356>
 80068e6:	bf00      	nop
 80068e8:	0800f078 	.word	0x0800f078
 80068ec:	0800f0ac 	.word	0x0800f0ac
 80068f0:	0800f0c4 	.word	0x0800f0c4
 80068f4:	200000dc 	.word	0x200000dc
 80068f8:	2000334c 	.word	0x2000334c
 80068fc:	200000e0 	.word	0x200000e0
 8006900:	200000e4 	.word	0x200000e4
 8006904:	200000e2 	.word	0x200000e2
 8006908:	0800f0ec 	.word	0x0800f0ec
 800690c:	0800f0fc 	.word	0x0800f0fc
 8006910:	0800f108 	.word	0x0800f108
 8006914:	200000ec 	.word	0x200000ec
 8006918:	200000f0 	.word	0x200000f0
 800691c:	200000f8 	.word	0x200000f8
 8006920:	200000f6 	.word	0x200000f6
 8006924:	20008a50 	.word	0x20008a50
 8006928:	0800f128 	.word	0x0800f128
 800692c:	0800f150 	.word	0x0800f150
 8006930:	0800f17c 	.word	0x0800f17c
    }

    if (pcb->remote_port == tcphdr->src &&
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	8b1a      	ldrh	r2, [r3, #24]
 8006938:	4b94      	ldr	r3, [pc, #592]	; (8006b8c <tcp_input+0x524>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	429a      	cmp	r2, r3
 8006942:	d13a      	bne.n	80069ba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	8ada      	ldrh	r2, [r3, #22]
 8006948:	4b90      	ldr	r3, [pc, #576]	; (8006b8c <tcp_input+0x524>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	885b      	ldrh	r3, [r3, #2]
 800694e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006950:	429a      	cmp	r2, r3
 8006952:	d132      	bne.n	80069ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	4b8d      	ldr	r3, [pc, #564]	; (8006b90 <tcp_input+0x528>)
 800695a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800695c:	429a      	cmp	r2, r3
 800695e:	d12c      	bne.n	80069ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	4b8a      	ldr	r3, [pc, #552]	; (8006b90 <tcp_input+0x528>)
 8006966:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006968:	429a      	cmp	r2, r3
 800696a:	d126      	bne.n	80069ba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	69fa      	ldr	r2, [r7, #28]
 8006972:	429a      	cmp	r2, r3
 8006974:	d106      	bne.n	8006984 <tcp_input+0x31c>
 8006976:	4b87      	ldr	r3, [pc, #540]	; (8006b94 <tcp_input+0x52c>)
 8006978:	f240 120d 	movw	r2, #269	; 0x10d
 800697c:	4986      	ldr	r1, [pc, #536]	; (8006b98 <tcp_input+0x530>)
 800697e:	4887      	ldr	r0, [pc, #540]	; (8006b9c <tcp_input+0x534>)
 8006980:	f006 fa3a 	bl	800cdf8 <iprintf>
      if (prev != NULL) {
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <tcp_input+0x338>
        prev->next = pcb->next;
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006992:	4b83      	ldr	r3, [pc, #524]	; (8006ba0 <tcp_input+0x538>)
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800699a:	4a81      	ldr	r2, [pc, #516]	; (8006ba0 <tcp_input+0x538>)
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d111      	bne.n	80069ce <tcp_input+0x366>
 80069aa:	4b7a      	ldr	r3, [pc, #488]	; (8006b94 <tcp_input+0x52c>)
 80069ac:	f240 1215 	movw	r2, #277	; 0x115
 80069b0:	497c      	ldr	r1, [pc, #496]	; (8006ba4 <tcp_input+0x53c>)
 80069b2:	487a      	ldr	r0, [pc, #488]	; (8006b9c <tcp_input+0x534>)
 80069b4:	f006 fa20 	bl	800cdf8 <iprintf>
      break;
 80069b8:	e009      	b.n	80069ce <tcp_input+0x366>
    }
    prev = pcb;
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f47f af5e 	bne.w	8006888 <tcp_input+0x220>
 80069cc:	e000      	b.n	80069d0 <tcp_input+0x368>
      break;
 80069ce:	bf00      	nop
  }

  if (pcb == NULL) {
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f040 8095 	bne.w	8006b02 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80069d8:	4b73      	ldr	r3, [pc, #460]	; (8006ba8 <tcp_input+0x540>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	61fb      	str	r3, [r7, #28]
 80069de:	e03f      	b.n	8006a60 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	7d1b      	ldrb	r3, [r3, #20]
 80069e4:	2b0a      	cmp	r3, #10
 80069e6:	d006      	beq.n	80069f6 <tcp_input+0x38e>
 80069e8:	4b6a      	ldr	r3, [pc, #424]	; (8006b94 <tcp_input+0x52c>)
 80069ea:	f240 121f 	movw	r2, #287	; 0x11f
 80069ee:	496f      	ldr	r1, [pc, #444]	; (8006bac <tcp_input+0x544>)
 80069f0:	486a      	ldr	r0, [pc, #424]	; (8006b9c <tcp_input+0x534>)
 80069f2:	f006 fa01 	bl	800cdf8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	7a1b      	ldrb	r3, [r3, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d009      	beq.n	8006a12 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	7a1a      	ldrb	r2, [r3, #8]
 8006a02:	4b63      	ldr	r3, [pc, #396]	; (8006b90 <tcp_input+0x528>)
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d122      	bne.n	8006a58 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	8b1a      	ldrh	r2, [r3, #24]
 8006a16:	4b5d      	ldr	r3, [pc, #372]	; (8006b8c <tcp_input+0x524>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d11b      	bne.n	8006a5a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	8ada      	ldrh	r2, [r3, #22]
 8006a26:	4b59      	ldr	r3, [pc, #356]	; (8006b8c <tcp_input+0x524>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	885b      	ldrh	r3, [r3, #2]
 8006a2c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d113      	bne.n	8006a5a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	4b56      	ldr	r3, [pc, #344]	; (8006b90 <tcp_input+0x528>)
 8006a38:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d10d      	bne.n	8006a5a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	4b53      	ldr	r3, [pc, #332]	; (8006b90 <tcp_input+0x528>)
 8006a44:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d107      	bne.n	8006a5a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8006a4a:	69f8      	ldr	r0, [r7, #28]
 8006a4c:	f000 fb54 	bl	80070f8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7fd ffe1 	bl	8004a18 <pbuf_free>
        return;
 8006a56:	e1f0      	b.n	8006e3a <tcp_input+0x7d2>
        continue;
 8006a58:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	61fb      	str	r3, [r7, #28]
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1bc      	bne.n	80069e0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006a6a:	4b51      	ldr	r3, [pc, #324]	; (8006bb0 <tcp_input+0x548>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	e02a      	b.n	8006ac8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	7a1b      	ldrb	r3, [r3, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00c      	beq.n	8006a94 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	7a1a      	ldrb	r2, [r3, #8]
 8006a7e:	4b44      	ldr	r3, [pc, #272]	; (8006b90 <tcp_input+0x528>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a86:	3301      	adds	r3, #1
 8006a88:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d002      	beq.n	8006a94 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	61bb      	str	r3, [r7, #24]
        continue;
 8006a92:	e016      	b.n	8006ac2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	8ada      	ldrh	r2, [r3, #22]
 8006a98:	4b3c      	ldr	r3, [pc, #240]	; (8006b8c <tcp_input+0x524>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	885b      	ldrh	r3, [r3, #2]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d10c      	bne.n	8006abe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	4b39      	ldr	r3, [pc, #228]	; (8006b90 <tcp_input+0x528>)
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d00f      	beq.n	8006ad0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <tcp_input+0x46a>
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d009      	beq.n	8006ad2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1d1      	bne.n	8006a72 <tcp_input+0x40a>
 8006ace:	e000      	b.n	8006ad2 <tcp_input+0x46a>
            break;
 8006ad0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d014      	beq.n	8006b02 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006ae6:	4b32      	ldr	r3, [pc, #200]	; (8006bb0 <tcp_input+0x548>)
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006aee:	4a30      	ldr	r2, [pc, #192]	; (8006bb0 <tcp_input+0x548>)
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8006af4:	6978      	ldr	r0, [r7, #20]
 8006af6:	f000 fa01 	bl	8006efc <tcp_listen_input>
      }
      pbuf_free(p);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fd ff8c 	bl	8004a18 <pbuf_free>
      return;
 8006b00:	e19b      	b.n	8006e3a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8160 	beq.w	8006dca <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006b0a:	4b2a      	ldr	r3, [pc, #168]	; (8006bb4 <tcp_input+0x54c>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	891a      	ldrh	r2, [r3, #8]
 8006b14:	4b27      	ldr	r3, [pc, #156]	; (8006bb4 <tcp_input+0x54c>)
 8006b16:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006b18:	4a26      	ldr	r2, [pc, #152]	; (8006bb4 <tcp_input+0x54c>)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006b1e:	4b1b      	ldr	r3, [pc, #108]	; (8006b8c <tcp_input+0x524>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a24      	ldr	r2, [pc, #144]	; (8006bb4 <tcp_input+0x54c>)
 8006b24:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8006b26:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <tcp_input+0x550>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8006b2c:	4b23      	ldr	r3, [pc, #140]	; (8006bbc <tcp_input+0x554>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8006b32:	4b23      	ldr	r3, [pc, #140]	; (8006bc0 <tcp_input+0x558>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8006b38:	4b22      	ldr	r3, [pc, #136]	; (8006bc4 <tcp_input+0x55c>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	f003 0308 	and.w	r3, r3, #8
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d006      	beq.n	8006b52 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	7b5b      	ldrb	r3, [r3, #13]
 8006b48:	f043 0301 	orr.w	r3, r3, #1
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d038      	beq.n	8006bcc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006b5a:	69f8      	ldr	r0, [r7, #28]
 8006b5c:	f7ff f93e 	bl	8005ddc <tcp_process_refused_data>
 8006b60:	4603      	mov	r3, r0
 8006b62:	f113 0f0d 	cmn.w	r3, #13
 8006b66:	d007      	beq.n	8006b78 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d02d      	beq.n	8006bcc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006b70:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <tcp_input+0x560>)
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d029      	beq.n	8006bcc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f040 8104 	bne.w	8006d8a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006b82:	69f8      	ldr	r0, [r7, #28]
 8006b84:	f003 f9be 	bl	8009f04 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006b88:	e0ff      	b.n	8006d8a <tcp_input+0x722>
 8006b8a:	bf00      	nop
 8006b8c:	200000dc 	.word	0x200000dc
 8006b90:	2000334c 	.word	0x2000334c
 8006b94:	0800f078 	.word	0x0800f078
 8006b98:	0800f1a4 	.word	0x0800f1a4
 8006b9c:	0800f0c4 	.word	0x0800f0c4
 8006ba0:	20008a50 	.word	0x20008a50
 8006ba4:	0800f1d0 	.word	0x0800f1d0
 8006ba8:	20008a60 	.word	0x20008a60
 8006bac:	0800f1fc 	.word	0x0800f1fc
 8006bb0:	20008a58 	.word	0x20008a58
 8006bb4:	200000cc 	.word	0x200000cc
 8006bb8:	200000fc 	.word	0x200000fc
 8006bbc:	200000f9 	.word	0x200000f9
 8006bc0:	200000f4 	.word	0x200000f4
 8006bc4:	200000f8 	.word	0x200000f8
 8006bc8:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 8006bcc:	4a9c      	ldr	r2, [pc, #624]	; (8006e40 <tcp_input+0x7d8>)
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8006bd2:	69f8      	ldr	r0, [r7, #28]
 8006bd4:	f000 fb0a 	bl	80071ec <tcp_process>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006bdc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006be0:	f113 0f0d 	cmn.w	r3, #13
 8006be4:	f000 80d3 	beq.w	8006d8e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8006be8:	4b96      	ldr	r3, [pc, #600]	; (8006e44 <tcp_input+0x7dc>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	f003 0308 	and.w	r3, r3, #8
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d015      	beq.n	8006c20 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d008      	beq.n	8006c10 <tcp_input+0x5a8>
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c04:	69fa      	ldr	r2, [r7, #28]
 8006c06:	6912      	ldr	r2, [r2, #16]
 8006c08:	f06f 010d 	mvn.w	r1, #13
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006c10:	69f9      	ldr	r1, [r7, #28]
 8006c12:	488d      	ldr	r0, [pc, #564]	; (8006e48 <tcp_input+0x7e0>)
 8006c14:	f7ff fbb0 	bl	8006378 <tcp_pcb_remove>
        tcp_free(pcb);
 8006c18:	69f8      	ldr	r0, [r7, #28]
 8006c1a:	f7fe f99d 	bl	8004f58 <tcp_free>
 8006c1e:	e0c1      	b.n	8006da4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8006c24:	4b89      	ldr	r3, [pc, #548]	; (8006e4c <tcp_input+0x7e4>)
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01d      	beq.n	8006c68 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8006c2c:	4b87      	ldr	r3, [pc, #540]	; (8006e4c <tcp_input+0x7e4>)
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <tcp_input+0x5ea>
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c42:	69fa      	ldr	r2, [r7, #28]
 8006c44:	6910      	ldr	r0, [r2, #16]
 8006c46:	89fa      	ldrh	r2, [r7, #14]
 8006c48:	69f9      	ldr	r1, [r7, #28]
 8006c4a:	4798      	blx	r3
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	74fb      	strb	r3, [r7, #19]
 8006c50:	e001      	b.n	8006c56 <tcp_input+0x5ee>
 8006c52:	2300      	movs	r3, #0
 8006c54:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006c56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c5a:	f113 0f0d 	cmn.w	r3, #13
 8006c5e:	f000 8098 	beq.w	8006d92 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8006c62:	4b7a      	ldr	r3, [pc, #488]	; (8006e4c <tcp_input+0x7e4>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8006c68:	69f8      	ldr	r0, [r7, #28]
 8006c6a:	f000 f907 	bl	8006e7c <tcp_input_delayed_close>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f040 8090 	bne.w	8006d96 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8006c76:	4b76      	ldr	r3, [pc, #472]	; (8006e50 <tcp_input+0x7e8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d041      	beq.n	8006d02 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d006      	beq.n	8006c94 <tcp_input+0x62c>
 8006c86:	4b73      	ldr	r3, [pc, #460]	; (8006e54 <tcp_input+0x7ec>)
 8006c88:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8006c8c:	4972      	ldr	r1, [pc, #456]	; (8006e58 <tcp_input+0x7f0>)
 8006c8e:	4873      	ldr	r0, [pc, #460]	; (8006e5c <tcp_input+0x7f4>)
 8006c90:	f006 f8b2 	bl	800cdf8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	8b5b      	ldrh	r3, [r3, #26]
 8006c98:	f003 0310 	and.w	r3, r3, #16
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8006ca0:	4b6b      	ldr	r3, [pc, #428]	; (8006e50 <tcp_input+0x7e8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fd feb7 	bl	8004a18 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8006caa:	69f8      	ldr	r0, [r7, #28]
 8006cac:	f7fe fc3c 	bl	8005528 <tcp_abort>
            goto aborted;
 8006cb0:	e078      	b.n	8006da4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00c      	beq.n	8006cd6 <tcp_input+0x66e>
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	6918      	ldr	r0, [r3, #16]
 8006cc6:	4b62      	ldr	r3, [pc, #392]	; (8006e50 <tcp_input+0x7e8>)
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	69f9      	ldr	r1, [r7, #28]
 8006cce:	47a0      	blx	r4
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	74fb      	strb	r3, [r7, #19]
 8006cd4:	e008      	b.n	8006ce8 <tcp_input+0x680>
 8006cd6:	4b5e      	ldr	r3, [pc, #376]	; (8006e50 <tcp_input+0x7e8>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	69f9      	ldr	r1, [r7, #28]
 8006cde:	2000      	movs	r0, #0
 8006ce0:	f7ff f952 	bl	8005f88 <tcp_recv_null>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8006ce8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006cec:	f113 0f0d 	cmn.w	r3, #13
 8006cf0:	d053      	beq.n	8006d9a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8006cf2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8006cfa:	4b55      	ldr	r3, [pc, #340]	; (8006e50 <tcp_input+0x7e8>)
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8006d02:	4b50      	ldr	r3, [pc, #320]	; (8006e44 <tcp_input+0x7dc>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f003 0320 	and.w	r3, r3, #32
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d030      	beq.n	8006d70 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d009      	beq.n	8006d2a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d1a:	7b5a      	ldrb	r2, [r3, #13]
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d20:	f042 0220 	orr.w	r2, r2, #32
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	735a      	strb	r2, [r3, #13]
 8006d28:	e022      	b.n	8006d70 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d2e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006d32:	d005      	beq.n	8006d40 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d38:	3301      	adds	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00b      	beq.n	8006d62 <tcp_input+0x6fa>
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	6918      	ldr	r0, [r3, #16]
 8006d54:	2300      	movs	r3, #0
 8006d56:	2200      	movs	r2, #0
 8006d58:	69f9      	ldr	r1, [r7, #28]
 8006d5a:	47a0      	blx	r4
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	74fb      	strb	r3, [r7, #19]
 8006d60:	e001      	b.n	8006d66 <tcp_input+0x6fe>
 8006d62:	2300      	movs	r3, #0
 8006d64:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006d66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006d6a:	f113 0f0d 	cmn.w	r3, #13
 8006d6e:	d016      	beq.n	8006d9e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8006d70:	4b33      	ldr	r3, [pc, #204]	; (8006e40 <tcp_input+0x7d8>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8006d76:	69f8      	ldr	r0, [r7, #28]
 8006d78:	f000 f880 	bl	8006e7c <tcp_input_delayed_close>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10f      	bne.n	8006da2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8006d82:	69f8      	ldr	r0, [r7, #28]
 8006d84:	f002 fab8 	bl	80092f8 <tcp_output>
 8006d88:	e00c      	b.n	8006da4 <tcp_input+0x73c>
        goto aborted;
 8006d8a:	bf00      	nop
 8006d8c:	e00a      	b.n	8006da4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8006d8e:	bf00      	nop
 8006d90:	e008      	b.n	8006da4 <tcp_input+0x73c>
              goto aborted;
 8006d92:	bf00      	nop
 8006d94:	e006      	b.n	8006da4 <tcp_input+0x73c>
          goto aborted;
 8006d96:	bf00      	nop
 8006d98:	e004      	b.n	8006da4 <tcp_input+0x73c>
            goto aborted;
 8006d9a:	bf00      	nop
 8006d9c:	e002      	b.n	8006da4 <tcp_input+0x73c>
              goto aborted;
 8006d9e:	bf00      	nop
 8006da0:	e000      	b.n	8006da4 <tcp_input+0x73c>
          goto aborted;
 8006da2:	bf00      	nop
    tcp_input_pcb = NULL;
 8006da4:	4b26      	ldr	r3, [pc, #152]	; (8006e40 <tcp_input+0x7d8>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006daa:	4b29      	ldr	r3, [pc, #164]	; (8006e50 <tcp_input+0x7e8>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8006db0:	4b2b      	ldr	r3, [pc, #172]	; (8006e60 <tcp_input+0x7f8>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d03f      	beq.n	8006e38 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8006db8:	4b29      	ldr	r3, [pc, #164]	; (8006e60 <tcp_input+0x7f8>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fd fe2b 	bl	8004a18 <pbuf_free>
      inseg.p = NULL;
 8006dc2:	4b27      	ldr	r3, [pc, #156]	; (8006e60 <tcp_input+0x7f8>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8006dc8:	e036      	b.n	8006e38 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8006dca:	4b26      	ldr	r3, [pc, #152]	; (8006e64 <tcp_input+0x7fc>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	899b      	ldrh	r3, [r3, #12]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fc fb6c 	bl	80034b0 <lwip_htons>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d118      	bne.n	8006e16 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006de4:	4b20      	ldr	r3, [pc, #128]	; (8006e68 <tcp_input+0x800>)
 8006de6:	6819      	ldr	r1, [r3, #0]
 8006de8:	4b20      	ldr	r3, [pc, #128]	; (8006e6c <tcp_input+0x804>)
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	4b20      	ldr	r3, [pc, #128]	; (8006e70 <tcp_input+0x808>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006df4:	4b1b      	ldr	r3, [pc, #108]	; (8006e64 <tcp_input+0x7fc>)
 8006df6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006df8:	885b      	ldrh	r3, [r3, #2]
 8006dfa:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006dfc:	4a19      	ldr	r2, [pc, #100]	; (8006e64 <tcp_input+0x7fc>)
 8006dfe:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e00:	8812      	ldrh	r2, [r2, #0]
 8006e02:	b292      	uxth	r2, r2
 8006e04:	9202      	str	r2, [sp, #8]
 8006e06:	9301      	str	r3, [sp, #4]
 8006e08:	4b1a      	ldr	r3, [pc, #104]	; (8006e74 <tcp_input+0x80c>)
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	4b1a      	ldr	r3, [pc, #104]	; (8006e78 <tcp_input+0x810>)
 8006e0e:	4602      	mov	r2, r0
 8006e10:	2000      	movs	r0, #0
 8006e12:	f003 f825 	bl	8009e60 <tcp_rst>
    pbuf_free(p);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7fd fdfe 	bl	8004a18 <pbuf_free>
  return;
 8006e1c:	e00c      	b.n	8006e38 <tcp_input+0x7d0>
    goto dropped;
 8006e1e:	bf00      	nop
 8006e20:	e006      	b.n	8006e30 <tcp_input+0x7c8>
    goto dropped;
 8006e22:	bf00      	nop
 8006e24:	e004      	b.n	8006e30 <tcp_input+0x7c8>
    goto dropped;
 8006e26:	bf00      	nop
 8006e28:	e002      	b.n	8006e30 <tcp_input+0x7c8>
      goto dropped;
 8006e2a:	bf00      	nop
 8006e2c:	e000      	b.n	8006e30 <tcp_input+0x7c8>
      goto dropped;
 8006e2e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7fd fdf1 	bl	8004a18 <pbuf_free>
 8006e36:	e000      	b.n	8006e3a <tcp_input+0x7d2>
  return;
 8006e38:	bf00      	nop
}
 8006e3a:	3724      	adds	r7, #36	; 0x24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd90      	pop	{r4, r7, pc}
 8006e40:	20008a64 	.word	0x20008a64
 8006e44:	200000f9 	.word	0x200000f9
 8006e48:	20008a50 	.word	0x20008a50
 8006e4c:	200000f4 	.word	0x200000f4
 8006e50:	200000fc 	.word	0x200000fc
 8006e54:	0800f078 	.word	0x0800f078
 8006e58:	0800f22c 	.word	0x0800f22c
 8006e5c:	0800f0c4 	.word	0x0800f0c4
 8006e60:	200000cc 	.word	0x200000cc
 8006e64:	200000dc 	.word	0x200000dc
 8006e68:	200000f0 	.word	0x200000f0
 8006e6c:	200000f6 	.word	0x200000f6
 8006e70:	200000ec 	.word	0x200000ec
 8006e74:	2000335c 	.word	0x2000335c
 8006e78:	20003360 	.word	0x20003360

08006e7c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <tcp_input_delayed_close+0x1c>
 8006e8a:	4b17      	ldr	r3, [pc, #92]	; (8006ee8 <tcp_input_delayed_close+0x6c>)
 8006e8c:	f240 225a 	movw	r2, #602	; 0x25a
 8006e90:	4916      	ldr	r1, [pc, #88]	; (8006eec <tcp_input_delayed_close+0x70>)
 8006e92:	4817      	ldr	r0, [pc, #92]	; (8006ef0 <tcp_input_delayed_close+0x74>)
 8006e94:	f005 ffb0 	bl	800cdf8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8006e98:	4b16      	ldr	r3, [pc, #88]	; (8006ef4 <tcp_input_delayed_close+0x78>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01c      	beq.n	8006ede <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	8b5b      	ldrh	r3, [r3, #26]
 8006ea8:	f003 0310 	and.w	r3, r3, #16
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10d      	bne.n	8006ecc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d008      	beq.n	8006ecc <tcp_input_delayed_close+0x50>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6912      	ldr	r2, [r2, #16]
 8006ec4:	f06f 010e 	mvn.w	r1, #14
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	480a      	ldr	r0, [pc, #40]	; (8006ef8 <tcp_input_delayed_close+0x7c>)
 8006ed0:	f7ff fa52 	bl	8006378 <tcp_pcb_remove>
    tcp_free(pcb);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7fe f83f 	bl	8004f58 <tcp_free>
    return 1;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	0800f078 	.word	0x0800f078
 8006eec:	0800f248 	.word	0x0800f248
 8006ef0:	0800f0c4 	.word	0x0800f0c4
 8006ef4:	200000f9 	.word	0x200000f9
 8006ef8:	20008a50 	.word	0x20008a50

08006efc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8006efc:	b590      	push	{r4, r7, lr}
 8006efe:	b08b      	sub	sp, #44	; 0x2c
 8006f00:	af04      	add	r7, sp, #16
 8006f02:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8006f04:	4b6f      	ldr	r3, [pc, #444]	; (80070c4 <tcp_listen_input+0x1c8>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f040 80d2 	bne.w	80070b6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d106      	bne.n	8006f26 <tcp_listen_input+0x2a>
 8006f18:	4b6b      	ldr	r3, [pc, #428]	; (80070c8 <tcp_listen_input+0x1cc>)
 8006f1a:	f240 2281 	movw	r2, #641	; 0x281
 8006f1e:	496b      	ldr	r1, [pc, #428]	; (80070cc <tcp_listen_input+0x1d0>)
 8006f20:	486b      	ldr	r0, [pc, #428]	; (80070d0 <tcp_listen_input+0x1d4>)
 8006f22:	f005 ff69 	bl	800cdf8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8006f26:	4b67      	ldr	r3, [pc, #412]	; (80070c4 <tcp_listen_input+0x1c8>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	f003 0310 	and.w	r3, r3, #16
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d019      	beq.n	8006f66 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006f32:	4b68      	ldr	r3, [pc, #416]	; (80070d4 <tcp_listen_input+0x1d8>)
 8006f34:	6819      	ldr	r1, [r3, #0]
 8006f36:	4b68      	ldr	r3, [pc, #416]	; (80070d8 <tcp_listen_input+0x1dc>)
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	4b67      	ldr	r3, [pc, #412]	; (80070dc <tcp_listen_input+0x1e0>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006f42:	4b67      	ldr	r3, [pc, #412]	; (80070e0 <tcp_listen_input+0x1e4>)
 8006f44:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006f46:	885b      	ldrh	r3, [r3, #2]
 8006f48:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006f4a:	4a65      	ldr	r2, [pc, #404]	; (80070e0 <tcp_listen_input+0x1e4>)
 8006f4c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006f4e:	8812      	ldrh	r2, [r2, #0]
 8006f50:	b292      	uxth	r2, r2
 8006f52:	9202      	str	r2, [sp, #8]
 8006f54:	9301      	str	r3, [sp, #4]
 8006f56:	4b63      	ldr	r3, [pc, #396]	; (80070e4 <tcp_listen_input+0x1e8>)
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	4b63      	ldr	r3, [pc, #396]	; (80070e8 <tcp_listen_input+0x1ec>)
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f002 ff7e 	bl	8009e60 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8006f64:	e0a9      	b.n	80070ba <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8006f66:	4b57      	ldr	r3, [pc, #348]	; (80070c4 <tcp_listen_input+0x1c8>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 80a3 	beq.w	80070ba <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	7d5b      	ldrb	r3, [r3, #21]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff f929 	bl	80061d0 <tcp_alloc>
 8006f7e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d111      	bne.n	8006faa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <tcp_listen_input+0xa8>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	6910      	ldr	r0, [r2, #16]
 8006f96:	f04f 32ff 	mov.w	r2, #4294967295
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	4798      	blx	r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73bb      	strb	r3, [r7, #14]
      return;
 8006fa2:	e08b      	b.n	80070bc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006fa4:	23f0      	movs	r3, #240	; 0xf0
 8006fa6:	73bb      	strb	r3, [r7, #14]
      return;
 8006fa8:	e088      	b.n	80070bc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006faa:	4b50      	ldr	r3, [pc, #320]	; (80070ec <tcp_listen_input+0x1f0>)
 8006fac:	695a      	ldr	r2, [r3, #20]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8006fb2:	4b4e      	ldr	r3, [pc, #312]	; (80070ec <tcp_listen_input+0x1f0>)
 8006fb4:	691a      	ldr	r2, [r3, #16]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	8ada      	ldrh	r2, [r3, #22]
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8006fc2:	4b47      	ldr	r3, [pc, #284]	; (80070e0 <tcp_listen_input+0x1e4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2203      	movs	r2, #3
 8006fd2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8006fd4:	4b41      	ldr	r3, [pc, #260]	; (80070dc <tcp_listen_input+0x1e0>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8006fe6:	6978      	ldr	r0, [r7, #20]
 8006fe8:	f7ff fa5a 	bl	80064a0 <tcp_next_iss>
 8006fec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007006:	4b35      	ldr	r3, [pc, #212]	; (80070dc <tcp_listen_input+0x1e0>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	1e5a      	subs	r2, r3, #1
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691a      	ldr	r2, [r3, #16]
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	7a5b      	ldrb	r3, [r3, #9]
 8007022:	f003 030c 	and.w	r3, r3, #12
 8007026:	b2da      	uxtb	r2, r3
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	7a1a      	ldrb	r2, [r3, #8]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007034:	4b2e      	ldr	r3, [pc, #184]	; (80070f0 <tcp_listen_input+0x1f4>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	60da      	str	r2, [r3, #12]
 800703c:	4a2c      	ldr	r2, [pc, #176]	; (80070f0 <tcp_listen_input+0x1f4>)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	f003 f8cf 	bl	800a1e4 <tcp_timer_needed>
 8007046:	4b2b      	ldr	r3, [pc, #172]	; (80070f4 <tcp_listen_input+0x1f8>)
 8007048:	2201      	movs	r2, #1
 800704a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800704c:	6978      	ldr	r0, [r7, #20]
 800704e:	f001 fd8d 	bl	8008b6c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007052:	4b23      	ldr	r3, [pc, #140]	; (80070e0 <tcp_listen_input+0x1e4>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	89db      	ldrh	r3, [r3, #14]
 8007058:	b29a      	uxth	r2, r3
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	3304      	adds	r3, #4
 8007074:	4618      	mov	r0, r3
 8007076:	f004 fc91 	bl	800b99c <ip4_route>
 800707a:	4601      	mov	r1, r0
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	3304      	adds	r3, #4
 8007080:	461a      	mov	r2, r3
 8007082:	4620      	mov	r0, r4
 8007084:	f7ff fa32 	bl	80064ec <tcp_eff_send_mss_netif>
 8007088:	4603      	mov	r3, r0
 800708a:	461a      	mov	r2, r3
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007090:	2112      	movs	r1, #18
 8007092:	6978      	ldr	r0, [r7, #20]
 8007094:	f002 f842 	bl	800911c <tcp_enqueue_flags>
 8007098:	4603      	mov	r3, r0
 800709a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800709c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80070a4:	2100      	movs	r1, #0
 80070a6:	6978      	ldr	r0, [r7, #20]
 80070a8:	f7fe f980 	bl	80053ac <tcp_abandon>
      return;
 80070ac:	e006      	b.n	80070bc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80070ae:	6978      	ldr	r0, [r7, #20]
 80070b0:	f002 f922 	bl	80092f8 <tcp_output>
  return;
 80070b4:	e001      	b.n	80070ba <tcp_listen_input+0x1be>
    return;
 80070b6:	bf00      	nop
 80070b8:	e000      	b.n	80070bc <tcp_listen_input+0x1c0>
  return;
 80070ba:	bf00      	nop
}
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd90      	pop	{r4, r7, pc}
 80070c2:	bf00      	nop
 80070c4:	200000f8 	.word	0x200000f8
 80070c8:	0800f078 	.word	0x0800f078
 80070cc:	0800f270 	.word	0x0800f270
 80070d0:	0800f0c4 	.word	0x0800f0c4
 80070d4:	200000f0 	.word	0x200000f0
 80070d8:	200000f6 	.word	0x200000f6
 80070dc:	200000ec 	.word	0x200000ec
 80070e0:	200000dc 	.word	0x200000dc
 80070e4:	2000335c 	.word	0x2000335c
 80070e8:	20003360 	.word	0x20003360
 80070ec:	2000334c 	.word	0x2000334c
 80070f0:	20008a50 	.word	0x20008a50
 80070f4:	20008a4c 	.word	0x20008a4c

080070f8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af04      	add	r7, sp, #16
 80070fe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007100:	4b2f      	ldr	r3, [pc, #188]	; (80071c0 <tcp_timewait_input+0xc8>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d153      	bne.n	80071b4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <tcp_timewait_input+0x28>
 8007112:	4b2c      	ldr	r3, [pc, #176]	; (80071c4 <tcp_timewait_input+0xcc>)
 8007114:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007118:	492b      	ldr	r1, [pc, #172]	; (80071c8 <tcp_timewait_input+0xd0>)
 800711a:	482c      	ldr	r0, [pc, #176]	; (80071cc <tcp_timewait_input+0xd4>)
 800711c:	f005 fe6c 	bl	800cdf8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007120:	4b27      	ldr	r3, [pc, #156]	; (80071c0 <tcp_timewait_input+0xc8>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	f003 0302 	and.w	r3, r3, #2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d02a      	beq.n	8007182 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800712c:	4b28      	ldr	r3, [pc, #160]	; (80071d0 <tcp_timewait_input+0xd8>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	db2d      	blt.n	8007196 <tcp_timewait_input+0x9e>
 800713a:	4b25      	ldr	r3, [pc, #148]	; (80071d0 <tcp_timewait_input+0xd8>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	6879      	ldr	r1, [r7, #4]
 8007144:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007146:	440b      	add	r3, r1
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	dc23      	bgt.n	8007196 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800714e:	4b21      	ldr	r3, [pc, #132]	; (80071d4 <tcp_timewait_input+0xdc>)
 8007150:	6819      	ldr	r1, [r3, #0]
 8007152:	4b21      	ldr	r3, [pc, #132]	; (80071d8 <tcp_timewait_input+0xe0>)
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	4b1d      	ldr	r3, [pc, #116]	; (80071d0 <tcp_timewait_input+0xd8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800715e:	4b1f      	ldr	r3, [pc, #124]	; (80071dc <tcp_timewait_input+0xe4>)
 8007160:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007162:	885b      	ldrh	r3, [r3, #2]
 8007164:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007166:	4a1d      	ldr	r2, [pc, #116]	; (80071dc <tcp_timewait_input+0xe4>)
 8007168:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800716a:	8812      	ldrh	r2, [r2, #0]
 800716c:	b292      	uxth	r2, r2
 800716e:	9202      	str	r2, [sp, #8]
 8007170:	9301      	str	r3, [sp, #4]
 8007172:	4b1b      	ldr	r3, [pc, #108]	; (80071e0 <tcp_timewait_input+0xe8>)
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	4b1b      	ldr	r3, [pc, #108]	; (80071e4 <tcp_timewait_input+0xec>)
 8007178:	4602      	mov	r2, r0
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f002 fe70 	bl	8009e60 <tcp_rst>
      return;
 8007180:	e01b      	b.n	80071ba <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007182:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <tcp_timewait_input+0xc8>)
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800718e:	4b16      	ldr	r3, [pc, #88]	; (80071e8 <tcp_timewait_input+0xf0>)
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007196:	4b10      	ldr	r3, [pc, #64]	; (80071d8 <tcp_timewait_input+0xe0>)
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00c      	beq.n	80071b8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	8b5b      	ldrh	r3, [r3, #26]
 80071a2:	f043 0302 	orr.w	r3, r3, #2
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f002 f8a3 	bl	80092f8 <tcp_output>
  }
  return;
 80071b2:	e001      	b.n	80071b8 <tcp_timewait_input+0xc0>
    return;
 80071b4:	bf00      	nop
 80071b6:	e000      	b.n	80071ba <tcp_timewait_input+0xc2>
  return;
 80071b8:	bf00      	nop
}
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	200000f8 	.word	0x200000f8
 80071c4:	0800f078 	.word	0x0800f078
 80071c8:	0800f290 	.word	0x0800f290
 80071cc:	0800f0c4 	.word	0x0800f0c4
 80071d0:	200000ec 	.word	0x200000ec
 80071d4:	200000f0 	.word	0x200000f0
 80071d8:	200000f6 	.word	0x200000f6
 80071dc:	200000dc 	.word	0x200000dc
 80071e0:	2000335c 	.word	0x2000335c
 80071e4:	20003360 	.word	0x20003360
 80071e8:	20008a54 	.word	0x20008a54

080071ec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80071ec:	b590      	push	{r4, r7, lr}
 80071ee:	b08d      	sub	sp, #52	; 0x34
 80071f0:	af04      	add	r7, sp, #16
 80071f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d106      	bne.n	8007210 <tcp_process+0x24>
 8007202:	4ba5      	ldr	r3, [pc, #660]	; (8007498 <tcp_process+0x2ac>)
 8007204:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007208:	49a4      	ldr	r1, [pc, #656]	; (800749c <tcp_process+0x2b0>)
 800720a:	48a5      	ldr	r0, [pc, #660]	; (80074a0 <tcp_process+0x2b4>)
 800720c:	f005 fdf4 	bl	800cdf8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007210:	4ba4      	ldr	r3, [pc, #656]	; (80074a4 <tcp_process+0x2b8>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d04e      	beq.n	80072ba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	7d1b      	ldrb	r3, [r3, #20]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d108      	bne.n	8007236 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007228:	4b9f      	ldr	r3, [pc, #636]	; (80074a8 <tcp_process+0x2bc>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d123      	bne.n	8007278 <tcp_process+0x8c>
        acceptable = 1;
 8007230:	2301      	movs	r3, #1
 8007232:	76fb      	strb	r3, [r7, #27]
 8007234:	e020      	b.n	8007278 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800723a:	4b9c      	ldr	r3, [pc, #624]	; (80074ac <tcp_process+0x2c0>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d102      	bne.n	8007248 <tcp_process+0x5c>
        acceptable = 1;
 8007242:	2301      	movs	r3, #1
 8007244:	76fb      	strb	r3, [r7, #27]
 8007246:	e017      	b.n	8007278 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007248:	4b98      	ldr	r3, [pc, #608]	; (80074ac <tcp_process+0x2c0>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	db10      	blt.n	8007278 <tcp_process+0x8c>
 8007256:	4b95      	ldr	r3, [pc, #596]	; (80074ac <tcp_process+0x2c0>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	6879      	ldr	r1, [r7, #4]
 8007260:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007262:	440b      	add	r3, r1
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	dc06      	bgt.n	8007278 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	8b5b      	ldrh	r3, [r3, #26]
 800726e:	f043 0302 	orr.w	r3, r3, #2
 8007272:	b29a      	uxth	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007278:	7efb      	ldrb	r3, [r7, #27]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01b      	beq.n	80072b6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	7d1b      	ldrb	r3, [r3, #20]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d106      	bne.n	8007294 <tcp_process+0xa8>
 8007286:	4b84      	ldr	r3, [pc, #528]	; (8007498 <tcp_process+0x2ac>)
 8007288:	f44f 724e 	mov.w	r2, #824	; 0x338
 800728c:	4988      	ldr	r1, [pc, #544]	; (80074b0 <tcp_process+0x2c4>)
 800728e:	4884      	ldr	r0, [pc, #528]	; (80074a0 <tcp_process+0x2b4>)
 8007290:	f005 fdb2 	bl	800cdf8 <iprintf>
      recv_flags |= TF_RESET;
 8007294:	4b87      	ldr	r3, [pc, #540]	; (80074b4 <tcp_process+0x2c8>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	f043 0308 	orr.w	r3, r3, #8
 800729c:	b2da      	uxtb	r2, r3
 800729e:	4b85      	ldr	r3, [pc, #532]	; (80074b4 <tcp_process+0x2c8>)
 80072a0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	8b5b      	ldrh	r3, [r3, #26]
 80072a6:	f023 0301 	bic.w	r3, r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80072b0:	f06f 030d 	mvn.w	r3, #13
 80072b4:	e37a      	b.n	80079ac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	e378      	b.n	80079ac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80072ba:	4b7a      	ldr	r3, [pc, #488]	; (80074a4 <tcp_process+0x2b8>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d010      	beq.n	80072e8 <tcp_process+0xfc>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	7d1b      	ldrb	r3, [r3, #20]
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d00c      	beq.n	80072e8 <tcp_process+0xfc>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	7d1b      	ldrb	r3, [r3, #20]
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d008      	beq.n	80072e8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	8b5b      	ldrh	r3, [r3, #26]
 80072da:	f043 0302 	orr.w	r3, r3, #2
 80072de:	b29a      	uxth	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	e361      	b.n	80079ac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	8b5b      	ldrh	r3, [r3, #26]
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d103      	bne.n	80072fc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80072f4:	4b70      	ldr	r3, [pc, #448]	; (80074b8 <tcp_process+0x2cc>)
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 fc2d 	bl	8008b6c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	7d1b      	ldrb	r3, [r3, #20]
 8007316:	3b02      	subs	r3, #2
 8007318:	2b07      	cmp	r3, #7
 800731a:	f200 8337 	bhi.w	800798c <tcp_process+0x7a0>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <tcp_process+0x138>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	08007345 	.word	0x08007345
 8007328:	08007575 	.word	0x08007575
 800732c:	080076ed 	.word	0x080076ed
 8007330:	08007717 	.word	0x08007717
 8007334:	0800783b 	.word	0x0800783b
 8007338:	080076ed 	.word	0x080076ed
 800733c:	080078c7 	.word	0x080078c7
 8007340:	08007957 	.word	0x08007957
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007344:	4b57      	ldr	r3, [pc, #348]	; (80074a4 <tcp_process+0x2b8>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 80e4 	beq.w	800751a <tcp_process+0x32e>
 8007352:	4b54      	ldr	r3, [pc, #336]	; (80074a4 <tcp_process+0x2b8>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 80dd 	beq.w	800751a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	4b50      	ldr	r3, [pc, #320]	; (80074a8 <tcp_process+0x2bc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	f040 80d5 	bne.w	800751a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007370:	4b4e      	ldr	r3, [pc, #312]	; (80074ac <tcp_process+0x2c0>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8007382:	4b49      	ldr	r3, [pc, #292]	; (80074a8 <tcp_process+0x2bc>)
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800738a:	4b4c      	ldr	r3, [pc, #304]	; (80074bc <tcp_process+0x2d0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	89db      	ldrh	r3, [r3, #14]
 8007390:	b29a      	uxth	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80073a4:	4b41      	ldr	r3, [pc, #260]	; (80074ac <tcp_process+0x2c0>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	1e5a      	subs	r2, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2204      	movs	r2, #4
 80073b2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4618      	mov	r0, r3
 80073be:	f004 faed 	bl	800b99c <ip4_route>
 80073c2:	4601      	mov	r1, r0
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	3304      	adds	r3, #4
 80073c8:	461a      	mov	r2, r3
 80073ca:	4620      	mov	r0, r4
 80073cc:	f7ff f88e 	bl	80064ec <tcp_eff_send_mss_netif>
 80073d0:	4603      	mov	r3, r0
 80073d2:	461a      	mov	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073dc:	009a      	lsls	r2, r3, #2
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	f241 111c 	movw	r1, #4380	; 0x111c
 80073e8:	428b      	cmp	r3, r1
 80073ea:	bf38      	it	cc
 80073ec:	460b      	movcc	r3, r1
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d204      	bcs.n	80073fc <tcp_process+0x210>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	e00d      	b.n	8007418 <tcp_process+0x22c>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	f241 121c 	movw	r2, #4380	; 0x111c
 8007406:	4293      	cmp	r3, r2
 8007408:	d904      	bls.n	8007414 <tcp_process+0x228>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	b29b      	uxth	r3, r3
 8007412:	e001      	b.n	8007418 <tcp_process+0x22c>
 8007414:	f241 131c 	movw	r3, #4380	; 0x111c
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007424:	2b00      	cmp	r3, #0
 8007426:	d106      	bne.n	8007436 <tcp_process+0x24a>
 8007428:	4b1b      	ldr	r3, [pc, #108]	; (8007498 <tcp_process+0x2ac>)
 800742a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800742e:	4924      	ldr	r1, [pc, #144]	; (80074c0 <tcp_process+0x2d4>)
 8007430:	481b      	ldr	r0, [pc, #108]	; (80074a0 <tcp_process+0x2b4>)
 8007432:	f005 fce1 	bl	800cdf8 <iprintf>
        --pcb->snd_queuelen;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800743c:	3b01      	subs	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d111      	bne.n	8007476 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007456:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d106      	bne.n	800746c <tcp_process+0x280>
 800745e:	4b0e      	ldr	r3, [pc, #56]	; (8007498 <tcp_process+0x2ac>)
 8007460:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007464:	4917      	ldr	r1, [pc, #92]	; (80074c4 <tcp_process+0x2d8>)
 8007466:	480e      	ldr	r0, [pc, #56]	; (80074a0 <tcp_process+0x2b4>)
 8007468:	f005 fcc6 	bl	800cdf8 <iprintf>
          pcb->unsent = rseg->next;
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	66da      	str	r2, [r3, #108]	; 0x6c
 8007474:	e003      	b.n	800747e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800747e:	69f8      	ldr	r0, [r7, #28]
 8007480:	f7fe fd3d 	bl	8005efe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007488:	2b00      	cmp	r3, #0
 800748a:	d11d      	bne.n	80074c8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007492:	861a      	strh	r2, [r3, #48]	; 0x30
 8007494:	e01f      	b.n	80074d6 <tcp_process+0x2ea>
 8007496:	bf00      	nop
 8007498:	0800f078 	.word	0x0800f078
 800749c:	0800f2b0 	.word	0x0800f2b0
 80074a0:	0800f0c4 	.word	0x0800f0c4
 80074a4:	200000f8 	.word	0x200000f8
 80074a8:	200000f0 	.word	0x200000f0
 80074ac:	200000ec 	.word	0x200000ec
 80074b0:	0800f2cc 	.word	0x0800f2cc
 80074b4:	200000f9 	.word	0x200000f9
 80074b8:	20008a54 	.word	0x20008a54
 80074bc:	200000dc 	.word	0x200000dc
 80074c0:	0800f2ec 	.word	0x0800f2ec
 80074c4:	0800f304 	.word	0x0800f304
        } else {
          pcb->rtime = 0;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <tcp_process+0x30a>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6910      	ldr	r0, [r2, #16]
 80074ea:	2200      	movs	r2, #0
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	4798      	blx	r3
 80074f0:	4603      	mov	r3, r0
 80074f2:	76bb      	strb	r3, [r7, #26]
 80074f4:	e001      	b.n	80074fa <tcp_process+0x30e>
 80074f6:	2300      	movs	r3, #0
 80074f8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80074fa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80074fe:	f113 0f0d 	cmn.w	r3, #13
 8007502:	d102      	bne.n	800750a <tcp_process+0x31e>
          return ERR_ABRT;
 8007504:	f06f 030c 	mvn.w	r3, #12
 8007508:	e250      	b.n	80079ac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	8b5b      	ldrh	r3, [r3, #26]
 800750e:	f043 0302 	orr.w	r3, r3, #2
 8007512:	b29a      	uxth	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007518:	e23a      	b.n	8007990 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800751a:	4b9d      	ldr	r3, [pc, #628]	; (8007790 <tcp_process+0x5a4>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	f003 0310 	and.w	r3, r3, #16
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 8234 	beq.w	8007990 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007528:	4b9a      	ldr	r3, [pc, #616]	; (8007794 <tcp_process+0x5a8>)
 800752a:	6819      	ldr	r1, [r3, #0]
 800752c:	4b9a      	ldr	r3, [pc, #616]	; (8007798 <tcp_process+0x5ac>)
 800752e:	881b      	ldrh	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	4b9a      	ldr	r3, [pc, #616]	; (800779c <tcp_process+0x5b0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007538:	4b99      	ldr	r3, [pc, #612]	; (80077a0 <tcp_process+0x5b4>)
 800753a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800753c:	885b      	ldrh	r3, [r3, #2]
 800753e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007540:	4a97      	ldr	r2, [pc, #604]	; (80077a0 <tcp_process+0x5b4>)
 8007542:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007544:	8812      	ldrh	r2, [r2, #0]
 8007546:	b292      	uxth	r2, r2
 8007548:	9202      	str	r2, [sp, #8]
 800754a:	9301      	str	r3, [sp, #4]
 800754c:	4b95      	ldr	r3, [pc, #596]	; (80077a4 <tcp_process+0x5b8>)
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	4b95      	ldr	r3, [pc, #596]	; (80077a8 <tcp_process+0x5bc>)
 8007552:	4602      	mov	r2, r0
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f002 fc83 	bl	8009e60 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007560:	2b05      	cmp	r3, #5
 8007562:	f200 8215 	bhi.w	8007990 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f002 fa4d 	bl	8009a0c <tcp_rexmit_rto>
      break;
 8007572:	e20d      	b.n	8007990 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007574:	4b86      	ldr	r3, [pc, #536]	; (8007790 <tcp_process+0x5a4>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 80a1 	beq.w	80076c4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007582:	4b84      	ldr	r3, [pc, #528]	; (8007794 <tcp_process+0x5a8>)
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	3b01      	subs	r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	db7e      	blt.n	8007690 <tcp_process+0x4a4>
 8007592:	4b80      	ldr	r3, [pc, #512]	; (8007794 <tcp_process+0x5a8>)
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	dc77      	bgt.n	8007690 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2204      	movs	r2, #4
 80075a4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d102      	bne.n	80075b4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80075ae:	23fa      	movs	r3, #250	; 0xfa
 80075b0:	76bb      	strb	r3, [r7, #26]
 80075b2:	e01d      	b.n	80075f0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d106      	bne.n	80075cc <tcp_process+0x3e0>
 80075be:	4b7b      	ldr	r3, [pc, #492]	; (80077ac <tcp_process+0x5c0>)
 80075c0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80075c4:	497a      	ldr	r1, [pc, #488]	; (80077b0 <tcp_process+0x5c4>)
 80075c6:	487b      	ldr	r0, [pc, #492]	; (80077b4 <tcp_process+0x5c8>)
 80075c8:	f005 fc16 	bl	800cdf8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <tcp_process+0x400>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6910      	ldr	r0, [r2, #16]
 80075e0:	2200      	movs	r2, #0
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	4798      	blx	r3
 80075e6:	4603      	mov	r3, r0
 80075e8:	76bb      	strb	r3, [r7, #26]
 80075ea:	e001      	b.n	80075f0 <tcp_process+0x404>
 80075ec:	23f0      	movs	r3, #240	; 0xf0
 80075ee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80075f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80075f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80075fc:	f113 0f0d 	cmn.w	r3, #13
 8007600:	d002      	beq.n	8007608 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7fd ff90 	bl	8005528 <tcp_abort>
            }
            return ERR_ABRT;
 8007608:	f06f 030c 	mvn.w	r3, #12
 800760c:	e1ce      	b.n	80079ac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fae0 	bl	8007bd4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007614:	4b68      	ldr	r3, [pc, #416]	; (80077b8 <tcp_process+0x5cc>)
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <tcp_process+0x43c>
            recv_acked--;
 800761c:	4b66      	ldr	r3, [pc, #408]	; (80077b8 <tcp_process+0x5cc>)
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	3b01      	subs	r3, #1
 8007622:	b29a      	uxth	r2, r3
 8007624:	4b64      	ldr	r3, [pc, #400]	; (80077b8 <tcp_process+0x5cc>)
 8007626:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800762c:	009a      	lsls	r2, r3, #2
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	f241 111c 	movw	r1, #4380	; 0x111c
 8007638:	428b      	cmp	r3, r1
 800763a:	bf38      	it	cc
 800763c:	460b      	movcc	r3, r1
 800763e:	429a      	cmp	r2, r3
 8007640:	d204      	bcs.n	800764c <tcp_process+0x460>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	b29b      	uxth	r3, r3
 800764a:	e00d      	b.n	8007668 <tcp_process+0x47c>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	f241 121c 	movw	r2, #4380	; 0x111c
 8007656:	4293      	cmp	r3, r2
 8007658:	d904      	bls.n	8007664 <tcp_process+0x478>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	b29b      	uxth	r3, r3
 8007662:	e001      	b.n	8007668 <tcp_process+0x47c>
 8007664:	f241 131c 	movw	r3, #4380	; 0x111c
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800766e:	4b53      	ldr	r3, [pc, #332]	; (80077bc <tcp_process+0x5d0>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	f003 0320 	and.w	r3, r3, #32
 8007676:	2b00      	cmp	r3, #0
 8007678:	d037      	beq.n	80076ea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	8b5b      	ldrh	r3, [r3, #26]
 800767e:	f043 0302 	orr.w	r3, r3, #2
 8007682:	b29a      	uxth	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2207      	movs	r2, #7
 800768c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800768e:	e02c      	b.n	80076ea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007690:	4b40      	ldr	r3, [pc, #256]	; (8007794 <tcp_process+0x5a8>)
 8007692:	6819      	ldr	r1, [r3, #0]
 8007694:	4b40      	ldr	r3, [pc, #256]	; (8007798 <tcp_process+0x5ac>)
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	4b40      	ldr	r3, [pc, #256]	; (800779c <tcp_process+0x5b0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80076a0:	4b3f      	ldr	r3, [pc, #252]	; (80077a0 <tcp_process+0x5b4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80076a4:	885b      	ldrh	r3, [r3, #2]
 80076a6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80076a8:	4a3d      	ldr	r2, [pc, #244]	; (80077a0 <tcp_process+0x5b4>)
 80076aa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80076ac:	8812      	ldrh	r2, [r2, #0]
 80076ae:	b292      	uxth	r2, r2
 80076b0:	9202      	str	r2, [sp, #8]
 80076b2:	9301      	str	r3, [sp, #4]
 80076b4:	4b3b      	ldr	r3, [pc, #236]	; (80077a4 <tcp_process+0x5b8>)
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	4b3b      	ldr	r3, [pc, #236]	; (80077a8 <tcp_process+0x5bc>)
 80076ba:	4602      	mov	r2, r0
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f002 fbcf 	bl	8009e60 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80076c2:	e167      	b.n	8007994 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80076c4:	4b32      	ldr	r3, [pc, #200]	; (8007790 <tcp_process+0x5a4>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 8161 	beq.w	8007994 <tcp_process+0x7a8>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	1e5a      	subs	r2, r3, #1
 80076d8:	4b30      	ldr	r3, [pc, #192]	; (800779c <tcp_process+0x5b0>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	f040 8159 	bne.w	8007994 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f002 f9b4 	bl	8009a50 <tcp_rexmit>
      break;
 80076e8:	e154      	b.n	8007994 <tcp_process+0x7a8>
 80076ea:	e153      	b.n	8007994 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fa71 	bl	8007bd4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80076f2:	4b32      	ldr	r3, [pc, #200]	; (80077bc <tcp_process+0x5d0>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 814c 	beq.w	8007998 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	8b5b      	ldrh	r3, [r3, #26]
 8007704:	f043 0302 	orr.w	r3, r3, #2
 8007708:	b29a      	uxth	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2207      	movs	r2, #7
 8007712:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007714:	e140      	b.n	8007998 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fa5c 	bl	8007bd4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800771c:	4b27      	ldr	r3, [pc, #156]	; (80077bc <tcp_process+0x5d0>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	f003 0320 	and.w	r3, r3, #32
 8007724:	2b00      	cmp	r3, #0
 8007726:	d071      	beq.n	800780c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007728:	4b19      	ldr	r3, [pc, #100]	; (8007790 <tcp_process+0x5a4>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	f003 0310 	and.w	r3, r3, #16
 8007730:	2b00      	cmp	r3, #0
 8007732:	d060      	beq.n	80077f6 <tcp_process+0x60a>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007738:	4b16      	ldr	r3, [pc, #88]	; (8007794 <tcp_process+0x5a8>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	429a      	cmp	r2, r3
 800773e:	d15a      	bne.n	80077f6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007744:	2b00      	cmp	r3, #0
 8007746:	d156      	bne.n	80077f6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	8b5b      	ldrh	r3, [r3, #26]
 800774c:	f043 0302 	orr.w	r3, r3, #2
 8007750:	b29a      	uxth	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fe fdbe 	bl	80062d8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800775c:	4b18      	ldr	r3, [pc, #96]	; (80077c0 <tcp_process+0x5d4>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	429a      	cmp	r2, r3
 8007764:	d105      	bne.n	8007772 <tcp_process+0x586>
 8007766:	4b16      	ldr	r3, [pc, #88]	; (80077c0 <tcp_process+0x5d4>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	4a14      	ldr	r2, [pc, #80]	; (80077c0 <tcp_process+0x5d4>)
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	e02e      	b.n	80077d0 <tcp_process+0x5e4>
 8007772:	4b13      	ldr	r3, [pc, #76]	; (80077c0 <tcp_process+0x5d4>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	617b      	str	r3, [r7, #20]
 8007778:	e027      	b.n	80077ca <tcp_process+0x5de>
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	429a      	cmp	r2, r3
 8007782:	d11f      	bne.n	80077c4 <tcp_process+0x5d8>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	60da      	str	r2, [r3, #12]
 800778c:	e020      	b.n	80077d0 <tcp_process+0x5e4>
 800778e:	bf00      	nop
 8007790:	200000f8 	.word	0x200000f8
 8007794:	200000f0 	.word	0x200000f0
 8007798:	200000f6 	.word	0x200000f6
 800779c:	200000ec 	.word	0x200000ec
 80077a0:	200000dc 	.word	0x200000dc
 80077a4:	2000335c 	.word	0x2000335c
 80077a8:	20003360 	.word	0x20003360
 80077ac:	0800f078 	.word	0x0800f078
 80077b0:	0800f318 	.word	0x0800f318
 80077b4:	0800f0c4 	.word	0x0800f0c4
 80077b8:	200000f4 	.word	0x200000f4
 80077bc:	200000f9 	.word	0x200000f9
 80077c0:	20008a50 	.word	0x20008a50
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	617b      	str	r3, [r7, #20]
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1d4      	bne.n	800777a <tcp_process+0x58e>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	60da      	str	r2, [r3, #12]
 80077d6:	4b77      	ldr	r3, [pc, #476]	; (80079b4 <tcp_process+0x7c8>)
 80077d8:	2201      	movs	r2, #1
 80077da:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	220a      	movs	r2, #10
 80077e0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80077e2:	4b75      	ldr	r3, [pc, #468]	; (80079b8 <tcp_process+0x7cc>)
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60da      	str	r2, [r3, #12]
 80077ea:	4a73      	ldr	r2, [pc, #460]	; (80079b8 <tcp_process+0x7cc>)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	f002 fcf8 	bl	800a1e4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80077f4:	e0d2      	b.n	800799c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	8b5b      	ldrh	r3, [r3, #26]
 80077fa:	f043 0302 	orr.w	r3, r3, #2
 80077fe:	b29a      	uxth	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2208      	movs	r2, #8
 8007808:	751a      	strb	r2, [r3, #20]
      break;
 800780a:	e0c7      	b.n	800799c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800780c:	4b6b      	ldr	r3, [pc, #428]	; (80079bc <tcp_process+0x7d0>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	f003 0310 	and.w	r3, r3, #16
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80c1 	beq.w	800799c <tcp_process+0x7b0>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800781e:	4b68      	ldr	r3, [pc, #416]	; (80079c0 <tcp_process+0x7d4>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	f040 80ba 	bne.w	800799c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800782c:	2b00      	cmp	r3, #0
 800782e:	f040 80b5 	bne.w	800799c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2206      	movs	r2, #6
 8007836:	751a      	strb	r2, [r3, #20]
      break;
 8007838:	e0b0      	b.n	800799c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f9ca 	bl	8007bd4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007840:	4b60      	ldr	r3, [pc, #384]	; (80079c4 <tcp_process+0x7d8>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	f003 0320 	and.w	r3, r3, #32
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 80a9 	beq.w	80079a0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	8b5b      	ldrh	r3, [r3, #26]
 8007852:	f043 0302 	orr.w	r3, r3, #2
 8007856:	b29a      	uxth	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7fe fd3b 	bl	80062d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007862:	4b59      	ldr	r3, [pc, #356]	; (80079c8 <tcp_process+0x7dc>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	429a      	cmp	r2, r3
 800786a:	d105      	bne.n	8007878 <tcp_process+0x68c>
 800786c:	4b56      	ldr	r3, [pc, #344]	; (80079c8 <tcp_process+0x7dc>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	4a55      	ldr	r2, [pc, #340]	; (80079c8 <tcp_process+0x7dc>)
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	e013      	b.n	80078a0 <tcp_process+0x6b4>
 8007878:	4b53      	ldr	r3, [pc, #332]	; (80079c8 <tcp_process+0x7dc>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	613b      	str	r3, [r7, #16]
 800787e:	e00c      	b.n	800789a <tcp_process+0x6ae>
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	429a      	cmp	r2, r3
 8007888:	d104      	bne.n	8007894 <tcp_process+0x6a8>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	60da      	str	r2, [r3, #12]
 8007892:	e005      	b.n	80078a0 <tcp_process+0x6b4>
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	613b      	str	r3, [r7, #16]
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1ef      	bne.n	8007880 <tcp_process+0x694>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	60da      	str	r2, [r3, #12]
 80078a6:	4b43      	ldr	r3, [pc, #268]	; (80079b4 <tcp_process+0x7c8>)
 80078a8:	2201      	movs	r2, #1
 80078aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	220a      	movs	r2, #10
 80078b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80078b2:	4b41      	ldr	r3, [pc, #260]	; (80079b8 <tcp_process+0x7cc>)
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	60da      	str	r2, [r3, #12]
 80078ba:	4a3f      	ldr	r2, [pc, #252]	; (80079b8 <tcp_process+0x7cc>)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	f002 fc90 	bl	800a1e4 <tcp_timer_needed>
      }
      break;
 80078c4:	e06c      	b.n	80079a0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f984 	bl	8007bd4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80078cc:	4b3b      	ldr	r3, [pc, #236]	; (80079bc <tcp_process+0x7d0>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f003 0310 	and.w	r3, r3, #16
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d065      	beq.n	80079a4 <tcp_process+0x7b8>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078dc:	4b38      	ldr	r3, [pc, #224]	; (80079c0 <tcp_process+0x7d4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d15f      	bne.n	80079a4 <tcp_process+0x7b8>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d15b      	bne.n	80079a4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7fe fcf3 	bl	80062d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80078f2:	4b35      	ldr	r3, [pc, #212]	; (80079c8 <tcp_process+0x7dc>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d105      	bne.n	8007908 <tcp_process+0x71c>
 80078fc:	4b32      	ldr	r3, [pc, #200]	; (80079c8 <tcp_process+0x7dc>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	4a31      	ldr	r2, [pc, #196]	; (80079c8 <tcp_process+0x7dc>)
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	e013      	b.n	8007930 <tcp_process+0x744>
 8007908:	4b2f      	ldr	r3, [pc, #188]	; (80079c8 <tcp_process+0x7dc>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	60fb      	str	r3, [r7, #12]
 800790e:	e00c      	b.n	800792a <tcp_process+0x73e>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	429a      	cmp	r2, r3
 8007918:	d104      	bne.n	8007924 <tcp_process+0x738>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	60da      	str	r2, [r3, #12]
 8007922:	e005      	b.n	8007930 <tcp_process+0x744>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1ef      	bne.n	8007910 <tcp_process+0x724>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	60da      	str	r2, [r3, #12]
 8007936:	4b1f      	ldr	r3, [pc, #124]	; (80079b4 <tcp_process+0x7c8>)
 8007938:	2201      	movs	r2, #1
 800793a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	220a      	movs	r2, #10
 8007940:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007942:	4b1d      	ldr	r3, [pc, #116]	; (80079b8 <tcp_process+0x7cc>)
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	60da      	str	r2, [r3, #12]
 800794a:	4a1b      	ldr	r2, [pc, #108]	; (80079b8 <tcp_process+0x7cc>)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	f002 fc48 	bl	800a1e4 <tcp_timer_needed>
      }
      break;
 8007954:	e026      	b.n	80079a4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f93c 	bl	8007bd4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800795c:	4b17      	ldr	r3, [pc, #92]	; (80079bc <tcp_process+0x7d0>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01f      	beq.n	80079a8 <tcp_process+0x7bc>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800796c:	4b14      	ldr	r3, [pc, #80]	; (80079c0 <tcp_process+0x7d4>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	429a      	cmp	r2, r3
 8007972:	d119      	bne.n	80079a8 <tcp_process+0x7bc>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007978:	2b00      	cmp	r3, #0
 800797a:	d115      	bne.n	80079a8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800797c:	4b11      	ldr	r3, [pc, #68]	; (80079c4 <tcp_process+0x7d8>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	f043 0310 	orr.w	r3, r3, #16
 8007984:	b2da      	uxtb	r2, r3
 8007986:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <tcp_process+0x7d8>)
 8007988:	701a      	strb	r2, [r3, #0]
      }
      break;
 800798a:	e00d      	b.n	80079a8 <tcp_process+0x7bc>
    default:
      break;
 800798c:	bf00      	nop
 800798e:	e00c      	b.n	80079aa <tcp_process+0x7be>
      break;
 8007990:	bf00      	nop
 8007992:	e00a      	b.n	80079aa <tcp_process+0x7be>
      break;
 8007994:	bf00      	nop
 8007996:	e008      	b.n	80079aa <tcp_process+0x7be>
      break;
 8007998:	bf00      	nop
 800799a:	e006      	b.n	80079aa <tcp_process+0x7be>
      break;
 800799c:	bf00      	nop
 800799e:	e004      	b.n	80079aa <tcp_process+0x7be>
      break;
 80079a0:	bf00      	nop
 80079a2:	e002      	b.n	80079aa <tcp_process+0x7be>
      break;
 80079a4:	bf00      	nop
 80079a6:	e000      	b.n	80079aa <tcp_process+0x7be>
      break;
 80079a8:	bf00      	nop
  }
  return ERR_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3724      	adds	r7, #36	; 0x24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd90      	pop	{r4, r7, pc}
 80079b4:	20008a4c 	.word	0x20008a4c
 80079b8:	20008a60 	.word	0x20008a60
 80079bc:	200000f8 	.word	0x200000f8
 80079c0:	200000f0 	.word	0x200000f0
 80079c4:	200000f9 	.word	0x200000f9
 80079c8:	20008a50 	.word	0x20008a50

080079cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80079cc:	b590      	push	{r4, r7, lr}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d106      	bne.n	80079ea <tcp_oos_insert_segment+0x1e>
 80079dc:	4b3b      	ldr	r3, [pc, #236]	; (8007acc <tcp_oos_insert_segment+0x100>)
 80079de:	f240 421f 	movw	r2, #1055	; 0x41f
 80079e2:	493b      	ldr	r1, [pc, #236]	; (8007ad0 <tcp_oos_insert_segment+0x104>)
 80079e4:	483b      	ldr	r0, [pc, #236]	; (8007ad4 <tcp_oos_insert_segment+0x108>)
 80079e6:	f005 fa07 	bl	800cdf8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	899b      	ldrh	r3, [r3, #12]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fb fd5c 	bl	80034b0 <lwip_htons>
 80079f8:	4603      	mov	r3, r0
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d028      	beq.n	8007a56 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007a04:	6838      	ldr	r0, [r7, #0]
 8007a06:	f7fe fa65 	bl	8005ed4 <tcp_segs_free>
    next = NULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	603b      	str	r3, [r7, #0]
 8007a0e:	e056      	b.n	8007abe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	899b      	ldrh	r3, [r3, #12]
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fb fd49 	bl	80034b0 <lwip_htons>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00d      	beq.n	8007a46 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	899b      	ldrh	r3, [r3, #12]
 8007a30:	b29c      	uxth	r4, r3
 8007a32:	2001      	movs	r0, #1
 8007a34:	f7fb fd3c 	bl	80034b0 <lwip_htons>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	4322      	orrs	r2, r4
 8007a42:	b292      	uxth	r2, r2
 8007a44:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f7fe fa54 	bl	8005efe <tcp_seg_free>
    while (next &&
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00e      	beq.n	8007a7a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	891b      	ldrh	r3, [r3, #8]
 8007a60:	461a      	mov	r2, r3
 8007a62:	4b1d      	ldr	r3, [pc, #116]	; (8007ad8 <tcp_oos_insert_segment+0x10c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	441a      	add	r2, r3
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	8909      	ldrh	r1, [r1, #8]
 8007a72:	440b      	add	r3, r1
 8007a74:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	daca      	bge.n	8007a10 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01e      	beq.n	8007abe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	891b      	ldrh	r3, [r3, #8]
 8007a84:	461a      	mov	r2, r3
 8007a86:	4b14      	ldr	r3, [pc, #80]	; (8007ad8 <tcp_oos_insert_segment+0x10c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	441a      	add	r2, r3
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	dd12      	ble.n	8007abe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	4b0d      	ldr	r3, [pc, #52]	; (8007ad8 <tcp_oos_insert_segment+0x10c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	891b      	ldrh	r3, [r3, #8]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4610      	mov	r0, r2
 8007aba:	f7fc fe27 	bl	800470c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	601a      	str	r2, [r3, #0]
}
 8007ac4:	bf00      	nop
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd90      	pop	{r4, r7, pc}
 8007acc:	0800f078 	.word	0x0800f078
 8007ad0:	0800f338 	.word	0x0800f338
 8007ad4:	0800f0c4 	.word	0x0800f0c4
 8007ad8:	200000ec 	.word	0x200000ec

08007adc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8007adc:	b5b0      	push	{r4, r5, r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8007aea:	e03e      	b.n	8007b6a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fd f814 	bl	8004b28 <pbuf_clen>
 8007b00:	4603      	mov	r3, r0
 8007b02:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007b0a:	8a7a      	ldrh	r2, [r7, #18]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d906      	bls.n	8007b1e <tcp_free_acked_segments+0x42>
 8007b10:	4b2a      	ldr	r3, [pc, #168]	; (8007bbc <tcp_free_acked_segments+0xe0>)
 8007b12:	f240 4257 	movw	r2, #1111	; 0x457
 8007b16:	492a      	ldr	r1, [pc, #168]	; (8007bc0 <tcp_free_acked_segments+0xe4>)
 8007b18:	482a      	ldr	r0, [pc, #168]	; (8007bc4 <tcp_free_acked_segments+0xe8>)
 8007b1a:	f005 f96d 	bl	800cdf8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8007b24:	8a7b      	ldrh	r3, [r7, #18]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	891a      	ldrh	r2, [r3, #8]
 8007b34:	4b24      	ldr	r3, [pc, #144]	; (8007bc8 <tcp_free_acked_segments+0xec>)
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	4413      	add	r3, r2
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	4b22      	ldr	r3, [pc, #136]	; (8007bc8 <tcp_free_acked_segments+0xec>)
 8007b3e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8007b40:	6978      	ldr	r0, [r7, #20]
 8007b42:	f7fe f9dc 	bl	8005efe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00c      	beq.n	8007b6a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d109      	bne.n	8007b6a <tcp_free_acked_segments+0x8e>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d106      	bne.n	8007b6a <tcp_free_acked_segments+0x8e>
 8007b5c:	4b17      	ldr	r3, [pc, #92]	; (8007bbc <tcp_free_acked_segments+0xe0>)
 8007b5e:	f240 4261 	movw	r2, #1121	; 0x461
 8007b62:	491a      	ldr	r1, [pc, #104]	; (8007bcc <tcp_free_acked_segments+0xf0>)
 8007b64:	4817      	ldr	r0, [pc, #92]	; (8007bc4 <tcp_free_acked_segments+0xe8>)
 8007b66:	f005 f947 	bl	800cdf8 <iprintf>
  while (seg_list != NULL &&
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d020      	beq.n	8007bb2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fb fcaf 	bl	80034da <lwip_htonl>
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	891b      	ldrh	r3, [r3, #8]
 8007b82:	461d      	mov	r5, r3
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	899b      	ldrh	r3, [r3, #12]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fb fc8f 	bl	80034b0 <lwip_htons>
 8007b92:	4603      	mov	r3, r0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <tcp_free_acked_segments+0xc6>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e000      	b.n	8007ba4 <tcp_free_acked_segments+0xc8>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	442b      	add	r3, r5
 8007ba6:	18e2      	adds	r2, r4, r3
 8007ba8:	4b09      	ldr	r3, [pc, #36]	; (8007bd0 <tcp_free_acked_segments+0xf4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dd9c      	ble.n	8007aec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3718      	adds	r7, #24
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bdb0      	pop	{r4, r5, r7, pc}
 8007bbc:	0800f078 	.word	0x0800f078
 8007bc0:	0800f360 	.word	0x0800f360
 8007bc4:	0800f0c4 	.word	0x0800f0c4
 8007bc8:	200000f4 	.word	0x200000f4
 8007bcc:	0800f388 	.word	0x0800f388
 8007bd0:	200000f0 	.word	0x200000f0

08007bd4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8007bd4:	b5b0      	push	{r4, r5, r7, lr}
 8007bd6:	b094      	sub	sp, #80	; 0x50
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d106      	bne.n	8007bf4 <tcp_receive+0x20>
 8007be6:	4ba6      	ldr	r3, [pc, #664]	; (8007e80 <tcp_receive+0x2ac>)
 8007be8:	f240 427b 	movw	r2, #1147	; 0x47b
 8007bec:	49a5      	ldr	r1, [pc, #660]	; (8007e84 <tcp_receive+0x2b0>)
 8007bee:	48a6      	ldr	r0, [pc, #664]	; (8007e88 <tcp_receive+0x2b4>)
 8007bf0:	f005 f902 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	7d1b      	ldrb	r3, [r3, #20]
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d806      	bhi.n	8007c0a <tcp_receive+0x36>
 8007bfc:	4ba0      	ldr	r3, [pc, #640]	; (8007e80 <tcp_receive+0x2ac>)
 8007bfe:	f240 427c 	movw	r2, #1148	; 0x47c
 8007c02:	49a2      	ldr	r1, [pc, #648]	; (8007e8c <tcp_receive+0x2b8>)
 8007c04:	48a0      	ldr	r0, [pc, #640]	; (8007e88 <tcp_receive+0x2b4>)
 8007c06:	f005 f8f7 	bl	800cdf8 <iprintf>

  if (flags & TCP_ACK) {
 8007c0a:	4ba1      	ldr	r3, [pc, #644]	; (8007e90 <tcp_receive+0x2bc>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	f003 0310 	and.w	r3, r3, #16
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 8263 	beq.w	80080de <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c1e:	461a      	mov	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c24:	4413      	add	r3, r2
 8007c26:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c2c:	4b99      	ldr	r3, [pc, #612]	; (8007e94 <tcp_receive+0x2c0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	db1b      	blt.n	8007c6e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c3a:	4b96      	ldr	r3, [pc, #600]	; (8007e94 <tcp_receive+0x2c0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d106      	bne.n	8007c50 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c46:	4b94      	ldr	r3, [pc, #592]	; (8007e98 <tcp_receive+0x2c4>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	db0e      	blt.n	8007c6e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c54:	4b90      	ldr	r3, [pc, #576]	; (8007e98 <tcp_receive+0x2c4>)
 8007c56:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d125      	bne.n	8007ca8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007c5c:	4b8f      	ldr	r3, [pc, #572]	; (8007e9c <tcp_receive+0x2c8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	89db      	ldrh	r3, [r3, #14]
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d91c      	bls.n	8007ca8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007c6e:	4b8b      	ldr	r3, [pc, #556]	; (8007e9c <tcp_receive+0x2c8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	89db      	ldrh	r3, [r3, #14]
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d205      	bcs.n	8007c98 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8007c98:	4b7e      	ldr	r3, [pc, #504]	; (8007e94 <tcp_receive+0x2c0>)
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8007ca0:	4b7d      	ldr	r3, [pc, #500]	; (8007e98 <tcp_receive+0x2c4>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007ca8:	4b7b      	ldr	r3, [pc, #492]	; (8007e98 <tcp_receive+0x2c4>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	dc58      	bgt.n	8007d68 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8007cb6:	4b7a      	ldr	r3, [pc, #488]	; (8007ea0 <tcp_receive+0x2cc>)
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d14b      	bne.n	8007d56 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8007cc8:	4413      	add	r3, r2
 8007cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d142      	bne.n	8007d56 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	db3d      	blt.n	8007d56 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cde:	4b6e      	ldr	r3, [pc, #440]	; (8007e98 <tcp_receive+0x2c4>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d137      	bne.n	8007d56 <tcp_receive+0x182>
              found_dupack = 1;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cf0:	2bff      	cmp	r3, #255	; 0xff
 8007cf2:	d007      	beq.n	8007d04 <tcp_receive+0x130>
                ++pcb->dupacks;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	d91b      	bls.n	8007d46 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d18:	4413      	add	r3, r2
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d30a      	bcc.n	8007d3c <tcp_receive+0x168>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d30:	4413      	add	r3, r2
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007d3a:	e004      	b.n	8007d46 <tcp_receive+0x172>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d902      	bls.n	8007d56 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 fee9 	bl	8009b28 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8007d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f040 8160 	bne.w	800801e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d66:	e15a      	b.n	800801e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007d68:	4b4b      	ldr	r3, [pc, #300]	; (8007e98 <tcp_receive+0x2c4>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	3b01      	subs	r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f2c0 814d 	blt.w	8008014 <tcp_receive+0x440>
 8007d7a:	4b47      	ldr	r3, [pc, #284]	; (8007e98 <tcp_receive+0x2c4>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f300 8145 	bgt.w	8008014 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	8b5b      	ldrh	r3, [r3, #26]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d010      	beq.n	8007db8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	8b5b      	ldrh	r3, [r3, #26]
 8007d9a:	f023 0304 	bic.w	r3, r3, #4
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007dc6:	10db      	asrs	r3, r3, #3
 8007dc8:	b21b      	sxth	r3, r3
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	4413      	add	r3, r2
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	b21a      	sxth	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8007de0:	4b2d      	ldr	r3, [pc, #180]	; (8007e98 <tcp_receive+0x2c4>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8007df8:	4b27      	ldr	r3, [pc, #156]	; (8007e98 <tcp_receive+0x2c4>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	7d1b      	ldrb	r3, [r3, #20]
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	f240 8096 	bls.w	8007f36 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d244      	bcs.n	8007ea4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	8b5b      	ldrh	r3, [r3, #26]
 8007e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <tcp_receive+0x256>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <tcp_receive+0x258>
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8007e30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e3a:	fb12 f303 	smulbb	r3, r2, r3
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007e42:	4293      	cmp	r3, r2
 8007e44:	bf28      	it	cs
 8007e46:	4613      	movcs	r3, r2
 8007e48:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007e50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007e52:	4413      	add	r3, r2
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d309      	bcc.n	8007e74 <tcp_receive+0x2a0>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007e66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007e68:	4413      	add	r3, r2
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007e72:	e060      	b.n	8007f36 <tcp_receive+0x362>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007e7e:	e05a      	b.n	8007f36 <tcp_receive+0x362>
 8007e80:	0800f078 	.word	0x0800f078
 8007e84:	0800f3a8 	.word	0x0800f3a8
 8007e88:	0800f0c4 	.word	0x0800f0c4
 8007e8c:	0800f3c4 	.word	0x0800f3c4
 8007e90:	200000f8 	.word	0x200000f8
 8007e94:	200000ec 	.word	0x200000ec
 8007e98:	200000f0 	.word	0x200000f0
 8007e9c:	200000dc 	.word	0x200000dc
 8007ea0:	200000f6 	.word	0x200000f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007eaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007eac:	4413      	add	r3, r2
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d309      	bcc.n	8007ece <tcp_receive+0x2fa>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007ec0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ec2:	4413      	add	r3, r2
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007ecc:	e004      	b.n	8007ed8 <tcp_receive+0x304>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d326      	bcc.n	8007f36 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f08:	4413      	add	r3, r2
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d30a      	bcc.n	8007f2c <tcp_receive+0x358>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f20:	4413      	add	r3, r2
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007f2a:	e004      	b.n	8007f36 <tcp_receive+0x362>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f3e:	4a98      	ldr	r2, [pc, #608]	; (80081a0 <tcp_receive+0x5cc>)
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff fdcb 	bl	8007adc <tcp_free_acked_segments>
 8007f46:	4602      	mov	r2, r0
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f54:	4a93      	ldr	r2, [pc, #588]	; (80081a4 <tcp_receive+0x5d0>)
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7ff fdc0 	bl	8007adc <tcp_free_acked_segments>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d104      	bne.n	8007f74 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f70:	861a      	strh	r2, [r3, #48]	; 0x30
 8007f72:	e002      	b.n	8007f7a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d103      	bne.n	8007f90 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8007f96:	4b84      	ldr	r3, [pc, #528]	; (80081a8 <tcp_receive+0x5d4>)
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	8b5b      	ldrh	r3, [r3, #26]
 8007fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d035      	beq.n	800801c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d118      	bne.n	8007fea <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00c      	beq.n	8007fda <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fb fa84 	bl	80034da <lwip_htonl>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	dc20      	bgt.n	800801c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	8b5b      	ldrh	r3, [r3, #26]
 8007fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007fe8:	e018      	b.n	800801c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fb fa6f 	bl	80034da <lwip_htonl>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	1ae3      	subs	r3, r4, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	dc0b      	bgt.n	800801c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	8b5b      	ldrh	r3, [r3, #26]
 8008008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800800c:	b29a      	uxth	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008012:	e003      	b.n	800801c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 ff75 	bl	8009f04 <tcp_send_empty_ack>
 800801a:	e000      	b.n	800801e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800801c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008022:	2b00      	cmp	r3, #0
 8008024:	d05b      	beq.n	80080de <tcp_receive+0x50a>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800802a:	4b60      	ldr	r3, [pc, #384]	; (80081ac <tcp_receive+0x5d8>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	da54      	bge.n	80080de <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008034:	4b5e      	ldr	r3, [pc, #376]	; (80081b0 <tcp_receive+0x5dc>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	b29a      	uxth	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803e:	b29b      	uxth	r3, r3
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	b29b      	uxth	r3, r3
 8008044:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008048:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008052:	10db      	asrs	r3, r3, #3
 8008054:	b21b      	sxth	r3, r3
 8008056:	b29b      	uxth	r3, r3
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	b29b      	uxth	r3, r3
 800805c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008066:	b29a      	uxth	r2, r3
 8008068:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800806c:	4413      	add	r3, r2
 800806e:	b29b      	uxth	r3, r3
 8008070:	b21a      	sxth	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008076:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800807a:	2b00      	cmp	r3, #0
 800807c:	da05      	bge.n	800808a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800807e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008082:	425b      	negs	r3, r3
 8008084:	b29b      	uxth	r3, r3
 8008086:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800808a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008094:	109b      	asrs	r3, r3, #2
 8008096:	b21b      	sxth	r3, r3
 8008098:	b29b      	uxth	r3, r3
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	b29b      	uxth	r3, r3
 800809e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80080ae:	4413      	add	r3, r2
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	b21a      	sxth	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80080be:	10db      	asrs	r3, r3, #3
 80080c0:	b21b      	sxth	r3, r3
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	4413      	add	r3, r2
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	b21a      	sxth	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80080de:	4b35      	ldr	r3, [pc, #212]	; (80081b4 <tcp_receive+0x5e0>)
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 84e1 	beq.w	8008aaa <tcp_receive+0xed6>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	7d1b      	ldrb	r3, [r3, #20]
 80080ec:	2b06      	cmp	r3, #6
 80080ee:	f200 84dc 	bhi.w	8008aaa <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080f6:	4b30      	ldr	r3, [pc, #192]	; (80081b8 <tcp_receive+0x5e4>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	3b01      	subs	r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f2c0 808e 	blt.w	8008220 <tcp_receive+0x64c>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008108:	4b2a      	ldr	r3, [pc, #168]	; (80081b4 <tcp_receive+0x5e0>)
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	4619      	mov	r1, r3
 800810e:	4b2a      	ldr	r3, [pc, #168]	; (80081b8 <tcp_receive+0x5e4>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	440b      	add	r3, r1
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	3301      	adds	r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	f300 8081 	bgt.w	8008220 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800811e:	4b27      	ldr	r3, [pc, #156]	; (80081bc <tcp_receive+0x5e8>)
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008128:	4b23      	ldr	r3, [pc, #140]	; (80081b8 <tcp_receive+0x5e4>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008130:	4b22      	ldr	r3, [pc, #136]	; (80081bc <tcp_receive+0x5e8>)
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d106      	bne.n	8008146 <tcp_receive+0x572>
 8008138:	4b21      	ldr	r3, [pc, #132]	; (80081c0 <tcp_receive+0x5ec>)
 800813a:	f240 5294 	movw	r2, #1428	; 0x594
 800813e:	4921      	ldr	r1, [pc, #132]	; (80081c4 <tcp_receive+0x5f0>)
 8008140:	4821      	ldr	r0, [pc, #132]	; (80081c8 <tcp_receive+0x5f4>)
 8008142:	f004 fe59 	bl	800cdf8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800814c:	4293      	cmp	r3, r2
 800814e:	d906      	bls.n	800815e <tcp_receive+0x58a>
 8008150:	4b1b      	ldr	r3, [pc, #108]	; (80081c0 <tcp_receive+0x5ec>)
 8008152:	f240 5295 	movw	r2, #1429	; 0x595
 8008156:	491d      	ldr	r1, [pc, #116]	; (80081cc <tcp_receive+0x5f8>)
 8008158:	481b      	ldr	r0, [pc, #108]	; (80081c8 <tcp_receive+0x5f4>)
 800815a:	f004 fe4d 	bl	800cdf8 <iprintf>
      off = (u16_t)off32;
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008164:	4b15      	ldr	r3, [pc, #84]	; (80081bc <tcp_receive+0x5e8>)
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	891b      	ldrh	r3, [r3, #8]
 800816a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800816e:	429a      	cmp	r2, r3
 8008170:	d906      	bls.n	8008180 <tcp_receive+0x5ac>
 8008172:	4b13      	ldr	r3, [pc, #76]	; (80081c0 <tcp_receive+0x5ec>)
 8008174:	f240 5297 	movw	r2, #1431	; 0x597
 8008178:	4915      	ldr	r1, [pc, #84]	; (80081d0 <tcp_receive+0x5fc>)
 800817a:	4813      	ldr	r0, [pc, #76]	; (80081c8 <tcp_receive+0x5f4>)
 800817c:	f004 fe3c 	bl	800cdf8 <iprintf>
      inseg.len -= off;
 8008180:	4b0e      	ldr	r3, [pc, #56]	; (80081bc <tcp_receive+0x5e8>)
 8008182:	891a      	ldrh	r2, [r3, #8]
 8008184:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	b29a      	uxth	r2, r3
 800818c:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <tcp_receive+0x5e8>)
 800818e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008190:	4b0a      	ldr	r3, [pc, #40]	; (80081bc <tcp_receive+0x5e8>)
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	891a      	ldrh	r2, [r3, #8]
 8008196:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800819e:	e029      	b.n	80081f4 <tcp_receive+0x620>
 80081a0:	0800f3e0 	.word	0x0800f3e0
 80081a4:	0800f3e8 	.word	0x0800f3e8
 80081a8:	200000f4 	.word	0x200000f4
 80081ac:	200000f0 	.word	0x200000f0
 80081b0:	20008a54 	.word	0x20008a54
 80081b4:	200000f6 	.word	0x200000f6
 80081b8:	200000ec 	.word	0x200000ec
 80081bc:	200000cc 	.word	0x200000cc
 80081c0:	0800f078 	.word	0x0800f078
 80081c4:	0800f3f0 	.word	0x0800f3f0
 80081c8:	0800f0c4 	.word	0x0800f0c4
 80081cc:	0800f400 	.word	0x0800f400
 80081d0:	0800f410 	.word	0x0800f410
        off -= p->len;
 80081d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d6:	895b      	ldrh	r3, [r3, #10]
 80081d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80081e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80081e6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80081e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ea:	2200      	movs	r2, #0
 80081ec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80081ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80081f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f6:	895b      	ldrh	r3, [r3, #10]
 80081f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d8e9      	bhi.n	80081d4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008200:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008204:	4619      	mov	r1, r3
 8008206:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008208:	f7fc fb80 	bl	800490c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	4a91      	ldr	r2, [pc, #580]	; (8008458 <tcp_receive+0x884>)
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	4b91      	ldr	r3, [pc, #580]	; (800845c <tcp_receive+0x888>)
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	4a8f      	ldr	r2, [pc, #572]	; (8008458 <tcp_receive+0x884>)
 800821a:	6812      	ldr	r2, [r2, #0]
 800821c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800821e:	e00d      	b.n	800823c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008220:	4b8d      	ldr	r3, [pc, #564]	; (8008458 <tcp_receive+0x884>)
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	da06      	bge.n	800823c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	8b5b      	ldrh	r3, [r3, #26]
 8008232:	f043 0302 	orr.w	r3, r3, #2
 8008236:	b29a      	uxth	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800823c:	4b86      	ldr	r3, [pc, #536]	; (8008458 <tcp_receive+0x884>)
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	f2c0 842a 	blt.w	8008aa0 <tcp_receive+0xecc>
 800824c:	4b82      	ldr	r3, [pc, #520]	; (8008458 <tcp_receive+0x884>)
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008258:	440b      	add	r3, r1
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	3301      	adds	r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	f300 841e 	bgt.w	8008aa0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008268:	4b7b      	ldr	r3, [pc, #492]	; (8008458 <tcp_receive+0x884>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	429a      	cmp	r2, r3
 800826e:	f040 829a 	bne.w	80087a6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008272:	4b7a      	ldr	r3, [pc, #488]	; (800845c <tcp_receive+0x888>)
 8008274:	891c      	ldrh	r4, [r3, #8]
 8008276:	4b79      	ldr	r3, [pc, #484]	; (800845c <tcp_receive+0x888>)
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	899b      	ldrh	r3, [r3, #12]
 800827c:	b29b      	uxth	r3, r3
 800827e:	4618      	mov	r0, r3
 8008280:	f7fb f916 	bl	80034b0 <lwip_htons>
 8008284:	4603      	mov	r3, r0
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f003 0303 	and.w	r3, r3, #3
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <tcp_receive+0x6c0>
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <tcp_receive+0x6c2>
 8008294:	2300      	movs	r3, #0
 8008296:	4423      	add	r3, r4
 8008298:	b29a      	uxth	r2, r3
 800829a:	4b71      	ldr	r3, [pc, #452]	; (8008460 <tcp_receive+0x88c>)
 800829c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80082a2:	4b6f      	ldr	r3, [pc, #444]	; (8008460 <tcp_receive+0x88c>)
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d275      	bcs.n	8008396 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80082aa:	4b6c      	ldr	r3, [pc, #432]	; (800845c <tcp_receive+0x888>)
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	899b      	ldrh	r3, [r3, #12]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fb f8fc 	bl	80034b0 <lwip_htons>
 80082b8:	4603      	mov	r3, r0
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d01f      	beq.n	8008304 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80082c4:	4b65      	ldr	r3, [pc, #404]	; (800845c <tcp_receive+0x888>)
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	899b      	ldrh	r3, [r3, #12]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	b21b      	sxth	r3, r3
 80082ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80082d2:	b21c      	sxth	r4, r3
 80082d4:	4b61      	ldr	r3, [pc, #388]	; (800845c <tcp_receive+0x888>)
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	899b      	ldrh	r3, [r3, #12]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fb f8e7 	bl	80034b0 <lwip_htons>
 80082e2:	4603      	mov	r3, r0
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fb f8de 	bl	80034b0 <lwip_htons>
 80082f4:	4603      	mov	r3, r0
 80082f6:	b21b      	sxth	r3, r3
 80082f8:	4323      	orrs	r3, r4
 80082fa:	b21a      	sxth	r2, r3
 80082fc:	4b57      	ldr	r3, [pc, #348]	; (800845c <tcp_receive+0x888>)
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	b292      	uxth	r2, r2
 8008302:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008308:	4b54      	ldr	r3, [pc, #336]	; (800845c <tcp_receive+0x888>)
 800830a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800830c:	4b53      	ldr	r3, [pc, #332]	; (800845c <tcp_receive+0x888>)
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	899b      	ldrh	r3, [r3, #12]
 8008312:	b29b      	uxth	r3, r3
 8008314:	4618      	mov	r0, r3
 8008316:	f7fb f8cb 	bl	80034b0 <lwip_htons>
 800831a:	4603      	mov	r3, r0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <tcp_receive+0x75e>
            inseg.len -= 1;
 8008326:	4b4d      	ldr	r3, [pc, #308]	; (800845c <tcp_receive+0x888>)
 8008328:	891b      	ldrh	r3, [r3, #8]
 800832a:	3b01      	subs	r3, #1
 800832c:	b29a      	uxth	r2, r3
 800832e:	4b4b      	ldr	r3, [pc, #300]	; (800845c <tcp_receive+0x888>)
 8008330:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008332:	4b4a      	ldr	r3, [pc, #296]	; (800845c <tcp_receive+0x888>)
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	4a49      	ldr	r2, [pc, #292]	; (800845c <tcp_receive+0x888>)
 8008338:	8912      	ldrh	r2, [r2, #8]
 800833a:	4611      	mov	r1, r2
 800833c:	4618      	mov	r0, r3
 800833e:	f7fc f9e5 	bl	800470c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008342:	4b46      	ldr	r3, [pc, #280]	; (800845c <tcp_receive+0x888>)
 8008344:	891c      	ldrh	r4, [r3, #8]
 8008346:	4b45      	ldr	r3, [pc, #276]	; (800845c <tcp_receive+0x888>)
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	899b      	ldrh	r3, [r3, #12]
 800834c:	b29b      	uxth	r3, r3
 800834e:	4618      	mov	r0, r3
 8008350:	f7fb f8ae 	bl	80034b0 <lwip_htons>
 8008354:	4603      	mov	r3, r0
 8008356:	b2db      	uxtb	r3, r3
 8008358:	f003 0303 	and.w	r3, r3, #3
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <tcp_receive+0x790>
 8008360:	2301      	movs	r3, #1
 8008362:	e000      	b.n	8008366 <tcp_receive+0x792>
 8008364:	2300      	movs	r3, #0
 8008366:	4423      	add	r3, r4
 8008368:	b29a      	uxth	r2, r3
 800836a:	4b3d      	ldr	r3, [pc, #244]	; (8008460 <tcp_receive+0x88c>)
 800836c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800836e:	4b3c      	ldr	r3, [pc, #240]	; (8008460 <tcp_receive+0x88c>)
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	4b38      	ldr	r3, [pc, #224]	; (8008458 <tcp_receive+0x884>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	441a      	add	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008382:	440b      	add	r3, r1
 8008384:	429a      	cmp	r2, r3
 8008386:	d006      	beq.n	8008396 <tcp_receive+0x7c2>
 8008388:	4b36      	ldr	r3, [pc, #216]	; (8008464 <tcp_receive+0x890>)
 800838a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800838e:	4936      	ldr	r1, [pc, #216]	; (8008468 <tcp_receive+0x894>)
 8008390:	4836      	ldr	r0, [pc, #216]	; (800846c <tcp_receive+0x898>)
 8008392:	f004 fd31 	bl	800cdf8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 80e7 	beq.w	800856e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80083a0:	4b2e      	ldr	r3, [pc, #184]	; (800845c <tcp_receive+0x888>)
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	899b      	ldrh	r3, [r3, #12]
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fb f881 	bl	80034b0 <lwip_htons>
 80083ae:	4603      	mov	r3, r0
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d010      	beq.n	80083dc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80083ba:	e00a      	b.n	80083d2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083c0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f7fd fd96 	bl	8005efe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f0      	bne.n	80083bc <tcp_receive+0x7e8>
 80083da:	e0c8      	b.n	800856e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083e0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80083e2:	e052      	b.n	800848a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80083e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	899b      	ldrh	r3, [r3, #12]
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fb f85f 	bl	80034b0 <lwip_htons>
 80083f2:	4603      	mov	r3, r0
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d03d      	beq.n	800847a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80083fe:	4b17      	ldr	r3, [pc, #92]	; (800845c <tcp_receive+0x888>)
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	899b      	ldrh	r3, [r3, #12]
 8008404:	b29b      	uxth	r3, r3
 8008406:	4618      	mov	r0, r3
 8008408:	f7fb f852 	bl	80034b0 <lwip_htons>
 800840c:	4603      	mov	r3, r0
 800840e:	b2db      	uxtb	r3, r3
 8008410:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008414:	2b00      	cmp	r3, #0
 8008416:	d130      	bne.n	800847a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008418:	4b10      	ldr	r3, [pc, #64]	; (800845c <tcp_receive+0x888>)
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	899b      	ldrh	r3, [r3, #12]
 800841e:	b29c      	uxth	r4, r3
 8008420:	2001      	movs	r0, #1
 8008422:	f7fb f845 	bl	80034b0 <lwip_htons>
 8008426:	4603      	mov	r3, r0
 8008428:	461a      	mov	r2, r3
 800842a:	4b0c      	ldr	r3, [pc, #48]	; (800845c <tcp_receive+0x888>)
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	4322      	orrs	r2, r4
 8008430:	b292      	uxth	r2, r2
 8008432:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008434:	4b09      	ldr	r3, [pc, #36]	; (800845c <tcp_receive+0x888>)
 8008436:	891c      	ldrh	r4, [r3, #8]
 8008438:	4b08      	ldr	r3, [pc, #32]	; (800845c <tcp_receive+0x888>)
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	899b      	ldrh	r3, [r3, #12]
 800843e:	b29b      	uxth	r3, r3
 8008440:	4618      	mov	r0, r3
 8008442:	f7fb f835 	bl	80034b0 <lwip_htons>
 8008446:	4603      	mov	r3, r0
 8008448:	b2db      	uxtb	r3, r3
 800844a:	f003 0303 	and.w	r3, r3, #3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00e      	beq.n	8008470 <tcp_receive+0x89c>
 8008452:	2301      	movs	r3, #1
 8008454:	e00d      	b.n	8008472 <tcp_receive+0x89e>
 8008456:	bf00      	nop
 8008458:	200000ec 	.word	0x200000ec
 800845c:	200000cc 	.word	0x200000cc
 8008460:	200000f6 	.word	0x200000f6
 8008464:	0800f078 	.word	0x0800f078
 8008468:	0800f420 	.word	0x0800f420
 800846c:	0800f0c4 	.word	0x0800f0c4
 8008470:	2300      	movs	r3, #0
 8008472:	4423      	add	r3, r4
 8008474:	b29a      	uxth	r2, r3
 8008476:	4b98      	ldr	r3, [pc, #608]	; (80086d8 <tcp_receive+0xb04>)
 8008478:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800847a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800847c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800847e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008484:	6938      	ldr	r0, [r7, #16]
 8008486:	f7fd fd3a 	bl	8005efe <tcp_seg_free>
            while (next &&
 800848a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00e      	beq.n	80084ae <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008490:	4b91      	ldr	r3, [pc, #580]	; (80086d8 <tcp_receive+0xb04>)
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	461a      	mov	r2, r3
 8008496:	4b91      	ldr	r3, [pc, #580]	; (80086dc <tcp_receive+0xb08>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	441a      	add	r2, r3
 800849c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084a4:	8909      	ldrh	r1, [r1, #8]
 80084a6:	440b      	add	r3, r1
 80084a8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	da9a      	bge.n	80083e4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80084ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d059      	beq.n	8008568 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80084b4:	4b88      	ldr	r3, [pc, #544]	; (80086d8 <tcp_receive+0xb04>)
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	461a      	mov	r2, r3
 80084ba:	4b88      	ldr	r3, [pc, #544]	; (80086dc <tcp_receive+0xb08>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	441a      	add	r2, r3
 80084c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dd4d      	ble.n	8008568 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80084cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	4b81      	ldr	r3, [pc, #516]	; (80086dc <tcp_receive+0xb08>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	b29a      	uxth	r2, r3
 80084de:	4b80      	ldr	r3, [pc, #512]	; (80086e0 <tcp_receive+0xb0c>)
 80084e0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80084e2:	4b7f      	ldr	r3, [pc, #508]	; (80086e0 <tcp_receive+0xb0c>)
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	899b      	ldrh	r3, [r3, #12]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fa ffe0 	bl	80034b0 <lwip_htons>
 80084f0:	4603      	mov	r3, r0
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	f003 0302 	and.w	r3, r3, #2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d005      	beq.n	8008508 <tcp_receive+0x934>
                inseg.len -= 1;
 80084fc:	4b78      	ldr	r3, [pc, #480]	; (80086e0 <tcp_receive+0xb0c>)
 80084fe:	891b      	ldrh	r3, [r3, #8]
 8008500:	3b01      	subs	r3, #1
 8008502:	b29a      	uxth	r2, r3
 8008504:	4b76      	ldr	r3, [pc, #472]	; (80086e0 <tcp_receive+0xb0c>)
 8008506:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008508:	4b75      	ldr	r3, [pc, #468]	; (80086e0 <tcp_receive+0xb0c>)
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	4a74      	ldr	r2, [pc, #464]	; (80086e0 <tcp_receive+0xb0c>)
 800850e:	8912      	ldrh	r2, [r2, #8]
 8008510:	4611      	mov	r1, r2
 8008512:	4618      	mov	r0, r3
 8008514:	f7fc f8fa 	bl	800470c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008518:	4b71      	ldr	r3, [pc, #452]	; (80086e0 <tcp_receive+0xb0c>)
 800851a:	891c      	ldrh	r4, [r3, #8]
 800851c:	4b70      	ldr	r3, [pc, #448]	; (80086e0 <tcp_receive+0xb0c>)
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	899b      	ldrh	r3, [r3, #12]
 8008522:	b29b      	uxth	r3, r3
 8008524:	4618      	mov	r0, r3
 8008526:	f7fa ffc3 	bl	80034b0 <lwip_htons>
 800852a:	4603      	mov	r3, r0
 800852c:	b2db      	uxtb	r3, r3
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <tcp_receive+0x966>
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <tcp_receive+0x968>
 800853a:	2300      	movs	r3, #0
 800853c:	4423      	add	r3, r4
 800853e:	b29a      	uxth	r2, r3
 8008540:	4b65      	ldr	r3, [pc, #404]	; (80086d8 <tcp_receive+0xb04>)
 8008542:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008544:	4b64      	ldr	r3, [pc, #400]	; (80086d8 <tcp_receive+0xb04>)
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	461a      	mov	r2, r3
 800854a:	4b64      	ldr	r3, [pc, #400]	; (80086dc <tcp_receive+0xb08>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	441a      	add	r2, r3
 8008550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	429a      	cmp	r2, r3
 8008558:	d006      	beq.n	8008568 <tcp_receive+0x994>
 800855a:	4b62      	ldr	r3, [pc, #392]	; (80086e4 <tcp_receive+0xb10>)
 800855c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8008560:	4961      	ldr	r1, [pc, #388]	; (80086e8 <tcp_receive+0xb14>)
 8008562:	4862      	ldr	r0, [pc, #392]	; (80086ec <tcp_receive+0xb18>)
 8008564:	f004 fc48 	bl	800cdf8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800856c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800856e:	4b5a      	ldr	r3, [pc, #360]	; (80086d8 <tcp_receive+0xb04>)
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	4b59      	ldr	r3, [pc, #356]	; (80086dc <tcp_receive+0xb08>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	441a      	add	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008582:	4b55      	ldr	r3, [pc, #340]	; (80086d8 <tcp_receive+0xb04>)
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d206      	bcs.n	8008598 <tcp_receive+0x9c4>
 800858a:	4b56      	ldr	r3, [pc, #344]	; (80086e4 <tcp_receive+0xb10>)
 800858c:	f240 6207 	movw	r2, #1543	; 0x607
 8008590:	4957      	ldr	r1, [pc, #348]	; (80086f0 <tcp_receive+0xb1c>)
 8008592:	4856      	ldr	r0, [pc, #344]	; (80086ec <tcp_receive+0xb18>)
 8008594:	f004 fc30 	bl	800cdf8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800859c:	4b4e      	ldr	r3, [pc, #312]	; (80086d8 <tcp_receive+0xb04>)
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7fc ffc9 	bl	8005540 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80085ae:	4b4c      	ldr	r3, [pc, #304]	; (80086e0 <tcp_receive+0xb0c>)
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	891b      	ldrh	r3, [r3, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d006      	beq.n	80085c6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80085b8:	4b49      	ldr	r3, [pc, #292]	; (80086e0 <tcp_receive+0xb0c>)
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	4a4d      	ldr	r2, [pc, #308]	; (80086f4 <tcp_receive+0xb20>)
 80085be:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80085c0:	4b47      	ldr	r3, [pc, #284]	; (80086e0 <tcp_receive+0xb0c>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80085c6:	4b46      	ldr	r3, [pc, #280]	; (80086e0 <tcp_receive+0xb0c>)
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	899b      	ldrh	r3, [r3, #12]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fa ff6e 	bl	80034b0 <lwip_htons>
 80085d4:	4603      	mov	r3, r0
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 80b8 	beq.w	8008752 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80085e2:	4b45      	ldr	r3, [pc, #276]	; (80086f8 <tcp_receive+0xb24>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	f043 0320 	orr.w	r3, r3, #32
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	4b42      	ldr	r3, [pc, #264]	; (80086f8 <tcp_receive+0xb24>)
 80085ee:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80085f0:	e0af      	b.n	8008752 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085f6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	4a36      	ldr	r2, [pc, #216]	; (80086dc <tcp_receive+0xb08>)
 8008602:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	891b      	ldrh	r3, [r3, #8]
 8008608:	461c      	mov	r4, r3
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	899b      	ldrh	r3, [r3, #12]
 8008610:	b29b      	uxth	r3, r3
 8008612:	4618      	mov	r0, r3
 8008614:	f7fa ff4c 	bl	80034b0 <lwip_htons>
 8008618:	4603      	mov	r3, r0
 800861a:	b2db      	uxtb	r3, r3
 800861c:	f003 0303 	and.w	r3, r3, #3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <tcp_receive+0xa54>
 8008624:	2301      	movs	r3, #1
 8008626:	e000      	b.n	800862a <tcp_receive+0xa56>
 8008628:	2300      	movs	r3, #0
 800862a:	191a      	adds	r2, r3, r4
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	441a      	add	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800863a:	461c      	mov	r4, r3
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	891b      	ldrh	r3, [r3, #8]
 8008640:	461d      	mov	r5, r3
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	899b      	ldrh	r3, [r3, #12]
 8008648:	b29b      	uxth	r3, r3
 800864a:	4618      	mov	r0, r3
 800864c:	f7fa ff30 	bl	80034b0 <lwip_htons>
 8008650:	4603      	mov	r3, r0
 8008652:	b2db      	uxtb	r3, r3
 8008654:	f003 0303 	and.w	r3, r3, #3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <tcp_receive+0xa8c>
 800865c:	2301      	movs	r3, #1
 800865e:	e000      	b.n	8008662 <tcp_receive+0xa8e>
 8008660:	2300      	movs	r3, #0
 8008662:	442b      	add	r3, r5
 8008664:	429c      	cmp	r4, r3
 8008666:	d206      	bcs.n	8008676 <tcp_receive+0xaa2>
 8008668:	4b1e      	ldr	r3, [pc, #120]	; (80086e4 <tcp_receive+0xb10>)
 800866a:	f240 622b 	movw	r2, #1579	; 0x62b
 800866e:	4923      	ldr	r1, [pc, #140]	; (80086fc <tcp_receive+0xb28>)
 8008670:	481e      	ldr	r0, [pc, #120]	; (80086ec <tcp_receive+0xb18>)
 8008672:	f004 fbc1 	bl	800cdf8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	891b      	ldrh	r3, [r3, #8]
 800867a:	461c      	mov	r4, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	899b      	ldrh	r3, [r3, #12]
 8008682:	b29b      	uxth	r3, r3
 8008684:	4618      	mov	r0, r3
 8008686:	f7fa ff13 	bl	80034b0 <lwip_htons>
 800868a:	4603      	mov	r3, r0
 800868c:	b2db      	uxtb	r3, r3
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <tcp_receive+0xac6>
 8008696:	2301      	movs	r3, #1
 8008698:	e000      	b.n	800869c <tcp_receive+0xac8>
 800869a:	2300      	movs	r3, #0
 800869c:	1919      	adds	r1, r3, r4
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80086a2:	b28b      	uxth	r3, r1
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7fc ff47 	bl	8005540 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	891b      	ldrh	r3, [r3, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d028      	beq.n	800870e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80086bc:	4b0d      	ldr	r3, [pc, #52]	; (80086f4 <tcp_receive+0xb20>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d01d      	beq.n	8008700 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80086c4:	4b0b      	ldr	r3, [pc, #44]	; (80086f4 <tcp_receive+0xb20>)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	4619      	mov	r1, r3
 80086ce:	4610      	mov	r0, r2
 80086d0:	f7fc fa64 	bl	8004b9c <pbuf_cat>
 80086d4:	e018      	b.n	8008708 <tcp_receive+0xb34>
 80086d6:	bf00      	nop
 80086d8:	200000f6 	.word	0x200000f6
 80086dc:	200000ec 	.word	0x200000ec
 80086e0:	200000cc 	.word	0x200000cc
 80086e4:	0800f078 	.word	0x0800f078
 80086e8:	0800f458 	.word	0x0800f458
 80086ec:	0800f0c4 	.word	0x0800f0c4
 80086f0:	0800f494 	.word	0x0800f494
 80086f4:	200000fc 	.word	0x200000fc
 80086f8:	200000f9 	.word	0x200000f9
 80086fc:	0800f4b4 	.word	0x0800f4b4
            } else {
              recv_data = cseg->p;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	4a70      	ldr	r2, [pc, #448]	; (80088c8 <tcp_receive+0xcf4>)
 8008706:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2200      	movs	r2, #0
 800870c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	899b      	ldrh	r3, [r3, #12]
 8008714:	b29b      	uxth	r3, r3
 8008716:	4618      	mov	r0, r3
 8008718:	f7fa feca 	bl	80034b0 <lwip_htons>
 800871c:	4603      	mov	r3, r0
 800871e:	b2db      	uxtb	r3, r3
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00d      	beq.n	8008744 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008728:	4b68      	ldr	r3, [pc, #416]	; (80088cc <tcp_receive+0xcf8>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	f043 0320 	orr.w	r3, r3, #32
 8008730:	b2da      	uxtb	r2, r3
 8008732:	4b66      	ldr	r3, [pc, #408]	; (80088cc <tcp_receive+0xcf8>)
 8008734:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	7d1b      	ldrb	r3, [r3, #20]
 800873a:	2b04      	cmp	r3, #4
 800873c:	d102      	bne.n	8008744 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2207      	movs	r2, #7
 8008742:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800874c:	68b8      	ldr	r0, [r7, #8]
 800874e:	f7fd fbd6 	bl	8005efe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008756:	2b00      	cmp	r3, #0
 8008758:	d008      	beq.n	800876c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008766:	429a      	cmp	r2, r3
 8008768:	f43f af43 	beq.w	80085f2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	8b5b      	ldrh	r3, [r3, #26]
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00e      	beq.n	8008796 <tcp_receive+0xbc2>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	8b5b      	ldrh	r3, [r3, #26]
 800877c:	f023 0301 	bic.w	r3, r3, #1
 8008780:	b29a      	uxth	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	835a      	strh	r2, [r3, #26]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	8b5b      	ldrh	r3, [r3, #26]
 800878a:	f043 0302 	orr.w	r3, r3, #2
 800878e:	b29a      	uxth	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008794:	e188      	b.n	8008aa8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	8b5b      	ldrh	r3, [r3, #26]
 800879a:	f043 0301 	orr.w	r3, r3, #1
 800879e:	b29a      	uxth	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80087a4:	e180      	b.n	8008aa8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d106      	bne.n	80087bc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80087ae:	4848      	ldr	r0, [pc, #288]	; (80088d0 <tcp_receive+0xcfc>)
 80087b0:	f7fd fbbe 	bl	8005f30 <tcp_seg_copy>
 80087b4:	4602      	mov	r2, r0
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	675a      	str	r2, [r3, #116]	; 0x74
 80087ba:	e16d      	b.n	8008a98 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80087bc:	2300      	movs	r3, #0
 80087be:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80087c6:	e157      	b.n	8008a78 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80087c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	4b41      	ldr	r3, [pc, #260]	; (80088d4 <tcp_receive+0xd00>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d11d      	bne.n	8008812 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80087d6:	4b3e      	ldr	r3, [pc, #248]	; (80088d0 <tcp_receive+0xcfc>)
 80087d8:	891a      	ldrh	r2, [r3, #8]
 80087da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087dc:	891b      	ldrh	r3, [r3, #8]
 80087de:	429a      	cmp	r2, r3
 80087e0:	f240 814f 	bls.w	8008a82 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80087e4:	483a      	ldr	r0, [pc, #232]	; (80088d0 <tcp_receive+0xcfc>)
 80087e6:	f7fd fba3 	bl	8005f30 <tcp_seg_copy>
 80087ea:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 8149 	beq.w	8008a86 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80087f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80087fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	e002      	b.n	8008808 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008808:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800880a:	6978      	ldr	r0, [r7, #20]
 800880c:	f7ff f8de 	bl	80079cc <tcp_oos_insert_segment>
                }
                break;
 8008810:	e139      	b.n	8008a86 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008814:	2b00      	cmp	r3, #0
 8008816:	d117      	bne.n	8008848 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008818:	4b2e      	ldr	r3, [pc, #184]	; (80088d4 <tcp_receive+0xd00>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	da57      	bge.n	80088d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008828:	4829      	ldr	r0, [pc, #164]	; (80088d0 <tcp_receive+0xcfc>)
 800882a:	f7fd fb81 	bl	8005f30 <tcp_seg_copy>
 800882e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 8129 	beq.w	8008a8a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800883e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008840:	69b8      	ldr	r0, [r7, #24]
 8008842:	f7ff f8c3 	bl	80079cc <tcp_oos_insert_segment>
                  }
                  break;
 8008846:	e120      	b.n	8008a8a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008848:	4b22      	ldr	r3, [pc, #136]	; (80088d4 <tcp_receive+0xd00>)
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	3b01      	subs	r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	db3e      	blt.n	80088d8 <tcp_receive+0xd04>
 800885a:	4b1e      	ldr	r3, [pc, #120]	; (80088d4 <tcp_receive+0xd00>)
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	3301      	adds	r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	dc35      	bgt.n	80088d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800886c:	4818      	ldr	r0, [pc, #96]	; (80088d0 <tcp_receive+0xcfc>)
 800886e:	f7fd fb5f 	bl	8005f30 <tcp_seg_copy>
 8008872:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 8109 	beq.w	8008a8e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800887c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008884:	8912      	ldrh	r2, [r2, #8]
 8008886:	441a      	add	r2, r3
 8008888:	4b12      	ldr	r3, [pc, #72]	; (80088d4 <tcp_receive+0xd00>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	dd12      	ble.n	80088b8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008892:	4b10      	ldr	r3, [pc, #64]	; (80088d4 <tcp_receive+0xd00>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	b29a      	uxth	r2, r3
 8008898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80088a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ae:	891b      	ldrh	r3, [r3, #8]
 80088b0:	4619      	mov	r1, r3
 80088b2:	4610      	mov	r0, r2
 80088b4:	f7fb ff2a 	bl	800470c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80088b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80088be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088c0:	69f8      	ldr	r0, [r7, #28]
 80088c2:	f7ff f883 	bl	80079cc <tcp_oos_insert_segment>
                  }
                  break;
 80088c6:	e0e2      	b.n	8008a8e <tcp_receive+0xeba>
 80088c8:	200000fc 	.word	0x200000fc
 80088cc:	200000f9 	.word	0x200000f9
 80088d0:	200000cc 	.word	0x200000cc
 80088d4:	200000ec 	.word	0x200000ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f040 80c6 	bne.w	8008a72 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80088e6:	4b80      	ldr	r3, [pc, #512]	; (8008ae8 <tcp_receive+0xf14>)
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f340 80bd 	ble.w	8008a72 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80088f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	899b      	ldrh	r3, [r3, #12]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	4618      	mov	r0, r3
 8008902:	f7fa fdd5 	bl	80034b0 <lwip_htons>
 8008906:	4603      	mov	r3, r0
 8008908:	b2db      	uxtb	r3, r3
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	f040 80bf 	bne.w	8008a92 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008914:	4875      	ldr	r0, [pc, #468]	; (8008aec <tcp_receive+0xf18>)
 8008916:	f7fd fb0b 	bl	8005f30 <tcp_seg_copy>
 800891a:	4602      	mov	r2, r0
 800891c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 80b6 	beq.w	8008a96 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008932:	8912      	ldrh	r2, [r2, #8]
 8008934:	441a      	add	r2, r3
 8008936:	4b6c      	ldr	r3, [pc, #432]	; (8008ae8 <tcp_receive+0xf14>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	dd12      	ble.n	8008966 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008940:	4b69      	ldr	r3, [pc, #420]	; (8008ae8 <tcp_receive+0xf14>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	b29a      	uxth	r2, r3
 8008946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	b29b      	uxth	r3, r3
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	b29a      	uxth	r2, r3
 8008952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008954:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895c:	891b      	ldrh	r3, [r3, #8]
 800895e:	4619      	mov	r1, r3
 8008960:	4610      	mov	r0, r2
 8008962:	f7fb fed3 	bl	800470c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008966:	4b62      	ldr	r3, [pc, #392]	; (8008af0 <tcp_receive+0xf1c>)
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	4b5e      	ldr	r3, [pc, #376]	; (8008ae8 <tcp_receive+0xf14>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	441a      	add	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800897a:	440b      	add	r3, r1
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	f340 8089 	ble.w	8008a96 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	899b      	ldrh	r3, [r3, #12]
 800898c:	b29b      	uxth	r3, r3
 800898e:	4618      	mov	r0, r3
 8008990:	f7fa fd8e 	bl	80034b0 <lwip_htons>
 8008994:	4603      	mov	r3, r0
 8008996:	b2db      	uxtb	r3, r3
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	2b00      	cmp	r3, #0
 800899e:	d022      	beq.n	80089e6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80089a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	899b      	ldrh	r3, [r3, #12]
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	b21b      	sxth	r3, r3
 80089ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80089b0:	b21c      	sxth	r4, r3
 80089b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	899b      	ldrh	r3, [r3, #12]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fa fd77 	bl	80034b0 <lwip_htons>
 80089c2:	4603      	mov	r3, r0
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fa fd6e 	bl	80034b0 <lwip_htons>
 80089d4:	4603      	mov	r3, r0
 80089d6:	b21b      	sxth	r3, r3
 80089d8:	4323      	orrs	r3, r4
 80089da:	b21a      	sxth	r2, r3
 80089dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	b292      	uxth	r2, r2
 80089e4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f0:	4413      	add	r3, r2
 80089f2:	b299      	uxth	r1, r3
 80089f4:	4b3c      	ldr	r3, [pc, #240]	; (8008ae8 <tcp_receive+0xf14>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	1a8a      	subs	r2, r1, r2
 8008a00:	b292      	uxth	r2, r2
 8008a02:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685a      	ldr	r2, [r3, #4]
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	891b      	ldrh	r3, [r3, #8]
 8008a10:	4619      	mov	r1, r3
 8008a12:	4610      	mov	r0, r2
 8008a14:	f7fb fe7a 	bl	800470c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	891c      	ldrh	r4, [r3, #8]
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	899b      	ldrh	r3, [r3, #12]
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fa fd41 	bl	80034b0 <lwip_htons>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <tcp_receive+0xe6a>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e000      	b.n	8008a40 <tcp_receive+0xe6c>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	4423      	add	r3, r4
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	4b2a      	ldr	r3, [pc, #168]	; (8008af0 <tcp_receive+0xf1c>)
 8008a46:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008a48:	4b29      	ldr	r3, [pc, #164]	; (8008af0 <tcp_receive+0xf1c>)
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4b26      	ldr	r3, [pc, #152]	; (8008ae8 <tcp_receive+0xf14>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	441a      	add	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	6879      	ldr	r1, [r7, #4]
 8008a5a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008a5c:	440b      	add	r3, r1
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d019      	beq.n	8008a96 <tcp_receive+0xec2>
 8008a62:	4b24      	ldr	r3, [pc, #144]	; (8008af4 <tcp_receive+0xf20>)
 8008a64:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8008a68:	4923      	ldr	r1, [pc, #140]	; (8008af8 <tcp_receive+0xf24>)
 8008a6a:	4824      	ldr	r0, [pc, #144]	; (8008afc <tcp_receive+0xf28>)
 8008a6c:	f004 f9c4 	bl	800cdf8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008a70:	e011      	b.n	8008a96 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f47f aea4 	bne.w	80087c8 <tcp_receive+0xbf4>
 8008a80:	e00a      	b.n	8008a98 <tcp_receive+0xec4>
                break;
 8008a82:	bf00      	nop
 8008a84:	e008      	b.n	8008a98 <tcp_receive+0xec4>
                break;
 8008a86:	bf00      	nop
 8008a88:	e006      	b.n	8008a98 <tcp_receive+0xec4>
                  break;
 8008a8a:	bf00      	nop
 8008a8c:	e004      	b.n	8008a98 <tcp_receive+0xec4>
                  break;
 8008a8e:	bf00      	nop
 8008a90:	e002      	b.n	8008a98 <tcp_receive+0xec4>
                  break;
 8008a92:	bf00      	nop
 8008a94:	e000      	b.n	8008a98 <tcp_receive+0xec4>
                break;
 8008a96:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 fa33 	bl	8009f04 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8008a9e:	e003      	b.n	8008aa8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f001 fa2f 	bl	8009f04 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008aa6:	e01a      	b.n	8008ade <tcp_receive+0xf0a>
 8008aa8:	e019      	b.n	8008ade <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008aaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ae8 <tcp_receive+0xf14>)
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	db0a      	blt.n	8008ace <tcp_receive+0xefa>
 8008ab8:	4b0b      	ldr	r3, [pc, #44]	; (8008ae8 <tcp_receive+0xf14>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008ac4:	440b      	add	r3, r1
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	3301      	adds	r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	dd07      	ble.n	8008ade <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	8b5b      	ldrh	r3, [r3, #26]
 8008ad2:	f043 0302 	orr.w	r3, r3, #2
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8008adc:	e7ff      	b.n	8008ade <tcp_receive+0xf0a>
 8008ade:	bf00      	nop
 8008ae0:	3750      	adds	r7, #80	; 0x50
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	200000ec 	.word	0x200000ec
 8008aec:	200000cc 	.word	0x200000cc
 8008af0:	200000f6 	.word	0x200000f6
 8008af4:	0800f078 	.word	0x0800f078
 8008af8:	0800f420 	.word	0x0800f420
 8008afc:	0800f0c4 	.word	0x0800f0c4

08008b00 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8008b06:	4b15      	ldr	r3, [pc, #84]	; (8008b5c <tcp_get_next_optbyte+0x5c>)
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	b291      	uxth	r1, r2
 8008b0e:	4a13      	ldr	r2, [pc, #76]	; (8008b5c <tcp_get_next_optbyte+0x5c>)
 8008b10:	8011      	strh	r1, [r2, #0]
 8008b12:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008b14:	4b12      	ldr	r3, [pc, #72]	; (8008b60 <tcp_get_next_optbyte+0x60>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d004      	beq.n	8008b26 <tcp_get_next_optbyte+0x26>
 8008b1c:	4b11      	ldr	r3, [pc, #68]	; (8008b64 <tcp_get_next_optbyte+0x64>)
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	88fa      	ldrh	r2, [r7, #6]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d208      	bcs.n	8008b38 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8008b26:	4b10      	ldr	r3, [pc, #64]	; (8008b68 <tcp_get_next_optbyte+0x68>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3314      	adds	r3, #20
 8008b2c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8008b2e:	88fb      	ldrh	r3, [r7, #6]
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	4413      	add	r3, r2
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	e00b      	b.n	8008b50 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008b38:	88fb      	ldrh	r3, [r7, #6]
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	4b09      	ldr	r3, [pc, #36]	; (8008b64 <tcp_get_next_optbyte+0x64>)
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8008b46:	4b06      	ldr	r3, [pc, #24]	; (8008b60 <tcp_get_next_optbyte+0x60>)
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	797b      	ldrb	r3, [r7, #5]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	200000e8 	.word	0x200000e8
 8008b60:	200000e4 	.word	0x200000e4
 8008b64:	200000e2 	.word	0x200000e2
 8008b68:	200000dc 	.word	0x200000dc

08008b6c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d106      	bne.n	8008b88 <tcp_parseopt+0x1c>
 8008b7a:	4b32      	ldr	r3, [pc, #200]	; (8008c44 <tcp_parseopt+0xd8>)
 8008b7c:	f240 727d 	movw	r2, #1917	; 0x77d
 8008b80:	4931      	ldr	r1, [pc, #196]	; (8008c48 <tcp_parseopt+0xdc>)
 8008b82:	4832      	ldr	r0, [pc, #200]	; (8008c4c <tcp_parseopt+0xe0>)
 8008b84:	f004 f938 	bl	800cdf8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008b88:	4b31      	ldr	r3, [pc, #196]	; (8008c50 <tcp_parseopt+0xe4>)
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d055      	beq.n	8008c3c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008b90:	4b30      	ldr	r3, [pc, #192]	; (8008c54 <tcp_parseopt+0xe8>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	801a      	strh	r2, [r3, #0]
 8008b96:	e045      	b.n	8008c24 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8008b98:	f7ff ffb2 	bl	8008b00 <tcp_get_next_optbyte>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d006      	beq.n	8008bb4 <tcp_parseopt+0x48>
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	dc2b      	bgt.n	8008c02 <tcp_parseopt+0x96>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d041      	beq.n	8008c32 <tcp_parseopt+0xc6>
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d127      	bne.n	8008c02 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8008bb2:	e037      	b.n	8008c24 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008bb4:	f7ff ffa4 	bl	8008b00 <tcp_get_next_optbyte>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b04      	cmp	r3, #4
 8008bbc:	d13b      	bne.n	8008c36 <tcp_parseopt+0xca>
 8008bbe:	4b25      	ldr	r3, [pc, #148]	; (8008c54 <tcp_parseopt+0xe8>)
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	4a22      	ldr	r2, [pc, #136]	; (8008c50 <tcp_parseopt+0xe4>)
 8008bc6:	8812      	ldrh	r2, [r2, #0]
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	da34      	bge.n	8008c36 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8008bcc:	f7ff ff98 	bl	8008b00 <tcp_get_next_optbyte>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	021b      	lsls	r3, r3, #8
 8008bd6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8008bd8:	f7ff ff92 	bl	8008b00 <tcp_get_next_optbyte>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	89bb      	ldrh	r3, [r7, #12]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008be6:	89bb      	ldrh	r3, [r7, #12]
 8008be8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008bec:	d804      	bhi.n	8008bf8 <tcp_parseopt+0x8c>
 8008bee:	89bb      	ldrh	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <tcp_parseopt+0x8c>
 8008bf4:	89ba      	ldrh	r2, [r7, #12]
 8008bf6:	e001      	b.n	8008bfc <tcp_parseopt+0x90>
 8008bf8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8008c00:	e010      	b.n	8008c24 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8008c02:	f7ff ff7d 	bl	8008b00 <tcp_get_next_optbyte>
 8008c06:	4603      	mov	r3, r0
 8008c08:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8008c0a:	7afb      	ldrb	r3, [r7, #11]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d914      	bls.n	8008c3a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8008c10:	7afb      	ldrb	r3, [r7, #11]
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	4b0f      	ldr	r3, [pc, #60]	; (8008c54 <tcp_parseopt+0xe8>)
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	4413      	add	r3, r2
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	3b02      	subs	r3, #2
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	4b0c      	ldr	r3, [pc, #48]	; (8008c54 <tcp_parseopt+0xe8>)
 8008c22:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008c24:	4b0b      	ldr	r3, [pc, #44]	; (8008c54 <tcp_parseopt+0xe8>)
 8008c26:	881a      	ldrh	r2, [r3, #0]
 8008c28:	4b09      	ldr	r3, [pc, #36]	; (8008c50 <tcp_parseopt+0xe4>)
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d3b3      	bcc.n	8008b98 <tcp_parseopt+0x2c>
 8008c30:	e004      	b.n	8008c3c <tcp_parseopt+0xd0>
          return;
 8008c32:	bf00      	nop
 8008c34:	e002      	b.n	8008c3c <tcp_parseopt+0xd0>
            return;
 8008c36:	bf00      	nop
 8008c38:	e000      	b.n	8008c3c <tcp_parseopt+0xd0>
            return;
 8008c3a:	bf00      	nop
      }
    }
  }
}
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	0800f078 	.word	0x0800f078
 8008c48:	0800f4dc 	.word	0x0800f4dc
 8008c4c:	0800f0c4 	.word	0x0800f0c4
 8008c50:	200000e0 	.word	0x200000e0
 8008c54:	200000e8 	.word	0x200000e8

08008c58 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8008c5c:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <tcp_trigger_input_pcb_close+0x1c>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	f043 0310 	orr.w	r3, r3, #16
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	4b03      	ldr	r3, [pc, #12]	; (8008c74 <tcp_trigger_input_pcb_close+0x1c>)
 8008c68:	701a      	strb	r2, [r3, #0]
}
 8008c6a:	bf00      	nop
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	200000f9 	.word	0x200000f9

08008c78 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00a      	beq.n	8008ca0 <tcp_route+0x28>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	7a1b      	ldrb	r3, [r3, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d006      	beq.n	8008ca0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	7a1b      	ldrb	r3, [r3, #8]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fb fb5e 	bl	8004358 <netif_get_by_index>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	e003      	b.n	8008ca8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f002 fe7b 	bl	800b99c <ip4_route>
 8008ca6:	4603      	mov	r3, r0
  }
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8008cb0:	b590      	push	{r4, r7, lr}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	603b      	str	r3, [r7, #0]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d105      	bne.n	8008cd2 <tcp_create_segment+0x22>
 8008cc6:	4b44      	ldr	r3, [pc, #272]	; (8008dd8 <tcp_create_segment+0x128>)
 8008cc8:	22a3      	movs	r2, #163	; 0xa3
 8008cca:	4944      	ldr	r1, [pc, #272]	; (8008ddc <tcp_create_segment+0x12c>)
 8008ccc:	4844      	ldr	r0, [pc, #272]	; (8008de0 <tcp_create_segment+0x130>)
 8008cce:	f004 f893 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d105      	bne.n	8008ce4 <tcp_create_segment+0x34>
 8008cd8:	4b3f      	ldr	r3, [pc, #252]	; (8008dd8 <tcp_create_segment+0x128>)
 8008cda:	22a4      	movs	r2, #164	; 0xa4
 8008cdc:	4941      	ldr	r1, [pc, #260]	; (8008de4 <tcp_create_segment+0x134>)
 8008cde:	4840      	ldr	r0, [pc, #256]	; (8008de0 <tcp_create_segment+0x130>)
 8008ce0:	f004 f88a 	bl	800cdf8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8008ce4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	f003 0304 	and.w	r3, r3, #4
 8008cf0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008cf2:	2003      	movs	r0, #3
 8008cf4:	f7fb f832 	bl	8003d5c <memp_malloc>
 8008cf8:	6138      	str	r0, [r7, #16]
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d104      	bne.n	8008d0a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8008d00:	68b8      	ldr	r0, [r7, #8]
 8008d02:	f7fb fe89 	bl	8004a18 <pbuf_free>
    return NULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	e061      	b.n	8008dce <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008d10:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	891a      	ldrh	r2, [r3, #8]
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d205      	bcs.n	8008d36 <tcp_create_segment+0x86>
 8008d2a:	4b2b      	ldr	r3, [pc, #172]	; (8008dd8 <tcp_create_segment+0x128>)
 8008d2c:	22b0      	movs	r2, #176	; 0xb0
 8008d2e:	492e      	ldr	r1, [pc, #184]	; (8008de8 <tcp_create_segment+0x138>)
 8008d30:	482b      	ldr	r0, [pc, #172]	; (8008de0 <tcp_create_segment+0x130>)
 8008d32:	f004 f861 	bl	800cdf8 <iprintf>
  seg->len = p->tot_len - optlen;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	891a      	ldrh	r2, [r3, #8]
 8008d3a:	7dfb      	ldrb	r3, [r7, #23]
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8008d46:	2114      	movs	r1, #20
 8008d48:	68b8      	ldr	r0, [r7, #8]
 8008d4a:	f7fb fdcf 	bl	80048ec <pbuf_add_header>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d004      	beq.n	8008d5e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8008d54:	6938      	ldr	r0, [r7, #16]
 8008d56:	f7fd f8d2 	bl	8005efe <tcp_seg_free>
    return NULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e037      	b.n	8008dce <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8ada      	ldrh	r2, [r3, #22]
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	68dc      	ldr	r4, [r3, #12]
 8008d70:	4610      	mov	r0, r2
 8008d72:	f7fa fb9d 	bl	80034b0 <lwip_htons>
 8008d76:	4603      	mov	r3, r0
 8008d78:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	8b1a      	ldrh	r2, [r3, #24]
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	68dc      	ldr	r4, [r3, #12]
 8008d82:	4610      	mov	r0, r2
 8008d84:	f7fa fb94 	bl	80034b0 <lwip_htons>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	68dc      	ldr	r4, [r3, #12]
 8008d90:	6838      	ldr	r0, [r7, #0]
 8008d92:	f7fa fba2 	bl	80034da <lwip_htonl>
 8008d96:	4603      	mov	r3, r0
 8008d98:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	089b      	lsrs	r3, r3, #2
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	3305      	adds	r3, #5
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	031b      	lsls	r3, r3, #12
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	4313      	orrs	r3, r2
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	68dc      	ldr	r4, [r3, #12]
 8008db6:	4610      	mov	r0, r2
 8008db8:	f7fa fb7a 	bl	80034b0 <lwip_htons>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	749a      	strb	r2, [r3, #18]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	74da      	strb	r2, [r3, #19]
  return seg;
 8008dcc:	693b      	ldr	r3, [r7, #16]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd90      	pop	{r4, r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	0800f4f8 	.word	0x0800f4f8
 8008ddc:	0800f52c 	.word	0x0800f52c
 8008de0:	0800f54c 	.word	0x0800f54c
 8008de4:	0800f574 	.word	0x0800f574
 8008de8:	0800f598 	.word	0x0800f598

08008dec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8008dec:	b590      	push	{r4, r7, lr}
 8008dee:	b08b      	sub	sp, #44	; 0x2c
 8008df0:	af02      	add	r7, sp, #8
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	61fb      	str	r3, [r7, #28]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008e00:	2300      	movs	r3, #0
 8008e02:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d106      	bne.n	8008e18 <tcp_split_unsent_seg+0x2c>
 8008e0a:	4b95      	ldr	r3, [pc, #596]	; (8009060 <tcp_split_unsent_seg+0x274>)
 8008e0c:	f240 324b 	movw	r2, #843	; 0x34b
 8008e10:	4994      	ldr	r1, [pc, #592]	; (8009064 <tcp_split_unsent_seg+0x278>)
 8008e12:	4895      	ldr	r0, [pc, #596]	; (8009068 <tcp_split_unsent_seg+0x27c>)
 8008e14:	f003 fff0 	bl	800cdf8 <iprintf>

  useg = pcb->unsent;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e1c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d102      	bne.n	8008e2a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8008e24:	f04f 33ff 	mov.w	r3, #4294967295
 8008e28:	e116      	b.n	8009058 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8008e2a:	887b      	ldrh	r3, [r7, #2]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d109      	bne.n	8008e44 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8008e30:	4b8b      	ldr	r3, [pc, #556]	; (8009060 <tcp_split_unsent_seg+0x274>)
 8008e32:	f240 3253 	movw	r2, #851	; 0x353
 8008e36:	498d      	ldr	r1, [pc, #564]	; (800906c <tcp_split_unsent_seg+0x280>)
 8008e38:	488b      	ldr	r0, [pc, #556]	; (8009068 <tcp_split_unsent_seg+0x27c>)
 8008e3a:	f003 ffdd 	bl	800cdf8 <iprintf>
    return ERR_VAL;
 8008e3e:	f06f 0305 	mvn.w	r3, #5
 8008e42:	e109      	b.n	8009058 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	891b      	ldrh	r3, [r3, #8]
 8008e48:	887a      	ldrh	r2, [r7, #2]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d301      	bcc.n	8008e52 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	e102      	b.n	8009058 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e56:	887a      	ldrh	r2, [r7, #2]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d906      	bls.n	8008e6a <tcp_split_unsent_seg+0x7e>
 8008e5c:	4b80      	ldr	r3, [pc, #512]	; (8009060 <tcp_split_unsent_seg+0x274>)
 8008e5e:	f240 325b 	movw	r2, #859	; 0x35b
 8008e62:	4983      	ldr	r1, [pc, #524]	; (8009070 <tcp_split_unsent_seg+0x284>)
 8008e64:	4880      	ldr	r0, [pc, #512]	; (8009068 <tcp_split_unsent_seg+0x27c>)
 8008e66:	f003 ffc7 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	891b      	ldrh	r3, [r3, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d106      	bne.n	8008e80 <tcp_split_unsent_seg+0x94>
 8008e72:	4b7b      	ldr	r3, [pc, #492]	; (8009060 <tcp_split_unsent_seg+0x274>)
 8008e74:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8008e78:	497e      	ldr	r1, [pc, #504]	; (8009074 <tcp_split_unsent_seg+0x288>)
 8008e7a:	487b      	ldr	r0, [pc, #492]	; (8009068 <tcp_split_unsent_seg+0x27c>)
 8008e7c:	f003 ffbc 	bl	800cdf8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	7a9b      	ldrb	r3, [r3, #10]
 8008e84:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	891a      	ldrh	r2, [r3, #8]
 8008e96:	887b      	ldrh	r3, [r7, #2]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	89bb      	ldrh	r3, [r7, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008eaa:	4619      	mov	r1, r3
 8008eac:	2036      	movs	r0, #54	; 0x36
 8008eae:	f7fb facf 	bl	8004450 <pbuf_alloc>
 8008eb2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 80b7 	beq.w	800902a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	891a      	ldrh	r2, [r3, #8]
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	891b      	ldrh	r3, [r3, #8]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	887b      	ldrh	r3, [r7, #2]
 8008ecc:	4413      	add	r3, r2
 8008ece:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	6858      	ldr	r0, [r3, #4]
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	18d1      	adds	r1, r2, r3
 8008edc:	897b      	ldrh	r3, [r7, #10]
 8008ede:	89ba      	ldrh	r2, [r7, #12]
 8008ee0:	f7fb ff84 	bl	8004dec <pbuf_copy_partial>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	89bb      	ldrh	r3, [r7, #12]
 8008eea:	4293      	cmp	r3, r2
 8008eec:	f040 809f 	bne.w	800902e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	899b      	ldrh	r3, [r3, #12]
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fa fad9 	bl	80034b0 <lwip_htons>
 8008efe:	4603      	mov	r3, r0
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f06:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8008f08:	2300      	movs	r3, #0
 8008f0a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8008f0c:	7efb      	ldrb	r3, [r7, #27]
 8008f0e:	f003 0308 	and.w	r3, r3, #8
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d007      	beq.n	8008f26 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8008f16:	7efb      	ldrb	r3, [r7, #27]
 8008f18:	f023 0308 	bic.w	r3, r3, #8
 8008f1c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8008f1e:	7ebb      	ldrb	r3, [r7, #26]
 8008f20:	f043 0308 	orr.w	r3, r3, #8
 8008f24:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8008f26:	7efb      	ldrb	r3, [r7, #27]
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d007      	beq.n	8008f40 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8008f30:	7efb      	ldrb	r3, [r7, #27]
 8008f32:	f023 0301 	bic.w	r3, r3, #1
 8008f36:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8008f38:	7ebb      	ldrb	r3, [r7, #26]
 8008f3a:	f043 0301 	orr.w	r3, r3, #1
 8008f3e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fa fac7 	bl	80034da <lwip_htonl>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	887b      	ldrh	r3, [r7, #2]
 8008f50:	18d1      	adds	r1, r2, r3
 8008f52:	7eba      	ldrb	r2, [r7, #26]
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	6939      	ldr	r1, [r7, #16]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff fea7 	bl	8008cb0 <tcp_create_segment>
 8008f62:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d063      	beq.n	8009032 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fb fdda 	bl	8004b28 <pbuf_clen>
 8008f74:	4603      	mov	r3, r0
 8008f76:	461a      	mov	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008f7e:	1a9b      	subs	r3, r3, r2
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	6858      	ldr	r0, [r3, #4]
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	891a      	ldrh	r2, [r3, #8]
 8008f92:	89bb      	ldrh	r3, [r7, #12]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	4619      	mov	r1, r3
 8008f9a:	f7fb fbb7 	bl	800470c <pbuf_realloc>
  useg->len -= remainder;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	891a      	ldrh	r2, [r3, #8]
 8008fa2:	89bb      	ldrh	r3, [r7, #12]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	899b      	ldrh	r3, [r3, #12]
 8008fb2:	b29c      	uxth	r4, r3
 8008fb4:	7efb      	ldrb	r3, [r7, #27]
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fa fa79 	bl	80034b0 <lwip_htons>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	4322      	orrs	r2, r4
 8008fc8:	b292      	uxth	r2, r2
 8008fca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fb fda9 	bl	8004b28 <pbuf_clen>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	461a      	mov	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008fe0:	4413      	add	r3, r2
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fb fd9a 	bl	8004b28 <pbuf_clen>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008ffe:	4413      	add	r3, r2
 8009000:	b29a      	uxth	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d103      	bne.n	8009026 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	e016      	b.n	8009058 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800902a:	bf00      	nop
 800902c:	e002      	b.n	8009034 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800902e:	bf00      	nop
 8009030:	e000      	b.n	8009034 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009032:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d006      	beq.n	8009048 <tcp_split_unsent_seg+0x25c>
 800903a:	4b09      	ldr	r3, [pc, #36]	; (8009060 <tcp_split_unsent_seg+0x274>)
 800903c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009040:	490d      	ldr	r1, [pc, #52]	; (8009078 <tcp_split_unsent_seg+0x28c>)
 8009042:	4809      	ldr	r0, [pc, #36]	; (8009068 <tcp_split_unsent_seg+0x27c>)
 8009044:	f003 fed8 	bl	800cdf8 <iprintf>
  if (p != NULL) {
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800904e:	6938      	ldr	r0, [r7, #16]
 8009050:	f7fb fce2 	bl	8004a18 <pbuf_free>
  }

  return ERR_MEM;
 8009054:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009058:	4618      	mov	r0, r3
 800905a:	3724      	adds	r7, #36	; 0x24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd90      	pop	{r4, r7, pc}
 8009060:	0800f4f8 	.word	0x0800f4f8
 8009064:	0800f88c 	.word	0x0800f88c
 8009068:	0800f54c 	.word	0x0800f54c
 800906c:	0800f8b0 	.word	0x0800f8b0
 8009070:	0800f8d4 	.word	0x0800f8d4
 8009074:	0800f8e4 	.word	0x0800f8e4
 8009078:	0800f8f4 	.word	0x0800f8f4

0800907c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800907c:	b590      	push	{r4, r7, lr}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d106      	bne.n	8009098 <tcp_send_fin+0x1c>
 800908a:	4b21      	ldr	r3, [pc, #132]	; (8009110 <tcp_send_fin+0x94>)
 800908c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009090:	4920      	ldr	r1, [pc, #128]	; (8009114 <tcp_send_fin+0x98>)
 8009092:	4821      	ldr	r0, [pc, #132]	; (8009118 <tcp_send_fin+0x9c>)
 8009094:	f003 feb0 	bl	800cdf8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800909c:	2b00      	cmp	r3, #0
 800909e:	d02e      	beq.n	80090fe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a4:	60fb      	str	r3, [r7, #12]
 80090a6:	e002      	b.n	80090ae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1f8      	bne.n	80090a8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	899b      	ldrh	r3, [r3, #12]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fa f9f6 	bl	80034b0 <lwip_htons>
 80090c4:	4603      	mov	r3, r0
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d116      	bne.n	80090fe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	899b      	ldrh	r3, [r3, #12]
 80090d6:	b29c      	uxth	r4, r3
 80090d8:	2001      	movs	r0, #1
 80090da:	f7fa f9e9 	bl	80034b0 <lwip_htons>
 80090de:	4603      	mov	r3, r0
 80090e0:	461a      	mov	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	4322      	orrs	r2, r4
 80090e8:	b292      	uxth	r2, r2
 80090ea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	8b5b      	ldrh	r3, [r3, #26]
 80090f0:	f043 0320 	orr.w	r3, r3, #32
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e004      	b.n	8009108 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80090fe:	2101      	movs	r1, #1
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f80b 	bl	800911c <tcp_enqueue_flags>
 8009106:	4603      	mov	r3, r0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	bd90      	pop	{r4, r7, pc}
 8009110:	0800f4f8 	.word	0x0800f4f8
 8009114:	0800f900 	.word	0x0800f900
 8009118:	0800f54c 	.word	0x0800f54c

0800911c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b08a      	sub	sp, #40	; 0x28
 8009120:	af02      	add	r7, sp, #8
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d106      	bne.n	8009148 <tcp_enqueue_flags+0x2c>
 800913a:	4b67      	ldr	r3, [pc, #412]	; (80092d8 <tcp_enqueue_flags+0x1bc>)
 800913c:	f240 4211 	movw	r2, #1041	; 0x411
 8009140:	4966      	ldr	r1, [pc, #408]	; (80092dc <tcp_enqueue_flags+0x1c0>)
 8009142:	4867      	ldr	r0, [pc, #412]	; (80092e0 <tcp_enqueue_flags+0x1c4>)
 8009144:	f003 fe58 	bl	800cdf8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d106      	bne.n	800915c <tcp_enqueue_flags+0x40>
 800914e:	4b62      	ldr	r3, [pc, #392]	; (80092d8 <tcp_enqueue_flags+0x1bc>)
 8009150:	f240 4213 	movw	r2, #1043	; 0x413
 8009154:	4963      	ldr	r1, [pc, #396]	; (80092e4 <tcp_enqueue_flags+0x1c8>)
 8009156:	4862      	ldr	r0, [pc, #392]	; (80092e0 <tcp_enqueue_flags+0x1c4>)
 8009158:	f003 fe4e 	bl	800cdf8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	f003 0302 	and.w	r3, r3, #2
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009166:	2301      	movs	r3, #1
 8009168:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800916a:	7ffb      	ldrb	r3, [r7, #31]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	b2db      	uxtb	r3, r3
 8009170:	f003 0304 	and.w	r3, r3, #4
 8009174:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	b29b      	uxth	r3, r3
 800917a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800917e:	4619      	mov	r1, r3
 8009180:	2036      	movs	r0, #54	; 0x36
 8009182:	f7fb f965 	bl	8004450 <pbuf_alloc>
 8009186:	6138      	str	r0, [r7, #16]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d109      	bne.n	80091a2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	8b5b      	ldrh	r3, [r3, #26]
 8009192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009196:	b29a      	uxth	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800919c:	f04f 33ff 	mov.w	r3, #4294967295
 80091a0:	e095      	b.n	80092ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	895a      	ldrh	r2, [r3, #10]
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d206      	bcs.n	80091bc <tcp_enqueue_flags+0xa0>
 80091ae:	4b4a      	ldr	r3, [pc, #296]	; (80092d8 <tcp_enqueue_flags+0x1bc>)
 80091b0:	f240 4239 	movw	r2, #1081	; 0x439
 80091b4:	494c      	ldr	r1, [pc, #304]	; (80092e8 <tcp_enqueue_flags+0x1cc>)
 80091b6:	484a      	ldr	r0, [pc, #296]	; (80092e0 <tcp_enqueue_flags+0x1c4>)
 80091b8:	f003 fe1e 	bl	800cdf8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80091c0:	78fa      	ldrb	r2, [r7, #3]
 80091c2:	7ffb      	ldrb	r3, [r7, #31]
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	460b      	mov	r3, r1
 80091c8:	6939      	ldr	r1, [r7, #16]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7ff fd70 	bl	8008cb0 <tcp_create_segment>
 80091d0:	60f8      	str	r0, [r7, #12]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d109      	bne.n	80091ec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	8b5b      	ldrh	r3, [r3, #26]
 80091dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80091e6:	f04f 33ff 	mov.w	r3, #4294967295
 80091ea:	e070      	b.n	80092ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	f003 0303 	and.w	r3, r3, #3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d006      	beq.n	8009206 <tcp_enqueue_flags+0xea>
 80091f8:	4b37      	ldr	r3, [pc, #220]	; (80092d8 <tcp_enqueue_flags+0x1bc>)
 80091fa:	f240 4242 	movw	r2, #1090	; 0x442
 80091fe:	493b      	ldr	r1, [pc, #236]	; (80092ec <tcp_enqueue_flags+0x1d0>)
 8009200:	4837      	ldr	r0, [pc, #220]	; (80092e0 <tcp_enqueue_flags+0x1c4>)
 8009202:	f003 fdf9 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	891b      	ldrh	r3, [r3, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d006      	beq.n	800921c <tcp_enqueue_flags+0x100>
 800920e:	4b32      	ldr	r3, [pc, #200]	; (80092d8 <tcp_enqueue_flags+0x1bc>)
 8009210:	f240 4243 	movw	r2, #1091	; 0x443
 8009214:	4936      	ldr	r1, [pc, #216]	; (80092f0 <tcp_enqueue_flags+0x1d4>)
 8009216:	4832      	ldr	r0, [pc, #200]	; (80092e0 <tcp_enqueue_flags+0x1c4>)
 8009218:	f003 fdee 	bl	800cdf8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009220:	2b00      	cmp	r3, #0
 8009222:	d103      	bne.n	800922c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	66da      	str	r2, [r3, #108]	; 0x6c
 800922a:	e00d      	b.n	8009248 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009230:	61bb      	str	r3, [r7, #24]
 8009232:	e002      	b.n	800923a <tcp_enqueue_flags+0x11e>
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	61bb      	str	r3, [r7, #24]
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1f8      	bne.n	8009234 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b00      	cmp	r3, #0
 8009258:	d104      	bne.n	8009264 <tcp_enqueue_flags+0x148>
 800925a:	78fb      	ldrb	r3, [r7, #3]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b00      	cmp	r3, #0
 8009262:	d004      	beq.n	800926e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009268:	1c5a      	adds	r2, r3, #1
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800926e:	78fb      	ldrb	r3, [r7, #3]
 8009270:	f003 0301 	and.w	r3, r3, #1
 8009274:	2b00      	cmp	r3, #0
 8009276:	d006      	beq.n	8009286 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	8b5b      	ldrh	r3, [r3, #26]
 800927c:	f043 0320 	orr.w	r3, r3, #32
 8009280:	b29a      	uxth	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	4618      	mov	r0, r3
 800928c:	f7fb fc4c 	bl	8004b28 <pbuf_clen>
 8009290:	4603      	mov	r3, r0
 8009292:	461a      	mov	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800929a:	4413      	add	r3, r2
 800929c:	b29a      	uxth	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00e      	beq.n	80092cc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10a      	bne.n	80092cc <tcp_enqueue_flags+0x1b0>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d106      	bne.n	80092cc <tcp_enqueue_flags+0x1b0>
 80092be:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <tcp_enqueue_flags+0x1bc>)
 80092c0:	f240 4265 	movw	r2, #1125	; 0x465
 80092c4:	490b      	ldr	r1, [pc, #44]	; (80092f4 <tcp_enqueue_flags+0x1d8>)
 80092c6:	4806      	ldr	r0, [pc, #24]	; (80092e0 <tcp_enqueue_flags+0x1c4>)
 80092c8:	f003 fd96 	bl	800cdf8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3720      	adds	r7, #32
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	0800f4f8 	.word	0x0800f4f8
 80092dc:	0800f91c 	.word	0x0800f91c
 80092e0:	0800f54c 	.word	0x0800f54c
 80092e4:	0800f974 	.word	0x0800f974
 80092e8:	0800f994 	.word	0x0800f994
 80092ec:	0800f9d0 	.word	0x0800f9d0
 80092f0:	0800f9e8 	.word	0x0800f9e8
 80092f4:	0800fa14 	.word	0x0800fa14

080092f8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80092f8:	b5b0      	push	{r4, r5, r7, lr}
 80092fa:	b08a      	sub	sp, #40	; 0x28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d106      	bne.n	8009314 <tcp_output+0x1c>
 8009306:	4b9e      	ldr	r3, [pc, #632]	; (8009580 <tcp_output+0x288>)
 8009308:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800930c:	499d      	ldr	r1, [pc, #628]	; (8009584 <tcp_output+0x28c>)
 800930e:	489e      	ldr	r0, [pc, #632]	; (8009588 <tcp_output+0x290>)
 8009310:	f003 fd72 	bl	800cdf8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	7d1b      	ldrb	r3, [r3, #20]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d106      	bne.n	800932a <tcp_output+0x32>
 800931c:	4b98      	ldr	r3, [pc, #608]	; (8009580 <tcp_output+0x288>)
 800931e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8009322:	499a      	ldr	r1, [pc, #616]	; (800958c <tcp_output+0x294>)
 8009324:	4898      	ldr	r0, [pc, #608]	; (8009588 <tcp_output+0x290>)
 8009326:	f003 fd67 	bl	800cdf8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800932a:	4b99      	ldr	r3, [pc, #612]	; (8009590 <tcp_output+0x298>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	429a      	cmp	r2, r3
 8009332:	d101      	bne.n	8009338 <tcp_output+0x40>
    return ERR_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	e1ce      	b.n	80096d6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009344:	4293      	cmp	r3, r2
 8009346:	bf28      	it	cs
 8009348:	4613      	movcs	r3, r2
 800934a:	b29b      	uxth	r3, r3
 800934c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009352:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10b      	bne.n	8009372 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	8b5b      	ldrh	r3, [r3, #26]
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 81aa 	beq.w	80096bc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fdcb 	bl	8009f04 <tcp_send_empty_ack>
 800936e:	4603      	mov	r3, r0
 8009370:	e1b1      	b.n	80096d6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009372:	6879      	ldr	r1, [r7, #4]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3304      	adds	r3, #4
 8009378:	461a      	mov	r2, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff fc7c 	bl	8008c78 <tcp_route>
 8009380:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d102      	bne.n	800938e <tcp_output+0x96>
    return ERR_RTE;
 8009388:	f06f 0303 	mvn.w	r3, #3
 800938c:	e1a3      	b.n	80096d6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <tcp_output+0xa4>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d111      	bne.n	80093c0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d002      	beq.n	80093a8 <tcp_output+0xb0>
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	3304      	adds	r3, #4
 80093a6:	e000      	b.n	80093aa <tcp_output+0xb2>
 80093a8:	2300      	movs	r3, #0
 80093aa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d102      	bne.n	80093b8 <tcp_output+0xc0>
      return ERR_RTE;
 80093b2:	f06f 0303 	mvn.w	r3, #3
 80093b6:	e18e      	b.n	80096d6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fa f887 	bl	80034da <lwip_htonl>
 80093cc:	4602      	mov	r2, r0
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d6:	8912      	ldrh	r2, [r2, #8]
 80093d8:	4413      	add	r3, r2
 80093da:	69ba      	ldr	r2, [r7, #24]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d227      	bcs.n	8009430 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093e6:	461a      	mov	r2, r3
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d114      	bne.n	8009418 <tcp_output+0x120>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d110      	bne.n	8009418 <tcp_output+0x120>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10b      	bne.n	8009418 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	8b5b      	ldrh	r3, [r3, #26]
 800941c:	f003 0302 	and.w	r3, r3, #2
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 814d 	beq.w	80096c0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fd6c 	bl	8009f04 <tcp_send_empty_ack>
 800942c:	4603      	mov	r3, r0
 800942e:	e152      	b.n	80096d6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800943c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 811c 	beq.w	800967e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8009446:	e002      	b.n	800944e <tcp_output+0x156>
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	623b      	str	r3, [r7, #32]
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1f8      	bne.n	8009448 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009456:	e112      	b.n	800967e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	899b      	ldrh	r3, [r3, #12]
 800945e:	b29b      	uxth	r3, r3
 8009460:	4618      	mov	r0, r3
 8009462:	f7fa f825 	bl	80034b0 <lwip_htons>
 8009466:	4603      	mov	r3, r0
 8009468:	b2db      	uxtb	r3, r3
 800946a:	f003 0304 	and.w	r3, r3, #4
 800946e:	2b00      	cmp	r3, #0
 8009470:	d006      	beq.n	8009480 <tcp_output+0x188>
 8009472:	4b43      	ldr	r3, [pc, #268]	; (8009580 <tcp_output+0x288>)
 8009474:	f240 5236 	movw	r2, #1334	; 0x536
 8009478:	4946      	ldr	r1, [pc, #280]	; (8009594 <tcp_output+0x29c>)
 800947a:	4843      	ldr	r0, [pc, #268]	; (8009588 <tcp_output+0x290>)
 800947c:	f003 fcbc 	bl	800cdf8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009484:	2b00      	cmp	r3, #0
 8009486:	d01f      	beq.n	80094c8 <tcp_output+0x1d0>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	8b5b      	ldrh	r3, [r3, #26]
 800948c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009490:	2b00      	cmp	r3, #0
 8009492:	d119      	bne.n	80094c8 <tcp_output+0x1d0>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00b      	beq.n	80094b4 <tcp_output+0x1bc>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d110      	bne.n	80094c8 <tcp_output+0x1d0>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094aa:	891a      	ldrh	r2, [r3, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d209      	bcs.n	80094c8 <tcp_output+0x1d0>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d004      	beq.n	80094c8 <tcp_output+0x1d0>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80094c4:	2b08      	cmp	r3, #8
 80094c6:	d901      	bls.n	80094cc <tcp_output+0x1d4>
 80094c8:	2301      	movs	r3, #1
 80094ca:	e000      	b.n	80094ce <tcp_output+0x1d6>
 80094cc:	2300      	movs	r3, #0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	8b5b      	ldrh	r3, [r3, #26]
 80094d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 80e4 	beq.w	80096a8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	7d1b      	ldrb	r3, [r3, #20]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d00d      	beq.n	8009504 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	899b      	ldrh	r3, [r3, #12]
 80094ee:	b29c      	uxth	r4, r3
 80094f0:	2010      	movs	r0, #16
 80094f2:	f7f9 ffdd 	bl	80034b0 <lwip_htons>
 80094f6:	4603      	mov	r3, r0
 80094f8:	461a      	mov	r2, r3
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	4322      	orrs	r2, r4
 8009500:	b292      	uxth	r2, r2
 8009502:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800950a:	f000 f909 	bl	8009720 <tcp_output_segment>
 800950e:	4603      	mov	r3, r0
 8009510:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d009      	beq.n	800952e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	8b5b      	ldrh	r3, [r3, #26]
 800951e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009522:	b29a      	uxth	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	835a      	strh	r2, [r3, #26]
      return err;
 8009528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800952c:	e0d3      	b.n	80096d6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	7d1b      	ldrb	r3, [r3, #20]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d006      	beq.n	800954c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	8b5b      	ldrh	r3, [r3, #26]
 8009542:	f023 0303 	bic.w	r3, r3, #3
 8009546:	b29a      	uxth	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	4618      	mov	r0, r3
 8009554:	f7f9 ffc1 	bl	80034da <lwip_htonl>
 8009558:	4604      	mov	r4, r0
 800955a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955c:	891b      	ldrh	r3, [r3, #8]
 800955e:	461d      	mov	r5, r3
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	899b      	ldrh	r3, [r3, #12]
 8009566:	b29b      	uxth	r3, r3
 8009568:	4618      	mov	r0, r3
 800956a:	f7f9 ffa1 	bl	80034b0 <lwip_htons>
 800956e:	4603      	mov	r3, r0
 8009570:	b2db      	uxtb	r3, r3
 8009572:	f003 0303 	and.w	r3, r3, #3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00e      	beq.n	8009598 <tcp_output+0x2a0>
 800957a:	2301      	movs	r3, #1
 800957c:	e00d      	b.n	800959a <tcp_output+0x2a2>
 800957e:	bf00      	nop
 8009580:	0800f4f8 	.word	0x0800f4f8
 8009584:	0800fa3c 	.word	0x0800fa3c
 8009588:	0800f54c 	.word	0x0800f54c
 800958c:	0800fa54 	.word	0x0800fa54
 8009590:	20008a64 	.word	0x20008a64
 8009594:	0800fa7c 	.word	0x0800fa7c
 8009598:	2300      	movs	r3, #0
 800959a:	442b      	add	r3, r5
 800959c:	4423      	add	r3, r4
 800959e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	da02      	bge.n	80095b2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	891b      	ldrh	r3, [r3, #8]
 80095b6:	461c      	mov	r4, r3
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	899b      	ldrh	r3, [r3, #12]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7f9 ff75 	bl	80034b0 <lwip_htons>
 80095c6:	4603      	mov	r3, r0
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	f003 0303 	and.w	r3, r3, #3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <tcp_output+0x2de>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e000      	b.n	80095d8 <tcp_output+0x2e0>
 80095d6:	2300      	movs	r3, #0
 80095d8:	4423      	add	r3, r4
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d049      	beq.n	8009672 <tcp_output+0x37a>
      seg->next = NULL;
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	2200      	movs	r2, #0
 80095e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d105      	bne.n	80095f8 <tcp_output+0x300>
        pcb->unacked = seg;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	623b      	str	r3, [r7, #32]
 80095f6:	e03f      	b.n	8009678 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	4618      	mov	r0, r3
 8009600:	f7f9 ff6b 	bl	80034da <lwip_htonl>
 8009604:	4604      	mov	r4, r0
 8009606:	6a3b      	ldr	r3, [r7, #32]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	4618      	mov	r0, r3
 800960e:	f7f9 ff64 	bl	80034da <lwip_htonl>
 8009612:	4603      	mov	r3, r0
 8009614:	1ae3      	subs	r3, r4, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	da24      	bge.n	8009664 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	3370      	adds	r3, #112	; 0x70
 800961e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009620:	e002      	b.n	8009628 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d011      	beq.n	8009654 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	4618      	mov	r0, r3
 800963a:	f7f9 ff4e 	bl	80034da <lwip_htonl>
 800963e:	4604      	mov	r4, r0
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	4618      	mov	r0, r3
 8009648:	f7f9 ff47 	bl	80034da <lwip_htonl>
 800964c:	4603      	mov	r3, r0
 800964e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009650:	2b00      	cmp	r3, #0
 8009652:	dbe6      	blt.n	8009622 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	e009      	b.n	8009678 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009668:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800966a:	6a3b      	ldr	r3, [r7, #32]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	623b      	str	r3, [r7, #32]
 8009670:	e002      	b.n	8009678 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009674:	f7fc fc43 	bl	8005efe <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800967c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	2b00      	cmp	r3, #0
 8009682:	d012      	beq.n	80096aa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	4618      	mov	r0, r3
 800968c:	f7f9 ff25 	bl	80034da <lwip_htonl>
 8009690:	4602      	mov	r2, r0
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800969a:	8912      	ldrh	r2, [r2, #8]
 800969c:	4413      	add	r3, r2
  while (seg != NULL &&
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	f4bf aed9 	bcs.w	8009458 <tcp_output+0x160>
 80096a6:	e000      	b.n	80096aa <tcp_output+0x3b2>
      break;
 80096a8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d108      	bne.n	80096c4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80096ba:	e004      	b.n	80096c6 <tcp_output+0x3ce>
    goto output_done;
 80096bc:	bf00      	nop
 80096be:	e002      	b.n	80096c6 <tcp_output+0x3ce>
    goto output_done;
 80096c0:	bf00      	nop
 80096c2:	e000      	b.n	80096c6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80096c4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	8b5b      	ldrh	r3, [r3, #26]
 80096ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3728      	adds	r7, #40	; 0x28
 80096da:	46bd      	mov	sp, r7
 80096dc:	bdb0      	pop	{r4, r5, r7, pc}
 80096de:	bf00      	nop

080096e0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d106      	bne.n	80096fc <tcp_output_segment_busy+0x1c>
 80096ee:	4b09      	ldr	r3, [pc, #36]	; (8009714 <tcp_output_segment_busy+0x34>)
 80096f0:	f240 529a 	movw	r2, #1434	; 0x59a
 80096f4:	4908      	ldr	r1, [pc, #32]	; (8009718 <tcp_output_segment_busy+0x38>)
 80096f6:	4809      	ldr	r0, [pc, #36]	; (800971c <tcp_output_segment_busy+0x3c>)
 80096f8:	f003 fb7e 	bl	800cdf8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	7b9b      	ldrb	r3, [r3, #14]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d001      	beq.n	800970a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8009706:	2301      	movs	r3, #1
 8009708:	e000      	b.n	800970c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	0800f4f8 	.word	0x0800f4f8
 8009718:	0800fa94 	.word	0x0800fa94
 800971c:	0800f54c 	.word	0x0800f54c

08009720 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009720:	b5b0      	push	{r4, r5, r7, lr}
 8009722:	b08c      	sub	sp, #48	; 0x30
 8009724:	af04      	add	r7, sp, #16
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d106      	bne.n	8009740 <tcp_output_segment+0x20>
 8009732:	4b63      	ldr	r3, [pc, #396]	; (80098c0 <tcp_output_segment+0x1a0>)
 8009734:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8009738:	4962      	ldr	r1, [pc, #392]	; (80098c4 <tcp_output_segment+0x1a4>)
 800973a:	4863      	ldr	r0, [pc, #396]	; (80098c8 <tcp_output_segment+0x1a8>)
 800973c:	f003 fb5c 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d106      	bne.n	8009754 <tcp_output_segment+0x34>
 8009746:	4b5e      	ldr	r3, [pc, #376]	; (80098c0 <tcp_output_segment+0x1a0>)
 8009748:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800974c:	495f      	ldr	r1, [pc, #380]	; (80098cc <tcp_output_segment+0x1ac>)
 800974e:	485e      	ldr	r0, [pc, #376]	; (80098c8 <tcp_output_segment+0x1a8>)
 8009750:	f003 fb52 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d106      	bne.n	8009768 <tcp_output_segment+0x48>
 800975a:	4b59      	ldr	r3, [pc, #356]	; (80098c0 <tcp_output_segment+0x1a0>)
 800975c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8009760:	495b      	ldr	r1, [pc, #364]	; (80098d0 <tcp_output_segment+0x1b0>)
 8009762:	4859      	ldr	r0, [pc, #356]	; (80098c8 <tcp_output_segment+0x1a8>)
 8009764:	f003 fb48 	bl	800cdf8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f7ff ffb9 	bl	80096e0 <tcp_output_segment_busy>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	e09f      	b.n	80098b8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	68dc      	ldr	r4, [r3, #12]
 8009780:	4610      	mov	r0, r2
 8009782:	f7f9 feaa 	bl	80034da <lwip_htonl>
 8009786:	4603      	mov	r3, r0
 8009788:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	68dc      	ldr	r4, [r3, #12]
 8009792:	4610      	mov	r0, r2
 8009794:	f7f9 fe8c 	bl	80034b0 <lwip_htons>
 8009798:	4603      	mov	r3, r0
 800979a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80097a4:	441a      	add	r2, r3
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	3314      	adds	r3, #20
 80097b0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	7a9b      	ldrb	r3, [r3, #10]
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d015      	beq.n	80097ea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	3304      	adds	r3, #4
 80097c2:	461a      	mov	r2, r3
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80097ca:	f7fc fe8f 	bl	80064ec <tcp_eff_send_mss_netif>
 80097ce:	4603      	mov	r3, r0
 80097d0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80097d2:	8b7b      	ldrh	r3, [r7, #26]
 80097d4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80097d8:	4618      	mov	r0, r3
 80097da:	f7f9 fe7e 	bl	80034da <lwip_htonl>
 80097de:	4602      	mov	r2, r0
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	3304      	adds	r3, #4
 80097e8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	da02      	bge.n	80097fa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2200      	movs	r2, #0
 80097f8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10c      	bne.n	800981c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8009802:	4b34      	ldr	r3, [pc, #208]	; (80098d4 <tcp_output_segment+0x1b4>)
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	4618      	mov	r0, r3
 8009812:	f7f9 fe62 	bl	80034da <lwip_htonl>
 8009816:	4602      	mov	r2, r0
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	68da      	ldr	r2, [r3, #12]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	8959      	ldrh	r1, [r3, #10]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	8b3a      	ldrh	r2, [r7, #24]
 8009836:	1a8a      	subs	r2, r1, r2
 8009838:	b292      	uxth	r2, r2
 800983a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	8919      	ldrh	r1, [r3, #8]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	8b3a      	ldrh	r2, [r7, #24]
 8009848:	1a8a      	subs	r2, r1, r2
 800984a:	b292      	uxth	r2, r2
 800984c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	68d2      	ldr	r2, [r2, #12]
 8009856:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	741a      	strb	r2, [r3, #16]
 8009860:	2200      	movs	r2, #0
 8009862:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	f103 0214 	add.w	r2, r3, #20
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	7a9b      	ldrb	r3, [r3, #10]
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	f003 0304 	and.w	r3, r3, #4
 8009876:	4413      	add	r3, r2
 8009878:	69fa      	ldr	r2, [r7, #28]
 800987a:	429a      	cmp	r2, r3
 800987c:	d006      	beq.n	800988c <tcp_output_segment+0x16c>
 800987e:	4b10      	ldr	r3, [pc, #64]	; (80098c0 <tcp_output_segment+0x1a0>)
 8009880:	f240 621c 	movw	r2, #1564	; 0x61c
 8009884:	4914      	ldr	r1, [pc, #80]	; (80098d8 <tcp_output_segment+0x1b8>)
 8009886:	4810      	ldr	r0, [pc, #64]	; (80098c8 <tcp_output_segment+0x1a8>)
 8009888:	f003 fab6 	bl	800cdf8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6858      	ldr	r0, [r3, #4]
 8009890:	68b9      	ldr	r1, [r7, #8]
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	1d1c      	adds	r4, r3, #4
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	7add      	ldrb	r5, [r3, #11]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	7a9b      	ldrb	r3, [r3, #10]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	9202      	str	r2, [sp, #8]
 80098a2:	2206      	movs	r2, #6
 80098a4:	9201      	str	r2, [sp, #4]
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	462b      	mov	r3, r5
 80098aa:	4622      	mov	r2, r4
 80098ac:	f002 fa34 	bl	800bd18 <ip4_output_if>
 80098b0:	4603      	mov	r3, r0
 80098b2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80098b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3720      	adds	r7, #32
 80098bc:	46bd      	mov	sp, r7
 80098be:	bdb0      	pop	{r4, r5, r7, pc}
 80098c0:	0800f4f8 	.word	0x0800f4f8
 80098c4:	0800fabc 	.word	0x0800fabc
 80098c8:	0800f54c 	.word	0x0800f54c
 80098cc:	0800fadc 	.word	0x0800fadc
 80098d0:	0800fafc 	.word	0x0800fafc
 80098d4:	20008a54 	.word	0x20008a54
 80098d8:	0800fb20 	.word	0x0800fb20

080098dc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80098dc:	b5b0      	push	{r4, r5, r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d106      	bne.n	80098f8 <tcp_rexmit_rto_prepare+0x1c>
 80098ea:	4b31      	ldr	r3, [pc, #196]	; (80099b0 <tcp_rexmit_rto_prepare+0xd4>)
 80098ec:	f240 6263 	movw	r2, #1635	; 0x663
 80098f0:	4930      	ldr	r1, [pc, #192]	; (80099b4 <tcp_rexmit_rto_prepare+0xd8>)
 80098f2:	4831      	ldr	r0, [pc, #196]	; (80099b8 <tcp_rexmit_rto_prepare+0xdc>)
 80098f4:	f003 fa80 	bl	800cdf8 <iprintf>

  if (pcb->unacked == NULL) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d102      	bne.n	8009906 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8009900:	f06f 0305 	mvn.w	r3, #5
 8009904:	e050      	b.n	80099a8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	e00b      	b.n	8009926 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f7ff fee6 	bl	80096e0 <tcp_output_segment_busy>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d002      	beq.n	8009920 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800991a:	f06f 0305 	mvn.w	r3, #5
 800991e:	e043      	b.n	80099a8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	60fb      	str	r3, [r7, #12]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1ef      	bne.n	800990e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f7ff fed6 	bl	80096e0 <tcp_output_segment_busy>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d002      	beq.n	8009940 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800993a:	f06f 0305 	mvn.w	r3, #5
 800993e:	e033      	b.n	80099a8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	8b5b      	ldrh	r3, [r3, #26]
 800995a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800995e:	b29a      	uxth	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	4618      	mov	r0, r3
 800996c:	f7f9 fdb5 	bl	80034da <lwip_htonl>
 8009970:	4604      	mov	r4, r0
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	891b      	ldrh	r3, [r3, #8]
 8009976:	461d      	mov	r5, r3
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	899b      	ldrh	r3, [r3, #12]
 800997e:	b29b      	uxth	r3, r3
 8009980:	4618      	mov	r0, r3
 8009982:	f7f9 fd95 	bl	80034b0 <lwip_htons>
 8009986:	4603      	mov	r3, r0
 8009988:	b2db      	uxtb	r3, r3
 800998a:	f003 0303 	and.w	r3, r3, #3
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <tcp_rexmit_rto_prepare+0xba>
 8009992:	2301      	movs	r3, #1
 8009994:	e000      	b.n	8009998 <tcp_rexmit_rto_prepare+0xbc>
 8009996:	2300      	movs	r3, #0
 8009998:	442b      	add	r3, r5
 800999a:	18e2      	adds	r2, r4, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bdb0      	pop	{r4, r5, r7, pc}
 80099b0:	0800f4f8 	.word	0x0800f4f8
 80099b4:	0800fb34 	.word	0x0800fb34
 80099b8:	0800f54c 	.word	0x0800f54c

080099bc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d106      	bne.n	80099d8 <tcp_rexmit_rto_commit+0x1c>
 80099ca:	4b0d      	ldr	r3, [pc, #52]	; (8009a00 <tcp_rexmit_rto_commit+0x44>)
 80099cc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80099d0:	490c      	ldr	r1, [pc, #48]	; (8009a04 <tcp_rexmit_rto_commit+0x48>)
 80099d2:	480d      	ldr	r0, [pc, #52]	; (8009a08 <tcp_rexmit_rto_commit+0x4c>)
 80099d4:	f003 fa10 	bl	800cdf8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099de:	2bff      	cmp	r3, #255	; 0xff
 80099e0:	d007      	beq.n	80099f2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099e8:	3301      	adds	r3, #1
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7ff fc80 	bl	80092f8 <tcp_output>
}
 80099f8:	bf00      	nop
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	0800f4f8 	.word	0x0800f4f8
 8009a04:	0800fb58 	.word	0x0800fb58
 8009a08:	0800f54c 	.word	0x0800f54c

08009a0c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d106      	bne.n	8009a28 <tcp_rexmit_rto+0x1c>
 8009a1a:	4b0a      	ldr	r3, [pc, #40]	; (8009a44 <tcp_rexmit_rto+0x38>)
 8009a1c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8009a20:	4909      	ldr	r1, [pc, #36]	; (8009a48 <tcp_rexmit_rto+0x3c>)
 8009a22:	480a      	ldr	r0, [pc, #40]	; (8009a4c <tcp_rexmit_rto+0x40>)
 8009a24:	f003 f9e8 	bl	800cdf8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff ff57 	bl	80098dc <tcp_rexmit_rto_prepare>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d102      	bne.n	8009a3a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7ff ffc1 	bl	80099bc <tcp_rexmit_rto_commit>
  }
}
 8009a3a:	bf00      	nop
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	0800f4f8 	.word	0x0800f4f8
 8009a48:	0800fb7c 	.word	0x0800fb7c
 8009a4c:	0800f54c 	.word	0x0800f54c

08009a50 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009a50:	b590      	push	{r4, r7, lr}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d106      	bne.n	8009a6c <tcp_rexmit+0x1c>
 8009a5e:	4b2f      	ldr	r3, [pc, #188]	; (8009b1c <tcp_rexmit+0xcc>)
 8009a60:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8009a64:	492e      	ldr	r1, [pc, #184]	; (8009b20 <tcp_rexmit+0xd0>)
 8009a66:	482f      	ldr	r0, [pc, #188]	; (8009b24 <tcp_rexmit+0xd4>)
 8009a68:	f003 f9c6 	bl	800cdf8 <iprintf>

  if (pcb->unacked == NULL) {
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d102      	bne.n	8009a7a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8009a74:	f06f 0305 	mvn.w	r3, #5
 8009a78:	e04c      	b.n	8009b14 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8009a80:	68b8      	ldr	r0, [r7, #8]
 8009a82:	f7ff fe2d 	bl	80096e0 <tcp_output_segment_busy>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8009a8c:	f06f 0305 	mvn.w	r3, #5
 8009a90:	e040      	b.n	8009b14 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	336c      	adds	r3, #108	; 0x6c
 8009a9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009aa0:	e002      	b.n	8009aa8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d011      	beq.n	8009ad4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7f9 fd0e 	bl	80034da <lwip_htonl>
 8009abe:	4604      	mov	r4, r0
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7f9 fd07 	bl	80034da <lwip_htonl>
 8009acc:	4603      	mov	r3, r0
 8009ace:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	dbe6      	blt.n	8009aa2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d103      	bne.n	8009af2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009af8:	2bff      	cmp	r3, #255	; 0xff
 8009afa:	d007      	beq.n	8009b0c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b02:	3301      	adds	r3, #1
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd90      	pop	{r4, r7, pc}
 8009b1c:	0800f4f8 	.word	0x0800f4f8
 8009b20:	0800fb98 	.word	0x0800fb98
 8009b24:	0800f54c 	.word	0x0800f54c

08009b28 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d106      	bne.n	8009b44 <tcp_rexmit_fast+0x1c>
 8009b36:	4b2a      	ldr	r3, [pc, #168]	; (8009be0 <tcp_rexmit_fast+0xb8>)
 8009b38:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8009b3c:	4929      	ldr	r1, [pc, #164]	; (8009be4 <tcp_rexmit_fast+0xbc>)
 8009b3e:	482a      	ldr	r0, [pc, #168]	; (8009be8 <tcp_rexmit_fast+0xc0>)
 8009b40:	f003 f95a 	bl	800cdf8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d044      	beq.n	8009bd6 <tcp_rexmit_fast+0xae>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	8b5b      	ldrh	r3, [r3, #26]
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d13e      	bne.n	8009bd6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7ff ff79 	bl	8009a50 <tcp_rexmit>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d138      	bne.n	8009bd6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b70:	4293      	cmp	r3, r2
 8009b72:	bf28      	it	cs
 8009b74:	4613      	movcs	r3, r2
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	0fda      	lsrs	r2, r3, #31
 8009b7a:	4413      	add	r3, r2
 8009b7c:	105b      	asrs	r3, r3, #1
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b92:	005b      	lsls	r3, r3, #1
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d206      	bcs.n	8009ba6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b9c:	005b      	lsls	r3, r3, #1
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	0049      	lsls	r1, r1, #1
 8009bb4:	440b      	add	r3, r1
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	4413      	add	r3, r2
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	8b5b      	ldrh	r3, [r3, #26]
 8009bc6:	f043 0304 	orr.w	r3, r3, #4
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8009bd6:	bf00      	nop
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	0800f4f8 	.word	0x0800f4f8
 8009be4:	0800fbb0 	.word	0x0800fbb0
 8009be8:	0800f54c 	.word	0x0800f54c

08009bec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b086      	sub	sp, #24
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	607b      	str	r3, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	817b      	strh	r3, [r7, #10]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009bfe:	897a      	ldrh	r2, [r7, #10]
 8009c00:	893b      	ldrh	r3, [r7, #8]
 8009c02:	4413      	add	r3, r2
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	3314      	adds	r3, #20
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009c0e:	4619      	mov	r1, r3
 8009c10:	2022      	movs	r0, #34	; 0x22
 8009c12:	f7fa fc1d 	bl	8004450 <pbuf_alloc>
 8009c16:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d04d      	beq.n	8009cba <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009c1e:	897b      	ldrh	r3, [r7, #10]
 8009c20:	3313      	adds	r3, #19
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	8952      	ldrh	r2, [r2, #10]
 8009c26:	4293      	cmp	r3, r2
 8009c28:	db06      	blt.n	8009c38 <tcp_output_alloc_header_common+0x4c>
 8009c2a:	4b26      	ldr	r3, [pc, #152]	; (8009cc4 <tcp_output_alloc_header_common+0xd8>)
 8009c2c:	f240 7223 	movw	r2, #1827	; 0x723
 8009c30:	4925      	ldr	r1, [pc, #148]	; (8009cc8 <tcp_output_alloc_header_common+0xdc>)
 8009c32:	4826      	ldr	r0, [pc, #152]	; (8009ccc <tcp_output_alloc_header_common+0xe0>)
 8009c34:	f003 f8e0 	bl	800cdf8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8009c3e:	8c3b      	ldrh	r3, [r7, #32]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7f9 fc35 	bl	80034b0 <lwip_htons>
 8009c46:	4603      	mov	r3, r0
 8009c48:	461a      	mov	r2, r3
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8009c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7f9 fc2d 	bl	80034b0 <lwip_htons>
 8009c56:	4603      	mov	r3, r0
 8009c58:	461a      	mov	r2, r3
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f7f9 fc38 	bl	80034da <lwip_htonl>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8009c70:	897b      	ldrh	r3, [r7, #10]
 8009c72:	089b      	lsrs	r3, r3, #2
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	3305      	adds	r3, #5
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	031b      	lsls	r3, r3, #12
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	4313      	orrs	r3, r2
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7f9 fc11 	bl	80034b0 <lwip_htons>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	461a      	mov	r2, r3
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8009c96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7f9 fc09 	bl	80034b0 <lwip_htons>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	741a      	strb	r2, [r3, #16]
 8009cac:	2200      	movs	r2, #0
 8009cae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	749a      	strb	r2, [r3, #18]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8009cba:	697b      	ldr	r3, [r7, #20]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	0800f4f8 	.word	0x0800f4f8
 8009cc8:	0800fbd0 	.word	0x0800fbd0
 8009ccc:	0800f54c 	.word	0x0800f54c

08009cd0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8009cd0:	b5b0      	push	{r4, r5, r7, lr}
 8009cd2:	b08a      	sub	sp, #40	; 0x28
 8009cd4:	af04      	add	r7, sp, #16
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	607b      	str	r3, [r7, #4]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	817b      	strh	r3, [r7, #10]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d106      	bne.n	8009cf6 <tcp_output_alloc_header+0x26>
 8009ce8:	4b15      	ldr	r3, [pc, #84]	; (8009d40 <tcp_output_alloc_header+0x70>)
 8009cea:	f240 7242 	movw	r2, #1858	; 0x742
 8009cee:	4915      	ldr	r1, [pc, #84]	; (8009d44 <tcp_output_alloc_header+0x74>)
 8009cf0:	4815      	ldr	r0, [pc, #84]	; (8009d48 <tcp_output_alloc_header+0x78>)
 8009cf2:	f003 f881 	bl	800cdf8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	8adb      	ldrh	r3, [r3, #22]
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	8b12      	ldrh	r2, [r2, #24]
 8009d02:	68f9      	ldr	r1, [r7, #12]
 8009d04:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8009d06:	893d      	ldrh	r5, [r7, #8]
 8009d08:	897c      	ldrh	r4, [r7, #10]
 8009d0a:	9103      	str	r1, [sp, #12]
 8009d0c:	2110      	movs	r1, #16
 8009d0e:	9102      	str	r1, [sp, #8]
 8009d10:	9201      	str	r2, [sp, #4]
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	462a      	mov	r2, r5
 8009d18:	4621      	mov	r1, r4
 8009d1a:	f7ff ff67 	bl	8009bec <tcp_output_alloc_header_common>
 8009d1e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d006      	beq.n	8009d34 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009d2e:	441a      	add	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8009d34:	697b      	ldr	r3, [r7, #20]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	0800f4f8 	.word	0x0800f4f8
 8009d44:	0800fc00 	.word	0x0800fc00
 8009d48:	0800f54c 	.word	0x0800f54c

08009d4c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b088      	sub	sp, #32
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	4611      	mov	r1, r2
 8009d58:	461a      	mov	r2, r3
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	71fb      	strb	r3, [r7, #7]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d106      	bne.n	8009d7a <tcp_output_fill_options+0x2e>
 8009d6c:	4b13      	ldr	r3, [pc, #76]	; (8009dbc <tcp_output_fill_options+0x70>)
 8009d6e:	f240 7256 	movw	r2, #1878	; 0x756
 8009d72:	4913      	ldr	r1, [pc, #76]	; (8009dc0 <tcp_output_fill_options+0x74>)
 8009d74:	4813      	ldr	r0, [pc, #76]	; (8009dc4 <tcp_output_fill_options+0x78>)
 8009d76:	f003 f83f 	bl	800cdf8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	3314      	adds	r3, #20
 8009d84:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	f103 0214 	add.w	r2, r3, #20
 8009d8c:	8bfb      	ldrh	r3, [r7, #30]
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4619      	mov	r1, r3
 8009d92:	79fb      	ldrb	r3, [r7, #7]
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	f003 0304 	and.w	r3, r3, #4
 8009d9a:	440b      	add	r3, r1
 8009d9c:	4413      	add	r3, r2
 8009d9e:	697a      	ldr	r2, [r7, #20]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d006      	beq.n	8009db2 <tcp_output_fill_options+0x66>
 8009da4:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <tcp_output_fill_options+0x70>)
 8009da6:	f240 7275 	movw	r2, #1909	; 0x775
 8009daa:	4907      	ldr	r1, [pc, #28]	; (8009dc8 <tcp_output_fill_options+0x7c>)
 8009dac:	4805      	ldr	r0, [pc, #20]	; (8009dc4 <tcp_output_fill_options+0x78>)
 8009dae:	f003 f823 	bl	800cdf8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8009db2:	bf00      	nop
 8009db4:	3720      	adds	r7, #32
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	0800f4f8 	.word	0x0800f4f8
 8009dc0:	0800fc28 	.word	0x0800fc28
 8009dc4:	0800f54c 	.word	0x0800f54c
 8009dc8:	0800fb20 	.word	0x0800fb20

08009dcc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b08a      	sub	sp, #40	; 0x28
 8009dd0:	af04      	add	r7, sp, #16
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
 8009dd8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d106      	bne.n	8009dee <tcp_output_control_segment+0x22>
 8009de0:	4b1c      	ldr	r3, [pc, #112]	; (8009e54 <tcp_output_control_segment+0x88>)
 8009de2:	f240 7287 	movw	r2, #1927	; 0x787
 8009de6:	491c      	ldr	r1, [pc, #112]	; (8009e58 <tcp_output_control_segment+0x8c>)
 8009de8:	481c      	ldr	r0, [pc, #112]	; (8009e5c <tcp_output_control_segment+0x90>)
 8009dea:	f003 f805 	bl	800cdf8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	6879      	ldr	r1, [r7, #4]
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f7fe ff40 	bl	8008c78 <tcp_route>
 8009df8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d102      	bne.n	8009e06 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8009e00:	23fc      	movs	r3, #252	; 0xfc
 8009e02:	75fb      	strb	r3, [r7, #23]
 8009e04:	e01c      	b.n	8009e40 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d006      	beq.n	8009e1a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	7adb      	ldrb	r3, [r3, #11]
 8009e10:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	7a9b      	ldrb	r3, [r3, #10]
 8009e16:	757b      	strb	r3, [r7, #21]
 8009e18:	e003      	b.n	8009e22 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8009e1a:	23ff      	movs	r3, #255	; 0xff
 8009e1c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8009e22:	7dba      	ldrb	r2, [r7, #22]
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	9302      	str	r3, [sp, #8]
 8009e28:	2306      	movs	r3, #6
 8009e2a:	9301      	str	r3, [sp, #4]
 8009e2c:	7d7b      	ldrb	r3, [r7, #21]
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	4613      	mov	r3, r2
 8009e32:	683a      	ldr	r2, [r7, #0]
 8009e34:	6879      	ldr	r1, [r7, #4]
 8009e36:	68b8      	ldr	r0, [r7, #8]
 8009e38:	f001 ff6e 	bl	800bd18 <ip4_output_if>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8009e40:	68b8      	ldr	r0, [r7, #8]
 8009e42:	f7fa fde9 	bl	8004a18 <pbuf_free>
  return err;
 8009e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3718      	adds	r7, #24
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	0800f4f8 	.word	0x0800f4f8
 8009e58:	0800fc50 	.word	0x0800fc50
 8009e5c:	0800f54c 	.word	0x0800f54c

08009e60 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8009e60:	b590      	push	{r4, r7, lr}
 8009e62:	b08b      	sub	sp, #44	; 0x2c
 8009e64:	af04      	add	r7, sp, #16
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d106      	bne.n	8009e82 <tcp_rst+0x22>
 8009e74:	4b1f      	ldr	r3, [pc, #124]	; (8009ef4 <tcp_rst+0x94>)
 8009e76:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8009e7a:	491f      	ldr	r1, [pc, #124]	; (8009ef8 <tcp_rst+0x98>)
 8009e7c:	481f      	ldr	r0, [pc, #124]	; (8009efc <tcp_rst+0x9c>)
 8009e7e:	f002 ffbb 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8009e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d106      	bne.n	8009e96 <tcp_rst+0x36>
 8009e88:	4b1a      	ldr	r3, [pc, #104]	; (8009ef4 <tcp_rst+0x94>)
 8009e8a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8009e8e:	491c      	ldr	r1, [pc, #112]	; (8009f00 <tcp_rst+0xa0>)
 8009e90:	481a      	ldr	r0, [pc, #104]	; (8009efc <tcp_rst+0x9c>)
 8009e92:	f002 ffb1 	bl	800cdf8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009e96:	2300      	movs	r3, #0
 8009e98:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8009e9a:	f246 0308 	movw	r3, #24584	; 0x6008
 8009e9e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	b29c      	uxth	r4, r3
 8009ea4:	68b8      	ldr	r0, [r7, #8]
 8009ea6:	f7f9 fb18 	bl	80034da <lwip_htonl>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	8abb      	ldrh	r3, [r7, #20]
 8009eae:	9303      	str	r3, [sp, #12]
 8009eb0:	2314      	movs	r3, #20
 8009eb2:	9302      	str	r3, [sp, #8]
 8009eb4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009eb6:	9301      	str	r3, [sp, #4]
 8009eb8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	4621      	mov	r1, r4
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7ff fe92 	bl	8009bec <tcp_output_alloc_header_common>
 8009ec8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00c      	beq.n	8009eea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8009ed0:	7dfb      	ldrb	r3, [r7, #23]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	6939      	ldr	r1, [r7, #16]
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f7ff ff38 	bl	8009d4c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8009edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	6939      	ldr	r1, [r7, #16]
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f7ff ff72 	bl	8009dcc <tcp_output_control_segment>
 8009ee8:	e000      	b.n	8009eec <tcp_rst+0x8c>
    return;
 8009eea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009eec:	371c      	adds	r7, #28
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd90      	pop	{r4, r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	0800f4f8 	.word	0x0800f4f8
 8009ef8:	0800fc7c 	.word	0x0800fc7c
 8009efc:	0800f54c 	.word	0x0800f54c
 8009f00:	0800fc98 	.word	0x0800fc98

08009f04 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009f04:	b590      	push	{r4, r7, lr}
 8009f06:	b087      	sub	sp, #28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8009f10:	2300      	movs	r3, #0
 8009f12:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d106      	bne.n	8009f28 <tcp_send_empty_ack+0x24>
 8009f1a:	4b28      	ldr	r3, [pc, #160]	; (8009fbc <tcp_send_empty_ack+0xb8>)
 8009f1c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8009f20:	4927      	ldr	r1, [pc, #156]	; (8009fc0 <tcp_send_empty_ack+0xbc>)
 8009f22:	4828      	ldr	r0, [pc, #160]	; (8009fc4 <tcp_send_empty_ack+0xc0>)
 8009f24:	f002 ff68 	bl	800cdf8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	f003 0304 	and.w	r3, r3, #4
 8009f32:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009f34:	7d7b      	ldrb	r3, [r7, #21]
 8009f36:	b29c      	uxth	r4, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7f9 facc 	bl	80034da <lwip_htonl>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2200      	movs	r2, #0
 8009f46:	4621      	mov	r1, r4
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7ff fec1 	bl	8009cd0 <tcp_output_alloc_header>
 8009f4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d109      	bne.n	8009f6a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	8b5b      	ldrh	r3, [r3, #26]
 8009f5a:	f043 0303 	orr.w	r3, r3, #3
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009f64:	f06f 0301 	mvn.w	r3, #1
 8009f68:	e023      	b.n	8009fb2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8009f6a:	7dbb      	ldrb	r3, [r7, #22]
 8009f6c:	7dfa      	ldrb	r2, [r7, #23]
 8009f6e:	6939      	ldr	r1, [r7, #16]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f7ff feeb 	bl	8009d4c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	6939      	ldr	r1, [r7, #16]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f7ff ff24 	bl	8009dcc <tcp_output_control_segment>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d007      	beq.n	8009fa0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	8b5b      	ldrh	r3, [r3, #26]
 8009f94:	f043 0303 	orr.w	r3, r3, #3
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	835a      	strh	r2, [r3, #26]
 8009f9e:	e006      	b.n	8009fae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	8b5b      	ldrh	r3, [r3, #26]
 8009fa4:	f023 0303 	bic.w	r3, r3, #3
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8009fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	371c      	adds	r7, #28
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd90      	pop	{r4, r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	0800f4f8 	.word	0x0800f4f8
 8009fc0:	0800fcb4 	.word	0x0800fcb4
 8009fc4:	0800f54c 	.word	0x0800f54c

08009fc8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009fc8:	b590      	push	{r4, r7, lr}
 8009fca:	b087      	sub	sp, #28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d106      	bne.n	8009fe8 <tcp_keepalive+0x20>
 8009fda:	4b18      	ldr	r3, [pc, #96]	; (800a03c <tcp_keepalive+0x74>)
 8009fdc:	f640 0224 	movw	r2, #2084	; 0x824
 8009fe0:	4917      	ldr	r1, [pc, #92]	; (800a040 <tcp_keepalive+0x78>)
 8009fe2:	4818      	ldr	r0, [pc, #96]	; (800a044 <tcp_keepalive+0x7c>)
 8009fe4:	f002 ff08 	bl	800cdf8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	b29c      	uxth	r4, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7f9 fa71 	bl	80034da <lwip_htonl>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7ff fe66 	bl	8009cd0 <tcp_output_alloc_header>
 800a004:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d102      	bne.n	800a012 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a00c:	f04f 33ff 	mov.w	r3, #4294967295
 800a010:	e010      	b.n	800a034 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a012:	7dfb      	ldrb	r3, [r7, #23]
 800a014:	2200      	movs	r2, #0
 800a016:	6939      	ldr	r1, [r7, #16]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f7ff fe97 	bl	8009d4c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	3304      	adds	r3, #4
 800a024:	6939      	ldr	r1, [r7, #16]
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7ff fed0 	bl	8009dcc <tcp_output_control_segment>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a030:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a034:	4618      	mov	r0, r3
 800a036:	371c      	adds	r7, #28
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd90      	pop	{r4, r7, pc}
 800a03c:	0800f4f8 	.word	0x0800f4f8
 800a040:	0800fcd4 	.word	0x0800fcd4
 800a044:	0800f54c 	.word	0x0800f54c

0800a048 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a048:	b590      	push	{r4, r7, lr}
 800a04a:	b08b      	sub	sp, #44	; 0x2c
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a050:	2300      	movs	r3, #0
 800a052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d106      	bne.n	800a06a <tcp_zero_window_probe+0x22>
 800a05c:	4b4c      	ldr	r3, [pc, #304]	; (800a190 <tcp_zero_window_probe+0x148>)
 800a05e:	f640 024f 	movw	r2, #2127	; 0x84f
 800a062:	494c      	ldr	r1, [pc, #304]	; (800a194 <tcp_zero_window_probe+0x14c>)
 800a064:	484c      	ldr	r0, [pc, #304]	; (800a198 <tcp_zero_window_probe+0x150>)
 800a066:	f002 fec7 	bl	800cdf8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a06e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800a070:	6a3b      	ldr	r3, [r7, #32]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	e086      	b.n	800a188 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a080:	2bff      	cmp	r3, #255	; 0xff
 800a082:	d007      	beq.n	800a094 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a08a:	3301      	adds	r3, #1
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a094:	6a3b      	ldr	r3, [r7, #32]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	899b      	ldrh	r3, [r3, #12]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7f9 fa07 	bl	80034b0 <lwip_htons>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	f003 0301 	and.w	r3, r3, #1
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d005      	beq.n	800a0ba <tcp_zero_window_probe+0x72>
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	891b      	ldrh	r3, [r3, #8]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <tcp_zero_window_probe+0x72>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e000      	b.n	800a0bc <tcp_zero_window_probe+0x74>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a0be:	7ffb      	ldrb	r3, [r7, #31]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	bf0c      	ite	eq
 800a0c4:	2301      	moveq	r3, #1
 800a0c6:	2300      	movne	r3, #0
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a0cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0d0:	b299      	uxth	r1, r3
 800a0d2:	6a3b      	ldr	r3, [r7, #32]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	8bba      	ldrh	r2, [r7, #28]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7ff fdf8 	bl	8009cd0 <tcp_output_alloc_header>
 800a0e0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d102      	bne.n	800a0ee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ec:	e04c      	b.n	800a188 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a0f4:	7ffb      	ldrb	r3, [r7, #31]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d011      	beq.n	800a11e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	899b      	ldrh	r3, [r3, #12]
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	b21b      	sxth	r3, r3
 800a102:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a106:	b21c      	sxth	r4, r3
 800a108:	2011      	movs	r0, #17
 800a10a:	f7f9 f9d1 	bl	80034b0 <lwip_htons>
 800a10e:	4603      	mov	r3, r0
 800a110:	b21b      	sxth	r3, r3
 800a112:	4323      	orrs	r3, r4
 800a114:	b21b      	sxth	r3, r3
 800a116:	b29a      	uxth	r2, r3
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	819a      	strh	r2, [r3, #12]
 800a11c:	e010      	b.n	800a140 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	3314      	adds	r3, #20
 800a124:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	6858      	ldr	r0, [r3, #4]
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	891a      	ldrh	r2, [r3, #8]
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	891b      	ldrh	r3, [r3, #8]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	b29b      	uxth	r3, r3
 800a138:	2201      	movs	r2, #1
 800a13a:	6939      	ldr	r1, [r7, #16]
 800a13c:	f7fa fe56 	bl	8004dec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	4618      	mov	r0, r3
 800a148:	f7f9 f9c7 	bl	80034da <lwip_htonl>
 800a14c:	4603      	mov	r3, r0
 800a14e:	3301      	adds	r3, #1
 800a150:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	da02      	bge.n	800a164 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a168:	2200      	movs	r2, #0
 800a16a:	69b9      	ldr	r1, [r7, #24]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff fded 	bl	8009d4c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	3304      	adds	r3, #4
 800a178:	69b9      	ldr	r1, [r7, #24]
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7ff fe26 	bl	8009dcc <tcp_output_control_segment>
 800a180:	4603      	mov	r3, r0
 800a182:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a184:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	372c      	adds	r7, #44	; 0x2c
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd90      	pop	{r4, r7, pc}
 800a190:	0800f4f8 	.word	0x0800f4f8
 800a194:	0800fcf0 	.word	0x0800fcf0
 800a198:	0800f54c 	.word	0x0800f54c

0800a19c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a1a4:	f7fa ff10 	bl	8004fc8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a1a8:	4b0a      	ldr	r3, [pc, #40]	; (800a1d4 <tcpip_tcp_timer+0x38>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d103      	bne.n	800a1b8 <tcpip_tcp_timer+0x1c>
 800a1b0:	4b09      	ldr	r3, [pc, #36]	; (800a1d8 <tcpip_tcp_timer+0x3c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d005      	beq.n	800a1c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	4908      	ldr	r1, [pc, #32]	; (800a1dc <tcpip_tcp_timer+0x40>)
 800a1bc:	20fa      	movs	r0, #250	; 0xfa
 800a1be:	f000 f8f3 	bl	800a3a8 <sys_timeout>
 800a1c2:	e003      	b.n	800a1cc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a1c4:	4b06      	ldr	r3, [pc, #24]	; (800a1e0 <tcpip_tcp_timer+0x44>)
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	601a      	str	r2, [r3, #0]
  }
}
 800a1ca:	bf00      	nop
 800a1cc:	bf00      	nop
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	20008a50 	.word	0x20008a50
 800a1d8:	20008a60 	.word	0x20008a60
 800a1dc:	0800a19d 	.word	0x0800a19d
 800a1e0:	20000108 	.word	0x20000108

0800a1e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a1e8:	4b0a      	ldr	r3, [pc, #40]	; (800a214 <tcp_timer_needed+0x30>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10f      	bne.n	800a210 <tcp_timer_needed+0x2c>
 800a1f0:	4b09      	ldr	r3, [pc, #36]	; (800a218 <tcp_timer_needed+0x34>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d103      	bne.n	800a200 <tcp_timer_needed+0x1c>
 800a1f8:	4b08      	ldr	r3, [pc, #32]	; (800a21c <tcp_timer_needed+0x38>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d007      	beq.n	800a210 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a200:	4b04      	ldr	r3, [pc, #16]	; (800a214 <tcp_timer_needed+0x30>)
 800a202:	2201      	movs	r2, #1
 800a204:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a206:	2200      	movs	r2, #0
 800a208:	4905      	ldr	r1, [pc, #20]	; (800a220 <tcp_timer_needed+0x3c>)
 800a20a:	20fa      	movs	r0, #250	; 0xfa
 800a20c:	f000 f8cc 	bl	800a3a8 <sys_timeout>
  }
}
 800a210:	bf00      	nop
 800a212:	bd80      	pop	{r7, pc}
 800a214:	20000108 	.word	0x20000108
 800a218:	20008a50 	.word	0x20008a50
 800a21c:	20008a60 	.word	0x20008a60
 800a220:	0800a19d 	.word	0x0800a19d

0800a224 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a230:	2006      	movs	r0, #6
 800a232:	f7f9 fd93 	bl	8003d5c <memp_malloc>
 800a236:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d109      	bne.n	800a252 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d151      	bne.n	800a2e8 <sys_timeout_abs+0xc4>
 800a244:	4b2a      	ldr	r3, [pc, #168]	; (800a2f0 <sys_timeout_abs+0xcc>)
 800a246:	22be      	movs	r2, #190	; 0xbe
 800a248:	492a      	ldr	r1, [pc, #168]	; (800a2f4 <sys_timeout_abs+0xd0>)
 800a24a:	482b      	ldr	r0, [pc, #172]	; (800a2f8 <sys_timeout_abs+0xd4>)
 800a24c:	f002 fdd4 	bl	800cdf8 <iprintf>
    return;
 800a250:	e04a      	b.n	800a2e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	2200      	movs	r2, #0
 800a256:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a26a:	4b24      	ldr	r3, [pc, #144]	; (800a2fc <sys_timeout_abs+0xd8>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d103      	bne.n	800a27a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800a272:	4a22      	ldr	r2, [pc, #136]	; (800a2fc <sys_timeout_abs+0xd8>)
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	6013      	str	r3, [r2, #0]
    return;
 800a278:	e037      	b.n	800a2ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	4b1f      	ldr	r3, [pc, #124]	; (800a2fc <sys_timeout_abs+0xd8>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	0fdb      	lsrs	r3, r3, #31
 800a288:	f003 0301 	and.w	r3, r3, #1
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d007      	beq.n	800a2a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800a292:	4b1a      	ldr	r3, [pc, #104]	; (800a2fc <sys_timeout_abs+0xd8>)
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a29a:	4a18      	ldr	r2, [pc, #96]	; (800a2fc <sys_timeout_abs+0xd8>)
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	e023      	b.n	800a2ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a2a2:	4b16      	ldr	r3, [pc, #88]	; (800a2fc <sys_timeout_abs+0xd8>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	e01a      	b.n	800a2e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00b      	beq.n	800a2ca <sys_timeout_abs+0xa6>
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	685a      	ldr	r2, [r3, #4]
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	0fdb      	lsrs	r3, r3, #31
 800a2c0:	f003 0301 	and.w	r3, r3, #1
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d007      	beq.n	800a2da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	601a      	str	r2, [r3, #0]
        break;
 800a2d8:	e007      	b.n	800a2ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1e1      	bne.n	800a2aa <sys_timeout_abs+0x86>
 800a2e6:	e000      	b.n	800a2ea <sys_timeout_abs+0xc6>
    return;
 800a2e8:	bf00      	nop
      }
    }
  }
}
 800a2ea:	3718      	adds	r7, #24
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	0800fd14 	.word	0x0800fd14
 800a2f4:	0800fd48 	.word	0x0800fd48
 800a2f8:	0800fd88 	.word	0x0800fd88
 800a2fc:	20000100 	.word	0x20000100

0800a300 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	4798      	blx	r3

  now = sys_now();
 800a312:	f7f9 f83f 	bl	8003394 <sys_now>
 800a316:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	4b0f      	ldr	r3, [pc, #60]	; (800a35c <lwip_cyclic_timer+0x5c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4413      	add	r3, r2
 800a322:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	0fdb      	lsrs	r3, r3, #31
 800a32c:	f003 0301 	and.w	r3, r3, #1
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	d009      	beq.n	800a34a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	4413      	add	r3, r2
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	4907      	ldr	r1, [pc, #28]	; (800a360 <lwip_cyclic_timer+0x60>)
 800a342:	4618      	mov	r0, r3
 800a344:	f7ff ff6e 	bl	800a224 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800a348:	e004      	b.n	800a354 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	4904      	ldr	r1, [pc, #16]	; (800a360 <lwip_cyclic_timer+0x60>)
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f7ff ff68 	bl	800a224 <sys_timeout_abs>
}
 800a354:	bf00      	nop
 800a356:	3718      	adds	r7, #24
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	20000104 	.word	0x20000104
 800a360:	0800a301 	.word	0x0800a301

0800a364 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a36a:	2301      	movs	r3, #1
 800a36c:	607b      	str	r3, [r7, #4]
 800a36e:	e00e      	b.n	800a38e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800a370:	4a0b      	ldr	r2, [pc, #44]	; (800a3a0 <sys_timeouts_init+0x3c>)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	00db      	lsls	r3, r3, #3
 800a37c:	4a08      	ldr	r2, [pc, #32]	; (800a3a0 <sys_timeouts_init+0x3c>)
 800a37e:	4413      	add	r3, r2
 800a380:	461a      	mov	r2, r3
 800a382:	4908      	ldr	r1, [pc, #32]	; (800a3a4 <sys_timeouts_init+0x40>)
 800a384:	f000 f810 	bl	800a3a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	3301      	adds	r3, #1
 800a38c:	607b      	str	r3, [r7, #4]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2b02      	cmp	r3, #2
 800a392:	d9ed      	bls.n	800a370 <sys_timeouts_init+0xc>
  }
}
 800a394:	bf00      	nop
 800a396:	bf00      	nop
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	080108ec 	.word	0x080108ec
 800a3a4:	0800a301 	.word	0x0800a301

0800a3a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b086      	sub	sp, #24
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ba:	d306      	bcc.n	800a3ca <sys_timeout+0x22>
 800a3bc:	4b0a      	ldr	r3, [pc, #40]	; (800a3e8 <sys_timeout+0x40>)
 800a3be:	f240 1229 	movw	r2, #297	; 0x129
 800a3c2:	490a      	ldr	r1, [pc, #40]	; (800a3ec <sys_timeout+0x44>)
 800a3c4:	480a      	ldr	r0, [pc, #40]	; (800a3f0 <sys_timeout+0x48>)
 800a3c6:	f002 fd17 	bl	800cdf8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800a3ca:	f7f8 ffe3 	bl	8003394 <sys_now>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	68b9      	ldr	r1, [r7, #8]
 800a3da:	6978      	ldr	r0, [r7, #20]
 800a3dc:	f7ff ff22 	bl	800a224 <sys_timeout_abs>
#endif
}
 800a3e0:	bf00      	nop
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	0800fd14 	.word	0x0800fd14
 800a3ec:	0800fdb0 	.word	0x0800fdb0
 800a3f0:	0800fd88 	.word	0x0800fd88

0800a3f4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800a3fa:	f7f8 ffcb 	bl	8003394 <sys_now>
 800a3fe:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800a400:	4b1a      	ldr	r3, [pc, #104]	; (800a46c <sys_check_timeouts+0x78>)
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	b2db      	uxtb	r3, r3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <sys_check_timeouts+0x1a>
 800a40a:	f7f9 ffcb 	bl	80043a4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800a40e:	4b18      	ldr	r3, [pc, #96]	; (800a470 <sys_check_timeouts+0x7c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d022      	beq.n	800a460 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	0fdb      	lsrs	r3, r3, #31
 800a424:	f003 0301 	and.w	r3, r3, #1
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d11a      	bne.n	800a464 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a0f      	ldr	r2, [pc, #60]	; (800a470 <sys_check_timeouts+0x7c>)
 800a434:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	4a0b      	ldr	r2, [pc, #44]	; (800a474 <sys_check_timeouts+0x80>)
 800a448:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a44a:	68b9      	ldr	r1, [r7, #8]
 800a44c:	2006      	movs	r0, #6
 800a44e:	f7f9 fcd1 	bl	8003df4 <memp_free>
    if (handler != NULL) {
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d0d3      	beq.n	800a400 <sys_check_timeouts+0xc>
      handler(arg);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6838      	ldr	r0, [r7, #0]
 800a45c:	4798      	blx	r3
  do {
 800a45e:	e7cf      	b.n	800a400 <sys_check_timeouts+0xc>
      return;
 800a460:	bf00      	nop
 800a462:	e000      	b.n	800a466 <sys_check_timeouts+0x72>
      return;
 800a464:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	20008a48 	.word	0x20008a48
 800a470:	20000100 	.word	0x20000100
 800a474:	20000104 	.word	0x20000104

0800a478 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a47c:	f002 fcd4 	bl	800ce28 <rand>
 800a480:	4603      	mov	r3, r0
 800a482:	b29b      	uxth	r3, r3
 800a484:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a488:	b29b      	uxth	r3, r3
 800a48a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a48e:	b29a      	uxth	r2, r3
 800a490:	4b01      	ldr	r3, [pc, #4]	; (800a498 <udp_init+0x20>)
 800a492:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a494:	bf00      	nop
 800a496:	bd80      	pop	{r7, pc}
 800a498:	20000010 	.word	0x20000010

0800a49c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d105      	bne.n	800a4bc <udp_input_local_match+0x20>
 800a4b0:	4b27      	ldr	r3, [pc, #156]	; (800a550 <udp_input_local_match+0xb4>)
 800a4b2:	2287      	movs	r2, #135	; 0x87
 800a4b4:	4927      	ldr	r1, [pc, #156]	; (800a554 <udp_input_local_match+0xb8>)
 800a4b6:	4828      	ldr	r0, [pc, #160]	; (800a558 <udp_input_local_match+0xbc>)
 800a4b8:	f002 fc9e 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d105      	bne.n	800a4ce <udp_input_local_match+0x32>
 800a4c2:	4b23      	ldr	r3, [pc, #140]	; (800a550 <udp_input_local_match+0xb4>)
 800a4c4:	2288      	movs	r2, #136	; 0x88
 800a4c6:	4925      	ldr	r1, [pc, #148]	; (800a55c <udp_input_local_match+0xc0>)
 800a4c8:	4823      	ldr	r0, [pc, #140]	; (800a558 <udp_input_local_match+0xbc>)
 800a4ca:	f002 fc95 	bl	800cdf8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	7a1b      	ldrb	r3, [r3, #8]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00b      	beq.n	800a4ee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	7a1a      	ldrb	r2, [r3, #8]
 800a4da:	4b21      	ldr	r3, [pc, #132]	; (800a560 <udp_input_local_match+0xc4>)
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d001      	beq.n	800a4ee <udp_input_local_match+0x52>
    return 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	e02b      	b.n	800a546 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a4ee:	79fb      	ldrb	r3, [r7, #7]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d018      	beq.n	800a526 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d013      	beq.n	800a522 <udp_input_local_match+0x86>
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00f      	beq.n	800a522 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a502:	4b17      	ldr	r3, [pc, #92]	; (800a560 <udp_input_local_match+0xc4>)
 800a504:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50a:	d00a      	beq.n	800a522 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	4b13      	ldr	r3, [pc, #76]	; (800a560 <udp_input_local_match+0xc4>)
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	405a      	eors	r2, r3
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	3308      	adds	r3, #8
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d110      	bne.n	800a544 <udp_input_local_match+0xa8>
          return 1;
 800a522:	2301      	movs	r3, #1
 800a524:	e00f      	b.n	800a546 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d009      	beq.n	800a540 <udp_input_local_match+0xa4>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d005      	beq.n	800a540 <udp_input_local_match+0xa4>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	4b09      	ldr	r3, [pc, #36]	; (800a560 <udp_input_local_match+0xc4>)
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d101      	bne.n	800a544 <udp_input_local_match+0xa8>
        return 1;
 800a540:	2301      	movs	r3, #1
 800a542:	e000      	b.n	800a546 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	0800fdfc 	.word	0x0800fdfc
 800a554:	0800fe2c 	.word	0x0800fe2c
 800a558:	0800fe50 	.word	0x0800fe50
 800a55c:	0800fe78 	.word	0x0800fe78
 800a560:	2000334c 	.word	0x2000334c

0800a564 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a564:	b590      	push	{r4, r7, lr}
 800a566:	b08d      	sub	sp, #52	; 0x34
 800a568:	af02      	add	r7, sp, #8
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d105      	bne.n	800a584 <udp_input+0x20>
 800a578:	4b7c      	ldr	r3, [pc, #496]	; (800a76c <udp_input+0x208>)
 800a57a:	22cf      	movs	r2, #207	; 0xcf
 800a57c:	497c      	ldr	r1, [pc, #496]	; (800a770 <udp_input+0x20c>)
 800a57e:	487d      	ldr	r0, [pc, #500]	; (800a774 <udp_input+0x210>)
 800a580:	f002 fc3a 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d105      	bne.n	800a596 <udp_input+0x32>
 800a58a:	4b78      	ldr	r3, [pc, #480]	; (800a76c <udp_input+0x208>)
 800a58c:	22d0      	movs	r2, #208	; 0xd0
 800a58e:	497a      	ldr	r1, [pc, #488]	; (800a778 <udp_input+0x214>)
 800a590:	4878      	ldr	r0, [pc, #480]	; (800a774 <udp_input+0x210>)
 800a592:	f002 fc31 	bl	800cdf8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	895b      	ldrh	r3, [r3, #10]
 800a59a:	2b07      	cmp	r3, #7
 800a59c:	d803      	bhi.n	800a5a6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7fa fa3a 	bl	8004a18 <pbuf_free>
    goto end;
 800a5a4:	e0de      	b.n	800a764 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a5ac:	4b73      	ldr	r3, [pc, #460]	; (800a77c <udp_input+0x218>)
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	4a72      	ldr	r2, [pc, #456]	; (800a77c <udp_input+0x218>)
 800a5b2:	6812      	ldr	r2, [r2, #0]
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f001 fc86 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7f8 ff72 	bl	80034b0 <lwip_htons>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	885b      	ldrh	r3, [r3, #2]
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7f8 ff6a 	bl	80034b0 <lwip_htons>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5ec:	4b64      	ldr	r3, [pc, #400]	; (800a780 <udp_input+0x21c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a5f2:	e054      	b.n	800a69e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f6:	8a5b      	ldrh	r3, [r3, #18]
 800a5f8:	89fa      	ldrh	r2, [r7, #14]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d14a      	bne.n	800a694 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800a5fe:	7cfb      	ldrb	r3, [r7, #19]
 800a600:	461a      	mov	r2, r3
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a606:	f7ff ff49 	bl	800a49c <udp_input_local_match>
 800a60a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d041      	beq.n	800a694 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a612:	7c1b      	ldrb	r3, [r3, #16]
 800a614:	f003 0304 	and.w	r3, r3, #4
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d11d      	bne.n	800a658 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d102      	bne.n	800a628 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a624:	61fb      	str	r3, [r7, #28]
 800a626:	e017      	b.n	800a658 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800a628:	7cfb      	ldrb	r3, [r7, #19]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d014      	beq.n	800a658 <udp_input+0xf4>
 800a62e:	4b53      	ldr	r3, [pc, #332]	; (800a77c <udp_input+0x218>)
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a636:	d10f      	bne.n	800a658 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	3304      	adds	r3, #4
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d008      	beq.n	800a658 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800a646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	3304      	adds	r3, #4
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	429a      	cmp	r2, r3
 800a652:	d101      	bne.n	800a658 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	8a9b      	ldrh	r3, [r3, #20]
 800a65c:	8a3a      	ldrh	r2, [r7, #16]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d118      	bne.n	800a694 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a666:	2b00      	cmp	r3, #0
 800a668:	d005      	beq.n	800a676 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	4b43      	ldr	r3, [pc, #268]	; (800a77c <udp_input+0x218>)
 800a670:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a672:	429a      	cmp	r2, r3
 800a674:	d10e      	bne.n	800a694 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d014      	beq.n	800a6a6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800a67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67e:	68da      	ldr	r2, [r3, #12]
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800a684:	4b3e      	ldr	r3, [pc, #248]	; (800a780 <udp_input+0x21c>)
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800a68c:	4a3c      	ldr	r2, [pc, #240]	; (800a780 <udp_input+0x21c>)
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800a692:	e008      	b.n	800a6a6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800a694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a696:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	627b      	str	r3, [r7, #36]	; 0x24
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d1a7      	bne.n	800a5f4 <udp_input+0x90>
 800a6a4:	e000      	b.n	800a6a8 <udp_input+0x144>
        break;
 800a6a6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d101      	bne.n	800a6b2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d002      	beq.n	800a6be <udp_input+0x15a>
    for_us = 1;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	76fb      	strb	r3, [r7, #27]
 800a6bc:	e00a      	b.n	800a6d4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	3304      	adds	r3, #4
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	4b2d      	ldr	r3, [pc, #180]	; (800a77c <udp_input+0x218>)
 800a6c6:	695b      	ldr	r3, [r3, #20]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	bf0c      	ite	eq
 800a6cc:	2301      	moveq	r3, #1
 800a6ce:	2300      	movne	r3, #0
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800a6d4:	7efb      	ldrb	r3, [r7, #27]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d041      	beq.n	800a75e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800a6da:	2108      	movs	r1, #8
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7fa f915 	bl	800490c <pbuf_remove_header>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00a      	beq.n	800a6fe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800a6e8:	4b20      	ldr	r3, [pc, #128]	; (800a76c <udp_input+0x208>)
 800a6ea:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800a6ee:	4925      	ldr	r1, [pc, #148]	; (800a784 <udp_input+0x220>)
 800a6f0:	4820      	ldr	r0, [pc, #128]	; (800a774 <udp_input+0x210>)
 800a6f2:	f002 fb81 	bl	800cdf8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7fa f98e 	bl	8004a18 <pbuf_free>
      goto end;
 800a6fc:	e032      	b.n	800a764 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	2b00      	cmp	r3, #0
 800a702:	d012      	beq.n	800a72a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00a      	beq.n	800a722 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70e:	699c      	ldr	r4, [r3, #24]
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	69d8      	ldr	r0, [r3, #28]
 800a714:	8a3b      	ldrh	r3, [r7, #16]
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	4b1b      	ldr	r3, [pc, #108]	; (800a788 <udp_input+0x224>)
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a71e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800a720:	e021      	b.n	800a766 <udp_input+0x202>
        pbuf_free(p);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7fa f978 	bl	8004a18 <pbuf_free>
        goto end;
 800a728:	e01c      	b.n	800a764 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a72a:	7cfb      	ldrb	r3, [r7, #19]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d112      	bne.n	800a756 <udp_input+0x1f2>
 800a730:	4b12      	ldr	r3, [pc, #72]	; (800a77c <udp_input+0x218>)
 800a732:	695b      	ldr	r3, [r3, #20]
 800a734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a738:	2be0      	cmp	r3, #224	; 0xe0
 800a73a:	d00c      	beq.n	800a756 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a73c:	4b0f      	ldr	r3, [pc, #60]	; (800a77c <udp_input+0x218>)
 800a73e:	899b      	ldrh	r3, [r3, #12]
 800a740:	3308      	adds	r3, #8
 800a742:	b29b      	uxth	r3, r3
 800a744:	b21b      	sxth	r3, r3
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f7fa f952 	bl	80049f2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a74e:	2103      	movs	r1, #3
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f001 f899 	bl	800b888 <icmp_dest_unreach>
      pbuf_free(p);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f7fa f95e 	bl	8004a18 <pbuf_free>
  return;
 800a75c:	e003      	b.n	800a766 <udp_input+0x202>
    pbuf_free(p);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f7fa f95a 	bl	8004a18 <pbuf_free>
  return;
 800a764:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800a766:	372c      	adds	r7, #44	; 0x2c
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd90      	pop	{r4, r7, pc}
 800a76c:	0800fdfc 	.word	0x0800fdfc
 800a770:	0800fea0 	.word	0x0800fea0
 800a774:	0800fe50 	.word	0x0800fe50
 800a778:	0800feb8 	.word	0x0800feb8
 800a77c:	2000334c 	.word	0x2000334c
 800a780:	20008a68 	.word	0x20008a68
 800a784:	0800fed4 	.word	0x0800fed4
 800a788:	2000335c 	.word	0x2000335c

0800a78c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d01e      	beq.n	800a7da <udp_netif_ip_addr_changed+0x4e>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d01a      	beq.n	800a7da <udp_netif_ip_addr_changed+0x4e>
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d017      	beq.n	800a7da <udp_netif_ip_addr_changed+0x4e>
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d013      	beq.n	800a7da <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a7b2:	4b0d      	ldr	r3, [pc, #52]	; (800a7e8 <udp_netif_ip_addr_changed+0x5c>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	60fb      	str	r3, [r7, #12]
 800a7b8:	e00c      	b.n	800a7d4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d103      	bne.n	800a7ce <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	60fb      	str	r3, [r7, #12]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1ef      	bne.n	800a7ba <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800a7da:	bf00      	nop
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	20008a68 	.word	0x20008a68

0800a7ec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a7f4:	4915      	ldr	r1, [pc, #84]	; (800a84c <etharp_free_entry+0x60>)
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	005b      	lsls	r3, r3, #1
 800a7fc:	4413      	add	r3, r2
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	440b      	add	r3, r1
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d013      	beq.n	800a830 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a808:	4910      	ldr	r1, [pc, #64]	; (800a84c <etharp_free_entry+0x60>)
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	4613      	mov	r3, r2
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	4413      	add	r3, r2
 800a812:	00db      	lsls	r3, r3, #3
 800a814:	440b      	add	r3, r1
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fa f8fd 	bl	8004a18 <pbuf_free>
    arp_table[i].q = NULL;
 800a81e:	490b      	ldr	r1, [pc, #44]	; (800a84c <etharp_free_entry+0x60>)
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	4613      	mov	r3, r2
 800a824:	005b      	lsls	r3, r3, #1
 800a826:	4413      	add	r3, r2
 800a828:	00db      	lsls	r3, r3, #3
 800a82a:	440b      	add	r3, r1
 800a82c:	2200      	movs	r2, #0
 800a82e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a830:	4906      	ldr	r1, [pc, #24]	; (800a84c <etharp_free_entry+0x60>)
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	4613      	mov	r3, r2
 800a836:	005b      	lsls	r3, r3, #1
 800a838:	4413      	add	r3, r2
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	440b      	add	r3, r1
 800a83e:	3314      	adds	r3, #20
 800a840:	2200      	movs	r2, #0
 800a842:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a844:	bf00      	nop
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	2000010c 	.word	0x2000010c

0800a850 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a856:	2300      	movs	r3, #0
 800a858:	607b      	str	r3, [r7, #4]
 800a85a:	e096      	b.n	800a98a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800a85c:	494f      	ldr	r1, [pc, #316]	; (800a99c <etharp_tmr+0x14c>)
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	4613      	mov	r3, r2
 800a862:	005b      	lsls	r3, r3, #1
 800a864:	4413      	add	r3, r2
 800a866:	00db      	lsls	r3, r3, #3
 800a868:	440b      	add	r3, r1
 800a86a:	3314      	adds	r3, #20
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 8086 	beq.w	800a984 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800a878:	4948      	ldr	r1, [pc, #288]	; (800a99c <etharp_tmr+0x14c>)
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	4613      	mov	r3, r2
 800a87e:	005b      	lsls	r3, r3, #1
 800a880:	4413      	add	r3, r2
 800a882:	00db      	lsls	r3, r3, #3
 800a884:	440b      	add	r3, r1
 800a886:	3312      	adds	r3, #18
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	3301      	adds	r3, #1
 800a88c:	b298      	uxth	r0, r3
 800a88e:	4943      	ldr	r1, [pc, #268]	; (800a99c <etharp_tmr+0x14c>)
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	4613      	mov	r3, r2
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	4413      	add	r3, r2
 800a898:	00db      	lsls	r3, r3, #3
 800a89a:	440b      	add	r3, r1
 800a89c:	3312      	adds	r3, #18
 800a89e:	4602      	mov	r2, r0
 800a8a0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a8a2:	493e      	ldr	r1, [pc, #248]	; (800a99c <etharp_tmr+0x14c>)
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	4413      	add	r3, r2
 800a8ac:	00db      	lsls	r3, r3, #3
 800a8ae:	440b      	add	r3, r1
 800a8b0:	3312      	adds	r3, #18
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a8b8:	d215      	bcs.n	800a8e6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a8ba:	4938      	ldr	r1, [pc, #224]	; (800a99c <etharp_tmr+0x14c>)
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	4413      	add	r3, r2
 800a8c4:	00db      	lsls	r3, r3, #3
 800a8c6:	440b      	add	r3, r1
 800a8c8:	3314      	adds	r3, #20
 800a8ca:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d10e      	bne.n	800a8ee <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800a8d0:	4932      	ldr	r1, [pc, #200]	; (800a99c <etharp_tmr+0x14c>)
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	005b      	lsls	r3, r3, #1
 800a8d8:	4413      	add	r3, r2
 800a8da:	00db      	lsls	r3, r3, #3
 800a8dc:	440b      	add	r3, r1
 800a8de:	3312      	adds	r3, #18
 800a8e0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a8e2:	2b04      	cmp	r3, #4
 800a8e4:	d903      	bls.n	800a8ee <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7ff ff80 	bl	800a7ec <etharp_free_entry>
 800a8ec:	e04a      	b.n	800a984 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a8ee:	492b      	ldr	r1, [pc, #172]	; (800a99c <etharp_tmr+0x14c>)
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	4413      	add	r3, r2
 800a8f8:	00db      	lsls	r3, r3, #3
 800a8fa:	440b      	add	r3, r1
 800a8fc:	3314      	adds	r3, #20
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	2b03      	cmp	r3, #3
 800a902:	d10a      	bne.n	800a91a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a904:	4925      	ldr	r1, [pc, #148]	; (800a99c <etharp_tmr+0x14c>)
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	4613      	mov	r3, r2
 800a90a:	005b      	lsls	r3, r3, #1
 800a90c:	4413      	add	r3, r2
 800a90e:	00db      	lsls	r3, r3, #3
 800a910:	440b      	add	r3, r1
 800a912:	3314      	adds	r3, #20
 800a914:	2204      	movs	r2, #4
 800a916:	701a      	strb	r2, [r3, #0]
 800a918:	e034      	b.n	800a984 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a91a:	4920      	ldr	r1, [pc, #128]	; (800a99c <etharp_tmr+0x14c>)
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	4613      	mov	r3, r2
 800a920:	005b      	lsls	r3, r3, #1
 800a922:	4413      	add	r3, r2
 800a924:	00db      	lsls	r3, r3, #3
 800a926:	440b      	add	r3, r1
 800a928:	3314      	adds	r3, #20
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	2b04      	cmp	r3, #4
 800a92e:	d10a      	bne.n	800a946 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a930:	491a      	ldr	r1, [pc, #104]	; (800a99c <etharp_tmr+0x14c>)
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	4613      	mov	r3, r2
 800a936:	005b      	lsls	r3, r3, #1
 800a938:	4413      	add	r3, r2
 800a93a:	00db      	lsls	r3, r3, #3
 800a93c:	440b      	add	r3, r1
 800a93e:	3314      	adds	r3, #20
 800a940:	2202      	movs	r2, #2
 800a942:	701a      	strb	r2, [r3, #0]
 800a944:	e01e      	b.n	800a984 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a946:	4915      	ldr	r1, [pc, #84]	; (800a99c <etharp_tmr+0x14c>)
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	4613      	mov	r3, r2
 800a94c:	005b      	lsls	r3, r3, #1
 800a94e:	4413      	add	r3, r2
 800a950:	00db      	lsls	r3, r3, #3
 800a952:	440b      	add	r3, r1
 800a954:	3314      	adds	r3, #20
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d113      	bne.n	800a984 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a95c:	490f      	ldr	r1, [pc, #60]	; (800a99c <etharp_tmr+0x14c>)
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	4613      	mov	r3, r2
 800a962:	005b      	lsls	r3, r3, #1
 800a964:	4413      	add	r3, r2
 800a966:	00db      	lsls	r3, r3, #3
 800a968:	440b      	add	r3, r1
 800a96a:	3308      	adds	r3, #8
 800a96c:	6818      	ldr	r0, [r3, #0]
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	4613      	mov	r3, r2
 800a972:	005b      	lsls	r3, r3, #1
 800a974:	4413      	add	r3, r2
 800a976:	00db      	lsls	r3, r3, #3
 800a978:	4a08      	ldr	r2, [pc, #32]	; (800a99c <etharp_tmr+0x14c>)
 800a97a:	4413      	add	r3, r2
 800a97c:	3304      	adds	r3, #4
 800a97e:	4619      	mov	r1, r3
 800a980:	f000 fe6e 	bl	800b660 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3301      	adds	r3, #1
 800a988:	607b      	str	r3, [r7, #4]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2b09      	cmp	r3, #9
 800a98e:	f77f af65 	ble.w	800a85c <etharp_tmr+0xc>
      }
    }
  }
}
 800a992:	bf00      	nop
 800a994:	bf00      	nop
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	2000010c 	.word	0x2000010c

0800a9a0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b08a      	sub	sp, #40	; 0x28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a9ae:	230a      	movs	r3, #10
 800a9b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a9b2:	230a      	movs	r3, #10
 800a9b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800a9b6:	230a      	movs	r3, #10
 800a9b8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800a9be:	230a      	movs	r3, #10
 800a9c0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	83bb      	strh	r3, [r7, #28]
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	837b      	strh	r3, [r7, #26]
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	843b      	strh	r3, [r7, #32]
 800a9d2:	e0ae      	b.n	800ab32 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800a9d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a9d8:	49a6      	ldr	r1, [pc, #664]	; (800ac74 <etharp_find_entry+0x2d4>)
 800a9da:	4613      	mov	r3, r2
 800a9dc:	005b      	lsls	r3, r3, #1
 800a9de:	4413      	add	r3, r2
 800a9e0:	00db      	lsls	r3, r3, #3
 800a9e2:	440b      	add	r3, r1
 800a9e4:	3314      	adds	r3, #20
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a9ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a9ee:	2b0a      	cmp	r3, #10
 800a9f0:	d105      	bne.n	800a9fe <etharp_find_entry+0x5e>
 800a9f2:	7dfb      	ldrb	r3, [r7, #23]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d102      	bne.n	800a9fe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800a9f8:	8c3b      	ldrh	r3, [r7, #32]
 800a9fa:	847b      	strh	r3, [r7, #34]	; 0x22
 800a9fc:	e095      	b.n	800ab2a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a9fe:	7dfb      	ldrb	r3, [r7, #23]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 8092 	beq.w	800ab2a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800aa06:	7dfb      	ldrb	r3, [r7, #23]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d009      	beq.n	800aa20 <etharp_find_entry+0x80>
 800aa0c:	7dfb      	ldrb	r3, [r7, #23]
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d806      	bhi.n	800aa20 <etharp_find_entry+0x80>
 800aa12:	4b99      	ldr	r3, [pc, #612]	; (800ac78 <etharp_find_entry+0x2d8>)
 800aa14:	f240 1223 	movw	r2, #291	; 0x123
 800aa18:	4998      	ldr	r1, [pc, #608]	; (800ac7c <etharp_find_entry+0x2dc>)
 800aa1a:	4899      	ldr	r0, [pc, #612]	; (800ac80 <etharp_find_entry+0x2e0>)
 800aa1c:	f002 f9ec 	bl	800cdf8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d020      	beq.n	800aa68 <etharp_find_entry+0xc8>
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6819      	ldr	r1, [r3, #0]
 800aa2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aa2e:	4891      	ldr	r0, [pc, #580]	; (800ac74 <etharp_find_entry+0x2d4>)
 800aa30:	4613      	mov	r3, r2
 800aa32:	005b      	lsls	r3, r3, #1
 800aa34:	4413      	add	r3, r2
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	4403      	add	r3, r0
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4299      	cmp	r1, r3
 800aa40:	d112      	bne.n	800aa68 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00c      	beq.n	800aa62 <etharp_find_entry+0xc2>
 800aa48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aa4c:	4989      	ldr	r1, [pc, #548]	; (800ac74 <etharp_find_entry+0x2d4>)
 800aa4e:	4613      	mov	r3, r2
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	4413      	add	r3, r2
 800aa54:	00db      	lsls	r3, r3, #3
 800aa56:	440b      	add	r3, r1
 800aa58:	3308      	adds	r3, #8
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d102      	bne.n	800aa68 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800aa62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800aa66:	e100      	b.n	800ac6a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800aa68:	7dfb      	ldrb	r3, [r7, #23]
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d140      	bne.n	800aaf0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800aa6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aa72:	4980      	ldr	r1, [pc, #512]	; (800ac74 <etharp_find_entry+0x2d4>)
 800aa74:	4613      	mov	r3, r2
 800aa76:	005b      	lsls	r3, r3, #1
 800aa78:	4413      	add	r3, r2
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	440b      	add	r3, r1
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d01a      	beq.n	800aaba <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800aa84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aa88:	497a      	ldr	r1, [pc, #488]	; (800ac74 <etharp_find_entry+0x2d4>)
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	005b      	lsls	r3, r3, #1
 800aa8e:	4413      	add	r3, r2
 800aa90:	00db      	lsls	r3, r3, #3
 800aa92:	440b      	add	r3, r1
 800aa94:	3312      	adds	r3, #18
 800aa96:	881b      	ldrh	r3, [r3, #0]
 800aa98:	8bba      	ldrh	r2, [r7, #28]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d845      	bhi.n	800ab2a <etharp_find_entry+0x18a>
            old_queue = i;
 800aa9e:	8c3b      	ldrh	r3, [r7, #32]
 800aaa0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800aaa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aaa6:	4973      	ldr	r1, [pc, #460]	; (800ac74 <etharp_find_entry+0x2d4>)
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	005b      	lsls	r3, r3, #1
 800aaac:	4413      	add	r3, r2
 800aaae:	00db      	lsls	r3, r3, #3
 800aab0:	440b      	add	r3, r1
 800aab2:	3312      	adds	r3, #18
 800aab4:	881b      	ldrh	r3, [r3, #0]
 800aab6:	83bb      	strh	r3, [r7, #28]
 800aab8:	e037      	b.n	800ab2a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800aaba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aabe:	496d      	ldr	r1, [pc, #436]	; (800ac74 <etharp_find_entry+0x2d4>)
 800aac0:	4613      	mov	r3, r2
 800aac2:	005b      	lsls	r3, r3, #1
 800aac4:	4413      	add	r3, r2
 800aac6:	00db      	lsls	r3, r3, #3
 800aac8:	440b      	add	r3, r1
 800aaca:	3312      	adds	r3, #18
 800aacc:	881b      	ldrh	r3, [r3, #0]
 800aace:	8b7a      	ldrh	r2, [r7, #26]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d82a      	bhi.n	800ab2a <etharp_find_entry+0x18a>
            old_pending = i;
 800aad4:	8c3b      	ldrh	r3, [r7, #32]
 800aad6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800aad8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aadc:	4965      	ldr	r1, [pc, #404]	; (800ac74 <etharp_find_entry+0x2d4>)
 800aade:	4613      	mov	r3, r2
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	4413      	add	r3, r2
 800aae4:	00db      	lsls	r3, r3, #3
 800aae6:	440b      	add	r3, r1
 800aae8:	3312      	adds	r3, #18
 800aaea:	881b      	ldrh	r3, [r3, #0]
 800aaec:	837b      	strh	r3, [r7, #26]
 800aaee:	e01c      	b.n	800ab2a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d919      	bls.n	800ab2a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800aaf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aafa:	495e      	ldr	r1, [pc, #376]	; (800ac74 <etharp_find_entry+0x2d4>)
 800aafc:	4613      	mov	r3, r2
 800aafe:	005b      	lsls	r3, r3, #1
 800ab00:	4413      	add	r3, r2
 800ab02:	00db      	lsls	r3, r3, #3
 800ab04:	440b      	add	r3, r1
 800ab06:	3312      	adds	r3, #18
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	8b3a      	ldrh	r2, [r7, #24]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d80c      	bhi.n	800ab2a <etharp_find_entry+0x18a>
            old_stable = i;
 800ab10:	8c3b      	ldrh	r3, [r7, #32]
 800ab12:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ab14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ab18:	4956      	ldr	r1, [pc, #344]	; (800ac74 <etharp_find_entry+0x2d4>)
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	4413      	add	r3, r2
 800ab20:	00db      	lsls	r3, r3, #3
 800ab22:	440b      	add	r3, r1
 800ab24:	3312      	adds	r3, #18
 800ab26:	881b      	ldrh	r3, [r3, #0]
 800ab28:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ab2a:	8c3b      	ldrh	r3, [r7, #32]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	843b      	strh	r3, [r7, #32]
 800ab32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ab36:	2b09      	cmp	r3, #9
 800ab38:	f77f af4c 	ble.w	800a9d4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ab3c:	7afb      	ldrb	r3, [r7, #11]
 800ab3e:	f003 0302 	and.w	r3, r3, #2
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d108      	bne.n	800ab58 <etharp_find_entry+0x1b8>
 800ab46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ab4a:	2b0a      	cmp	r3, #10
 800ab4c:	d107      	bne.n	800ab5e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ab4e:	7afb      	ldrb	r3, [r7, #11]
 800ab50:	f003 0301 	and.w	r3, r3, #1
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d102      	bne.n	800ab5e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ab58:	f04f 33ff 	mov.w	r3, #4294967295
 800ab5c:	e085      	b.n	800ac6a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ab5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ab62:	2b09      	cmp	r3, #9
 800ab64:	dc02      	bgt.n	800ab6c <etharp_find_entry+0x1cc>
    i = empty;
 800ab66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab68:	843b      	strh	r3, [r7, #32]
 800ab6a:	e039      	b.n	800abe0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ab6c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ab70:	2b09      	cmp	r3, #9
 800ab72:	dc14      	bgt.n	800ab9e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ab74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab76:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ab78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ab7c:	493d      	ldr	r1, [pc, #244]	; (800ac74 <etharp_find_entry+0x2d4>)
 800ab7e:	4613      	mov	r3, r2
 800ab80:	005b      	lsls	r3, r3, #1
 800ab82:	4413      	add	r3, r2
 800ab84:	00db      	lsls	r3, r3, #3
 800ab86:	440b      	add	r3, r1
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d018      	beq.n	800abc0 <etharp_find_entry+0x220>
 800ab8e:	4b3a      	ldr	r3, [pc, #232]	; (800ac78 <etharp_find_entry+0x2d8>)
 800ab90:	f240 126d 	movw	r2, #365	; 0x16d
 800ab94:	493b      	ldr	r1, [pc, #236]	; (800ac84 <etharp_find_entry+0x2e4>)
 800ab96:	483a      	ldr	r0, [pc, #232]	; (800ac80 <etharp_find_entry+0x2e0>)
 800ab98:	f002 f92e 	bl	800cdf8 <iprintf>
 800ab9c:	e010      	b.n	800abc0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ab9e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800aba2:	2b09      	cmp	r3, #9
 800aba4:	dc02      	bgt.n	800abac <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800aba6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aba8:	843b      	strh	r3, [r7, #32]
 800abaa:	e009      	b.n	800abc0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800abac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800abb0:	2b09      	cmp	r3, #9
 800abb2:	dc02      	bgt.n	800abba <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800abb4:	8bfb      	ldrh	r3, [r7, #30]
 800abb6:	843b      	strh	r3, [r7, #32]
 800abb8:	e002      	b.n	800abc0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800abba:	f04f 33ff 	mov.w	r3, #4294967295
 800abbe:	e054      	b.n	800ac6a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800abc0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800abc4:	2b09      	cmp	r3, #9
 800abc6:	dd06      	ble.n	800abd6 <etharp_find_entry+0x236>
 800abc8:	4b2b      	ldr	r3, [pc, #172]	; (800ac78 <etharp_find_entry+0x2d8>)
 800abca:	f240 127f 	movw	r2, #383	; 0x17f
 800abce:	492e      	ldr	r1, [pc, #184]	; (800ac88 <etharp_find_entry+0x2e8>)
 800abd0:	482b      	ldr	r0, [pc, #172]	; (800ac80 <etharp_find_entry+0x2e0>)
 800abd2:	f002 f911 	bl	800cdf8 <iprintf>
    etharp_free_entry(i);
 800abd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800abda:	4618      	mov	r0, r3
 800abdc:	f7ff fe06 	bl	800a7ec <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800abe0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800abe4:	2b09      	cmp	r3, #9
 800abe6:	dd06      	ble.n	800abf6 <etharp_find_entry+0x256>
 800abe8:	4b23      	ldr	r3, [pc, #140]	; (800ac78 <etharp_find_entry+0x2d8>)
 800abea:	f240 1283 	movw	r2, #387	; 0x183
 800abee:	4926      	ldr	r1, [pc, #152]	; (800ac88 <etharp_find_entry+0x2e8>)
 800abf0:	4823      	ldr	r0, [pc, #140]	; (800ac80 <etharp_find_entry+0x2e0>)
 800abf2:	f002 f901 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800abf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800abfa:	491e      	ldr	r1, [pc, #120]	; (800ac74 <etharp_find_entry+0x2d4>)
 800abfc:	4613      	mov	r3, r2
 800abfe:	005b      	lsls	r3, r3, #1
 800ac00:	4413      	add	r3, r2
 800ac02:	00db      	lsls	r3, r3, #3
 800ac04:	440b      	add	r3, r1
 800ac06:	3314      	adds	r3, #20
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d006      	beq.n	800ac1c <etharp_find_entry+0x27c>
 800ac0e:	4b1a      	ldr	r3, [pc, #104]	; (800ac78 <etharp_find_entry+0x2d8>)
 800ac10:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ac14:	491d      	ldr	r1, [pc, #116]	; (800ac8c <etharp_find_entry+0x2ec>)
 800ac16:	481a      	ldr	r0, [pc, #104]	; (800ac80 <etharp_find_entry+0x2e0>)
 800ac18:	f002 f8ee 	bl	800cdf8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00b      	beq.n	800ac3a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ac22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6819      	ldr	r1, [r3, #0]
 800ac2a:	4812      	ldr	r0, [pc, #72]	; (800ac74 <etharp_find_entry+0x2d4>)
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	005b      	lsls	r3, r3, #1
 800ac30:	4413      	add	r3, r2
 800ac32:	00db      	lsls	r3, r3, #3
 800ac34:	4403      	add	r3, r0
 800ac36:	3304      	adds	r3, #4
 800ac38:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ac3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ac3e:	490d      	ldr	r1, [pc, #52]	; (800ac74 <etharp_find_entry+0x2d4>)
 800ac40:	4613      	mov	r3, r2
 800ac42:	005b      	lsls	r3, r3, #1
 800ac44:	4413      	add	r3, r2
 800ac46:	00db      	lsls	r3, r3, #3
 800ac48:	440b      	add	r3, r1
 800ac4a:	3312      	adds	r3, #18
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ac50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ac54:	4907      	ldr	r1, [pc, #28]	; (800ac74 <etharp_find_entry+0x2d4>)
 800ac56:	4613      	mov	r3, r2
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	4413      	add	r3, r2
 800ac5c:	00db      	lsls	r3, r3, #3
 800ac5e:	440b      	add	r3, r1
 800ac60:	3308      	adds	r3, #8
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ac66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3728      	adds	r7, #40	; 0x28
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	2000010c 	.word	0x2000010c
 800ac78:	08010160 	.word	0x08010160
 800ac7c:	08010198 	.word	0x08010198
 800ac80:	080101d8 	.word	0x080101d8
 800ac84:	08010200 	.word	0x08010200
 800ac88:	08010218 	.word	0x08010218
 800ac8c:	0801022c 	.word	0x0801022c

0800ac90 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af02      	add	r7, sp, #8
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
 800ac9c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aca4:	2b06      	cmp	r3, #6
 800aca6:	d006      	beq.n	800acb6 <etharp_update_arp_entry+0x26>
 800aca8:	4b48      	ldr	r3, [pc, #288]	; (800adcc <etharp_update_arp_entry+0x13c>)
 800acaa:	f240 12a9 	movw	r2, #425	; 0x1a9
 800acae:	4948      	ldr	r1, [pc, #288]	; (800add0 <etharp_update_arp_entry+0x140>)
 800acb0:	4848      	ldr	r0, [pc, #288]	; (800add4 <etharp_update_arp_entry+0x144>)
 800acb2:	f002 f8a1 	bl	800cdf8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d012      	beq.n	800ace2 <etharp_update_arp_entry+0x52>
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00e      	beq.n	800ace2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68f9      	ldr	r1, [r7, #12]
 800acca:	4618      	mov	r0, r3
 800accc:	f001 f8fc 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800acd0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d105      	bne.n	800ace2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800acde:	2be0      	cmp	r3, #224	; 0xe0
 800ace0:	d102      	bne.n	800ace8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ace2:	f06f 030f 	mvn.w	r3, #15
 800ace6:	e06c      	b.n	800adc2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ace8:	78fb      	ldrb	r3, [r7, #3]
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	4619      	mov	r1, r3
 800acee:	68b8      	ldr	r0, [r7, #8]
 800acf0:	f7ff fe56 	bl	800a9a0 <etharp_find_entry>
 800acf4:	4603      	mov	r3, r0
 800acf6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800acf8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	da02      	bge.n	800ad06 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ad00:	8afb      	ldrh	r3, [r7, #22]
 800ad02:	b25b      	sxtb	r3, r3
 800ad04:	e05d      	b.n	800adc2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ad06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad0a:	4933      	ldr	r1, [pc, #204]	; (800add8 <etharp_update_arp_entry+0x148>)
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	005b      	lsls	r3, r3, #1
 800ad10:	4413      	add	r3, r2
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	440b      	add	r3, r1
 800ad16:	3314      	adds	r3, #20
 800ad18:	2202      	movs	r2, #2
 800ad1a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ad1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad20:	492d      	ldr	r1, [pc, #180]	; (800add8 <etharp_update_arp_entry+0x148>)
 800ad22:	4613      	mov	r3, r2
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	4413      	add	r3, r2
 800ad28:	00db      	lsls	r3, r3, #3
 800ad2a:	440b      	add	r3, r1
 800ad2c:	3308      	adds	r3, #8
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ad32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad36:	4613      	mov	r3, r2
 800ad38:	005b      	lsls	r3, r3, #1
 800ad3a:	4413      	add	r3, r2
 800ad3c:	00db      	lsls	r3, r3, #3
 800ad3e:	3308      	adds	r3, #8
 800ad40:	4a25      	ldr	r2, [pc, #148]	; (800add8 <etharp_update_arp_entry+0x148>)
 800ad42:	4413      	add	r3, r2
 800ad44:	3304      	adds	r3, #4
 800ad46:	2206      	movs	r2, #6
 800ad48:	6879      	ldr	r1, [r7, #4]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f002 f83e 	bl	800cdcc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ad50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad54:	4920      	ldr	r1, [pc, #128]	; (800add8 <etharp_update_arp_entry+0x148>)
 800ad56:	4613      	mov	r3, r2
 800ad58:	005b      	lsls	r3, r3, #1
 800ad5a:	4413      	add	r3, r2
 800ad5c:	00db      	lsls	r3, r3, #3
 800ad5e:	440b      	add	r3, r1
 800ad60:	3312      	adds	r3, #18
 800ad62:	2200      	movs	r2, #0
 800ad64:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ad66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad6a:	491b      	ldr	r1, [pc, #108]	; (800add8 <etharp_update_arp_entry+0x148>)
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	005b      	lsls	r3, r3, #1
 800ad70:	4413      	add	r3, r2
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	440b      	add	r3, r1
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d021      	beq.n	800adc0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ad7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad80:	4915      	ldr	r1, [pc, #84]	; (800add8 <etharp_update_arp_entry+0x148>)
 800ad82:	4613      	mov	r3, r2
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	4413      	add	r3, r2
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	440b      	add	r3, r1
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ad90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad94:	4910      	ldr	r1, [pc, #64]	; (800add8 <etharp_update_arp_entry+0x148>)
 800ad96:	4613      	mov	r3, r2
 800ad98:	005b      	lsls	r3, r3, #1
 800ad9a:	4413      	add	r3, r2
 800ad9c:	00db      	lsls	r3, r3, #3
 800ad9e:	440b      	add	r3, r1
 800ada0:	2200      	movs	r2, #0
 800ada2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800adaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6939      	ldr	r1, [r7, #16]
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f001 ff8f 	bl	800ccd8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800adba:	6938      	ldr	r0, [r7, #16]
 800adbc:	f7f9 fe2c 	bl	8004a18 <pbuf_free>
  }
  return ERR_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3718      	adds	r7, #24
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	08010160 	.word	0x08010160
 800add0:	08010258 	.word	0x08010258
 800add4:	080101d8 	.word	0x080101d8
 800add8:	2000010c 	.word	0x2000010c

0800addc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ade4:	2300      	movs	r3, #0
 800ade6:	60fb      	str	r3, [r7, #12]
 800ade8:	e01e      	b.n	800ae28 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800adea:	4913      	ldr	r1, [pc, #76]	; (800ae38 <etharp_cleanup_netif+0x5c>)
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	4613      	mov	r3, r2
 800adf0:	005b      	lsls	r3, r3, #1
 800adf2:	4413      	add	r3, r2
 800adf4:	00db      	lsls	r3, r3, #3
 800adf6:	440b      	add	r3, r1
 800adf8:	3314      	adds	r3, #20
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800adfe:	7afb      	ldrb	r3, [r7, #11]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00e      	beq.n	800ae22 <etharp_cleanup_netif+0x46>
 800ae04:	490c      	ldr	r1, [pc, #48]	; (800ae38 <etharp_cleanup_netif+0x5c>)
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	005b      	lsls	r3, r3, #1
 800ae0c:	4413      	add	r3, r2
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	440b      	add	r3, r1
 800ae12:	3308      	adds	r3, #8
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d102      	bne.n	800ae22 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f7ff fce5 	bl	800a7ec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3301      	adds	r3, #1
 800ae26:	60fb      	str	r3, [r7, #12]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2b09      	cmp	r3, #9
 800ae2c:	dddd      	ble.n	800adea <etharp_cleanup_netif+0xe>
    }
  }
}
 800ae2e:	bf00      	nop
 800ae30:	bf00      	nop
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	2000010c 	.word	0x2000010c

0800ae3c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ae3c:	b5b0      	push	{r4, r5, r7, lr}
 800ae3e:	b08a      	sub	sp, #40	; 0x28
 800ae40:	af04      	add	r7, sp, #16
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d107      	bne.n	800ae5c <etharp_input+0x20>
 800ae4c:	4b3d      	ldr	r3, [pc, #244]	; (800af44 <etharp_input+0x108>)
 800ae4e:	f240 228a 	movw	r2, #650	; 0x28a
 800ae52:	493d      	ldr	r1, [pc, #244]	; (800af48 <etharp_input+0x10c>)
 800ae54:	483d      	ldr	r0, [pc, #244]	; (800af4c <etharp_input+0x110>)
 800ae56:	f001 ffcf 	bl	800cdf8 <iprintf>
 800ae5a:	e06f      	b.n	800af3c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae6c:	d10c      	bne.n	800ae88 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ae72:	2b06      	cmp	r3, #6
 800ae74:	d108      	bne.n	800ae88 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ae7a:	2b04      	cmp	r3, #4
 800ae7c:	d104      	bne.n	800ae88 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	885b      	ldrh	r3, [r3, #2]
 800ae82:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ae84:	2b08      	cmp	r3, #8
 800ae86:	d003      	beq.n	800ae90 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7f9 fdc5 	bl	8004a18 <pbuf_free>
    return;
 800ae8e:	e055      	b.n	800af3c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	330e      	adds	r3, #14
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	3318      	adds	r3, #24
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	3304      	adds	r3, #4
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d102      	bne.n	800aeb0 <etharp_input+0x74>
    for_us = 0;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	75fb      	strb	r3, [r7, #23]
 800aeae:	e009      	b.n	800aec4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	bf0c      	ite	eq
 800aebc:	2301      	moveq	r3, #1
 800aebe:	2300      	movne	r3, #0
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	f103 0208 	add.w	r2, r3, #8
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d001      	beq.n	800aed4 <etharp_input+0x98>
 800aed0:	2301      	movs	r3, #1
 800aed2:	e000      	b.n	800aed6 <etharp_input+0x9a>
 800aed4:	2302      	movs	r3, #2
 800aed6:	f107 010c 	add.w	r1, r7, #12
 800aeda:	6838      	ldr	r0, [r7, #0]
 800aedc:	f7ff fed8 	bl	800ac90 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	88db      	ldrh	r3, [r3, #6]
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeea:	d003      	beq.n	800aef4 <etharp_input+0xb8>
 800aeec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aef0:	d01e      	beq.n	800af30 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800aef2:	e020      	b.n	800af36 <etharp_input+0xfa>
      if (for_us) {
 800aef4:	7dfb      	ldrb	r3, [r7, #23]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d01c      	beq.n	800af34 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	3208      	adds	r2, #8
        etharp_raw(netif,
 800af14:	2102      	movs	r1, #2
 800af16:	9103      	str	r1, [sp, #12]
 800af18:	f107 010c 	add.w	r1, r7, #12
 800af1c:	9102      	str	r1, [sp, #8]
 800af1e:	9201      	str	r2, [sp, #4]
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	462b      	mov	r3, r5
 800af24:	4622      	mov	r2, r4
 800af26:	4601      	mov	r1, r0
 800af28:	6838      	ldr	r0, [r7, #0]
 800af2a:	f000 faeb 	bl	800b504 <etharp_raw>
      break;
 800af2e:	e001      	b.n	800af34 <etharp_input+0xf8>
      break;
 800af30:	bf00      	nop
 800af32:	e000      	b.n	800af36 <etharp_input+0xfa>
      break;
 800af34:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f7f9 fd6e 	bl	8004a18 <pbuf_free>
}
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bdb0      	pop	{r4, r5, r7, pc}
 800af42:	bf00      	nop
 800af44:	08010160 	.word	0x08010160
 800af48:	080102b0 	.word	0x080102b0
 800af4c:	080101d8 	.word	0x080101d8

0800af50 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af02      	add	r7, sp, #8
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	4613      	mov	r3, r2
 800af5c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800af5e:	79fa      	ldrb	r2, [r7, #7]
 800af60:	4944      	ldr	r1, [pc, #272]	; (800b074 <etharp_output_to_arp_index+0x124>)
 800af62:	4613      	mov	r3, r2
 800af64:	005b      	lsls	r3, r3, #1
 800af66:	4413      	add	r3, r2
 800af68:	00db      	lsls	r3, r3, #3
 800af6a:	440b      	add	r3, r1
 800af6c:	3314      	adds	r3, #20
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d806      	bhi.n	800af82 <etharp_output_to_arp_index+0x32>
 800af74:	4b40      	ldr	r3, [pc, #256]	; (800b078 <etharp_output_to_arp_index+0x128>)
 800af76:	f240 22ee 	movw	r2, #750	; 0x2ee
 800af7a:	4940      	ldr	r1, [pc, #256]	; (800b07c <etharp_output_to_arp_index+0x12c>)
 800af7c:	4840      	ldr	r0, [pc, #256]	; (800b080 <etharp_output_to_arp_index+0x130>)
 800af7e:	f001 ff3b 	bl	800cdf8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800af82:	79fa      	ldrb	r2, [r7, #7]
 800af84:	493b      	ldr	r1, [pc, #236]	; (800b074 <etharp_output_to_arp_index+0x124>)
 800af86:	4613      	mov	r3, r2
 800af88:	005b      	lsls	r3, r3, #1
 800af8a:	4413      	add	r3, r2
 800af8c:	00db      	lsls	r3, r3, #3
 800af8e:	440b      	add	r3, r1
 800af90:	3314      	adds	r3, #20
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	2b02      	cmp	r3, #2
 800af96:	d153      	bne.n	800b040 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800af98:	79fa      	ldrb	r2, [r7, #7]
 800af9a:	4936      	ldr	r1, [pc, #216]	; (800b074 <etharp_output_to_arp_index+0x124>)
 800af9c:	4613      	mov	r3, r2
 800af9e:	005b      	lsls	r3, r3, #1
 800afa0:	4413      	add	r3, r2
 800afa2:	00db      	lsls	r3, r3, #3
 800afa4:	440b      	add	r3, r1
 800afa6:	3312      	adds	r3, #18
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800afae:	d919      	bls.n	800afe4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800afb0:	79fa      	ldrb	r2, [r7, #7]
 800afb2:	4613      	mov	r3, r2
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	4413      	add	r3, r2
 800afb8:	00db      	lsls	r3, r3, #3
 800afba:	4a2e      	ldr	r2, [pc, #184]	; (800b074 <etharp_output_to_arp_index+0x124>)
 800afbc:	4413      	add	r3, r2
 800afbe:	3304      	adds	r3, #4
 800afc0:	4619      	mov	r1, r3
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 fb4c 	bl	800b660 <etharp_request>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d138      	bne.n	800b040 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800afce:	79fa      	ldrb	r2, [r7, #7]
 800afd0:	4928      	ldr	r1, [pc, #160]	; (800b074 <etharp_output_to_arp_index+0x124>)
 800afd2:	4613      	mov	r3, r2
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	4413      	add	r3, r2
 800afd8:	00db      	lsls	r3, r3, #3
 800afda:	440b      	add	r3, r1
 800afdc:	3314      	adds	r3, #20
 800afde:	2203      	movs	r2, #3
 800afe0:	701a      	strb	r2, [r3, #0]
 800afe2:	e02d      	b.n	800b040 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800afe4:	79fa      	ldrb	r2, [r7, #7]
 800afe6:	4923      	ldr	r1, [pc, #140]	; (800b074 <etharp_output_to_arp_index+0x124>)
 800afe8:	4613      	mov	r3, r2
 800afea:	005b      	lsls	r3, r3, #1
 800afec:	4413      	add	r3, r2
 800afee:	00db      	lsls	r3, r3, #3
 800aff0:	440b      	add	r3, r1
 800aff2:	3312      	adds	r3, #18
 800aff4:	881b      	ldrh	r3, [r3, #0]
 800aff6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800affa:	d321      	bcc.n	800b040 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800affc:	79fa      	ldrb	r2, [r7, #7]
 800affe:	4613      	mov	r3, r2
 800b000:	005b      	lsls	r3, r3, #1
 800b002:	4413      	add	r3, r2
 800b004:	00db      	lsls	r3, r3, #3
 800b006:	4a1b      	ldr	r2, [pc, #108]	; (800b074 <etharp_output_to_arp_index+0x124>)
 800b008:	4413      	add	r3, r2
 800b00a:	1d19      	adds	r1, r3, #4
 800b00c:	79fa      	ldrb	r2, [r7, #7]
 800b00e:	4613      	mov	r3, r2
 800b010:	005b      	lsls	r3, r3, #1
 800b012:	4413      	add	r3, r2
 800b014:	00db      	lsls	r3, r3, #3
 800b016:	3308      	adds	r3, #8
 800b018:	4a16      	ldr	r2, [pc, #88]	; (800b074 <etharp_output_to_arp_index+0x124>)
 800b01a:	4413      	add	r3, r2
 800b01c:	3304      	adds	r3, #4
 800b01e:	461a      	mov	r2, r3
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f000 fafb 	bl	800b61c <etharp_request_dst>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d109      	bne.n	800b040 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b02c:	79fa      	ldrb	r2, [r7, #7]
 800b02e:	4911      	ldr	r1, [pc, #68]	; (800b074 <etharp_output_to_arp_index+0x124>)
 800b030:	4613      	mov	r3, r2
 800b032:	005b      	lsls	r3, r3, #1
 800b034:	4413      	add	r3, r2
 800b036:	00db      	lsls	r3, r3, #3
 800b038:	440b      	add	r3, r1
 800b03a:	3314      	adds	r3, #20
 800b03c:	2203      	movs	r2, #3
 800b03e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800b046:	79fa      	ldrb	r2, [r7, #7]
 800b048:	4613      	mov	r3, r2
 800b04a:	005b      	lsls	r3, r3, #1
 800b04c:	4413      	add	r3, r2
 800b04e:	00db      	lsls	r3, r3, #3
 800b050:	3308      	adds	r3, #8
 800b052:	4a08      	ldr	r2, [pc, #32]	; (800b074 <etharp_output_to_arp_index+0x124>)
 800b054:	4413      	add	r3, r2
 800b056:	3304      	adds	r3, #4
 800b058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b05c:	9200      	str	r2, [sp, #0]
 800b05e:	460a      	mov	r2, r1
 800b060:	68b9      	ldr	r1, [r7, #8]
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f001 fe38 	bl	800ccd8 <ethernet_output>
 800b068:	4603      	mov	r3, r0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	2000010c 	.word	0x2000010c
 800b078:	08010160 	.word	0x08010160
 800b07c:	080102d0 	.word	0x080102d0
 800b080:	080101d8 	.word	0x080101d8

0800b084 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b08a      	sub	sp, #40	; 0x28
 800b088:	af02      	add	r7, sp, #8
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d106      	bne.n	800b0a8 <etharp_output+0x24>
 800b09a:	4b73      	ldr	r3, [pc, #460]	; (800b268 <etharp_output+0x1e4>)
 800b09c:	f240 321e 	movw	r2, #798	; 0x31e
 800b0a0:	4972      	ldr	r1, [pc, #456]	; (800b26c <etharp_output+0x1e8>)
 800b0a2:	4873      	ldr	r0, [pc, #460]	; (800b270 <etharp_output+0x1ec>)
 800b0a4:	f001 fea8 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d106      	bne.n	800b0bc <etharp_output+0x38>
 800b0ae:	4b6e      	ldr	r3, [pc, #440]	; (800b268 <etharp_output+0x1e4>)
 800b0b0:	f240 321f 	movw	r2, #799	; 0x31f
 800b0b4:	496f      	ldr	r1, [pc, #444]	; (800b274 <etharp_output+0x1f0>)
 800b0b6:	486e      	ldr	r0, [pc, #440]	; (800b270 <etharp_output+0x1ec>)
 800b0b8:	f001 fe9e 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d106      	bne.n	800b0d0 <etharp_output+0x4c>
 800b0c2:	4b69      	ldr	r3, [pc, #420]	; (800b268 <etharp_output+0x1e4>)
 800b0c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b0c8:	496b      	ldr	r1, [pc, #428]	; (800b278 <etharp_output+0x1f4>)
 800b0ca:	4869      	ldr	r0, [pc, #420]	; (800b270 <etharp_output+0x1ec>)
 800b0cc:	f001 fe94 	bl	800cdf8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	68f9      	ldr	r1, [r7, #12]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f000 fef6 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d002      	beq.n	800b0e8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b0e2:	4b66      	ldr	r3, [pc, #408]	; (800b27c <etharp_output+0x1f8>)
 800b0e4:	61fb      	str	r3, [r7, #28]
 800b0e6:	e0af      	b.n	800b248 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0f0:	2be0      	cmp	r3, #224	; 0xe0
 800b0f2:	d118      	bne.n	800b126 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b0fc:	235e      	movs	r3, #94	; 0x5e
 800b0fe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3301      	adds	r3, #1
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	3302      	adds	r3, #2
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	3303      	adds	r3, #3
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b11e:	f107 0310 	add.w	r3, r7, #16
 800b122:	61fb      	str	r3, [r7, #28]
 800b124:	e090      	b.n	800b248 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3304      	adds	r3, #4
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	405a      	eors	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	3308      	adds	r3, #8
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4013      	ands	r3, r2
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d012      	beq.n	800b164 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b144:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b148:	4293      	cmp	r3, r2
 800b14a:	d00b      	beq.n	800b164 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	330c      	adds	r3, #12
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d003      	beq.n	800b15e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	330c      	adds	r3, #12
 800b15a:	61bb      	str	r3, [r7, #24]
 800b15c:	e002      	b.n	800b164 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b15e:	f06f 0303 	mvn.w	r3, #3
 800b162:	e07d      	b.n	800b260 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b164:	4b46      	ldr	r3, [pc, #280]	; (800b280 <etharp_output+0x1fc>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	4619      	mov	r1, r3
 800b16a:	4a46      	ldr	r2, [pc, #280]	; (800b284 <etharp_output+0x200>)
 800b16c:	460b      	mov	r3, r1
 800b16e:	005b      	lsls	r3, r3, #1
 800b170:	440b      	add	r3, r1
 800b172:	00db      	lsls	r3, r3, #3
 800b174:	4413      	add	r3, r2
 800b176:	3314      	adds	r3, #20
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d925      	bls.n	800b1ca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b17e:	4b40      	ldr	r3, [pc, #256]	; (800b280 <etharp_output+0x1fc>)
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	4619      	mov	r1, r3
 800b184:	4a3f      	ldr	r2, [pc, #252]	; (800b284 <etharp_output+0x200>)
 800b186:	460b      	mov	r3, r1
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	440b      	add	r3, r1
 800b18c:	00db      	lsls	r3, r3, #3
 800b18e:	4413      	add	r3, r2
 800b190:	3308      	adds	r3, #8
 800b192:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	429a      	cmp	r2, r3
 800b198:	d117      	bne.n	800b1ca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	4b38      	ldr	r3, [pc, #224]	; (800b280 <etharp_output+0x1fc>)
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	4937      	ldr	r1, [pc, #220]	; (800b284 <etharp_output+0x200>)
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	005b      	lsls	r3, r3, #1
 800b1aa:	4403      	add	r3, r0
 800b1ac:	00db      	lsls	r3, r3, #3
 800b1ae:	440b      	add	r3, r1
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d108      	bne.n	800b1ca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b1b8:	4b31      	ldr	r3, [pc, #196]	; (800b280 <etharp_output+0x1fc>)
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	461a      	mov	r2, r3
 800b1be:	68b9      	ldr	r1, [r7, #8]
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f7ff fec5 	bl	800af50 <etharp_output_to_arp_index>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	e04a      	b.n	800b260 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	75fb      	strb	r3, [r7, #23]
 800b1ce:	e031      	b.n	800b234 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b1d0:	7dfa      	ldrb	r2, [r7, #23]
 800b1d2:	492c      	ldr	r1, [pc, #176]	; (800b284 <etharp_output+0x200>)
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	005b      	lsls	r3, r3, #1
 800b1d8:	4413      	add	r3, r2
 800b1da:	00db      	lsls	r3, r3, #3
 800b1dc:	440b      	add	r3, r1
 800b1de:	3314      	adds	r3, #20
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d923      	bls.n	800b22e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800b1e6:	7dfa      	ldrb	r2, [r7, #23]
 800b1e8:	4926      	ldr	r1, [pc, #152]	; (800b284 <etharp_output+0x200>)
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	005b      	lsls	r3, r3, #1
 800b1ee:	4413      	add	r3, r2
 800b1f0:	00db      	lsls	r3, r3, #3
 800b1f2:	440b      	add	r3, r1
 800b1f4:	3308      	adds	r3, #8
 800b1f6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d117      	bne.n	800b22e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	6819      	ldr	r1, [r3, #0]
 800b202:	7dfa      	ldrb	r2, [r7, #23]
 800b204:	481f      	ldr	r0, [pc, #124]	; (800b284 <etharp_output+0x200>)
 800b206:	4613      	mov	r3, r2
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	4413      	add	r3, r2
 800b20c:	00db      	lsls	r3, r3, #3
 800b20e:	4403      	add	r3, r0
 800b210:	3304      	adds	r3, #4
 800b212:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800b214:	4299      	cmp	r1, r3
 800b216:	d10a      	bne.n	800b22e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800b218:	4a19      	ldr	r2, [pc, #100]	; (800b280 <etharp_output+0x1fc>)
 800b21a:	7dfb      	ldrb	r3, [r7, #23]
 800b21c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
 800b220:	461a      	mov	r2, r3
 800b222:	68b9      	ldr	r1, [r7, #8]
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f7ff fe93 	bl	800af50 <etharp_output_to_arp_index>
 800b22a:	4603      	mov	r3, r0
 800b22c:	e018      	b.n	800b260 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b22e:	7dfb      	ldrb	r3, [r7, #23]
 800b230:	3301      	adds	r3, #1
 800b232:	75fb      	strb	r3, [r7, #23]
 800b234:	7dfb      	ldrb	r3, [r7, #23]
 800b236:	2b09      	cmp	r3, #9
 800b238:	d9ca      	bls.n	800b1d0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	69b9      	ldr	r1, [r7, #24]
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f000 f822 	bl	800b288 <etharp_query>
 800b244:	4603      	mov	r3, r0
 800b246:	e00b      	b.n	800b260 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800b24e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	68b9      	ldr	r1, [r7, #8]
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f001 fd3d 	bl	800ccd8 <ethernet_output>
 800b25e:	4603      	mov	r3, r0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3720      	adds	r7, #32
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	08010160 	.word	0x08010160
 800b26c:	080102b0 	.word	0x080102b0
 800b270:	080101d8 	.word	0x080101d8
 800b274:	08010300 	.word	0x08010300
 800b278:	080102a0 	.word	0x080102a0
 800b27c:	08010908 	.word	0x08010908
 800b280:	200001fc 	.word	0x200001fc
 800b284:	2000010c 	.word	0x2000010c

0800b288 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b08c      	sub	sp, #48	; 0x30
 800b28c:	af02      	add	r7, sp, #8
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	332a      	adds	r3, #42	; 0x2a
 800b298:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b29a:	23ff      	movs	r3, #255	; 0xff
 800b29c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68f9      	ldr	r1, [r7, #12]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f000 fe0c 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10c      	bne.n	800b2d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b2be:	2be0      	cmp	r3, #224	; 0xe0
 800b2c0:	d006      	beq.n	800b2d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d003      	beq.n	800b2d0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d102      	bne.n	800b2d6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b2d0:	f06f 030f 	mvn.w	r3, #15
 800b2d4:	e101      	b.n	800b4da <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	2101      	movs	r1, #1
 800b2da:	68b8      	ldr	r0, [r7, #8]
 800b2dc:	f7ff fb60 	bl	800a9a0 <etharp_find_entry>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800b2e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	da02      	bge.n	800b2f2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800b2ec:	8a7b      	ldrh	r3, [r7, #18]
 800b2ee:	b25b      	sxtb	r3, r3
 800b2f0:	e0f3      	b.n	800b4da <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800b2f2:	8a7b      	ldrh	r3, [r7, #18]
 800b2f4:	2b7e      	cmp	r3, #126	; 0x7e
 800b2f6:	d906      	bls.n	800b306 <etharp_query+0x7e>
 800b2f8:	4b7a      	ldr	r3, [pc, #488]	; (800b4e4 <etharp_query+0x25c>)
 800b2fa:	f240 32c1 	movw	r2, #961	; 0x3c1
 800b2fe:	497a      	ldr	r1, [pc, #488]	; (800b4e8 <etharp_query+0x260>)
 800b300:	487a      	ldr	r0, [pc, #488]	; (800b4ec <etharp_query+0x264>)
 800b302:	f001 fd79 	bl	800cdf8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800b306:	8a7b      	ldrh	r3, [r7, #18]
 800b308:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b30a:	7c7a      	ldrb	r2, [r7, #17]
 800b30c:	4978      	ldr	r1, [pc, #480]	; (800b4f0 <etharp_query+0x268>)
 800b30e:	4613      	mov	r3, r2
 800b310:	005b      	lsls	r3, r3, #1
 800b312:	4413      	add	r3, r2
 800b314:	00db      	lsls	r3, r3, #3
 800b316:	440b      	add	r3, r1
 800b318:	3314      	adds	r3, #20
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d115      	bne.n	800b34c <etharp_query+0xc4>
    is_new_entry = 1;
 800b320:	2301      	movs	r3, #1
 800b322:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b324:	7c7a      	ldrb	r2, [r7, #17]
 800b326:	4972      	ldr	r1, [pc, #456]	; (800b4f0 <etharp_query+0x268>)
 800b328:	4613      	mov	r3, r2
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	4413      	add	r3, r2
 800b32e:	00db      	lsls	r3, r3, #3
 800b330:	440b      	add	r3, r1
 800b332:	3314      	adds	r3, #20
 800b334:	2201      	movs	r2, #1
 800b336:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b338:	7c7a      	ldrb	r2, [r7, #17]
 800b33a:	496d      	ldr	r1, [pc, #436]	; (800b4f0 <etharp_query+0x268>)
 800b33c:	4613      	mov	r3, r2
 800b33e:	005b      	lsls	r3, r3, #1
 800b340:	4413      	add	r3, r2
 800b342:	00db      	lsls	r3, r3, #3
 800b344:	440b      	add	r3, r1
 800b346:	3308      	adds	r3, #8
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b34c:	7c7a      	ldrb	r2, [r7, #17]
 800b34e:	4968      	ldr	r1, [pc, #416]	; (800b4f0 <etharp_query+0x268>)
 800b350:	4613      	mov	r3, r2
 800b352:	005b      	lsls	r3, r3, #1
 800b354:	4413      	add	r3, r2
 800b356:	00db      	lsls	r3, r3, #3
 800b358:	440b      	add	r3, r1
 800b35a:	3314      	adds	r3, #20
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d011      	beq.n	800b386 <etharp_query+0xfe>
 800b362:	7c7a      	ldrb	r2, [r7, #17]
 800b364:	4962      	ldr	r1, [pc, #392]	; (800b4f0 <etharp_query+0x268>)
 800b366:	4613      	mov	r3, r2
 800b368:	005b      	lsls	r3, r3, #1
 800b36a:	4413      	add	r3, r2
 800b36c:	00db      	lsls	r3, r3, #3
 800b36e:	440b      	add	r3, r1
 800b370:	3314      	adds	r3, #20
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	2b01      	cmp	r3, #1
 800b376:	d806      	bhi.n	800b386 <etharp_query+0xfe>
 800b378:	4b5a      	ldr	r3, [pc, #360]	; (800b4e4 <etharp_query+0x25c>)
 800b37a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800b37e:	495d      	ldr	r1, [pc, #372]	; (800b4f4 <etharp_query+0x26c>)
 800b380:	485a      	ldr	r0, [pc, #360]	; (800b4ec <etharp_query+0x264>)
 800b382:	f001 fd39 	bl	800cdf8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b386:	6a3b      	ldr	r3, [r7, #32]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d102      	bne.n	800b392 <etharp_query+0x10a>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10c      	bne.n	800b3ac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b392:	68b9      	ldr	r1, [r7, #8]
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f000 f963 	bl	800b660 <etharp_request>
 800b39a:	4603      	mov	r3, r0
 800b39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d102      	bne.n	800b3ac <etharp_query+0x124>
      return result;
 800b3a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3aa:	e096      	b.n	800b4da <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d106      	bne.n	800b3c0 <etharp_query+0x138>
 800b3b2:	4b4c      	ldr	r3, [pc, #304]	; (800b4e4 <etharp_query+0x25c>)
 800b3b4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800b3b8:	494f      	ldr	r1, [pc, #316]	; (800b4f8 <etharp_query+0x270>)
 800b3ba:	484c      	ldr	r0, [pc, #304]	; (800b4ec <etharp_query+0x264>)
 800b3bc:	f001 fd1c 	bl	800cdf8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b3c0:	7c7a      	ldrb	r2, [r7, #17]
 800b3c2:	494b      	ldr	r1, [pc, #300]	; (800b4f0 <etharp_query+0x268>)
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	005b      	lsls	r3, r3, #1
 800b3c8:	4413      	add	r3, r2
 800b3ca:	00db      	lsls	r3, r3, #3
 800b3cc:	440b      	add	r3, r1
 800b3ce:	3314      	adds	r3, #20
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d917      	bls.n	800b406 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800b3d6:	4a49      	ldr	r2, [pc, #292]	; (800b4fc <etharp_query+0x274>)
 800b3d8:	7c7b      	ldrb	r3, [r7, #17]
 800b3da:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b3dc:	7c7a      	ldrb	r2, [r7, #17]
 800b3de:	4613      	mov	r3, r2
 800b3e0:	005b      	lsls	r3, r3, #1
 800b3e2:	4413      	add	r3, r2
 800b3e4:	00db      	lsls	r3, r3, #3
 800b3e6:	3308      	adds	r3, #8
 800b3e8:	4a41      	ldr	r2, [pc, #260]	; (800b4f0 <etharp_query+0x268>)
 800b3ea:	4413      	add	r3, r2
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3f2:	9200      	str	r2, [sp, #0]
 800b3f4:	697a      	ldr	r2, [r7, #20]
 800b3f6:	6879      	ldr	r1, [r7, #4]
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f001 fc6d 	bl	800ccd8 <ethernet_output>
 800b3fe:	4603      	mov	r3, r0
 800b400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b404:	e067      	b.n	800b4d6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b406:	7c7a      	ldrb	r2, [r7, #17]
 800b408:	4939      	ldr	r1, [pc, #228]	; (800b4f0 <etharp_query+0x268>)
 800b40a:	4613      	mov	r3, r2
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	4413      	add	r3, r2
 800b410:	00db      	lsls	r3, r3, #3
 800b412:	440b      	add	r3, r1
 800b414:	3314      	adds	r3, #20
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d15c      	bne.n	800b4d6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b424:	e01c      	b.n	800b460 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	895a      	ldrh	r2, [r3, #10]
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	891b      	ldrh	r3, [r3, #8]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d10a      	bne.n	800b448 <etharp_query+0x1c0>
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d006      	beq.n	800b448 <etharp_query+0x1c0>
 800b43a:	4b2a      	ldr	r3, [pc, #168]	; (800b4e4 <etharp_query+0x25c>)
 800b43c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b440:	492f      	ldr	r1, [pc, #188]	; (800b500 <etharp_query+0x278>)
 800b442:	482a      	ldr	r0, [pc, #168]	; (800b4ec <etharp_query+0x264>)
 800b444:	f001 fcd8 	bl	800cdf8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	7b1b      	ldrb	r3, [r3, #12]
 800b44c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <etharp_query+0x1d2>
        copy_needed = 1;
 800b454:	2301      	movs	r3, #1
 800b456:	61bb      	str	r3, [r7, #24]
        break;
 800b458:	e005      	b.n	800b466 <etharp_query+0x1de>
      }
      p = p->next;
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1df      	bne.n	800b426 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d007      	beq.n	800b47c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b472:	200e      	movs	r0, #14
 800b474:	f7f9 fd2c 	bl	8004ed0 <pbuf_clone>
 800b478:	61f8      	str	r0, [r7, #28]
 800b47a:	e004      	b.n	800b486 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b480:	69f8      	ldr	r0, [r7, #28]
 800b482:	f7f9 fb69 	bl	8004b58 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d021      	beq.n	800b4d0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b48c:	7c7a      	ldrb	r2, [r7, #17]
 800b48e:	4918      	ldr	r1, [pc, #96]	; (800b4f0 <etharp_query+0x268>)
 800b490:	4613      	mov	r3, r2
 800b492:	005b      	lsls	r3, r3, #1
 800b494:	4413      	add	r3, r2
 800b496:	00db      	lsls	r3, r3, #3
 800b498:	440b      	add	r3, r1
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00a      	beq.n	800b4b6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800b4a0:	7c7a      	ldrb	r2, [r7, #17]
 800b4a2:	4913      	ldr	r1, [pc, #76]	; (800b4f0 <etharp_query+0x268>)
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	4413      	add	r3, r2
 800b4aa:	00db      	lsls	r3, r3, #3
 800b4ac:	440b      	add	r3, r1
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7f9 fab1 	bl	8004a18 <pbuf_free>
      }
      arp_table[i].q = p;
 800b4b6:	7c7a      	ldrb	r2, [r7, #17]
 800b4b8:	490d      	ldr	r1, [pc, #52]	; (800b4f0 <etharp_query+0x268>)
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	005b      	lsls	r3, r3, #1
 800b4be:	4413      	add	r3, r2
 800b4c0:	00db      	lsls	r3, r3, #3
 800b4c2:	440b      	add	r3, r1
 800b4c4:	69fa      	ldr	r2, [r7, #28]
 800b4c6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4ce:	e002      	b.n	800b4d6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b4d0:	23ff      	movs	r3, #255	; 0xff
 800b4d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800b4d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3728      	adds	r7, #40	; 0x28
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	08010160 	.word	0x08010160
 800b4e8:	0801030c 	.word	0x0801030c
 800b4ec:	080101d8 	.word	0x080101d8
 800b4f0:	2000010c 	.word	0x2000010c
 800b4f4:	0801031c 	.word	0x0801031c
 800b4f8:	08010300 	.word	0x08010300
 800b4fc:	200001fc 	.word	0x200001fc
 800b500:	08010344 	.word	0x08010344

0800b504 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b08a      	sub	sp, #40	; 0x28
 800b508:	af02      	add	r7, sp, #8
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
 800b510:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <etharp_raw+0x26>
 800b51c:	4b3a      	ldr	r3, [pc, #232]	; (800b608 <etharp_raw+0x104>)
 800b51e:	f240 4257 	movw	r2, #1111	; 0x457
 800b522:	493a      	ldr	r1, [pc, #232]	; (800b60c <etharp_raw+0x108>)
 800b524:	483a      	ldr	r0, [pc, #232]	; (800b610 <etharp_raw+0x10c>)
 800b526:	f001 fc67 	bl	800cdf8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b52a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b52e:	211c      	movs	r1, #28
 800b530:	200e      	movs	r0, #14
 800b532:	f7f8 ff8d 	bl	8004450 <pbuf_alloc>
 800b536:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d102      	bne.n	800b544 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b53e:	f04f 33ff 	mov.w	r3, #4294967295
 800b542:	e05d      	b.n	800b600 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	895b      	ldrh	r3, [r3, #10]
 800b548:	2b1b      	cmp	r3, #27
 800b54a:	d806      	bhi.n	800b55a <etharp_raw+0x56>
 800b54c:	4b2e      	ldr	r3, [pc, #184]	; (800b608 <etharp_raw+0x104>)
 800b54e:	f240 4262 	movw	r2, #1122	; 0x462
 800b552:	4930      	ldr	r1, [pc, #192]	; (800b614 <etharp_raw+0x110>)
 800b554:	482e      	ldr	r0, [pc, #184]	; (800b610 <etharp_raw+0x10c>)
 800b556:	f001 fc4f 	bl	800cdf8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b560:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b562:	4618      	mov	r0, r3
 800b564:	f7f7 ffa4 	bl	80034b0 <lwip_htons>
 800b568:	4603      	mov	r3, r0
 800b56a:	461a      	mov	r2, r3
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b576:	2b06      	cmp	r3, #6
 800b578:	d006      	beq.n	800b588 <etharp_raw+0x84>
 800b57a:	4b23      	ldr	r3, [pc, #140]	; (800b608 <etharp_raw+0x104>)
 800b57c:	f240 4269 	movw	r2, #1129	; 0x469
 800b580:	4925      	ldr	r1, [pc, #148]	; (800b618 <etharp_raw+0x114>)
 800b582:	4823      	ldr	r0, [pc, #140]	; (800b610 <etharp_raw+0x10c>)
 800b584:	f001 fc38 	bl	800cdf8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	3308      	adds	r3, #8
 800b58c:	2206      	movs	r2, #6
 800b58e:	6839      	ldr	r1, [r7, #0]
 800b590:	4618      	mov	r0, r3
 800b592:	f001 fc1b 	bl	800cdcc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	3312      	adds	r3, #18
 800b59a:	2206      	movs	r2, #6
 800b59c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f001 fc14 	bl	800cdcc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	330e      	adds	r3, #14
 800b5a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5aa:	6812      	ldr	r2, [r2, #0]
 800b5ac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	3318      	adds	r3, #24
 800b5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5b4:	6812      	ldr	r2, [r2, #0]
 800b5b6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	701a      	strb	r2, [r3, #0]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f042 0201 	orr.w	r2, r2, #1
 800b5c4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f042 0208 	orr.w	r2, r2, #8
 800b5ce:	709a      	strb	r2, [r3, #2]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	2206      	movs	r2, #6
 800b5d8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	2204      	movs	r2, #4
 800b5de:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b5e0:	f640 0306 	movw	r3, #2054	; 0x806
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	68ba      	ldr	r2, [r7, #8]
 800b5ea:	69b9      	ldr	r1, [r7, #24]
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f001 fb73 	bl	800ccd8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800b5f2:	69b8      	ldr	r0, [r7, #24]
 800b5f4:	f7f9 fa10 	bl	8004a18 <pbuf_free>
  p = NULL;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800b5fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3720      	adds	r7, #32
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	08010160 	.word	0x08010160
 800b60c:	080102b0 	.word	0x080102b0
 800b610:	080101d8 	.word	0x080101d8
 800b614:	08010360 	.word	0x08010360
 800b618:	08010394 	.word	0x08010394

0800b61c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af04      	add	r7, sp, #16
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b638:	2201      	movs	r2, #1
 800b63a:	9203      	str	r2, [sp, #12]
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	9202      	str	r2, [sp, #8]
 800b640:	4a06      	ldr	r2, [pc, #24]	; (800b65c <etharp_request_dst+0x40>)
 800b642:	9201      	str	r2, [sp, #4]
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	4603      	mov	r3, r0
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f7ff ff5a 	bl	800b504 <etharp_raw>
 800b650:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800b652:	4618      	mov	r0, r3
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	08010910 	.word	0x08010910

0800b660 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b66a:	4a05      	ldr	r2, [pc, #20]	; (800b680 <etharp_request+0x20>)
 800b66c:	6839      	ldr	r1, [r7, #0]
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff ffd4 	bl	800b61c <etharp_request_dst>
 800b674:	4603      	mov	r3, r0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	08010908 	.word	0x08010908

0800b684 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b08e      	sub	sp, #56	; 0x38
 800b688:	af04      	add	r7, sp, #16
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800b68e:	4b78      	ldr	r3, [pc, #480]	; (800b870 <icmp_input+0x1ec>)
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	f003 030f 	and.w	r3, r3, #15
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 800b6a4:	8bfb      	ldrh	r3, [r7, #30]
 800b6a6:	2b13      	cmp	r3, #19
 800b6a8:	f240 80cf 	bls.w	800b84a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	895b      	ldrh	r3, [r3, #10]
 800b6b0:	2b03      	cmp	r3, #3
 800b6b2:	f240 80cc 	bls.w	800b84e <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b6be:	7f7b      	ldrb	r3, [r7, #29]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f000 80bb 	beq.w	800b83c <icmp_input+0x1b8>
 800b6c6:	2b08      	cmp	r3, #8
 800b6c8:	f040 80bb 	bne.w	800b842 <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800b6cc:	4b69      	ldr	r3, [pc, #420]	; (800b874 <icmp_input+0x1f0>)
 800b6ce:	627b      	str	r3, [r7, #36]	; 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b6d0:	4b67      	ldr	r3, [pc, #412]	; (800b870 <icmp_input+0x1ec>)
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6d8:	2be0      	cmp	r3, #224	; 0xe0
 800b6da:	d102      	bne.n	800b6e2 <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	3304      	adds	r3, #4
 800b6e0:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b6e2:	4b63      	ldr	r3, [pc, #396]	; (800b870 <icmp_input+0x1ec>)
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	4a62      	ldr	r2, [pc, #392]	; (800b870 <icmp_input+0x1ec>)
 800b6e8:	6812      	ldr	r2, [r2, #0]
 800b6ea:	4611      	mov	r1, r2
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 fbeb 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	891b      	ldrh	r3, [r3, #8]
 800b702:	2b07      	cmp	r3, #7
 800b704:	f240 80a5 	bls.w	800b852 <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b708:	8bfb      	ldrh	r3, [r7, #30]
 800b70a:	330e      	adds	r3, #14
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7f9 f8ec 	bl	80048ec <pbuf_add_header>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d04b      	beq.n	800b7b2 <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	891a      	ldrh	r2, [r3, #8]
 800b71e:	8bfb      	ldrh	r3, [r7, #30]
 800b720:	4413      	add	r3, r2
 800b722:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	891b      	ldrh	r3, [r3, #8]
 800b728:	8b7a      	ldrh	r2, [r7, #26]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	f0c0 8096 	bcc.w	800b85c <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800b730:	8b7b      	ldrh	r3, [r7, #26]
 800b732:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b736:	4619      	mov	r1, r3
 800b738:	200e      	movs	r0, #14
 800b73a:	f7f8 fe89 	bl	8004450 <pbuf_alloc>
 800b73e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 808c 	beq.w	800b860 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	895b      	ldrh	r3, [r3, #10]
 800b74c:	461a      	mov	r2, r3
 800b74e:	8bfb      	ldrh	r3, [r7, #30]
 800b750:	3308      	adds	r3, #8
 800b752:	429a      	cmp	r2, r3
 800b754:	d203      	bcs.n	800b75e <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800b756:	6978      	ldr	r0, [r7, #20]
 800b758:	f7f9 f95e 	bl	8004a18 <pbuf_free>
          goto icmperr;
 800b75c:	e081      	b.n	800b862 <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	8bfa      	ldrh	r2, [r7, #30]
 800b764:	6a39      	ldr	r1, [r7, #32]
 800b766:	4618      	mov	r0, r3
 800b768:	f001 fb30 	bl	800cdcc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800b76c:	8bfb      	ldrh	r3, [r7, #30]
 800b76e:	4619      	mov	r1, r3
 800b770:	6978      	ldr	r0, [r7, #20]
 800b772:	f7f9 f8cb 	bl	800490c <pbuf_remove_header>
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d009      	beq.n	800b790 <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b77c:	4b3e      	ldr	r3, [pc, #248]	; (800b878 <icmp_input+0x1f4>)
 800b77e:	22b6      	movs	r2, #182	; 0xb6
 800b780:	493e      	ldr	r1, [pc, #248]	; (800b87c <icmp_input+0x1f8>)
 800b782:	483f      	ldr	r0, [pc, #252]	; (800b880 <icmp_input+0x1fc>)
 800b784:	f001 fb38 	bl	800cdf8 <iprintf>
          pbuf_free(r);
 800b788:	6978      	ldr	r0, [r7, #20]
 800b78a:	f7f9 f945 	bl	8004a18 <pbuf_free>
          goto icmperr;
 800b78e:	e068      	b.n	800b862 <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800b790:	6879      	ldr	r1, [r7, #4]
 800b792:	6978      	ldr	r0, [r7, #20]
 800b794:	f7f9 fa58 	bl	8004c48 <pbuf_copy>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d003      	beq.n	800b7a6 <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800b79e:	6978      	ldr	r0, [r7, #20]
 800b7a0:	f7f9 f93a 	bl	8004a18 <pbuf_free>
          goto icmperr;
 800b7a4:	e05d      	b.n	800b862 <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7f9 f936 	bl	8004a18 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	607b      	str	r3, [r7, #4]
 800b7b0:	e00f      	b.n	800b7d2 <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b7b2:	8bfb      	ldrh	r3, [r7, #30]
 800b7b4:	330e      	adds	r3, #14
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7f9 f8a7 	bl	800490c <pbuf_remove_header>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d006      	beq.n	800b7d2 <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b7c4:	4b2c      	ldr	r3, [pc, #176]	; (800b878 <icmp_input+0x1f4>)
 800b7c6:	22c7      	movs	r2, #199	; 0xc7
 800b7c8:	492e      	ldr	r1, [pc, #184]	; (800b884 <icmp_input+0x200>)
 800b7ca:	482d      	ldr	r0, [pc, #180]	; (800b880 <icmp_input+0x1fc>)
 800b7cc:	f001 fb14 	bl	800cdf8 <iprintf>
          goto icmperr;
 800b7d0:	e047      	b.n	800b862 <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800b7d8:	8bfb      	ldrh	r3, [r7, #30]
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7f9 f885 	bl	80048ec <pbuf_add_header>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d12b      	bne.n	800b840 <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b7f6:	4b1e      	ldr	r3, [pc, #120]	; (800b870 <icmp_input+0x1ec>)
 800b7f8:	691a      	ldr	r2, [r3, #16]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2200      	movs	r2, #0
 800b802:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	2200      	movs	r2, #0
 800b808:	709a      	strb	r2, [r3, #2]
 800b80a:	2200      	movs	r2, #0
 800b80c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	22ff      	movs	r2, #255	; 0xff
 800b812:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	729a      	strb	r2, [r3, #10]
 800b81a:	2200      	movs	r2, #0
 800b81c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	9302      	str	r3, [sp, #8]
 800b822:	2301      	movs	r3, #1
 800b824:	9301      	str	r3, [sp, #4]
 800b826:	2300      	movs	r3, #0
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	23ff      	movs	r3, #255	; 0xff
 800b82c:	2200      	movs	r2, #0
 800b82e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fa71 	bl	800bd18 <ip4_output_if>
 800b836:	4603      	mov	r3, r0
 800b838:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800b83a:	e001      	b.n	800b840 <icmp_input+0x1bc>
      break;
 800b83c:	bf00      	nop
 800b83e:	e000      	b.n	800b842 <icmp_input+0x1be>
      break;
 800b840:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7f9 f8e8 	bl	8004a18 <pbuf_free>
  return;
 800b848:	e00f      	b.n	800b86a <icmp_input+0x1e6>
    goto lenerr;
 800b84a:	bf00      	nop
 800b84c:	e002      	b.n	800b854 <icmp_input+0x1d0>
    goto lenerr;
 800b84e:	bf00      	nop
 800b850:	e000      	b.n	800b854 <icmp_input+0x1d0>
        goto lenerr;
 800b852:	bf00      	nop
lenerr:
  pbuf_free(p);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f7f9 f8df 	bl	8004a18 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b85a:	e006      	b.n	800b86a <icmp_input+0x1e6>
          goto icmperr;
 800b85c:	bf00      	nop
 800b85e:	e000      	b.n	800b862 <icmp_input+0x1de>
          goto icmperr;
 800b860:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f7f9 f8d8 	bl	8004a18 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b868:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800b86a:	3728      	adds	r7, #40	; 0x28
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	2000334c 	.word	0x2000334c
 800b874:	20003360 	.word	0x20003360
 800b878:	080103d8 	.word	0x080103d8
 800b87c:	08010410 	.word	0x08010410
 800b880:	08010448 	.word	0x08010448
 800b884:	08010470 	.word	0x08010470

0800b888 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	460b      	mov	r3, r1
 800b892:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800b894:	78fb      	ldrb	r3, [r7, #3]
 800b896:	461a      	mov	r2, r3
 800b898:	2103      	movs	r1, #3
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 f814 	bl	800b8c8 <icmp_send_response>
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800b8b4:	78fb      	ldrb	r3, [r7, #3]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	210b      	movs	r1, #11
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f804 	bl	800b8c8 <icmp_send_response>
}
 800b8c0:	bf00      	nop
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b08c      	sub	sp, #48	; 0x30
 800b8cc:	af04      	add	r7, sp, #16
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	70fb      	strb	r3, [r7, #3]
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b8d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b8dc:	2124      	movs	r1, #36	; 0x24
 800b8de:	2022      	movs	r0, #34	; 0x22
 800b8e0:	f7f8 fdb6 	bl	8004450 <pbuf_alloc>
 800b8e4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d04c      	beq.n	800b986 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	895b      	ldrh	r3, [r3, #10]
 800b8f0:	2b23      	cmp	r3, #35	; 0x23
 800b8f2:	d806      	bhi.n	800b902 <icmp_send_response+0x3a>
 800b8f4:	4b26      	ldr	r3, [pc, #152]	; (800b990 <icmp_send_response+0xc8>)
 800b8f6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b8fa:	4926      	ldr	r1, [pc, #152]	; (800b994 <icmp_send_response+0xcc>)
 800b8fc:	4826      	ldr	r0, [pc, #152]	; (800b998 <icmp_send_response+0xd0>)
 800b8fe:	f001 fa7b 	bl	800cdf8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	78fa      	ldrb	r2, [r7, #3]
 800b912:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	78ba      	ldrb	r2, [r7, #2]
 800b918:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	2200      	movs	r2, #0
 800b91e:	711a      	strb	r2, [r3, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	2200      	movs	r2, #0
 800b928:	719a      	strb	r2, [r3, #6]
 800b92a:	2200      	movs	r2, #0
 800b92c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	f103 0008 	add.w	r0, r3, #8
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	221c      	movs	r2, #28
 800b93c:	4619      	mov	r1, r3
 800b93e:	f001 fa45 	bl	800cdcc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800b948:	f107 030c 	add.w	r3, r7, #12
 800b94c:	4618      	mov	r0, r3
 800b94e:	f000 f825 	bl	800b99c <ip4_route>
 800b952:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d011      	beq.n	800b97e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	2200      	movs	r2, #0
 800b95e:	709a      	strb	r2, [r3, #2]
 800b960:	2200      	movs	r2, #0
 800b962:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800b964:	f107 020c 	add.w	r2, r7, #12
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	9302      	str	r3, [sp, #8]
 800b96c:	2301      	movs	r3, #1
 800b96e:	9301      	str	r3, [sp, #4]
 800b970:	2300      	movs	r3, #0
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	23ff      	movs	r3, #255	; 0xff
 800b976:	2100      	movs	r1, #0
 800b978:	69f8      	ldr	r0, [r7, #28]
 800b97a:	f000 f9cd 	bl	800bd18 <ip4_output_if>
  }
  pbuf_free(q);
 800b97e:	69f8      	ldr	r0, [r7, #28]
 800b980:	f7f9 f84a 	bl	8004a18 <pbuf_free>
 800b984:	e000      	b.n	800b988 <icmp_send_response+0xc0>
    return;
 800b986:	bf00      	nop
}
 800b988:	3720      	adds	r7, #32
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	080103d8 	.word	0x080103d8
 800b994:	080104a4 	.word	0x080104a4
 800b998:	08010448 	.word	0x08010448

0800b99c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800b9a4:	4b33      	ldr	r3, [pc, #204]	; (800ba74 <ip4_route+0xd8>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	60fb      	str	r3, [r7, #12]
 800b9aa:	e036      	b.n	800ba1a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d02b      	beq.n	800ba14 <ip4_route+0x78>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b9c2:	089b      	lsrs	r3, r3, #2
 800b9c4:	f003 0301 	and.w	r3, r3, #1
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d022      	beq.n	800ba14 <ip4_route+0x78>
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	3304      	adds	r3, #4
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d01d      	beq.n	800ba14 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	3304      	adds	r3, #4
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	405a      	eors	r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	3308      	adds	r3, #8
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d101      	bne.n	800b9f4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	e038      	b.n	800ba66 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d108      	bne.n	800ba14 <ip4_route+0x78>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	330c      	adds	r3, #12
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d101      	bne.n	800ba14 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	e028      	b.n	800ba66 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	60fb      	str	r3, [r7, #12]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1c5      	bne.n	800b9ac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ba20:	4b15      	ldr	r3, [pc, #84]	; (800ba78 <ip4_route+0xdc>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d01a      	beq.n	800ba5e <ip4_route+0xc2>
 800ba28:	4b13      	ldr	r3, [pc, #76]	; (800ba78 <ip4_route+0xdc>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba30:	f003 0301 	and.w	r3, r3, #1
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d012      	beq.n	800ba5e <ip4_route+0xc2>
 800ba38:	4b0f      	ldr	r3, [pc, #60]	; (800ba78 <ip4_route+0xdc>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba40:	f003 0304 	and.w	r3, r3, #4
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00a      	beq.n	800ba5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ba48:	4b0b      	ldr	r3, [pc, #44]	; (800ba78 <ip4_route+0xdc>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d004      	beq.n	800ba5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b7f      	cmp	r3, #127	; 0x7f
 800ba5c:	d101      	bne.n	800ba62 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	e001      	b.n	800ba66 <ip4_route+0xca>
  }

  return netif_default;
 800ba62:	4b05      	ldr	r3, [pc, #20]	; (800ba78 <ip4_route+0xdc>)
 800ba64:	681b      	ldr	r3, [r3, #0]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	20008a40 	.word	0x20008a40
 800ba78:	20008a44 	.word	0x20008a44

0800ba7c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d016      	beq.n	800bac2 <ip4_input_accept+0x46>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	3304      	adds	r3, #4
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d011      	beq.n	800bac2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ba9e:	4b0b      	ldr	r3, [pc, #44]	; (800bacc <ip4_input_accept+0x50>)
 800baa0:	695a      	ldr	r2, [r3, #20]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	3304      	adds	r3, #4
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d008      	beq.n	800babe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800baac:	4b07      	ldr	r3, [pc, #28]	; (800bacc <ip4_input_accept+0x50>)
 800baae:	695b      	ldr	r3, [r3, #20]
 800bab0:	6879      	ldr	r1, [r7, #4]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f000 fa08 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800bab8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800baba:	2b00      	cmp	r3, #0
 800babc:	d001      	beq.n	800bac2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800babe:	2301      	movs	r3, #1
 800bac0:	e000      	b.n	800bac4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	2000334c 	.word	0x2000334c

0800bad0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	091b      	lsrs	r3, r3, #4
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b04      	cmp	r3, #4
 800baea:	d004      	beq.n	800baf6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f7f8 ff93 	bl	8004a18 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	e107      	b.n	800bd06 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	f003 030f 	and.w	r3, r3, #15
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	885b      	ldrh	r3, [r3, #2]
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7f7 fccf 	bl	80034b0 <lwip_htons>
 800bb12:	4603      	mov	r3, r0
 800bb14:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	891b      	ldrh	r3, [r3, #8]
 800bb1a:	89ba      	ldrh	r2, [r7, #12]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d204      	bcs.n	800bb2a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800bb20:	89bb      	ldrh	r3, [r7, #12]
 800bb22:	4619      	mov	r1, r3
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7f8 fdf1 	bl	800470c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	895b      	ldrh	r3, [r3, #10]
 800bb2e:	89fa      	ldrh	r2, [r7, #14]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d807      	bhi.n	800bb44 <ip4_input+0x74>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	891b      	ldrh	r3, [r3, #8]
 800bb38:	89ba      	ldrh	r2, [r7, #12]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d802      	bhi.n	800bb44 <ip4_input+0x74>
 800bb3e:	89fb      	ldrh	r3, [r7, #14]
 800bb40:	2b13      	cmp	r3, #19
 800bb42:	d804      	bhi.n	800bb4e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f7f8 ff67 	bl	8004a18 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	e0db      	b.n	800bd06 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	4a6f      	ldr	r2, [pc, #444]	; (800bd10 <ip4_input+0x240>)
 800bb54:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	4a6d      	ldr	r2, [pc, #436]	; (800bd10 <ip4_input+0x240>)
 800bb5c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bb5e:	4b6c      	ldr	r3, [pc, #432]	; (800bd10 <ip4_input+0x240>)
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb66:	2be0      	cmp	r3, #224	; 0xe0
 800bb68:	d112      	bne.n	800bb90 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d007      	beq.n	800bb8a <ip4_input+0xba>
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <ip4_input+0xba>
      netif = inp;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	613b      	str	r3, [r7, #16]
 800bb88:	e02a      	b.n	800bbe0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	613b      	str	r3, [r7, #16]
 800bb8e:	e027      	b.n	800bbe0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800bb90:	6838      	ldr	r0, [r7, #0]
 800bb92:	f7ff ff73 	bl	800ba7c <ip4_input_accept>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <ip4_input+0xd2>
      netif = inp;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	613b      	str	r3, [r7, #16]
 800bba0:	e01e      	b.n	800bbe0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800bba2:	2300      	movs	r3, #0
 800bba4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800bba6:	4b5a      	ldr	r3, [pc, #360]	; (800bd10 <ip4_input+0x240>)
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	2b7f      	cmp	r3, #127	; 0x7f
 800bbae:	d017      	beq.n	800bbe0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800bbb0:	4b58      	ldr	r3, [pc, #352]	; (800bd14 <ip4_input+0x244>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	613b      	str	r3, [r7, #16]
 800bbb6:	e00e      	b.n	800bbd6 <ip4_input+0x106>
          if (netif == inp) {
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d006      	beq.n	800bbce <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800bbc0:	6938      	ldr	r0, [r7, #16]
 800bbc2:	f7ff ff5b 	bl	800ba7c <ip4_input_accept>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d108      	bne.n	800bbde <ip4_input+0x10e>
 800bbcc:	e000      	b.n	800bbd0 <ip4_input+0x100>
            continue;
 800bbce:	bf00      	nop
        NETIF_FOREACH(netif) {
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	613b      	str	r3, [r7, #16]
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1ed      	bne.n	800bbb8 <ip4_input+0xe8>
 800bbdc:	e000      	b.n	800bbe0 <ip4_input+0x110>
            break;
 800bbde:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bbe0:	4b4b      	ldr	r3, [pc, #300]	; (800bd10 <ip4_input+0x240>)
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	6839      	ldr	r1, [r7, #0]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f000 f96e 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d105      	bne.n	800bbfe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800bbf2:	4b47      	ldr	r3, [pc, #284]	; (800bd10 <ip4_input+0x240>)
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bbfa:	2be0      	cmp	r3, #224	; 0xe0
 800bbfc:	d104      	bne.n	800bc08 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7f8 ff0a 	bl	8004a18 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	e07e      	b.n	800bd06 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d104      	bne.n	800bc18 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7f8 ff02 	bl	8004a18 <pbuf_free>
    return ERR_OK;
 800bc14:	2300      	movs	r3, #0
 800bc16:	e076      	b.n	800bd06 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	88db      	ldrh	r3, [r3, #6]
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	461a      	mov	r2, r3
 800bc20:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800bc24:	4013      	ands	r3, r2
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00b      	beq.n	800bc42 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fc92 	bl	800c554 <ip4_reass>
 800bc30:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <ip4_input+0x16c>
      return ERR_OK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	e064      	b.n	800bd06 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800bc42:	4a33      	ldr	r2, [pc, #204]	; (800bd10 <ip4_input+0x240>)
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800bc48:	4a31      	ldr	r2, [pc, #196]	; (800bd10 <ip4_input+0x240>)
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800bc4e:	4a30      	ldr	r2, [pc, #192]	; (800bd10 <ip4_input+0x240>)
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	f003 030f 	and.w	r3, r3, #15
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	4b2a      	ldr	r3, [pc, #168]	; (800bd10 <ip4_input+0x240>)
 800bc66:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800bc68:	89fb      	ldrh	r3, [r7, #14]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7f8 fe4d 	bl	800490c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	7a5b      	ldrb	r3, [r3, #9]
 800bc76:	2b11      	cmp	r3, #17
 800bc78:	d006      	beq.n	800bc88 <ip4_input+0x1b8>
 800bc7a:	2b11      	cmp	r3, #17
 800bc7c:	dc13      	bgt.n	800bca6 <ip4_input+0x1d6>
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d00c      	beq.n	800bc9c <ip4_input+0x1cc>
 800bc82:	2b06      	cmp	r3, #6
 800bc84:	d005      	beq.n	800bc92 <ip4_input+0x1c2>
 800bc86:	e00e      	b.n	800bca6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800bc88:	6839      	ldr	r1, [r7, #0]
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f7fe fc6a 	bl	800a564 <udp_input>
        break;
 800bc90:	e026      	b.n	800bce0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800bc92:	6839      	ldr	r1, [r7, #0]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7fa fce7 	bl	8006668 <tcp_input>
        break;
 800bc9a:	e021      	b.n	800bce0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800bc9c:	6839      	ldr	r1, [r7, #0]
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f7ff fcf0 	bl	800b684 <icmp_input>
        break;
 800bca4:	e01c      	b.n	800bce0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bca6:	4b1a      	ldr	r3, [pc, #104]	; (800bd10 <ip4_input+0x240>)
 800bca8:	695b      	ldr	r3, [r3, #20]
 800bcaa:	6939      	ldr	r1, [r7, #16]
 800bcac:	4618      	mov	r0, r3
 800bcae:	f000 f90b 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10f      	bne.n	800bcd8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bcb8:	4b15      	ldr	r3, [pc, #84]	; (800bd10 <ip4_input+0x240>)
 800bcba:	695b      	ldr	r3, [r3, #20]
 800bcbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bcc0:	2be0      	cmp	r3, #224	; 0xe0
 800bcc2:	d009      	beq.n	800bcd8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800bcc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bcc8:	4619      	mov	r1, r3
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f7f8 fe91 	bl	80049f2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800bcd0:	2102      	movs	r1, #2
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7ff fdd8 	bl	800b888 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7f8 fe9d 	bl	8004a18 <pbuf_free>
        break;
 800bcde:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800bce0:	4b0b      	ldr	r3, [pc, #44]	; (800bd10 <ip4_input+0x240>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800bce6:	4b0a      	ldr	r3, [pc, #40]	; (800bd10 <ip4_input+0x240>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800bcec:	4b08      	ldr	r3, [pc, #32]	; (800bd10 <ip4_input+0x240>)
 800bcee:	2200      	movs	r2, #0
 800bcf0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800bcf2:	4b07      	ldr	r3, [pc, #28]	; (800bd10 <ip4_input+0x240>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800bcf8:	4b05      	ldr	r3, [pc, #20]	; (800bd10 <ip4_input+0x240>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800bcfe:	4b04      	ldr	r3, [pc, #16]	; (800bd10 <ip4_input+0x240>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3718      	adds	r7, #24
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	2000334c 	.word	0x2000334c
 800bd14:	20008a40 	.word	0x20008a40

0800bd18 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08a      	sub	sp, #40	; 0x28
 800bd1c:	af04      	add	r7, sp, #16
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d009      	beq.n	800bd44 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <ip4_output_if+0x26>
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d102      	bne.n	800bd44 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800bd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd40:	3304      	adds	r3, #4
 800bd42:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800bd44:	78fa      	ldrb	r2, [r7, #3]
 800bd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd48:	9302      	str	r3, [sp, #8]
 800bd4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd4e:	9301      	str	r3, [sp, #4]
 800bd50:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	4613      	mov	r3, r2
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	6979      	ldr	r1, [r7, #20]
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f000 f805 	bl	800bd6c <ip4_output_if_src>
 800bd62:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
 800bd78:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	7b9b      	ldrb	r3, [r3, #14]
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d006      	beq.n	800bd90 <ip4_output_if_src+0x24>
 800bd82:	4b4b      	ldr	r3, [pc, #300]	; (800beb0 <ip4_output_if_src+0x144>)
 800bd84:	f44f 7255 	mov.w	r2, #852	; 0x354
 800bd88:	494a      	ldr	r1, [pc, #296]	; (800beb4 <ip4_output_if_src+0x148>)
 800bd8a:	484b      	ldr	r0, [pc, #300]	; (800beb8 <ip4_output_if_src+0x14c>)
 800bd8c:	f001 f834 	bl	800cdf8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d060      	beq.n	800be58 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800bd96:	2314      	movs	r3, #20
 800bd98:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800bd9a:	2114      	movs	r1, #20
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f7f8 fda5 	bl	80048ec <pbuf_add_header>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d002      	beq.n	800bdae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800bda8:	f06f 0301 	mvn.w	r3, #1
 800bdac:	e07c      	b.n	800bea8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	895b      	ldrh	r3, [r3, #10]
 800bdb8:	2b13      	cmp	r3, #19
 800bdba:	d806      	bhi.n	800bdca <ip4_output_if_src+0x5e>
 800bdbc:	4b3c      	ldr	r3, [pc, #240]	; (800beb0 <ip4_output_if_src+0x144>)
 800bdbe:	f44f 7262 	mov.w	r2, #904	; 0x388
 800bdc2:	493e      	ldr	r1, [pc, #248]	; (800bebc <ip4_output_if_src+0x150>)
 800bdc4:	483c      	ldr	r0, [pc, #240]	; (800beb8 <ip4_output_if_src+0x14c>)
 800bdc6:	f001 f817 	bl	800cdf8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	78fa      	ldrb	r2, [r7, #3]
 800bdce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800bdd6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800bde0:	8b7b      	ldrh	r3, [r7, #26]
 800bde2:	089b      	lsrs	r3, r3, #2
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdec:	b2da      	uxtb	r2, r3
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800bdf8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	891b      	ldrh	r3, [r3, #8]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7f7 fb56 	bl	80034b0 <lwip_htons>
 800be04:	4603      	mov	r3, r0
 800be06:	461a      	mov	r2, r3
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	2200      	movs	r2, #0
 800be10:	719a      	strb	r2, [r3, #6]
 800be12:	2200      	movs	r2, #0
 800be14:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800be16:	4b2a      	ldr	r3, [pc, #168]	; (800bec0 <ip4_output_if_src+0x154>)
 800be18:	881b      	ldrh	r3, [r3, #0]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7f7 fb48 	bl	80034b0 <lwip_htons>
 800be20:	4603      	mov	r3, r0
 800be22:	461a      	mov	r2, r3
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800be28:	4b25      	ldr	r3, [pc, #148]	; (800bec0 <ip4_output_if_src+0x154>)
 800be2a:	881b      	ldrh	r3, [r3, #0]
 800be2c:	3301      	adds	r3, #1
 800be2e:	b29a      	uxth	r2, r3
 800be30:	4b23      	ldr	r3, [pc, #140]	; (800bec0 <ip4_output_if_src+0x154>)
 800be32:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d104      	bne.n	800be44 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800be3a:	4b22      	ldr	r3, [pc, #136]	; (800bec4 <ip4_output_if_src+0x158>)
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	60da      	str	r2, [r3, #12]
 800be42:	e003      	b.n	800be4c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	2200      	movs	r2, #0
 800be50:	729a      	strb	r2, [r3, #10]
 800be52:	2200      	movs	r2, #0
 800be54:	72da      	strb	r2, [r3, #11]
 800be56:	e00f      	b.n	800be78 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	895b      	ldrh	r3, [r3, #10]
 800be5c:	2b13      	cmp	r3, #19
 800be5e:	d802      	bhi.n	800be66 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800be60:	f06f 0301 	mvn.w	r3, #1
 800be64:	e020      	b.n	800bea8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800be72:	f107 0314 	add.w	r3, r7, #20
 800be76:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800be78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00c      	beq.n	800be9a <ip4_output_if_src+0x12e>
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	891a      	ldrh	r2, [r3, #8]
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be88:	429a      	cmp	r2, r3
 800be8a:	d906      	bls.n	800be9a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f000 fd4d 	bl	800c930 <ip4_frag>
 800be96:	4603      	mov	r3, r0
 800be98:	e006      	b.n	800bea8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800be9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	68f9      	ldr	r1, [r7, #12]
 800bea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bea4:	4798      	blx	r3
 800bea6:	4603      	mov	r3, r0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3720      	adds	r7, #32
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	080104d0 	.word	0x080104d0
 800beb4:	08010504 	.word	0x08010504
 800beb8:	08010510 	.word	0x08010510
 800bebc:	08010538 	.word	0x08010538
 800bec0:	200001fe 	.word	0x200001fe
 800bec4:	08010904 	.word	0x08010904

0800bec8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bedc:	d002      	beq.n	800bee4 <ip4_addr_isbroadcast_u32+0x1c>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800bee4:	2301      	movs	r3, #1
 800bee6:	e02a      	b.n	800bf3e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800beee:	f003 0302 	and.w	r3, r3, #2
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	e021      	b.n	800bf3e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	3304      	adds	r3, #4
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d101      	bne.n	800bf0a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800bf06:	2300      	movs	r3, #0
 800bf08:	e019      	b.n	800bf3e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	3304      	adds	r3, #4
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	405a      	eors	r2, r3
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	3308      	adds	r3, #8
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10d      	bne.n	800bf3c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	3308      	adds	r3, #8
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	43da      	mvns	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	3308      	adds	r3, #8
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d101      	bne.n	800bf3c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e000      	b.n	800bf3e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800bf3c:	2300      	movs	r3, #0
  }
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3714      	adds	r7, #20
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr
	...

0800bf4c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800bf52:	2300      	movs	r3, #0
 800bf54:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800bf56:	4b12      	ldr	r3, [pc, #72]	; (800bfa0 <ip_reass_tmr+0x54>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800bf5c:	e018      	b.n	800bf90 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	7fdb      	ldrb	r3, [r3, #31]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00b      	beq.n	800bf7e <ip_reass_tmr+0x32>
      r->timer--;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	7fdb      	ldrb	r3, [r3, #31]
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	b2da      	uxtb	r2, r3
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	e008      	b.n	800bf90 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800bf88:	68b9      	ldr	r1, [r7, #8]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 f80a 	bl	800bfa4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1e3      	bne.n	800bf5e <ip_reass_tmr+0x12>
    }
  }
}
 800bf96:	bf00      	nop
 800bf98:	bf00      	nop
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	20000200 	.word	0x20000200

0800bfa4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b088      	sub	sp, #32
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d105      	bne.n	800bfc6 <ip_reass_free_complete_datagram+0x22>
 800bfba:	4b45      	ldr	r3, [pc, #276]	; (800c0d0 <ip_reass_free_complete_datagram+0x12c>)
 800bfbc:	22ab      	movs	r2, #171	; 0xab
 800bfbe:	4945      	ldr	r1, [pc, #276]	; (800c0d4 <ip_reass_free_complete_datagram+0x130>)
 800bfc0:	4845      	ldr	r0, [pc, #276]	; (800c0d8 <ip_reass_free_complete_datagram+0x134>)
 800bfc2:	f000 ff19 	bl	800cdf8 <iprintf>
  if (prev != NULL) {
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d00a      	beq.n	800bfe2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d005      	beq.n	800bfe2 <ip_reass_free_complete_datagram+0x3e>
 800bfd6:	4b3e      	ldr	r3, [pc, #248]	; (800c0d0 <ip_reass_free_complete_datagram+0x12c>)
 800bfd8:	22ad      	movs	r2, #173	; 0xad
 800bfda:	4940      	ldr	r1, [pc, #256]	; (800c0dc <ip_reass_free_complete_datagram+0x138>)
 800bfdc:	483e      	ldr	r0, [pc, #248]	; (800c0d8 <ip_reass_free_complete_datagram+0x134>)
 800bfde:	f000 ff0b 	bl	800cdf8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	889b      	ldrh	r3, [r3, #4]
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d12a      	bne.n	800c04a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	6858      	ldr	r0, [r3, #4]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	3308      	adds	r3, #8
 800c00a:	2214      	movs	r2, #20
 800c00c:	4619      	mov	r1, r3
 800c00e:	f000 fedd 	bl	800cdcc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c012:	2101      	movs	r1, #1
 800c014:	69b8      	ldr	r0, [r7, #24]
 800c016:	f7ff fc47 	bl	800b8a8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c01a:	69b8      	ldr	r0, [r7, #24]
 800c01c:	f7f8 fd84 	bl	8004b28 <pbuf_clen>
 800c020:	4603      	mov	r3, r0
 800c022:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c024:	8bfa      	ldrh	r2, [r7, #30]
 800c026:	8a7b      	ldrh	r3, [r7, #18]
 800c028:	4413      	add	r3, r2
 800c02a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c02e:	db05      	blt.n	800c03c <ip_reass_free_complete_datagram+0x98>
 800c030:	4b27      	ldr	r3, [pc, #156]	; (800c0d0 <ip_reass_free_complete_datagram+0x12c>)
 800c032:	22bc      	movs	r2, #188	; 0xbc
 800c034:	492a      	ldr	r1, [pc, #168]	; (800c0e0 <ip_reass_free_complete_datagram+0x13c>)
 800c036:	4828      	ldr	r0, [pc, #160]	; (800c0d8 <ip_reass_free_complete_datagram+0x134>)
 800c038:	f000 fede 	bl	800cdf8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c03c:	8bfa      	ldrh	r2, [r7, #30]
 800c03e:	8a7b      	ldrh	r3, [r7, #18]
 800c040:	4413      	add	r3, r2
 800c042:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c044:	69b8      	ldr	r0, [r7, #24]
 800c046:	f7f8 fce7 	bl	8004a18 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c050:	e01f      	b.n	800c092 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f7f8 fd60 	bl	8004b28 <pbuf_clen>
 800c068:	4603      	mov	r3, r0
 800c06a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c06c:	8bfa      	ldrh	r2, [r7, #30]
 800c06e:	8a7b      	ldrh	r3, [r7, #18]
 800c070:	4413      	add	r3, r2
 800c072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c076:	db05      	blt.n	800c084 <ip_reass_free_complete_datagram+0xe0>
 800c078:	4b15      	ldr	r3, [pc, #84]	; (800c0d0 <ip_reass_free_complete_datagram+0x12c>)
 800c07a:	22cc      	movs	r2, #204	; 0xcc
 800c07c:	4918      	ldr	r1, [pc, #96]	; (800c0e0 <ip_reass_free_complete_datagram+0x13c>)
 800c07e:	4816      	ldr	r0, [pc, #88]	; (800c0d8 <ip_reass_free_complete_datagram+0x134>)
 800c080:	f000 feba 	bl	800cdf8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c084:	8bfa      	ldrh	r2, [r7, #30]
 800c086:	8a7b      	ldrh	r3, [r7, #18]
 800c088:	4413      	add	r3, r2
 800c08a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	f7f8 fcc3 	bl	8004a18 <pbuf_free>
  while (p != NULL) {
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1dc      	bne.n	800c052 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c098:	6839      	ldr	r1, [r7, #0]
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 f8c2 	bl	800c224 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c0a0:	4b10      	ldr	r3, [pc, #64]	; (800c0e4 <ip_reass_free_complete_datagram+0x140>)
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	8bfa      	ldrh	r2, [r7, #30]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d905      	bls.n	800c0b6 <ip_reass_free_complete_datagram+0x112>
 800c0aa:	4b09      	ldr	r3, [pc, #36]	; (800c0d0 <ip_reass_free_complete_datagram+0x12c>)
 800c0ac:	22d2      	movs	r2, #210	; 0xd2
 800c0ae:	490e      	ldr	r1, [pc, #56]	; (800c0e8 <ip_reass_free_complete_datagram+0x144>)
 800c0b0:	4809      	ldr	r0, [pc, #36]	; (800c0d8 <ip_reass_free_complete_datagram+0x134>)
 800c0b2:	f000 fea1 	bl	800cdf8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c0b6:	4b0b      	ldr	r3, [pc, #44]	; (800c0e4 <ip_reass_free_complete_datagram+0x140>)
 800c0b8:	881a      	ldrh	r2, [r3, #0]
 800c0ba:	8bfb      	ldrh	r3, [r7, #30]
 800c0bc:	1ad3      	subs	r3, r2, r3
 800c0be:	b29a      	uxth	r2, r3
 800c0c0:	4b08      	ldr	r3, [pc, #32]	; (800c0e4 <ip_reass_free_complete_datagram+0x140>)
 800c0c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c0c4:	8bfb      	ldrh	r3, [r7, #30]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3720      	adds	r7, #32
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	08010568 	.word	0x08010568
 800c0d4:	080105a4 	.word	0x080105a4
 800c0d8:	080105b0 	.word	0x080105b0
 800c0dc:	080105d8 	.word	0x080105d8
 800c0e0:	080105ec 	.word	0x080105ec
 800c0e4:	20000204 	.word	0x20000204
 800c0e8:	0801060c 	.word	0x0801060c

0800c0ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b08a      	sub	sp, #40	; 0x28
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c0fe:	2300      	movs	r3, #0
 800c100:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c102:	2300      	movs	r3, #0
 800c104:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c106:	2300      	movs	r3, #0
 800c108:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c10a:	4b28      	ldr	r3, [pc, #160]	; (800c1ac <ip_reass_remove_oldest_datagram+0xc0>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c110:	e030      	b.n	800c174 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c114:	695a      	ldr	r2, [r3, #20]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d10c      	bne.n	800c138 <ip_reass_remove_oldest_datagram+0x4c>
 800c11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c120:	699a      	ldr	r2, [r3, #24]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	429a      	cmp	r2, r3
 800c128:	d106      	bne.n	800c138 <ip_reass_remove_oldest_datagram+0x4c>
 800c12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12c:	899a      	ldrh	r2, [r3, #12]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	889b      	ldrh	r3, [r3, #4]
 800c132:	b29b      	uxth	r3, r3
 800c134:	429a      	cmp	r2, r3
 800c136:	d014      	beq.n	800c162 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	3301      	adds	r3, #1
 800c13c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c13e:	6a3b      	ldr	r3, [r7, #32]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d104      	bne.n	800c14e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c146:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	61bb      	str	r3, [r7, #24]
 800c14c:	e009      	b.n	800c162 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c150:	7fda      	ldrb	r2, [r3, #31]
 800c152:	6a3b      	ldr	r3, [r7, #32]
 800c154:	7fdb      	ldrb	r3, [r3, #31]
 800c156:	429a      	cmp	r2, r3
 800c158:	d803      	bhi.n	800c162 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d001      	beq.n	800c16e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c176:	2b00      	cmp	r3, #0
 800c178:	d1cb      	bne.n	800c112 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c17a:	6a3b      	ldr	r3, [r7, #32]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d008      	beq.n	800c192 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c180:	69b9      	ldr	r1, [r7, #24]
 800c182:	6a38      	ldr	r0, [r7, #32]
 800c184:	f7ff ff0e 	bl	800bfa4 <ip_reass_free_complete_datagram>
 800c188:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	4413      	add	r3, r2
 800c190:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c192:	697a      	ldr	r2, [r7, #20]
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	429a      	cmp	r2, r3
 800c198:	da02      	bge.n	800c1a0 <ip_reass_remove_oldest_datagram+0xb4>
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	dcac      	bgt.n	800c0fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c1a0:	697b      	ldr	r3, [r7, #20]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3728      	adds	r7, #40	; 0x28
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	20000200 	.word	0x20000200

0800c1b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c1ba:	2004      	movs	r0, #4
 800c1bc:	f7f7 fdce 	bl	8003d5c <memp_malloc>
 800c1c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d110      	bne.n	800c1ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7ff ff8e 	bl	800c0ec <ip_reass_remove_oldest_datagram>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	dc03      	bgt.n	800c1e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c1d8:	2004      	movs	r0, #4
 800c1da:	f7f7 fdbf 	bl	8003d5c <memp_malloc>
 800c1de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d101      	bne.n	800c1ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	e016      	b.n	800c218 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c1ea:	2220      	movs	r2, #32
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f000 fdfa 	bl	800cde8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	220f      	movs	r2, #15
 800c1f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c1fa:	4b09      	ldr	r3, [pc, #36]	; (800c220 <ip_reass_enqueue_new_datagram+0x70>)
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c202:	4a07      	ldr	r2, [pc, #28]	; (800c220 <ip_reass_enqueue_new_datagram+0x70>)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	3308      	adds	r3, #8
 800c20c:	2214      	movs	r2, #20
 800c20e:	6879      	ldr	r1, [r7, #4]
 800c210:	4618      	mov	r0, r3
 800c212:	f000 fddb 	bl	800cdcc <memcpy>
  return ipr;
 800c216:	68fb      	ldr	r3, [r7, #12]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	20000200 	.word	0x20000200

0800c224 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c22e:	4b10      	ldr	r3, [pc, #64]	; (800c270 <ip_reass_dequeue_datagram+0x4c>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	429a      	cmp	r2, r3
 800c236:	d104      	bne.n	800c242 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a0c      	ldr	r2, [pc, #48]	; (800c270 <ip_reass_dequeue_datagram+0x4c>)
 800c23e:	6013      	str	r3, [r2, #0]
 800c240:	e00d      	b.n	800c25e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d106      	bne.n	800c256 <ip_reass_dequeue_datagram+0x32>
 800c248:	4b0a      	ldr	r3, [pc, #40]	; (800c274 <ip_reass_dequeue_datagram+0x50>)
 800c24a:	f240 1245 	movw	r2, #325	; 0x145
 800c24e:	490a      	ldr	r1, [pc, #40]	; (800c278 <ip_reass_dequeue_datagram+0x54>)
 800c250:	480a      	ldr	r0, [pc, #40]	; (800c27c <ip_reass_dequeue_datagram+0x58>)
 800c252:	f000 fdd1 	bl	800cdf8 <iprintf>
    prev->next = ipr->next;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c25e:	6879      	ldr	r1, [r7, #4]
 800c260:	2004      	movs	r0, #4
 800c262:	f7f7 fdc7 	bl	8003df4 <memp_free>
}
 800c266:	bf00      	nop
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	20000200 	.word	0x20000200
 800c274:	08010568 	.word	0x08010568
 800c278:	08010630 	.word	0x08010630
 800c27c:	080105b0 	.word	0x080105b0

0800c280 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b08c      	sub	sp, #48	; 0x30
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	60b9      	str	r1, [r7, #8]
 800c28a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800c28c:	2300      	movs	r3, #0
 800c28e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c290:	2301      	movs	r3, #1
 800c292:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	885b      	ldrh	r3, [r3, #2]
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7f7 f905 	bl	80034b0 <lwip_htons>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	f003 030f 	and.w	r3, r3, #15
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800c2b8:	7e7b      	ldrb	r3, [r7, #25]
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	8b7a      	ldrh	r2, [r7, #26]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d202      	bcs.n	800c2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c6:	e135      	b.n	800c534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800c2c8:	7e7b      	ldrb	r3, [r7, #25]
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	8b7a      	ldrh	r2, [r7, #26]
 800c2ce:	1ad3      	subs	r3, r2, r3
 800c2d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	88db      	ldrh	r3, [r3, #6]
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7f7 f8e9 	bl	80034b0 <lwip_htons>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	00db      	lsls	r3, r3, #3
 800c2e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	701a      	strb	r2, [r3, #0]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	705a      	strb	r2, [r3, #1]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	709a      	strb	r2, [r3, #2]
 800c2fe:	2200      	movs	r2, #0
 800c300:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c304:	8afa      	ldrh	r2, [r7, #22]
 800c306:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800c308:	8afa      	ldrh	r2, [r7, #22]
 800c30a:	8b7b      	ldrh	r3, [r7, #26]
 800c30c:	4413      	add	r3, r2
 800c30e:	b29a      	uxth	r2, r3
 800c310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c312:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800c314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c316:	88db      	ldrh	r3, [r3, #6]
 800c318:	b29b      	uxth	r3, r3
 800c31a:	8afa      	ldrh	r2, [r7, #22]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d902      	bls.n	800c326 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c320:	f04f 33ff 	mov.w	r3, #4294967295
 800c324:	e106      	b.n	800c534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	627b      	str	r3, [r7, #36]	; 0x24
 800c32c:	e068      	b.n	800c400 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800c32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c336:	889b      	ldrh	r3, [r3, #4]
 800c338:	b29a      	uxth	r2, r3
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	889b      	ldrh	r3, [r3, #4]
 800c33e:	b29b      	uxth	r3, r3
 800c340:	429a      	cmp	r2, r3
 800c342:	d235      	bcs.n	800c3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c348:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d020      	beq.n	800c392 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c352:	889b      	ldrh	r3, [r3, #4]
 800c354:	b29a      	uxth	r2, r3
 800c356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c358:	88db      	ldrh	r3, [r3, #6]
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d307      	bcc.n	800c370 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800c360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c362:	88db      	ldrh	r3, [r3, #6]
 800c364:	b29a      	uxth	r2, r3
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	889b      	ldrh	r3, [r3, #4]
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d902      	bls.n	800c376 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c370:	f04f 33ff 	mov.w	r3, #4294967295
 800c374:	e0de      	b.n	800c534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37e:	88db      	ldrh	r3, [r3, #6]
 800c380:	b29a      	uxth	r2, r3
 800c382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c384:	889b      	ldrh	r3, [r3, #4]
 800c386:	b29b      	uxth	r3, r3
 800c388:	429a      	cmp	r2, r3
 800c38a:	d03d      	beq.n	800c408 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c390:	e03a      	b.n	800c408 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800c392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c394:	88db      	ldrh	r3, [r3, #6]
 800c396:	b29a      	uxth	r2, r3
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	889b      	ldrh	r3, [r3, #4]
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d902      	bls.n	800c3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c3a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a6:	e0c5      	b.n	800c534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	605a      	str	r2, [r3, #4]
      break;
 800c3ae:	e02b      	b.n	800c408 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800c3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b2:	889b      	ldrh	r3, [r3, #4]
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	889b      	ldrh	r3, [r3, #4]
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d102      	bne.n	800c3c6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c4:	e0b6      	b.n	800c534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c8:	889b      	ldrh	r3, [r3, #4]
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	88db      	ldrh	r3, [r3, #6]
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d202      	bcs.n	800c3dc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c3da:	e0ab      	b.n	800c534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d009      	beq.n	800c3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800c3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e4:	88db      	ldrh	r3, [r3, #6]
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	889b      	ldrh	r3, [r3, #4]
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d001      	beq.n	800c3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800c400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c402:	2b00      	cmp	r3, #0
 800c404:	d193      	bne.n	800c32e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800c406:	e000      	b.n	800c40a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800c408:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d12d      	bne.n	800c46c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800c410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c412:	2b00      	cmp	r3, #0
 800c414:	d01c      	beq.n	800c450 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c418:	88db      	ldrh	r3, [r3, #6]
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41e:	889b      	ldrh	r3, [r3, #4]
 800c420:	b29b      	uxth	r3, r3
 800c422:	429a      	cmp	r2, r3
 800c424:	d906      	bls.n	800c434 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800c426:	4b45      	ldr	r3, [pc, #276]	; (800c53c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c428:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800c42c:	4944      	ldr	r1, [pc, #272]	; (800c540 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c42e:	4845      	ldr	r0, [pc, #276]	; (800c544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c430:	f000 fce2 	bl	800cdf8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c436:	68ba      	ldr	r2, [r7, #8]
 800c438:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43c:	88db      	ldrh	r3, [r3, #6]
 800c43e:	b29a      	uxth	r2, r3
 800c440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c442:	889b      	ldrh	r3, [r3, #4]
 800c444:	b29b      	uxth	r3, r3
 800c446:	429a      	cmp	r2, r3
 800c448:	d010      	beq.n	800c46c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	623b      	str	r3, [r7, #32]
 800c44e:	e00d      	b.n	800c46c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d006      	beq.n	800c466 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c458:	4b38      	ldr	r3, [pc, #224]	; (800c53c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c45a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800c45e:	493a      	ldr	r1, [pc, #232]	; (800c548 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c460:	4838      	ldr	r0, [pc, #224]	; (800c544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c462:	f000 fcc9 	bl	800cdf8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	68ba      	ldr	r2, [r7, #8]
 800c46a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d105      	bne.n	800c47e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	7f9b      	ldrb	r3, [r3, #30]
 800c476:	f003 0301 	and.w	r3, r3, #1
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d059      	beq.n	800c532 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800c47e:	6a3b      	ldr	r3, [r7, #32]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d04f      	beq.n	800c524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d006      	beq.n	800c49a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	889b      	ldrh	r3, [r3, #4]
 800c494:	b29b      	uxth	r3, r3
 800c496:	2b00      	cmp	r3, #0
 800c498:	d002      	beq.n	800c4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800c49a:	2300      	movs	r3, #0
 800c49c:	623b      	str	r3, [r7, #32]
 800c49e:	e041      	b.n	800c524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800c4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c4aa:	e012      	b.n	800c4d2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800c4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b4:	88db      	ldrh	r3, [r3, #6]
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ba:	889b      	ldrh	r3, [r3, #4]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d002      	beq.n	800c4c8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	623b      	str	r3, [r7, #32]
            break;
 800c4c6:	e007      	b.n	800c4d8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800c4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ca:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800c4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1e9      	bne.n	800c4ac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c4d8:	6a3b      	ldr	r3, [r7, #32]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d022      	beq.n	800c524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d106      	bne.n	800c4f4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800c4e6:	4b15      	ldr	r3, [pc, #84]	; (800c53c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c4e8:	f240 12df 	movw	r2, #479	; 0x1df
 800c4ec:	4917      	ldr	r1, [pc, #92]	; (800c54c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c4ee:	4815      	ldr	r0, [pc, #84]	; (800c544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c4f0:	f000 fc82 	bl	800cdf8 <iprintf>
          LWIP_ASSERT("sanity check",
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d106      	bne.n	800c50e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800c500:	4b0e      	ldr	r3, [pc, #56]	; (800c53c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c502:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c506:	4911      	ldr	r1, [pc, #68]	; (800c54c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c508:	480e      	ldr	r0, [pc, #56]	; (800c544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c50a:	f000 fc75 	bl	800cdf8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d006      	beq.n	800c524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800c516:	4b09      	ldr	r3, [pc, #36]	; (800c53c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c518:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800c51c:	490c      	ldr	r1, [pc, #48]	; (800c550 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c51e:	4809      	ldr	r0, [pc, #36]	; (800c544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c520:	f000 fc6a 	bl	800cdf8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c524:	6a3b      	ldr	r3, [r7, #32]
 800c526:	2b00      	cmp	r3, #0
 800c528:	bf14      	ite	ne
 800c52a:	2301      	movne	r3, #1
 800c52c:	2300      	moveq	r3, #0
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	e000      	b.n	800c534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c532:	2300      	movs	r3, #0
}
 800c534:	4618      	mov	r0, r3
 800c536:	3730      	adds	r7, #48	; 0x30
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	08010568 	.word	0x08010568
 800c540:	0801064c 	.word	0x0801064c
 800c544:	080105b0 	.word	0x080105b0
 800c548:	0801066c 	.word	0x0801066c
 800c54c:	080106a4 	.word	0x080106a4
 800c550:	080106b4 	.word	0x080106b4

0800c554 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b08e      	sub	sp, #56	; 0x38
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800c562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	f003 030f 	and.w	r3, r3, #15
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b14      	cmp	r3, #20
 800c572:	f040 8167 	bne.w	800c844 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800c576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c578:	88db      	ldrh	r3, [r3, #6]
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7f6 ff97 	bl	80034b0 <lwip_htons>
 800c582:	4603      	mov	r3, r0
 800c584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c588:	b29b      	uxth	r3, r3
 800c58a:	00db      	lsls	r3, r3, #3
 800c58c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c590:	885b      	ldrh	r3, [r3, #2]
 800c592:	b29b      	uxth	r3, r3
 800c594:	4618      	mov	r0, r3
 800c596:	f7f6 ff8b 	bl	80034b0 <lwip_htons>
 800c59a:	4603      	mov	r3, r0
 800c59c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800c59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	f003 030f 	and.w	r3, r3, #15
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800c5ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	f0c0 8146 	bcc.w	800c848 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800c5bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7f8 faad 	bl	8004b28 <pbuf_clen>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c5d2:	4b9f      	ldr	r3, [pc, #636]	; (800c850 <ip4_reass+0x2fc>)
 800c5d4:	881b      	ldrh	r3, [r3, #0]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	8c3b      	ldrh	r3, [r7, #32]
 800c5da:	4413      	add	r3, r2
 800c5dc:	2b0a      	cmp	r3, #10
 800c5de:	dd10      	ble.n	800c602 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c5e0:	8c3b      	ldrh	r3, [r7, #32]
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5e6:	f7ff fd81 	bl	800c0ec <ip_reass_remove_oldest_datagram>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f000 812d 	beq.w	800c84c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c5f2:	4b97      	ldr	r3, [pc, #604]	; (800c850 <ip4_reass+0x2fc>)
 800c5f4:	881b      	ldrh	r3, [r3, #0]
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	8c3b      	ldrh	r3, [r7, #32]
 800c5fa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c5fc:	2b0a      	cmp	r3, #10
 800c5fe:	f300 8125 	bgt.w	800c84c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c602:	4b94      	ldr	r3, [pc, #592]	; (800c854 <ip4_reass+0x300>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	633b      	str	r3, [r7, #48]	; 0x30
 800c608:	e015      	b.n	800c636 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60c:	695a      	ldr	r2, [r3, #20]
 800c60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	429a      	cmp	r2, r3
 800c614:	d10c      	bne.n	800c630 <ip4_reass+0xdc>
 800c616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c618:	699a      	ldr	r2, [r3, #24]
 800c61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d106      	bne.n	800c630 <ip4_reass+0xdc>
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	899a      	ldrh	r2, [r3, #12]
 800c626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c628:	889b      	ldrh	r3, [r3, #4]
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d006      	beq.n	800c63e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	633b      	str	r3, [r7, #48]	; 0x30
 800c636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1e6      	bne.n	800c60a <ip4_reass+0xb6>
 800c63c:	e000      	b.n	800c640 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800c63e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800c640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c642:	2b00      	cmp	r3, #0
 800c644:	d109      	bne.n	800c65a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c646:	8c3b      	ldrh	r3, [r7, #32]
 800c648:	4619      	mov	r1, r3
 800c64a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c64c:	f7ff fdb0 	bl	800c1b0 <ip_reass_enqueue_new_datagram>
 800c650:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800c652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c654:	2b00      	cmp	r3, #0
 800c656:	d11c      	bne.n	800c692 <ip4_reass+0x13e>
      goto nullreturn;
 800c658:	e109      	b.n	800c86e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65c:	88db      	ldrh	r3, [r3, #6]
 800c65e:	b29b      	uxth	r3, r3
 800c660:	4618      	mov	r0, r3
 800c662:	f7f6 ff25 	bl	80034b0 <lwip_htons>
 800c666:	4603      	mov	r3, r0
 800c668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d110      	bne.n	800c692 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	89db      	ldrh	r3, [r3, #14]
 800c674:	4618      	mov	r0, r3
 800c676:	f7f6 ff1b 	bl	80034b0 <lwip_htons>
 800c67a:	4603      	mov	r3, r0
 800c67c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c680:	2b00      	cmp	r3, #0
 800c682:	d006      	beq.n	800c692 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c686:	3308      	adds	r3, #8
 800c688:	2214      	movs	r2, #20
 800c68a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 fb9d 	bl	800cdcc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c694:	88db      	ldrh	r3, [r3, #6]
 800c696:	b29b      	uxth	r3, r3
 800c698:	f003 0320 	and.w	r3, r3, #32
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	bf0c      	ite	eq
 800c6a0:	2301      	moveq	r3, #1
 800c6a2:	2300      	movne	r3, #0
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00e      	beq.n	800c6cc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800c6ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c6b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6b2:	4413      	add	r3, r2
 800c6b4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c6b6:	8b7a      	ldrh	r2, [r7, #26]
 800c6b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	f0c0 80a0 	bcc.w	800c800 <ip4_reass+0x2ac>
 800c6c0:	8b7b      	ldrh	r3, [r7, #26]
 800c6c2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	f200 809a 	bhi.w	800c800 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800c6cc:	69fa      	ldr	r2, [r7, #28]
 800c6ce:	6879      	ldr	r1, [r7, #4]
 800c6d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6d2:	f7ff fdd5 	bl	800c280 <ip_reass_chain_frag_into_datagram_and_validate>
 800c6d6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6de:	f000 8091 	beq.w	800c804 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c6e2:	4b5b      	ldr	r3, [pc, #364]	; (800c850 <ip4_reass+0x2fc>)
 800c6e4:	881a      	ldrh	r2, [r3, #0]
 800c6e6:	8c3b      	ldrh	r3, [r7, #32]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	4b58      	ldr	r3, [pc, #352]	; (800c850 <ip4_reass+0x2fc>)
 800c6ee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00d      	beq.n	800c712 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800c6f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c6f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6fa:	4413      	add	r3, r2
 800c6fc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800c6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c700:	8a7a      	ldrh	r2, [r7, #18]
 800c702:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c706:	7f9b      	ldrb	r3, [r3, #30]
 800c708:	f043 0301 	orr.w	r3, r3, #1
 800c70c:	b2da      	uxtb	r2, r3
 800c70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c710:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	2b01      	cmp	r3, #1
 800c716:	d171      	bne.n	800c7fc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800c718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71a:	8b9b      	ldrh	r3, [r3, #28]
 800c71c:	3314      	adds	r3, #20
 800c71e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800c720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	3308      	adds	r3, #8
 800c736:	2214      	movs	r2, #20
 800c738:	4619      	mov	r1, r3
 800c73a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c73c:	f000 fb46 	bl	800cdcc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800c740:	8a3b      	ldrh	r3, [r7, #16]
 800c742:	4618      	mov	r0, r3
 800c744:	f7f6 feb4 	bl	80034b0 <lwip_htons>
 800c748:	4603      	mov	r3, r0
 800c74a:	461a      	mov	r2, r3
 800c74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c752:	2200      	movs	r2, #0
 800c754:	719a      	strb	r2, [r3, #6]
 800c756:	2200      	movs	r2, #0
 800c758:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75c:	2200      	movs	r2, #0
 800c75e:	729a      	strb	r2, [r3, #10]
 800c760:	2200      	movs	r2, #0
 800c762:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800c764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800c76a:	e00d      	b.n	800c788 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800c76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800c772:	2114      	movs	r1, #20
 800c774:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c776:	f7f8 f8c9 	bl	800490c <pbuf_remove_header>
      pbuf_cat(p, r);
 800c77a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f7f8 fa0d 	bl	8004b9c <pbuf_cat>
      r = iprh->next_pbuf;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800c788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1ee      	bne.n	800c76c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800c78e:	4b31      	ldr	r3, [pc, #196]	; (800c854 <ip4_reass+0x300>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c794:	429a      	cmp	r2, r3
 800c796:	d102      	bne.n	800c79e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800c798:	2300      	movs	r3, #0
 800c79a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c79c:	e010      	b.n	800c7c0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c79e:	4b2d      	ldr	r3, [pc, #180]	; (800c854 <ip4_reass+0x300>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7a4:	e007      	b.n	800c7b6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800c7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d006      	beq.n	800c7be <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1f4      	bne.n	800c7a6 <ip4_reass+0x252>
 800c7bc:	e000      	b.n	800c7c0 <ip4_reass+0x26c>
          break;
 800c7be:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800c7c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7c4:	f7ff fd2e 	bl	800c224 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f7f8 f9ad 	bl	8004b28 <pbuf_clen>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800c7d2:	4b1f      	ldr	r3, [pc, #124]	; (800c850 <ip4_reass+0x2fc>)
 800c7d4:	881b      	ldrh	r3, [r3, #0]
 800c7d6:	8c3a      	ldrh	r2, [r7, #32]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d906      	bls.n	800c7ea <ip4_reass+0x296>
 800c7dc:	4b1e      	ldr	r3, [pc, #120]	; (800c858 <ip4_reass+0x304>)
 800c7de:	f240 229b 	movw	r2, #667	; 0x29b
 800c7e2:	491e      	ldr	r1, [pc, #120]	; (800c85c <ip4_reass+0x308>)
 800c7e4:	481e      	ldr	r0, [pc, #120]	; (800c860 <ip4_reass+0x30c>)
 800c7e6:	f000 fb07 	bl	800cdf8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800c7ea:	4b19      	ldr	r3, [pc, #100]	; (800c850 <ip4_reass+0x2fc>)
 800c7ec:	881a      	ldrh	r2, [r3, #0]
 800c7ee:	8c3b      	ldrh	r3, [r7, #32]
 800c7f0:	1ad3      	subs	r3, r2, r3
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	4b16      	ldr	r3, [pc, #88]	; (800c850 <ip4_reass+0x2fc>)
 800c7f6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	e03c      	b.n	800c876 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	e03a      	b.n	800c876 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800c800:	bf00      	nop
 800c802:	e000      	b.n	800c806 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800c804:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800c806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d106      	bne.n	800c81a <ip4_reass+0x2c6>
 800c80c:	4b12      	ldr	r3, [pc, #72]	; (800c858 <ip4_reass+0x304>)
 800c80e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800c812:	4914      	ldr	r1, [pc, #80]	; (800c864 <ip4_reass+0x310>)
 800c814:	4812      	ldr	r0, [pc, #72]	; (800c860 <ip4_reass+0x30c>)
 800c816:	f000 faef 	bl	800cdf8 <iprintf>
  if (ipr->p == NULL) {
 800c81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d124      	bne.n	800c86c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800c822:	4b0c      	ldr	r3, [pc, #48]	; (800c854 <ip4_reass+0x300>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c828:	429a      	cmp	r2, r3
 800c82a:	d006      	beq.n	800c83a <ip4_reass+0x2e6>
 800c82c:	4b0a      	ldr	r3, [pc, #40]	; (800c858 <ip4_reass+0x304>)
 800c82e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c832:	490d      	ldr	r1, [pc, #52]	; (800c868 <ip4_reass+0x314>)
 800c834:	480a      	ldr	r0, [pc, #40]	; (800c860 <ip4_reass+0x30c>)
 800c836:	f000 fadf 	bl	800cdf8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800c83a:	2100      	movs	r1, #0
 800c83c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c83e:	f7ff fcf1 	bl	800c224 <ip_reass_dequeue_datagram>
 800c842:	e014      	b.n	800c86e <ip4_reass+0x31a>
    goto nullreturn;
 800c844:	bf00      	nop
 800c846:	e012      	b.n	800c86e <ip4_reass+0x31a>
    goto nullreturn;
 800c848:	bf00      	nop
 800c84a:	e010      	b.n	800c86e <ip4_reass+0x31a>
      goto nullreturn;
 800c84c:	bf00      	nop
 800c84e:	e00e      	b.n	800c86e <ip4_reass+0x31a>
 800c850:	20000204 	.word	0x20000204
 800c854:	20000200 	.word	0x20000200
 800c858:	08010568 	.word	0x08010568
 800c85c:	080106d8 	.word	0x080106d8
 800c860:	080105b0 	.word	0x080105b0
 800c864:	080106f4 	.word	0x080106f4
 800c868:	08010700 	.word	0x08010700
  }

nullreturn:
 800c86c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f7f8 f8d2 	bl	8004a18 <pbuf_free>
  return NULL;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3738      	adds	r7, #56	; 0x38
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop

0800c880 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800c884:	2005      	movs	r0, #5
 800c886:	f7f7 fa69 	bl	8003d5c <memp_malloc>
 800c88a:	4603      	mov	r3, r0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d106      	bne.n	800c8ac <ip_frag_free_pbuf_custom_ref+0x1c>
 800c89e:	4b07      	ldr	r3, [pc, #28]	; (800c8bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 800c8a0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800c8a4:	4906      	ldr	r1, [pc, #24]	; (800c8c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800c8a6:	4807      	ldr	r0, [pc, #28]	; (800c8c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800c8a8:	f000 faa6 	bl	800cdf8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800c8ac:	6879      	ldr	r1, [r7, #4]
 800c8ae:	2005      	movs	r0, #5
 800c8b0:	f7f7 faa0 	bl	8003df4 <memp_free>
}
 800c8b4:	bf00      	nop
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	08010568 	.word	0x08010568
 800c8c0:	08010720 	.word	0x08010720
 800c8c4:	080105b0 	.word	0x080105b0

0800c8c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d106      	bne.n	800c8e8 <ipfrag_free_pbuf_custom+0x20>
 800c8da:	4b11      	ldr	r3, [pc, #68]	; (800c920 <ipfrag_free_pbuf_custom+0x58>)
 800c8dc:	f240 22ce 	movw	r2, #718	; 0x2ce
 800c8e0:	4910      	ldr	r1, [pc, #64]	; (800c924 <ipfrag_free_pbuf_custom+0x5c>)
 800c8e2:	4811      	ldr	r0, [pc, #68]	; (800c928 <ipfrag_free_pbuf_custom+0x60>)
 800c8e4:	f000 fa88 	bl	800cdf8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d006      	beq.n	800c8fe <ipfrag_free_pbuf_custom+0x36>
 800c8f0:	4b0b      	ldr	r3, [pc, #44]	; (800c920 <ipfrag_free_pbuf_custom+0x58>)
 800c8f2:	f240 22cf 	movw	r2, #719	; 0x2cf
 800c8f6:	490d      	ldr	r1, [pc, #52]	; (800c92c <ipfrag_free_pbuf_custom+0x64>)
 800c8f8:	480b      	ldr	r0, [pc, #44]	; (800c928 <ipfrag_free_pbuf_custom+0x60>)
 800c8fa:	f000 fa7d 	bl	800cdf8 <iprintf>
  if (pcr->original != NULL) {
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	695b      	ldr	r3, [r3, #20]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d004      	beq.n	800c910 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	695b      	ldr	r3, [r3, #20]
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7f8 f884 	bl	8004a18 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800c910:	68f8      	ldr	r0, [r7, #12]
 800c912:	f7ff ffbd 	bl	800c890 <ip_frag_free_pbuf_custom_ref>
}
 800c916:	bf00      	nop
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	08010568 	.word	0x08010568
 800c924:	0801072c 	.word	0x0801072c
 800c928:	080105b0 	.word	0x080105b0
 800c92c:	08010738 	.word	0x08010738

0800c930 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b094      	sub	sp, #80	; 0x50
 800c934:	af02      	add	r7, sp, #8
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800c93c:	2300      	movs	r3, #0
 800c93e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c946:	3b14      	subs	r3, #20
 800c948:	2b00      	cmp	r3, #0
 800c94a:	da00      	bge.n	800c94e <ip4_frag+0x1e>
 800c94c:	3307      	adds	r3, #7
 800c94e:	10db      	asrs	r3, r3, #3
 800c950:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800c952:	2314      	movs	r3, #20
 800c954:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800c95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c95e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800c960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	f003 030f 	and.w	r3, r3, #15
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	2b14      	cmp	r3, #20
 800c970:	d002      	beq.n	800c978 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800c972:	f06f 0305 	mvn.w	r3, #5
 800c976:	e110      	b.n	800cb9a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	895b      	ldrh	r3, [r3, #10]
 800c97c:	2b13      	cmp	r3, #19
 800c97e:	d809      	bhi.n	800c994 <ip4_frag+0x64>
 800c980:	4b88      	ldr	r3, [pc, #544]	; (800cba4 <ip4_frag+0x274>)
 800c982:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800c986:	4988      	ldr	r1, [pc, #544]	; (800cba8 <ip4_frag+0x278>)
 800c988:	4888      	ldr	r0, [pc, #544]	; (800cbac <ip4_frag+0x27c>)
 800c98a:	f000 fa35 	bl	800cdf8 <iprintf>
 800c98e:	f06f 0305 	mvn.w	r3, #5
 800c992:	e102      	b.n	800cb9a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c996:	88db      	ldrh	r3, [r3, #6]
 800c998:	b29b      	uxth	r3, r3
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7f6 fd88 	bl	80034b0 <lwip_htons>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800c9a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c9a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800c9ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c9b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c9b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	891b      	ldrh	r3, [r3, #8]
 800c9ba:	3b14      	subs	r3, #20
 800c9bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800c9c0:	e0e1      	b.n	800cb86 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c9c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c9c4:	00db      	lsls	r3, r3, #3
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	bf28      	it	cs
 800c9d0:	4613      	movcs	r3, r2
 800c9d2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c9d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c9d8:	2114      	movs	r1, #20
 800c9da:	200e      	movs	r0, #14
 800c9dc:	f7f7 fd38 	bl	8004450 <pbuf_alloc>
 800c9e0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f000 80d5 	beq.w	800cb94 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ec:	895b      	ldrh	r3, [r3, #10]
 800c9ee:	2b13      	cmp	r3, #19
 800c9f0:	d806      	bhi.n	800ca00 <ip4_frag+0xd0>
 800c9f2:	4b6c      	ldr	r3, [pc, #432]	; (800cba4 <ip4_frag+0x274>)
 800c9f4:	f44f 7249 	mov.w	r2, #804	; 0x324
 800c9f8:	496d      	ldr	r1, [pc, #436]	; (800cbb0 <ip4_frag+0x280>)
 800c9fa:	486c      	ldr	r0, [pc, #432]	; (800cbac <ip4_frag+0x27c>)
 800c9fc:	f000 f9fc 	bl	800cdf8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	2214      	movs	r2, #20
 800ca06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f000 f9df 	bl	800cdcc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ca0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ca14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ca16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ca1a:	e064      	b.n	800cae6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	895a      	ldrh	r2, [r3, #10]
 800ca20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca22:	1ad3      	subs	r3, r2, r3
 800ca24:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	895b      	ldrh	r3, [r3, #10]
 800ca2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d906      	bls.n	800ca3e <ip4_frag+0x10e>
 800ca30:	4b5c      	ldr	r3, [pc, #368]	; (800cba4 <ip4_frag+0x274>)
 800ca32:	f240 322d 	movw	r2, #813	; 0x32d
 800ca36:	495f      	ldr	r1, [pc, #380]	; (800cbb4 <ip4_frag+0x284>)
 800ca38:	485c      	ldr	r0, [pc, #368]	; (800cbac <ip4_frag+0x27c>)
 800ca3a:	f000 f9dd 	bl	800cdf8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ca3e:	8bfa      	ldrh	r2, [r7, #30]
 800ca40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ca44:	4293      	cmp	r3, r2
 800ca46:	bf28      	it	cs
 800ca48:	4613      	movcs	r3, r2
 800ca4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ca4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d105      	bne.n	800ca62 <ip4_frag+0x132>
        poff = 0;
 800ca56:	2300      	movs	r3, #0
 800ca58:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	60fb      	str	r3, [r7, #12]
        continue;
 800ca60:	e041      	b.n	800cae6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ca62:	f7ff ff0d 	bl	800c880 <ip_frag_alloc_pbuf_custom_ref>
 800ca66:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d103      	bne.n	800ca76 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ca6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca70:	f7f7 ffd2 	bl	8004a18 <pbuf_free>
        goto memerr;
 800ca74:	e08f      	b.n	800cb96 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ca76:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ca7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca7e:	4413      	add	r3, r2
 800ca80:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ca84:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ca88:	9201      	str	r2, [sp, #4]
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2241      	movs	r2, #65	; 0x41
 800ca90:	2000      	movs	r0, #0
 800ca92:	f7f7 fe07 	bl	80046a4 <pbuf_alloced_custom>
 800ca96:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d106      	bne.n	800caac <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ca9e:	69b8      	ldr	r0, [r7, #24]
 800caa0:	f7ff fef6 	bl	800c890 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800caa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800caa6:	f7f7 ffb7 	bl	8004a18 <pbuf_free>
        goto memerr;
 800caaa:	e074      	b.n	800cb96 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f7f8 f853 	bl	8004b58 <pbuf_ref>
      pcr->original = p;
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	4a3f      	ldr	r2, [pc, #252]	; (800cbb8 <ip4_frag+0x288>)
 800cabc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800cabe:	6979      	ldr	r1, [r7, #20]
 800cac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cac2:	f7f8 f86b 	bl	8004b9c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800cac6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800caca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800cad4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d004      	beq.n	800cae6 <ip4_frag+0x1b6>
        poff = 0;
 800cadc:	2300      	movs	r3, #0
 800cade:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800cae6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800caea:	2b00      	cmp	r3, #0
 800caec:	d196      	bne.n	800ca1c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800caee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800caf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800caf4:	4413      	add	r3, r2
 800caf6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cafc:	f1a3 0213 	sub.w	r2, r3, #19
 800cb00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb04:	429a      	cmp	r2, r3
 800cb06:	bfcc      	ite	gt
 800cb08:	2301      	movgt	r3, #1
 800cb0a:	2300      	movle	r3, #0
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800cb10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cb14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb18:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800cb1a:	6a3b      	ldr	r3, [r7, #32]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d002      	beq.n	800cb26 <ip4_frag+0x1f6>
 800cb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d003      	beq.n	800cb2e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800cb26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cb2c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800cb2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7f6 fcbd 	bl	80034b0 <lwip_htons>
 800cb36:	4603      	mov	r3, r0
 800cb38:	461a      	mov	r2, r3
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800cb3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cb40:	3314      	adds	r3, #20
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7f6 fcb3 	bl	80034b0 <lwip_htons>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800cb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb54:	2200      	movs	r2, #0
 800cb56:	729a      	strb	r2, [r3, #10]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	695b      	ldr	r3, [r3, #20]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb64:	68b8      	ldr	r0, [r7, #8]
 800cb66:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800cb68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb6a:	f7f7 ff55 	bl	8004a18 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800cb6e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cb72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800cb7a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cb7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cb80:	4413      	add	r3, r2
 800cb82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800cb86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f47f af19 	bne.w	800c9c2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	e002      	b.n	800cb9a <ip4_frag+0x26a>
      goto memerr;
 800cb94:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800cb96:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3748      	adds	r7, #72	; 0x48
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	08010568 	.word	0x08010568
 800cba8:	08010744 	.word	0x08010744
 800cbac:	080105b0 	.word	0x080105b0
 800cbb0:	08010760 	.word	0x08010760
 800cbb4:	08010780 	.word	0x08010780
 800cbb8:	0800c8c9 	.word	0x0800c8c9

0800cbbc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b086      	sub	sp, #24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800cbc6:	230e      	movs	r3, #14
 800cbc8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	895b      	ldrh	r3, [r3, #10]
 800cbce:	2b0e      	cmp	r3, #14
 800cbd0:	d96e      	bls.n	800ccb0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	7bdb      	ldrb	r3, [r3, #15]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d106      	bne.n	800cbe8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	b2da      	uxtb	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	7b1a      	ldrb	r2, [r3, #12]
 800cbf2:	7b5b      	ldrb	r3, [r3, #13]
 800cbf4:	021b      	lsls	r3, r3, #8
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	f003 0301 	and.w	r3, r3, #1
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d023      	beq.n	800cc4e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d10f      	bne.n	800cc2e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	785b      	ldrb	r3, [r3, #1]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d11b      	bne.n	800cc4e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cc1a:	2b5e      	cmp	r3, #94	; 0x5e
 800cc1c:	d117      	bne.n	800cc4e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	7b5b      	ldrb	r3, [r3, #13]
 800cc22:	f043 0310 	orr.w	r3, r3, #16
 800cc26:	b2da      	uxtb	r2, r3
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	735a      	strb	r2, [r3, #13]
 800cc2c:	e00f      	b.n	800cc4e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	2206      	movs	r2, #6
 800cc32:	4928      	ldr	r1, [pc, #160]	; (800ccd4 <ethernet_input+0x118>)
 800cc34:	4618      	mov	r0, r3
 800cc36:	f000 f8bb 	bl	800cdb0 <memcmp>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d106      	bne.n	800cc4e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	7b5b      	ldrb	r3, [r3, #13]
 800cc44:	f043 0308 	orr.w	r3, r3, #8
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800cc4e:	89fb      	ldrh	r3, [r7, #14]
 800cc50:	2b08      	cmp	r3, #8
 800cc52:	d003      	beq.n	800cc5c <ethernet_input+0xa0>
 800cc54:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800cc58:	d014      	beq.n	800cc84 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800cc5a:	e032      	b.n	800ccc2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc62:	f003 0308 	and.w	r3, r3, #8
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d024      	beq.n	800ccb4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800cc6a:	8afb      	ldrh	r3, [r7, #22]
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f7f7 fe4c 	bl	800490c <pbuf_remove_header>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d11e      	bne.n	800ccb8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800cc7a:	6839      	ldr	r1, [r7, #0]
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7fe ff27 	bl	800bad0 <ip4_input>
      break;
 800cc82:	e013      	b.n	800ccac <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc8a:	f003 0308 	and.w	r3, r3, #8
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d014      	beq.n	800ccbc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800cc92:	8afb      	ldrh	r3, [r7, #22]
 800cc94:	4619      	mov	r1, r3
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7f7 fe38 	bl	800490c <pbuf_remove_header>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d10e      	bne.n	800ccc0 <ethernet_input+0x104>
        etharp_input(p, netif);
 800cca2:	6839      	ldr	r1, [r7, #0]
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f7fe f8c9 	bl	800ae3c <etharp_input>
      break;
 800ccaa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ccac:	2300      	movs	r3, #0
 800ccae:	e00c      	b.n	800ccca <ethernet_input+0x10e>
    goto free_and_return;
 800ccb0:	bf00      	nop
 800ccb2:	e006      	b.n	800ccc2 <ethernet_input+0x106>
        goto free_and_return;
 800ccb4:	bf00      	nop
 800ccb6:	e004      	b.n	800ccc2 <ethernet_input+0x106>
        goto free_and_return;
 800ccb8:	bf00      	nop
 800ccba:	e002      	b.n	800ccc2 <ethernet_input+0x106>
        goto free_and_return;
 800ccbc:	bf00      	nop
 800ccbe:	e000      	b.n	800ccc2 <ethernet_input+0x106>
        goto free_and_return;
 800ccc0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7f7 fea8 	bl	8004a18 <pbuf_free>
  return ERR_OK;
 800ccc8:	2300      	movs	r3, #0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3718      	adds	r7, #24
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	08010908 	.word	0x08010908

0800ccd8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	607a      	str	r2, [r7, #4]
 800cce4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800cce6:	8c3b      	ldrh	r3, [r7, #32]
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7f6 fbe1 	bl	80034b0 <lwip_htons>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ccf2:	210e      	movs	r1, #14
 800ccf4:	68b8      	ldr	r0, [r7, #8]
 800ccf6:	f7f7 fdf9 	bl	80048ec <pbuf_add_header>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d125      	bne.n	800cd4c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	8afa      	ldrh	r2, [r7, #22]
 800cd0a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	2206      	movs	r2, #6
 800cd10:	6839      	ldr	r1, [r7, #0]
 800cd12:	4618      	mov	r0, r3
 800cd14:	f000 f85a 	bl	800cdcc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	3306      	adds	r3, #6
 800cd1c:	2206      	movs	r2, #6
 800cd1e:	6879      	ldr	r1, [r7, #4]
 800cd20:	4618      	mov	r0, r3
 800cd22:	f000 f853 	bl	800cdcc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd2c:	2b06      	cmp	r3, #6
 800cd2e:	d006      	beq.n	800cd3e <ethernet_output+0x66>
 800cd30:	4b0a      	ldr	r3, [pc, #40]	; (800cd5c <ethernet_output+0x84>)
 800cd32:	f44f 7299 	mov.w	r2, #306	; 0x132
 800cd36:	490a      	ldr	r1, [pc, #40]	; (800cd60 <ethernet_output+0x88>)
 800cd38:	480a      	ldr	r0, [pc, #40]	; (800cd64 <ethernet_output+0x8c>)
 800cd3a:	f000 f85d 	bl	800cdf8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	699b      	ldr	r3, [r3, #24]
 800cd42:	68b9      	ldr	r1, [r7, #8]
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	4798      	blx	r3
 800cd48:	4603      	mov	r3, r0
 800cd4a:	e002      	b.n	800cd52 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800cd4c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800cd4e:	f06f 0301 	mvn.w	r3, #1
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3718      	adds	r7, #24
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	08010790 	.word	0x08010790
 800cd60:	080107c8 	.word	0x080107c8
 800cd64:	080107fc 	.word	0x080107fc

0800cd68 <__libc_init_array>:
 800cd68:	b570      	push	{r4, r5, r6, lr}
 800cd6a:	4d0d      	ldr	r5, [pc, #52]	; (800cda0 <__libc_init_array+0x38>)
 800cd6c:	4c0d      	ldr	r4, [pc, #52]	; (800cda4 <__libc_init_array+0x3c>)
 800cd6e:	1b64      	subs	r4, r4, r5
 800cd70:	10a4      	asrs	r4, r4, #2
 800cd72:	2600      	movs	r6, #0
 800cd74:	42a6      	cmp	r6, r4
 800cd76:	d109      	bne.n	800cd8c <__libc_init_array+0x24>
 800cd78:	4d0b      	ldr	r5, [pc, #44]	; (800cda8 <__libc_init_array+0x40>)
 800cd7a:	4c0c      	ldr	r4, [pc, #48]	; (800cdac <__libc_init_array+0x44>)
 800cd7c:	f001 f856 	bl	800de2c <_init>
 800cd80:	1b64      	subs	r4, r4, r5
 800cd82:	10a4      	asrs	r4, r4, #2
 800cd84:	2600      	movs	r6, #0
 800cd86:	42a6      	cmp	r6, r4
 800cd88:	d105      	bne.n	800cd96 <__libc_init_array+0x2e>
 800cd8a:	bd70      	pop	{r4, r5, r6, pc}
 800cd8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd90:	4798      	blx	r3
 800cd92:	3601      	adds	r6, #1
 800cd94:	e7ee      	b.n	800cd74 <__libc_init_array+0xc>
 800cd96:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd9a:	4798      	blx	r3
 800cd9c:	3601      	adds	r6, #1
 800cd9e:	e7f2      	b.n	800cd86 <__libc_init_array+0x1e>
 800cda0:	08010a6c 	.word	0x08010a6c
 800cda4:	08010a6c 	.word	0x08010a6c
 800cda8:	08010a6c 	.word	0x08010a6c
 800cdac:	08010a70 	.word	0x08010a70

0800cdb0 <memcmp>:
 800cdb0:	b530      	push	{r4, r5, lr}
 800cdb2:	3901      	subs	r1, #1
 800cdb4:	2400      	movs	r4, #0
 800cdb6:	42a2      	cmp	r2, r4
 800cdb8:	d101      	bne.n	800cdbe <memcmp+0xe>
 800cdba:	2000      	movs	r0, #0
 800cdbc:	e005      	b.n	800cdca <memcmp+0x1a>
 800cdbe:	5d03      	ldrb	r3, [r0, r4]
 800cdc0:	3401      	adds	r4, #1
 800cdc2:	5d0d      	ldrb	r5, [r1, r4]
 800cdc4:	42ab      	cmp	r3, r5
 800cdc6:	d0f6      	beq.n	800cdb6 <memcmp+0x6>
 800cdc8:	1b58      	subs	r0, r3, r5
 800cdca:	bd30      	pop	{r4, r5, pc}

0800cdcc <memcpy>:
 800cdcc:	440a      	add	r2, r1
 800cdce:	4291      	cmp	r1, r2
 800cdd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdd4:	d100      	bne.n	800cdd8 <memcpy+0xc>
 800cdd6:	4770      	bx	lr
 800cdd8:	b510      	push	{r4, lr}
 800cdda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cde2:	4291      	cmp	r1, r2
 800cde4:	d1f9      	bne.n	800cdda <memcpy+0xe>
 800cde6:	bd10      	pop	{r4, pc}

0800cde8 <memset>:
 800cde8:	4402      	add	r2, r0
 800cdea:	4603      	mov	r3, r0
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d100      	bne.n	800cdf2 <memset+0xa>
 800cdf0:	4770      	bx	lr
 800cdf2:	f803 1b01 	strb.w	r1, [r3], #1
 800cdf6:	e7f9      	b.n	800cdec <memset+0x4>

0800cdf8 <iprintf>:
 800cdf8:	b40f      	push	{r0, r1, r2, r3}
 800cdfa:	4b0a      	ldr	r3, [pc, #40]	; (800ce24 <iprintf+0x2c>)
 800cdfc:	b513      	push	{r0, r1, r4, lr}
 800cdfe:	681c      	ldr	r4, [r3, #0]
 800ce00:	b124      	cbz	r4, 800ce0c <iprintf+0x14>
 800ce02:	69a3      	ldr	r3, [r4, #24]
 800ce04:	b913      	cbnz	r3, 800ce0c <iprintf+0x14>
 800ce06:	4620      	mov	r0, r4
 800ce08:	f000 f8c4 	bl	800cf94 <__sinit>
 800ce0c:	ab05      	add	r3, sp, #20
 800ce0e:	9a04      	ldr	r2, [sp, #16]
 800ce10:	68a1      	ldr	r1, [r4, #8]
 800ce12:	9301      	str	r3, [sp, #4]
 800ce14:	4620      	mov	r0, r4
 800ce16:	f000 fa4b 	bl	800d2b0 <_vfiprintf_r>
 800ce1a:	b002      	add	sp, #8
 800ce1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce20:	b004      	add	sp, #16
 800ce22:	4770      	bx	lr
 800ce24:	20000014 	.word	0x20000014

0800ce28 <rand>:
 800ce28:	4b17      	ldr	r3, [pc, #92]	; (800ce88 <rand+0x60>)
 800ce2a:	b510      	push	{r4, lr}
 800ce2c:	681c      	ldr	r4, [r3, #0]
 800ce2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ce30:	b9b3      	cbnz	r3, 800ce60 <rand+0x38>
 800ce32:	2018      	movs	r0, #24
 800ce34:	f000 f960 	bl	800d0f8 <malloc>
 800ce38:	63a0      	str	r0, [r4, #56]	; 0x38
 800ce3a:	b928      	cbnz	r0, 800ce48 <rand+0x20>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	4b13      	ldr	r3, [pc, #76]	; (800ce8c <rand+0x64>)
 800ce40:	4813      	ldr	r0, [pc, #76]	; (800ce90 <rand+0x68>)
 800ce42:	214e      	movs	r1, #78	; 0x4e
 800ce44:	f000 f830 	bl	800cea8 <__assert_func>
 800ce48:	4a12      	ldr	r2, [pc, #72]	; (800ce94 <rand+0x6c>)
 800ce4a:	4b13      	ldr	r3, [pc, #76]	; (800ce98 <rand+0x70>)
 800ce4c:	e9c0 2300 	strd	r2, r3, [r0]
 800ce50:	4b12      	ldr	r3, [pc, #72]	; (800ce9c <rand+0x74>)
 800ce52:	6083      	str	r3, [r0, #8]
 800ce54:	230b      	movs	r3, #11
 800ce56:	8183      	strh	r3, [r0, #12]
 800ce58:	2201      	movs	r2, #1
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ce60:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ce62:	480f      	ldr	r0, [pc, #60]	; (800cea0 <rand+0x78>)
 800ce64:	690a      	ldr	r2, [r1, #16]
 800ce66:	694b      	ldr	r3, [r1, #20]
 800ce68:	4c0e      	ldr	r4, [pc, #56]	; (800cea4 <rand+0x7c>)
 800ce6a:	4350      	muls	r0, r2
 800ce6c:	fb04 0003 	mla	r0, r4, r3, r0
 800ce70:	fba2 3404 	umull	r3, r4, r2, r4
 800ce74:	1c5a      	adds	r2, r3, #1
 800ce76:	4404      	add	r4, r0
 800ce78:	f144 0000 	adc.w	r0, r4, #0
 800ce7c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800ce80:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ce84:	bd10      	pop	{r4, pc}
 800ce86:	bf00      	nop
 800ce88:	20000014 	.word	0x20000014
 800ce8c:	0801091c 	.word	0x0801091c
 800ce90:	08010933 	.word	0x08010933
 800ce94:	abcd330e 	.word	0xabcd330e
 800ce98:	e66d1234 	.word	0xe66d1234
 800ce9c:	0005deec 	.word	0x0005deec
 800cea0:	5851f42d 	.word	0x5851f42d
 800cea4:	4c957f2d 	.word	0x4c957f2d

0800cea8 <__assert_func>:
 800cea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ceaa:	4614      	mov	r4, r2
 800ceac:	461a      	mov	r2, r3
 800ceae:	4b09      	ldr	r3, [pc, #36]	; (800ced4 <__assert_func+0x2c>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4605      	mov	r5, r0
 800ceb4:	68d8      	ldr	r0, [r3, #12]
 800ceb6:	b14c      	cbz	r4, 800cecc <__assert_func+0x24>
 800ceb8:	4b07      	ldr	r3, [pc, #28]	; (800ced8 <__assert_func+0x30>)
 800ceba:	9100      	str	r1, [sp, #0]
 800cebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cec0:	4906      	ldr	r1, [pc, #24]	; (800cedc <__assert_func+0x34>)
 800cec2:	462b      	mov	r3, r5
 800cec4:	f000 f8e4 	bl	800d090 <fiprintf>
 800cec8:	f000 fddc 	bl	800da84 <abort>
 800cecc:	4b04      	ldr	r3, [pc, #16]	; (800cee0 <__assert_func+0x38>)
 800cece:	461c      	mov	r4, r3
 800ced0:	e7f3      	b.n	800ceba <__assert_func+0x12>
 800ced2:	bf00      	nop
 800ced4:	20000014 	.word	0x20000014
 800ced8:	08010992 	.word	0x08010992
 800cedc:	0801099f 	.word	0x0801099f
 800cee0:	080109cd 	.word	0x080109cd

0800cee4 <std>:
 800cee4:	2300      	movs	r3, #0
 800cee6:	b510      	push	{r4, lr}
 800cee8:	4604      	mov	r4, r0
 800ceea:	e9c0 3300 	strd	r3, r3, [r0]
 800ceee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cef2:	6083      	str	r3, [r0, #8]
 800cef4:	8181      	strh	r1, [r0, #12]
 800cef6:	6643      	str	r3, [r0, #100]	; 0x64
 800cef8:	81c2      	strh	r2, [r0, #14]
 800cefa:	6183      	str	r3, [r0, #24]
 800cefc:	4619      	mov	r1, r3
 800cefe:	2208      	movs	r2, #8
 800cf00:	305c      	adds	r0, #92	; 0x5c
 800cf02:	f7ff ff71 	bl	800cde8 <memset>
 800cf06:	4b05      	ldr	r3, [pc, #20]	; (800cf1c <std+0x38>)
 800cf08:	6263      	str	r3, [r4, #36]	; 0x24
 800cf0a:	4b05      	ldr	r3, [pc, #20]	; (800cf20 <std+0x3c>)
 800cf0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf0e:	4b05      	ldr	r3, [pc, #20]	; (800cf24 <std+0x40>)
 800cf10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf12:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <std+0x44>)
 800cf14:	6224      	str	r4, [r4, #32]
 800cf16:	6323      	str	r3, [r4, #48]	; 0x30
 800cf18:	bd10      	pop	{r4, pc}
 800cf1a:	bf00      	nop
 800cf1c:	0800d859 	.word	0x0800d859
 800cf20:	0800d87b 	.word	0x0800d87b
 800cf24:	0800d8b3 	.word	0x0800d8b3
 800cf28:	0800d8d7 	.word	0x0800d8d7

0800cf2c <_cleanup_r>:
 800cf2c:	4901      	ldr	r1, [pc, #4]	; (800cf34 <_cleanup_r+0x8>)
 800cf2e:	f000 b8c1 	b.w	800d0b4 <_fwalk_reent>
 800cf32:	bf00      	nop
 800cf34:	0800dbc1 	.word	0x0800dbc1

0800cf38 <__sfmoreglue>:
 800cf38:	b570      	push	{r4, r5, r6, lr}
 800cf3a:	1e4a      	subs	r2, r1, #1
 800cf3c:	2568      	movs	r5, #104	; 0x68
 800cf3e:	4355      	muls	r5, r2
 800cf40:	460e      	mov	r6, r1
 800cf42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf46:	f000 f92f 	bl	800d1a8 <_malloc_r>
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	b140      	cbz	r0, 800cf60 <__sfmoreglue+0x28>
 800cf4e:	2100      	movs	r1, #0
 800cf50:	e9c0 1600 	strd	r1, r6, [r0]
 800cf54:	300c      	adds	r0, #12
 800cf56:	60a0      	str	r0, [r4, #8]
 800cf58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf5c:	f7ff ff44 	bl	800cde8 <memset>
 800cf60:	4620      	mov	r0, r4
 800cf62:	bd70      	pop	{r4, r5, r6, pc}

0800cf64 <__sfp_lock_acquire>:
 800cf64:	4801      	ldr	r0, [pc, #4]	; (800cf6c <__sfp_lock_acquire+0x8>)
 800cf66:	f000 b8c5 	b.w	800d0f4 <__retarget_lock_acquire_recursive>
 800cf6a:	bf00      	nop
 800cf6c:	20008a78 	.word	0x20008a78

0800cf70 <__sfp_lock_release>:
 800cf70:	4801      	ldr	r0, [pc, #4]	; (800cf78 <__sfp_lock_release+0x8>)
 800cf72:	f000 b8c0 	b.w	800d0f6 <__retarget_lock_release_recursive>
 800cf76:	bf00      	nop
 800cf78:	20008a78 	.word	0x20008a78

0800cf7c <__sinit_lock_acquire>:
 800cf7c:	4801      	ldr	r0, [pc, #4]	; (800cf84 <__sinit_lock_acquire+0x8>)
 800cf7e:	f000 b8b9 	b.w	800d0f4 <__retarget_lock_acquire_recursive>
 800cf82:	bf00      	nop
 800cf84:	20008a73 	.word	0x20008a73

0800cf88 <__sinit_lock_release>:
 800cf88:	4801      	ldr	r0, [pc, #4]	; (800cf90 <__sinit_lock_release+0x8>)
 800cf8a:	f000 b8b4 	b.w	800d0f6 <__retarget_lock_release_recursive>
 800cf8e:	bf00      	nop
 800cf90:	20008a73 	.word	0x20008a73

0800cf94 <__sinit>:
 800cf94:	b510      	push	{r4, lr}
 800cf96:	4604      	mov	r4, r0
 800cf98:	f7ff fff0 	bl	800cf7c <__sinit_lock_acquire>
 800cf9c:	69a3      	ldr	r3, [r4, #24]
 800cf9e:	b11b      	cbz	r3, 800cfa8 <__sinit+0x14>
 800cfa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfa4:	f7ff bff0 	b.w	800cf88 <__sinit_lock_release>
 800cfa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cfac:	6523      	str	r3, [r4, #80]	; 0x50
 800cfae:	4b13      	ldr	r3, [pc, #76]	; (800cffc <__sinit+0x68>)
 800cfb0:	4a13      	ldr	r2, [pc, #76]	; (800d000 <__sinit+0x6c>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800cfb6:	42a3      	cmp	r3, r4
 800cfb8:	bf04      	itt	eq
 800cfba:	2301      	moveq	r3, #1
 800cfbc:	61a3      	streq	r3, [r4, #24]
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f000 f820 	bl	800d004 <__sfp>
 800cfc4:	6060      	str	r0, [r4, #4]
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f000 f81c 	bl	800d004 <__sfp>
 800cfcc:	60a0      	str	r0, [r4, #8]
 800cfce:	4620      	mov	r0, r4
 800cfd0:	f000 f818 	bl	800d004 <__sfp>
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	60e0      	str	r0, [r4, #12]
 800cfd8:	2104      	movs	r1, #4
 800cfda:	6860      	ldr	r0, [r4, #4]
 800cfdc:	f7ff ff82 	bl	800cee4 <std>
 800cfe0:	68a0      	ldr	r0, [r4, #8]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	2109      	movs	r1, #9
 800cfe6:	f7ff ff7d 	bl	800cee4 <std>
 800cfea:	68e0      	ldr	r0, [r4, #12]
 800cfec:	2202      	movs	r2, #2
 800cfee:	2112      	movs	r1, #18
 800cff0:	f7ff ff78 	bl	800cee4 <std>
 800cff4:	2301      	movs	r3, #1
 800cff6:	61a3      	str	r3, [r4, #24]
 800cff8:	e7d2      	b.n	800cfa0 <__sinit+0xc>
 800cffa:	bf00      	nop
 800cffc:	08010918 	.word	0x08010918
 800d000:	0800cf2d 	.word	0x0800cf2d

0800d004 <__sfp>:
 800d004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d006:	4607      	mov	r7, r0
 800d008:	f7ff ffac 	bl	800cf64 <__sfp_lock_acquire>
 800d00c:	4b1e      	ldr	r3, [pc, #120]	; (800d088 <__sfp+0x84>)
 800d00e:	681e      	ldr	r6, [r3, #0]
 800d010:	69b3      	ldr	r3, [r6, #24]
 800d012:	b913      	cbnz	r3, 800d01a <__sfp+0x16>
 800d014:	4630      	mov	r0, r6
 800d016:	f7ff ffbd 	bl	800cf94 <__sinit>
 800d01a:	3648      	adds	r6, #72	; 0x48
 800d01c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d020:	3b01      	subs	r3, #1
 800d022:	d503      	bpl.n	800d02c <__sfp+0x28>
 800d024:	6833      	ldr	r3, [r6, #0]
 800d026:	b30b      	cbz	r3, 800d06c <__sfp+0x68>
 800d028:	6836      	ldr	r6, [r6, #0]
 800d02a:	e7f7      	b.n	800d01c <__sfp+0x18>
 800d02c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d030:	b9d5      	cbnz	r5, 800d068 <__sfp+0x64>
 800d032:	4b16      	ldr	r3, [pc, #88]	; (800d08c <__sfp+0x88>)
 800d034:	60e3      	str	r3, [r4, #12]
 800d036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d03a:	6665      	str	r5, [r4, #100]	; 0x64
 800d03c:	f000 f859 	bl	800d0f2 <__retarget_lock_init_recursive>
 800d040:	f7ff ff96 	bl	800cf70 <__sfp_lock_release>
 800d044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d04c:	6025      	str	r5, [r4, #0]
 800d04e:	61a5      	str	r5, [r4, #24]
 800d050:	2208      	movs	r2, #8
 800d052:	4629      	mov	r1, r5
 800d054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d058:	f7ff fec6 	bl	800cde8 <memset>
 800d05c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d064:	4620      	mov	r0, r4
 800d066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d068:	3468      	adds	r4, #104	; 0x68
 800d06a:	e7d9      	b.n	800d020 <__sfp+0x1c>
 800d06c:	2104      	movs	r1, #4
 800d06e:	4638      	mov	r0, r7
 800d070:	f7ff ff62 	bl	800cf38 <__sfmoreglue>
 800d074:	4604      	mov	r4, r0
 800d076:	6030      	str	r0, [r6, #0]
 800d078:	2800      	cmp	r0, #0
 800d07a:	d1d5      	bne.n	800d028 <__sfp+0x24>
 800d07c:	f7ff ff78 	bl	800cf70 <__sfp_lock_release>
 800d080:	230c      	movs	r3, #12
 800d082:	603b      	str	r3, [r7, #0]
 800d084:	e7ee      	b.n	800d064 <__sfp+0x60>
 800d086:	bf00      	nop
 800d088:	08010918 	.word	0x08010918
 800d08c:	ffff0001 	.word	0xffff0001

0800d090 <fiprintf>:
 800d090:	b40e      	push	{r1, r2, r3}
 800d092:	b503      	push	{r0, r1, lr}
 800d094:	4601      	mov	r1, r0
 800d096:	ab03      	add	r3, sp, #12
 800d098:	4805      	ldr	r0, [pc, #20]	; (800d0b0 <fiprintf+0x20>)
 800d09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d09e:	6800      	ldr	r0, [r0, #0]
 800d0a0:	9301      	str	r3, [sp, #4]
 800d0a2:	f000 f905 	bl	800d2b0 <_vfiprintf_r>
 800d0a6:	b002      	add	sp, #8
 800d0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0ac:	b003      	add	sp, #12
 800d0ae:	4770      	bx	lr
 800d0b0:	20000014 	.word	0x20000014

0800d0b4 <_fwalk_reent>:
 800d0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b8:	4606      	mov	r6, r0
 800d0ba:	4688      	mov	r8, r1
 800d0bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d0c0:	2700      	movs	r7, #0
 800d0c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0c6:	f1b9 0901 	subs.w	r9, r9, #1
 800d0ca:	d505      	bpl.n	800d0d8 <_fwalk_reent+0x24>
 800d0cc:	6824      	ldr	r4, [r4, #0]
 800d0ce:	2c00      	cmp	r4, #0
 800d0d0:	d1f7      	bne.n	800d0c2 <_fwalk_reent+0xe>
 800d0d2:	4638      	mov	r0, r7
 800d0d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0d8:	89ab      	ldrh	r3, [r5, #12]
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d907      	bls.n	800d0ee <_fwalk_reent+0x3a>
 800d0de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	d003      	beq.n	800d0ee <_fwalk_reent+0x3a>
 800d0e6:	4629      	mov	r1, r5
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	47c0      	blx	r8
 800d0ec:	4307      	orrs	r7, r0
 800d0ee:	3568      	adds	r5, #104	; 0x68
 800d0f0:	e7e9      	b.n	800d0c6 <_fwalk_reent+0x12>

0800d0f2 <__retarget_lock_init_recursive>:
 800d0f2:	4770      	bx	lr

0800d0f4 <__retarget_lock_acquire_recursive>:
 800d0f4:	4770      	bx	lr

0800d0f6 <__retarget_lock_release_recursive>:
 800d0f6:	4770      	bx	lr

0800d0f8 <malloc>:
 800d0f8:	4b02      	ldr	r3, [pc, #8]	; (800d104 <malloc+0xc>)
 800d0fa:	4601      	mov	r1, r0
 800d0fc:	6818      	ldr	r0, [r3, #0]
 800d0fe:	f000 b853 	b.w	800d1a8 <_malloc_r>
 800d102:	bf00      	nop
 800d104:	20000014 	.word	0x20000014

0800d108 <_free_r>:
 800d108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d10a:	2900      	cmp	r1, #0
 800d10c:	d048      	beq.n	800d1a0 <_free_r+0x98>
 800d10e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d112:	9001      	str	r0, [sp, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	f1a1 0404 	sub.w	r4, r1, #4
 800d11a:	bfb8      	it	lt
 800d11c:	18e4      	addlt	r4, r4, r3
 800d11e:	f000 fe01 	bl	800dd24 <__malloc_lock>
 800d122:	4a20      	ldr	r2, [pc, #128]	; (800d1a4 <_free_r+0x9c>)
 800d124:	9801      	ldr	r0, [sp, #4]
 800d126:	6813      	ldr	r3, [r2, #0]
 800d128:	4615      	mov	r5, r2
 800d12a:	b933      	cbnz	r3, 800d13a <_free_r+0x32>
 800d12c:	6063      	str	r3, [r4, #4]
 800d12e:	6014      	str	r4, [r2, #0]
 800d130:	b003      	add	sp, #12
 800d132:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d136:	f000 bdfb 	b.w	800dd30 <__malloc_unlock>
 800d13a:	42a3      	cmp	r3, r4
 800d13c:	d90b      	bls.n	800d156 <_free_r+0x4e>
 800d13e:	6821      	ldr	r1, [r4, #0]
 800d140:	1862      	adds	r2, r4, r1
 800d142:	4293      	cmp	r3, r2
 800d144:	bf04      	itt	eq
 800d146:	681a      	ldreq	r2, [r3, #0]
 800d148:	685b      	ldreq	r3, [r3, #4]
 800d14a:	6063      	str	r3, [r4, #4]
 800d14c:	bf04      	itt	eq
 800d14e:	1852      	addeq	r2, r2, r1
 800d150:	6022      	streq	r2, [r4, #0]
 800d152:	602c      	str	r4, [r5, #0]
 800d154:	e7ec      	b.n	800d130 <_free_r+0x28>
 800d156:	461a      	mov	r2, r3
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	b10b      	cbz	r3, 800d160 <_free_r+0x58>
 800d15c:	42a3      	cmp	r3, r4
 800d15e:	d9fa      	bls.n	800d156 <_free_r+0x4e>
 800d160:	6811      	ldr	r1, [r2, #0]
 800d162:	1855      	adds	r5, r2, r1
 800d164:	42a5      	cmp	r5, r4
 800d166:	d10b      	bne.n	800d180 <_free_r+0x78>
 800d168:	6824      	ldr	r4, [r4, #0]
 800d16a:	4421      	add	r1, r4
 800d16c:	1854      	adds	r4, r2, r1
 800d16e:	42a3      	cmp	r3, r4
 800d170:	6011      	str	r1, [r2, #0]
 800d172:	d1dd      	bne.n	800d130 <_free_r+0x28>
 800d174:	681c      	ldr	r4, [r3, #0]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	6053      	str	r3, [r2, #4]
 800d17a:	4421      	add	r1, r4
 800d17c:	6011      	str	r1, [r2, #0]
 800d17e:	e7d7      	b.n	800d130 <_free_r+0x28>
 800d180:	d902      	bls.n	800d188 <_free_r+0x80>
 800d182:	230c      	movs	r3, #12
 800d184:	6003      	str	r3, [r0, #0]
 800d186:	e7d3      	b.n	800d130 <_free_r+0x28>
 800d188:	6825      	ldr	r5, [r4, #0]
 800d18a:	1961      	adds	r1, r4, r5
 800d18c:	428b      	cmp	r3, r1
 800d18e:	bf04      	itt	eq
 800d190:	6819      	ldreq	r1, [r3, #0]
 800d192:	685b      	ldreq	r3, [r3, #4]
 800d194:	6063      	str	r3, [r4, #4]
 800d196:	bf04      	itt	eq
 800d198:	1949      	addeq	r1, r1, r5
 800d19a:	6021      	streq	r1, [r4, #0]
 800d19c:	6054      	str	r4, [r2, #4]
 800d19e:	e7c7      	b.n	800d130 <_free_r+0x28>
 800d1a0:	b003      	add	sp, #12
 800d1a2:	bd30      	pop	{r4, r5, pc}
 800d1a4:	20000208 	.word	0x20000208

0800d1a8 <_malloc_r>:
 800d1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1aa:	1ccd      	adds	r5, r1, #3
 800d1ac:	f025 0503 	bic.w	r5, r5, #3
 800d1b0:	3508      	adds	r5, #8
 800d1b2:	2d0c      	cmp	r5, #12
 800d1b4:	bf38      	it	cc
 800d1b6:	250c      	movcc	r5, #12
 800d1b8:	2d00      	cmp	r5, #0
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	db01      	blt.n	800d1c2 <_malloc_r+0x1a>
 800d1be:	42a9      	cmp	r1, r5
 800d1c0:	d903      	bls.n	800d1ca <_malloc_r+0x22>
 800d1c2:	230c      	movs	r3, #12
 800d1c4:	6033      	str	r3, [r6, #0]
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1ca:	f000 fdab 	bl	800dd24 <__malloc_lock>
 800d1ce:	4921      	ldr	r1, [pc, #132]	; (800d254 <_malloc_r+0xac>)
 800d1d0:	680a      	ldr	r2, [r1, #0]
 800d1d2:	4614      	mov	r4, r2
 800d1d4:	b99c      	cbnz	r4, 800d1fe <_malloc_r+0x56>
 800d1d6:	4f20      	ldr	r7, [pc, #128]	; (800d258 <_malloc_r+0xb0>)
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	b923      	cbnz	r3, 800d1e6 <_malloc_r+0x3e>
 800d1dc:	4621      	mov	r1, r4
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f000 fb2a 	bl	800d838 <_sbrk_r>
 800d1e4:	6038      	str	r0, [r7, #0]
 800d1e6:	4629      	mov	r1, r5
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	f000 fb25 	bl	800d838 <_sbrk_r>
 800d1ee:	1c43      	adds	r3, r0, #1
 800d1f0:	d123      	bne.n	800d23a <_malloc_r+0x92>
 800d1f2:	230c      	movs	r3, #12
 800d1f4:	6033      	str	r3, [r6, #0]
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	f000 fd9a 	bl	800dd30 <__malloc_unlock>
 800d1fc:	e7e3      	b.n	800d1c6 <_malloc_r+0x1e>
 800d1fe:	6823      	ldr	r3, [r4, #0]
 800d200:	1b5b      	subs	r3, r3, r5
 800d202:	d417      	bmi.n	800d234 <_malloc_r+0x8c>
 800d204:	2b0b      	cmp	r3, #11
 800d206:	d903      	bls.n	800d210 <_malloc_r+0x68>
 800d208:	6023      	str	r3, [r4, #0]
 800d20a:	441c      	add	r4, r3
 800d20c:	6025      	str	r5, [r4, #0]
 800d20e:	e004      	b.n	800d21a <_malloc_r+0x72>
 800d210:	6863      	ldr	r3, [r4, #4]
 800d212:	42a2      	cmp	r2, r4
 800d214:	bf0c      	ite	eq
 800d216:	600b      	streq	r3, [r1, #0]
 800d218:	6053      	strne	r3, [r2, #4]
 800d21a:	4630      	mov	r0, r6
 800d21c:	f000 fd88 	bl	800dd30 <__malloc_unlock>
 800d220:	f104 000b 	add.w	r0, r4, #11
 800d224:	1d23      	adds	r3, r4, #4
 800d226:	f020 0007 	bic.w	r0, r0, #7
 800d22a:	1ac2      	subs	r2, r0, r3
 800d22c:	d0cc      	beq.n	800d1c8 <_malloc_r+0x20>
 800d22e:	1a1b      	subs	r3, r3, r0
 800d230:	50a3      	str	r3, [r4, r2]
 800d232:	e7c9      	b.n	800d1c8 <_malloc_r+0x20>
 800d234:	4622      	mov	r2, r4
 800d236:	6864      	ldr	r4, [r4, #4]
 800d238:	e7cc      	b.n	800d1d4 <_malloc_r+0x2c>
 800d23a:	1cc4      	adds	r4, r0, #3
 800d23c:	f024 0403 	bic.w	r4, r4, #3
 800d240:	42a0      	cmp	r0, r4
 800d242:	d0e3      	beq.n	800d20c <_malloc_r+0x64>
 800d244:	1a21      	subs	r1, r4, r0
 800d246:	4630      	mov	r0, r6
 800d248:	f000 faf6 	bl	800d838 <_sbrk_r>
 800d24c:	3001      	adds	r0, #1
 800d24e:	d1dd      	bne.n	800d20c <_malloc_r+0x64>
 800d250:	e7cf      	b.n	800d1f2 <_malloc_r+0x4a>
 800d252:	bf00      	nop
 800d254:	20000208 	.word	0x20000208
 800d258:	2000020c 	.word	0x2000020c

0800d25c <__sfputc_r>:
 800d25c:	6893      	ldr	r3, [r2, #8]
 800d25e:	3b01      	subs	r3, #1
 800d260:	2b00      	cmp	r3, #0
 800d262:	b410      	push	{r4}
 800d264:	6093      	str	r3, [r2, #8]
 800d266:	da08      	bge.n	800d27a <__sfputc_r+0x1e>
 800d268:	6994      	ldr	r4, [r2, #24]
 800d26a:	42a3      	cmp	r3, r4
 800d26c:	db01      	blt.n	800d272 <__sfputc_r+0x16>
 800d26e:	290a      	cmp	r1, #10
 800d270:	d103      	bne.n	800d27a <__sfputc_r+0x1e>
 800d272:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d276:	f000 bb33 	b.w	800d8e0 <__swbuf_r>
 800d27a:	6813      	ldr	r3, [r2, #0]
 800d27c:	1c58      	adds	r0, r3, #1
 800d27e:	6010      	str	r0, [r2, #0]
 800d280:	7019      	strb	r1, [r3, #0]
 800d282:	4608      	mov	r0, r1
 800d284:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <__sfputs_r>:
 800d28a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28c:	4606      	mov	r6, r0
 800d28e:	460f      	mov	r7, r1
 800d290:	4614      	mov	r4, r2
 800d292:	18d5      	adds	r5, r2, r3
 800d294:	42ac      	cmp	r4, r5
 800d296:	d101      	bne.n	800d29c <__sfputs_r+0x12>
 800d298:	2000      	movs	r0, #0
 800d29a:	e007      	b.n	800d2ac <__sfputs_r+0x22>
 800d29c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2a0:	463a      	mov	r2, r7
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	f7ff ffda 	bl	800d25c <__sfputc_r>
 800d2a8:	1c43      	adds	r3, r0, #1
 800d2aa:	d1f3      	bne.n	800d294 <__sfputs_r+0xa>
 800d2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d2b0 <_vfiprintf_r>:
 800d2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b4:	460d      	mov	r5, r1
 800d2b6:	b09d      	sub	sp, #116	; 0x74
 800d2b8:	4614      	mov	r4, r2
 800d2ba:	4698      	mov	r8, r3
 800d2bc:	4606      	mov	r6, r0
 800d2be:	b118      	cbz	r0, 800d2c8 <_vfiprintf_r+0x18>
 800d2c0:	6983      	ldr	r3, [r0, #24]
 800d2c2:	b90b      	cbnz	r3, 800d2c8 <_vfiprintf_r+0x18>
 800d2c4:	f7ff fe66 	bl	800cf94 <__sinit>
 800d2c8:	4b89      	ldr	r3, [pc, #548]	; (800d4f0 <_vfiprintf_r+0x240>)
 800d2ca:	429d      	cmp	r5, r3
 800d2cc:	d11b      	bne.n	800d306 <_vfiprintf_r+0x56>
 800d2ce:	6875      	ldr	r5, [r6, #4]
 800d2d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2d2:	07d9      	lsls	r1, r3, #31
 800d2d4:	d405      	bmi.n	800d2e2 <_vfiprintf_r+0x32>
 800d2d6:	89ab      	ldrh	r3, [r5, #12]
 800d2d8:	059a      	lsls	r2, r3, #22
 800d2da:	d402      	bmi.n	800d2e2 <_vfiprintf_r+0x32>
 800d2dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2de:	f7ff ff09 	bl	800d0f4 <__retarget_lock_acquire_recursive>
 800d2e2:	89ab      	ldrh	r3, [r5, #12]
 800d2e4:	071b      	lsls	r3, r3, #28
 800d2e6:	d501      	bpl.n	800d2ec <_vfiprintf_r+0x3c>
 800d2e8:	692b      	ldr	r3, [r5, #16]
 800d2ea:	b9eb      	cbnz	r3, 800d328 <_vfiprintf_r+0x78>
 800d2ec:	4629      	mov	r1, r5
 800d2ee:	4630      	mov	r0, r6
 800d2f0:	f000 fb5a 	bl	800d9a8 <__swsetup_r>
 800d2f4:	b1c0      	cbz	r0, 800d328 <_vfiprintf_r+0x78>
 800d2f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2f8:	07dc      	lsls	r4, r3, #31
 800d2fa:	d50e      	bpl.n	800d31a <_vfiprintf_r+0x6a>
 800d2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d300:	b01d      	add	sp, #116	; 0x74
 800d302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d306:	4b7b      	ldr	r3, [pc, #492]	; (800d4f4 <_vfiprintf_r+0x244>)
 800d308:	429d      	cmp	r5, r3
 800d30a:	d101      	bne.n	800d310 <_vfiprintf_r+0x60>
 800d30c:	68b5      	ldr	r5, [r6, #8]
 800d30e:	e7df      	b.n	800d2d0 <_vfiprintf_r+0x20>
 800d310:	4b79      	ldr	r3, [pc, #484]	; (800d4f8 <_vfiprintf_r+0x248>)
 800d312:	429d      	cmp	r5, r3
 800d314:	bf08      	it	eq
 800d316:	68f5      	ldreq	r5, [r6, #12]
 800d318:	e7da      	b.n	800d2d0 <_vfiprintf_r+0x20>
 800d31a:	89ab      	ldrh	r3, [r5, #12]
 800d31c:	0598      	lsls	r0, r3, #22
 800d31e:	d4ed      	bmi.n	800d2fc <_vfiprintf_r+0x4c>
 800d320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d322:	f7ff fee8 	bl	800d0f6 <__retarget_lock_release_recursive>
 800d326:	e7e9      	b.n	800d2fc <_vfiprintf_r+0x4c>
 800d328:	2300      	movs	r3, #0
 800d32a:	9309      	str	r3, [sp, #36]	; 0x24
 800d32c:	2320      	movs	r3, #32
 800d32e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d332:	f8cd 800c 	str.w	r8, [sp, #12]
 800d336:	2330      	movs	r3, #48	; 0x30
 800d338:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d4fc <_vfiprintf_r+0x24c>
 800d33c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d340:	f04f 0901 	mov.w	r9, #1
 800d344:	4623      	mov	r3, r4
 800d346:	469a      	mov	sl, r3
 800d348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d34c:	b10a      	cbz	r2, 800d352 <_vfiprintf_r+0xa2>
 800d34e:	2a25      	cmp	r2, #37	; 0x25
 800d350:	d1f9      	bne.n	800d346 <_vfiprintf_r+0x96>
 800d352:	ebba 0b04 	subs.w	fp, sl, r4
 800d356:	d00b      	beq.n	800d370 <_vfiprintf_r+0xc0>
 800d358:	465b      	mov	r3, fp
 800d35a:	4622      	mov	r2, r4
 800d35c:	4629      	mov	r1, r5
 800d35e:	4630      	mov	r0, r6
 800d360:	f7ff ff93 	bl	800d28a <__sfputs_r>
 800d364:	3001      	adds	r0, #1
 800d366:	f000 80aa 	beq.w	800d4be <_vfiprintf_r+0x20e>
 800d36a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d36c:	445a      	add	r2, fp
 800d36e:	9209      	str	r2, [sp, #36]	; 0x24
 800d370:	f89a 3000 	ldrb.w	r3, [sl]
 800d374:	2b00      	cmp	r3, #0
 800d376:	f000 80a2 	beq.w	800d4be <_vfiprintf_r+0x20e>
 800d37a:	2300      	movs	r3, #0
 800d37c:	f04f 32ff 	mov.w	r2, #4294967295
 800d380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d384:	f10a 0a01 	add.w	sl, sl, #1
 800d388:	9304      	str	r3, [sp, #16]
 800d38a:	9307      	str	r3, [sp, #28]
 800d38c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d390:	931a      	str	r3, [sp, #104]	; 0x68
 800d392:	4654      	mov	r4, sl
 800d394:	2205      	movs	r2, #5
 800d396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d39a:	4858      	ldr	r0, [pc, #352]	; (800d4fc <_vfiprintf_r+0x24c>)
 800d39c:	f7f2 ff18 	bl	80001d0 <memchr>
 800d3a0:	9a04      	ldr	r2, [sp, #16]
 800d3a2:	b9d8      	cbnz	r0, 800d3dc <_vfiprintf_r+0x12c>
 800d3a4:	06d1      	lsls	r1, r2, #27
 800d3a6:	bf44      	itt	mi
 800d3a8:	2320      	movmi	r3, #32
 800d3aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3ae:	0713      	lsls	r3, r2, #28
 800d3b0:	bf44      	itt	mi
 800d3b2:	232b      	movmi	r3, #43	; 0x2b
 800d3b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3b8:	f89a 3000 	ldrb.w	r3, [sl]
 800d3bc:	2b2a      	cmp	r3, #42	; 0x2a
 800d3be:	d015      	beq.n	800d3ec <_vfiprintf_r+0x13c>
 800d3c0:	9a07      	ldr	r2, [sp, #28]
 800d3c2:	4654      	mov	r4, sl
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	f04f 0c0a 	mov.w	ip, #10
 800d3ca:	4621      	mov	r1, r4
 800d3cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3d0:	3b30      	subs	r3, #48	; 0x30
 800d3d2:	2b09      	cmp	r3, #9
 800d3d4:	d94e      	bls.n	800d474 <_vfiprintf_r+0x1c4>
 800d3d6:	b1b0      	cbz	r0, 800d406 <_vfiprintf_r+0x156>
 800d3d8:	9207      	str	r2, [sp, #28]
 800d3da:	e014      	b.n	800d406 <_vfiprintf_r+0x156>
 800d3dc:	eba0 0308 	sub.w	r3, r0, r8
 800d3e0:	fa09 f303 	lsl.w	r3, r9, r3
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	9304      	str	r3, [sp, #16]
 800d3e8:	46a2      	mov	sl, r4
 800d3ea:	e7d2      	b.n	800d392 <_vfiprintf_r+0xe2>
 800d3ec:	9b03      	ldr	r3, [sp, #12]
 800d3ee:	1d19      	adds	r1, r3, #4
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	9103      	str	r1, [sp, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	bfbb      	ittet	lt
 800d3f8:	425b      	neglt	r3, r3
 800d3fa:	f042 0202 	orrlt.w	r2, r2, #2
 800d3fe:	9307      	strge	r3, [sp, #28]
 800d400:	9307      	strlt	r3, [sp, #28]
 800d402:	bfb8      	it	lt
 800d404:	9204      	strlt	r2, [sp, #16]
 800d406:	7823      	ldrb	r3, [r4, #0]
 800d408:	2b2e      	cmp	r3, #46	; 0x2e
 800d40a:	d10c      	bne.n	800d426 <_vfiprintf_r+0x176>
 800d40c:	7863      	ldrb	r3, [r4, #1]
 800d40e:	2b2a      	cmp	r3, #42	; 0x2a
 800d410:	d135      	bne.n	800d47e <_vfiprintf_r+0x1ce>
 800d412:	9b03      	ldr	r3, [sp, #12]
 800d414:	1d1a      	adds	r2, r3, #4
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	9203      	str	r2, [sp, #12]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	bfb8      	it	lt
 800d41e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d422:	3402      	adds	r4, #2
 800d424:	9305      	str	r3, [sp, #20]
 800d426:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d50c <_vfiprintf_r+0x25c>
 800d42a:	7821      	ldrb	r1, [r4, #0]
 800d42c:	2203      	movs	r2, #3
 800d42e:	4650      	mov	r0, sl
 800d430:	f7f2 fece 	bl	80001d0 <memchr>
 800d434:	b140      	cbz	r0, 800d448 <_vfiprintf_r+0x198>
 800d436:	2340      	movs	r3, #64	; 0x40
 800d438:	eba0 000a 	sub.w	r0, r0, sl
 800d43c:	fa03 f000 	lsl.w	r0, r3, r0
 800d440:	9b04      	ldr	r3, [sp, #16]
 800d442:	4303      	orrs	r3, r0
 800d444:	3401      	adds	r4, #1
 800d446:	9304      	str	r3, [sp, #16]
 800d448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d44c:	482c      	ldr	r0, [pc, #176]	; (800d500 <_vfiprintf_r+0x250>)
 800d44e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d452:	2206      	movs	r2, #6
 800d454:	f7f2 febc 	bl	80001d0 <memchr>
 800d458:	2800      	cmp	r0, #0
 800d45a:	d03f      	beq.n	800d4dc <_vfiprintf_r+0x22c>
 800d45c:	4b29      	ldr	r3, [pc, #164]	; (800d504 <_vfiprintf_r+0x254>)
 800d45e:	bb1b      	cbnz	r3, 800d4a8 <_vfiprintf_r+0x1f8>
 800d460:	9b03      	ldr	r3, [sp, #12]
 800d462:	3307      	adds	r3, #7
 800d464:	f023 0307 	bic.w	r3, r3, #7
 800d468:	3308      	adds	r3, #8
 800d46a:	9303      	str	r3, [sp, #12]
 800d46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d46e:	443b      	add	r3, r7
 800d470:	9309      	str	r3, [sp, #36]	; 0x24
 800d472:	e767      	b.n	800d344 <_vfiprintf_r+0x94>
 800d474:	fb0c 3202 	mla	r2, ip, r2, r3
 800d478:	460c      	mov	r4, r1
 800d47a:	2001      	movs	r0, #1
 800d47c:	e7a5      	b.n	800d3ca <_vfiprintf_r+0x11a>
 800d47e:	2300      	movs	r3, #0
 800d480:	3401      	adds	r4, #1
 800d482:	9305      	str	r3, [sp, #20]
 800d484:	4619      	mov	r1, r3
 800d486:	f04f 0c0a 	mov.w	ip, #10
 800d48a:	4620      	mov	r0, r4
 800d48c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d490:	3a30      	subs	r2, #48	; 0x30
 800d492:	2a09      	cmp	r2, #9
 800d494:	d903      	bls.n	800d49e <_vfiprintf_r+0x1ee>
 800d496:	2b00      	cmp	r3, #0
 800d498:	d0c5      	beq.n	800d426 <_vfiprintf_r+0x176>
 800d49a:	9105      	str	r1, [sp, #20]
 800d49c:	e7c3      	b.n	800d426 <_vfiprintf_r+0x176>
 800d49e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e7f0      	b.n	800d48a <_vfiprintf_r+0x1da>
 800d4a8:	ab03      	add	r3, sp, #12
 800d4aa:	9300      	str	r3, [sp, #0]
 800d4ac:	462a      	mov	r2, r5
 800d4ae:	4b16      	ldr	r3, [pc, #88]	; (800d508 <_vfiprintf_r+0x258>)
 800d4b0:	a904      	add	r1, sp, #16
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	f3af 8000 	nop.w
 800d4b8:	4607      	mov	r7, r0
 800d4ba:	1c78      	adds	r0, r7, #1
 800d4bc:	d1d6      	bne.n	800d46c <_vfiprintf_r+0x1bc>
 800d4be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4c0:	07d9      	lsls	r1, r3, #31
 800d4c2:	d405      	bmi.n	800d4d0 <_vfiprintf_r+0x220>
 800d4c4:	89ab      	ldrh	r3, [r5, #12]
 800d4c6:	059a      	lsls	r2, r3, #22
 800d4c8:	d402      	bmi.n	800d4d0 <_vfiprintf_r+0x220>
 800d4ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4cc:	f7ff fe13 	bl	800d0f6 <__retarget_lock_release_recursive>
 800d4d0:	89ab      	ldrh	r3, [r5, #12]
 800d4d2:	065b      	lsls	r3, r3, #25
 800d4d4:	f53f af12 	bmi.w	800d2fc <_vfiprintf_r+0x4c>
 800d4d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4da:	e711      	b.n	800d300 <_vfiprintf_r+0x50>
 800d4dc:	ab03      	add	r3, sp, #12
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	462a      	mov	r2, r5
 800d4e2:	4b09      	ldr	r3, [pc, #36]	; (800d508 <_vfiprintf_r+0x258>)
 800d4e4:	a904      	add	r1, sp, #16
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	f000 f880 	bl	800d5ec <_printf_i>
 800d4ec:	e7e4      	b.n	800d4b8 <_vfiprintf_r+0x208>
 800d4ee:	bf00      	nop
 800d4f0:	080109f0 	.word	0x080109f0
 800d4f4:	08010a10 	.word	0x08010a10
 800d4f8:	080109d0 	.word	0x080109d0
 800d4fc:	08010a30 	.word	0x08010a30
 800d500:	08010a3a 	.word	0x08010a3a
 800d504:	00000000 	.word	0x00000000
 800d508:	0800d28b 	.word	0x0800d28b
 800d50c:	08010a36 	.word	0x08010a36

0800d510 <_printf_common>:
 800d510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d514:	4616      	mov	r6, r2
 800d516:	4699      	mov	r9, r3
 800d518:	688a      	ldr	r2, [r1, #8]
 800d51a:	690b      	ldr	r3, [r1, #16]
 800d51c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d520:	4293      	cmp	r3, r2
 800d522:	bfb8      	it	lt
 800d524:	4613      	movlt	r3, r2
 800d526:	6033      	str	r3, [r6, #0]
 800d528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d52c:	4607      	mov	r7, r0
 800d52e:	460c      	mov	r4, r1
 800d530:	b10a      	cbz	r2, 800d536 <_printf_common+0x26>
 800d532:	3301      	adds	r3, #1
 800d534:	6033      	str	r3, [r6, #0]
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	0699      	lsls	r1, r3, #26
 800d53a:	bf42      	ittt	mi
 800d53c:	6833      	ldrmi	r3, [r6, #0]
 800d53e:	3302      	addmi	r3, #2
 800d540:	6033      	strmi	r3, [r6, #0]
 800d542:	6825      	ldr	r5, [r4, #0]
 800d544:	f015 0506 	ands.w	r5, r5, #6
 800d548:	d106      	bne.n	800d558 <_printf_common+0x48>
 800d54a:	f104 0a19 	add.w	sl, r4, #25
 800d54e:	68e3      	ldr	r3, [r4, #12]
 800d550:	6832      	ldr	r2, [r6, #0]
 800d552:	1a9b      	subs	r3, r3, r2
 800d554:	42ab      	cmp	r3, r5
 800d556:	dc26      	bgt.n	800d5a6 <_printf_common+0x96>
 800d558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d55c:	1e13      	subs	r3, r2, #0
 800d55e:	6822      	ldr	r2, [r4, #0]
 800d560:	bf18      	it	ne
 800d562:	2301      	movne	r3, #1
 800d564:	0692      	lsls	r2, r2, #26
 800d566:	d42b      	bmi.n	800d5c0 <_printf_common+0xb0>
 800d568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d56c:	4649      	mov	r1, r9
 800d56e:	4638      	mov	r0, r7
 800d570:	47c0      	blx	r8
 800d572:	3001      	adds	r0, #1
 800d574:	d01e      	beq.n	800d5b4 <_printf_common+0xa4>
 800d576:	6823      	ldr	r3, [r4, #0]
 800d578:	68e5      	ldr	r5, [r4, #12]
 800d57a:	6832      	ldr	r2, [r6, #0]
 800d57c:	f003 0306 	and.w	r3, r3, #6
 800d580:	2b04      	cmp	r3, #4
 800d582:	bf08      	it	eq
 800d584:	1aad      	subeq	r5, r5, r2
 800d586:	68a3      	ldr	r3, [r4, #8]
 800d588:	6922      	ldr	r2, [r4, #16]
 800d58a:	bf0c      	ite	eq
 800d58c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d590:	2500      	movne	r5, #0
 800d592:	4293      	cmp	r3, r2
 800d594:	bfc4      	itt	gt
 800d596:	1a9b      	subgt	r3, r3, r2
 800d598:	18ed      	addgt	r5, r5, r3
 800d59a:	2600      	movs	r6, #0
 800d59c:	341a      	adds	r4, #26
 800d59e:	42b5      	cmp	r5, r6
 800d5a0:	d11a      	bne.n	800d5d8 <_printf_common+0xc8>
 800d5a2:	2000      	movs	r0, #0
 800d5a4:	e008      	b.n	800d5b8 <_printf_common+0xa8>
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	4652      	mov	r2, sl
 800d5aa:	4649      	mov	r1, r9
 800d5ac:	4638      	mov	r0, r7
 800d5ae:	47c0      	blx	r8
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	d103      	bne.n	800d5bc <_printf_common+0xac>
 800d5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5bc:	3501      	adds	r5, #1
 800d5be:	e7c6      	b.n	800d54e <_printf_common+0x3e>
 800d5c0:	18e1      	adds	r1, r4, r3
 800d5c2:	1c5a      	adds	r2, r3, #1
 800d5c4:	2030      	movs	r0, #48	; 0x30
 800d5c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d5ca:	4422      	add	r2, r4
 800d5cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5d4:	3302      	adds	r3, #2
 800d5d6:	e7c7      	b.n	800d568 <_printf_common+0x58>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	4622      	mov	r2, r4
 800d5dc:	4649      	mov	r1, r9
 800d5de:	4638      	mov	r0, r7
 800d5e0:	47c0      	blx	r8
 800d5e2:	3001      	adds	r0, #1
 800d5e4:	d0e6      	beq.n	800d5b4 <_printf_common+0xa4>
 800d5e6:	3601      	adds	r6, #1
 800d5e8:	e7d9      	b.n	800d59e <_printf_common+0x8e>
	...

0800d5ec <_printf_i>:
 800d5ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5f0:	460c      	mov	r4, r1
 800d5f2:	4691      	mov	r9, r2
 800d5f4:	7e27      	ldrb	r7, [r4, #24]
 800d5f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d5f8:	2f78      	cmp	r7, #120	; 0x78
 800d5fa:	4680      	mov	r8, r0
 800d5fc:	469a      	mov	sl, r3
 800d5fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d602:	d807      	bhi.n	800d614 <_printf_i+0x28>
 800d604:	2f62      	cmp	r7, #98	; 0x62
 800d606:	d80a      	bhi.n	800d61e <_printf_i+0x32>
 800d608:	2f00      	cmp	r7, #0
 800d60a:	f000 80d8 	beq.w	800d7be <_printf_i+0x1d2>
 800d60e:	2f58      	cmp	r7, #88	; 0x58
 800d610:	f000 80a3 	beq.w	800d75a <_printf_i+0x16e>
 800d614:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d61c:	e03a      	b.n	800d694 <_printf_i+0xa8>
 800d61e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d622:	2b15      	cmp	r3, #21
 800d624:	d8f6      	bhi.n	800d614 <_printf_i+0x28>
 800d626:	a001      	add	r0, pc, #4	; (adr r0, 800d62c <_printf_i+0x40>)
 800d628:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d62c:	0800d685 	.word	0x0800d685
 800d630:	0800d699 	.word	0x0800d699
 800d634:	0800d615 	.word	0x0800d615
 800d638:	0800d615 	.word	0x0800d615
 800d63c:	0800d615 	.word	0x0800d615
 800d640:	0800d615 	.word	0x0800d615
 800d644:	0800d699 	.word	0x0800d699
 800d648:	0800d615 	.word	0x0800d615
 800d64c:	0800d615 	.word	0x0800d615
 800d650:	0800d615 	.word	0x0800d615
 800d654:	0800d615 	.word	0x0800d615
 800d658:	0800d7a5 	.word	0x0800d7a5
 800d65c:	0800d6c9 	.word	0x0800d6c9
 800d660:	0800d787 	.word	0x0800d787
 800d664:	0800d615 	.word	0x0800d615
 800d668:	0800d615 	.word	0x0800d615
 800d66c:	0800d7c7 	.word	0x0800d7c7
 800d670:	0800d615 	.word	0x0800d615
 800d674:	0800d6c9 	.word	0x0800d6c9
 800d678:	0800d615 	.word	0x0800d615
 800d67c:	0800d615 	.word	0x0800d615
 800d680:	0800d78f 	.word	0x0800d78f
 800d684:	680b      	ldr	r3, [r1, #0]
 800d686:	1d1a      	adds	r2, r3, #4
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	600a      	str	r2, [r1, #0]
 800d68c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d694:	2301      	movs	r3, #1
 800d696:	e0a3      	b.n	800d7e0 <_printf_i+0x1f4>
 800d698:	6825      	ldr	r5, [r4, #0]
 800d69a:	6808      	ldr	r0, [r1, #0]
 800d69c:	062e      	lsls	r6, r5, #24
 800d69e:	f100 0304 	add.w	r3, r0, #4
 800d6a2:	d50a      	bpl.n	800d6ba <_printf_i+0xce>
 800d6a4:	6805      	ldr	r5, [r0, #0]
 800d6a6:	600b      	str	r3, [r1, #0]
 800d6a8:	2d00      	cmp	r5, #0
 800d6aa:	da03      	bge.n	800d6b4 <_printf_i+0xc8>
 800d6ac:	232d      	movs	r3, #45	; 0x2d
 800d6ae:	426d      	negs	r5, r5
 800d6b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6b4:	485e      	ldr	r0, [pc, #376]	; (800d830 <_printf_i+0x244>)
 800d6b6:	230a      	movs	r3, #10
 800d6b8:	e019      	b.n	800d6ee <_printf_i+0x102>
 800d6ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d6be:	6805      	ldr	r5, [r0, #0]
 800d6c0:	600b      	str	r3, [r1, #0]
 800d6c2:	bf18      	it	ne
 800d6c4:	b22d      	sxthne	r5, r5
 800d6c6:	e7ef      	b.n	800d6a8 <_printf_i+0xbc>
 800d6c8:	680b      	ldr	r3, [r1, #0]
 800d6ca:	6825      	ldr	r5, [r4, #0]
 800d6cc:	1d18      	adds	r0, r3, #4
 800d6ce:	6008      	str	r0, [r1, #0]
 800d6d0:	0628      	lsls	r0, r5, #24
 800d6d2:	d501      	bpl.n	800d6d8 <_printf_i+0xec>
 800d6d4:	681d      	ldr	r5, [r3, #0]
 800d6d6:	e002      	b.n	800d6de <_printf_i+0xf2>
 800d6d8:	0669      	lsls	r1, r5, #25
 800d6da:	d5fb      	bpl.n	800d6d4 <_printf_i+0xe8>
 800d6dc:	881d      	ldrh	r5, [r3, #0]
 800d6de:	4854      	ldr	r0, [pc, #336]	; (800d830 <_printf_i+0x244>)
 800d6e0:	2f6f      	cmp	r7, #111	; 0x6f
 800d6e2:	bf0c      	ite	eq
 800d6e4:	2308      	moveq	r3, #8
 800d6e6:	230a      	movne	r3, #10
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6ee:	6866      	ldr	r6, [r4, #4]
 800d6f0:	60a6      	str	r6, [r4, #8]
 800d6f2:	2e00      	cmp	r6, #0
 800d6f4:	bfa2      	ittt	ge
 800d6f6:	6821      	ldrge	r1, [r4, #0]
 800d6f8:	f021 0104 	bicge.w	r1, r1, #4
 800d6fc:	6021      	strge	r1, [r4, #0]
 800d6fe:	b90d      	cbnz	r5, 800d704 <_printf_i+0x118>
 800d700:	2e00      	cmp	r6, #0
 800d702:	d04d      	beq.n	800d7a0 <_printf_i+0x1b4>
 800d704:	4616      	mov	r6, r2
 800d706:	fbb5 f1f3 	udiv	r1, r5, r3
 800d70a:	fb03 5711 	mls	r7, r3, r1, r5
 800d70e:	5dc7      	ldrb	r7, [r0, r7]
 800d710:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d714:	462f      	mov	r7, r5
 800d716:	42bb      	cmp	r3, r7
 800d718:	460d      	mov	r5, r1
 800d71a:	d9f4      	bls.n	800d706 <_printf_i+0x11a>
 800d71c:	2b08      	cmp	r3, #8
 800d71e:	d10b      	bne.n	800d738 <_printf_i+0x14c>
 800d720:	6823      	ldr	r3, [r4, #0]
 800d722:	07df      	lsls	r7, r3, #31
 800d724:	d508      	bpl.n	800d738 <_printf_i+0x14c>
 800d726:	6923      	ldr	r3, [r4, #16]
 800d728:	6861      	ldr	r1, [r4, #4]
 800d72a:	4299      	cmp	r1, r3
 800d72c:	bfde      	ittt	le
 800d72e:	2330      	movle	r3, #48	; 0x30
 800d730:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d734:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d738:	1b92      	subs	r2, r2, r6
 800d73a:	6122      	str	r2, [r4, #16]
 800d73c:	f8cd a000 	str.w	sl, [sp]
 800d740:	464b      	mov	r3, r9
 800d742:	aa03      	add	r2, sp, #12
 800d744:	4621      	mov	r1, r4
 800d746:	4640      	mov	r0, r8
 800d748:	f7ff fee2 	bl	800d510 <_printf_common>
 800d74c:	3001      	adds	r0, #1
 800d74e:	d14c      	bne.n	800d7ea <_printf_i+0x1fe>
 800d750:	f04f 30ff 	mov.w	r0, #4294967295
 800d754:	b004      	add	sp, #16
 800d756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d75a:	4835      	ldr	r0, [pc, #212]	; (800d830 <_printf_i+0x244>)
 800d75c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d760:	6823      	ldr	r3, [r4, #0]
 800d762:	680e      	ldr	r6, [r1, #0]
 800d764:	061f      	lsls	r7, r3, #24
 800d766:	f856 5b04 	ldr.w	r5, [r6], #4
 800d76a:	600e      	str	r6, [r1, #0]
 800d76c:	d514      	bpl.n	800d798 <_printf_i+0x1ac>
 800d76e:	07d9      	lsls	r1, r3, #31
 800d770:	bf44      	itt	mi
 800d772:	f043 0320 	orrmi.w	r3, r3, #32
 800d776:	6023      	strmi	r3, [r4, #0]
 800d778:	b91d      	cbnz	r5, 800d782 <_printf_i+0x196>
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	f023 0320 	bic.w	r3, r3, #32
 800d780:	6023      	str	r3, [r4, #0]
 800d782:	2310      	movs	r3, #16
 800d784:	e7b0      	b.n	800d6e8 <_printf_i+0xfc>
 800d786:	6823      	ldr	r3, [r4, #0]
 800d788:	f043 0320 	orr.w	r3, r3, #32
 800d78c:	6023      	str	r3, [r4, #0]
 800d78e:	2378      	movs	r3, #120	; 0x78
 800d790:	4828      	ldr	r0, [pc, #160]	; (800d834 <_printf_i+0x248>)
 800d792:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d796:	e7e3      	b.n	800d760 <_printf_i+0x174>
 800d798:	065e      	lsls	r6, r3, #25
 800d79a:	bf48      	it	mi
 800d79c:	b2ad      	uxthmi	r5, r5
 800d79e:	e7e6      	b.n	800d76e <_printf_i+0x182>
 800d7a0:	4616      	mov	r6, r2
 800d7a2:	e7bb      	b.n	800d71c <_printf_i+0x130>
 800d7a4:	680b      	ldr	r3, [r1, #0]
 800d7a6:	6826      	ldr	r6, [r4, #0]
 800d7a8:	6960      	ldr	r0, [r4, #20]
 800d7aa:	1d1d      	adds	r5, r3, #4
 800d7ac:	600d      	str	r5, [r1, #0]
 800d7ae:	0635      	lsls	r5, r6, #24
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	d501      	bpl.n	800d7b8 <_printf_i+0x1cc>
 800d7b4:	6018      	str	r0, [r3, #0]
 800d7b6:	e002      	b.n	800d7be <_printf_i+0x1d2>
 800d7b8:	0671      	lsls	r1, r6, #25
 800d7ba:	d5fb      	bpl.n	800d7b4 <_printf_i+0x1c8>
 800d7bc:	8018      	strh	r0, [r3, #0]
 800d7be:	2300      	movs	r3, #0
 800d7c0:	6123      	str	r3, [r4, #16]
 800d7c2:	4616      	mov	r6, r2
 800d7c4:	e7ba      	b.n	800d73c <_printf_i+0x150>
 800d7c6:	680b      	ldr	r3, [r1, #0]
 800d7c8:	1d1a      	adds	r2, r3, #4
 800d7ca:	600a      	str	r2, [r1, #0]
 800d7cc:	681e      	ldr	r6, [r3, #0]
 800d7ce:	6862      	ldr	r2, [r4, #4]
 800d7d0:	2100      	movs	r1, #0
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	f7f2 fcfc 	bl	80001d0 <memchr>
 800d7d8:	b108      	cbz	r0, 800d7de <_printf_i+0x1f2>
 800d7da:	1b80      	subs	r0, r0, r6
 800d7dc:	6060      	str	r0, [r4, #4]
 800d7de:	6863      	ldr	r3, [r4, #4]
 800d7e0:	6123      	str	r3, [r4, #16]
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7e8:	e7a8      	b.n	800d73c <_printf_i+0x150>
 800d7ea:	6923      	ldr	r3, [r4, #16]
 800d7ec:	4632      	mov	r2, r6
 800d7ee:	4649      	mov	r1, r9
 800d7f0:	4640      	mov	r0, r8
 800d7f2:	47d0      	blx	sl
 800d7f4:	3001      	adds	r0, #1
 800d7f6:	d0ab      	beq.n	800d750 <_printf_i+0x164>
 800d7f8:	6823      	ldr	r3, [r4, #0]
 800d7fa:	079b      	lsls	r3, r3, #30
 800d7fc:	d413      	bmi.n	800d826 <_printf_i+0x23a>
 800d7fe:	68e0      	ldr	r0, [r4, #12]
 800d800:	9b03      	ldr	r3, [sp, #12]
 800d802:	4298      	cmp	r0, r3
 800d804:	bfb8      	it	lt
 800d806:	4618      	movlt	r0, r3
 800d808:	e7a4      	b.n	800d754 <_printf_i+0x168>
 800d80a:	2301      	movs	r3, #1
 800d80c:	4632      	mov	r2, r6
 800d80e:	4649      	mov	r1, r9
 800d810:	4640      	mov	r0, r8
 800d812:	47d0      	blx	sl
 800d814:	3001      	adds	r0, #1
 800d816:	d09b      	beq.n	800d750 <_printf_i+0x164>
 800d818:	3501      	adds	r5, #1
 800d81a:	68e3      	ldr	r3, [r4, #12]
 800d81c:	9903      	ldr	r1, [sp, #12]
 800d81e:	1a5b      	subs	r3, r3, r1
 800d820:	42ab      	cmp	r3, r5
 800d822:	dcf2      	bgt.n	800d80a <_printf_i+0x21e>
 800d824:	e7eb      	b.n	800d7fe <_printf_i+0x212>
 800d826:	2500      	movs	r5, #0
 800d828:	f104 0619 	add.w	r6, r4, #25
 800d82c:	e7f5      	b.n	800d81a <_printf_i+0x22e>
 800d82e:	bf00      	nop
 800d830:	08010a41 	.word	0x08010a41
 800d834:	08010a52 	.word	0x08010a52

0800d838 <_sbrk_r>:
 800d838:	b538      	push	{r3, r4, r5, lr}
 800d83a:	4d06      	ldr	r5, [pc, #24]	; (800d854 <_sbrk_r+0x1c>)
 800d83c:	2300      	movs	r3, #0
 800d83e:	4604      	mov	r4, r0
 800d840:	4608      	mov	r0, r1
 800d842:	602b      	str	r3, [r5, #0]
 800d844:	f7f3 f854 	bl	80008f0 <_sbrk>
 800d848:	1c43      	adds	r3, r0, #1
 800d84a:	d102      	bne.n	800d852 <_sbrk_r+0x1a>
 800d84c:	682b      	ldr	r3, [r5, #0]
 800d84e:	b103      	cbz	r3, 800d852 <_sbrk_r+0x1a>
 800d850:	6023      	str	r3, [r4, #0]
 800d852:	bd38      	pop	{r3, r4, r5, pc}
 800d854:	20008a6c 	.word	0x20008a6c

0800d858 <__sread>:
 800d858:	b510      	push	{r4, lr}
 800d85a:	460c      	mov	r4, r1
 800d85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d860:	f000 fa6c 	bl	800dd3c <_read_r>
 800d864:	2800      	cmp	r0, #0
 800d866:	bfab      	itete	ge
 800d868:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d86a:	89a3      	ldrhlt	r3, [r4, #12]
 800d86c:	181b      	addge	r3, r3, r0
 800d86e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d872:	bfac      	ite	ge
 800d874:	6563      	strge	r3, [r4, #84]	; 0x54
 800d876:	81a3      	strhlt	r3, [r4, #12]
 800d878:	bd10      	pop	{r4, pc}

0800d87a <__swrite>:
 800d87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d87e:	461f      	mov	r7, r3
 800d880:	898b      	ldrh	r3, [r1, #12]
 800d882:	05db      	lsls	r3, r3, #23
 800d884:	4605      	mov	r5, r0
 800d886:	460c      	mov	r4, r1
 800d888:	4616      	mov	r6, r2
 800d88a:	d505      	bpl.n	800d898 <__swrite+0x1e>
 800d88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d890:	2302      	movs	r3, #2
 800d892:	2200      	movs	r2, #0
 800d894:	f000 f9d0 	bl	800dc38 <_lseek_r>
 800d898:	89a3      	ldrh	r3, [r4, #12]
 800d89a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d89e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8a2:	81a3      	strh	r3, [r4, #12]
 800d8a4:	4632      	mov	r2, r6
 800d8a6:	463b      	mov	r3, r7
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ae:	f000 b869 	b.w	800d984 <_write_r>

0800d8b2 <__sseek>:
 800d8b2:	b510      	push	{r4, lr}
 800d8b4:	460c      	mov	r4, r1
 800d8b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8ba:	f000 f9bd 	bl	800dc38 <_lseek_r>
 800d8be:	1c43      	adds	r3, r0, #1
 800d8c0:	89a3      	ldrh	r3, [r4, #12]
 800d8c2:	bf15      	itete	ne
 800d8c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d8ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d8ce:	81a3      	strheq	r3, [r4, #12]
 800d8d0:	bf18      	it	ne
 800d8d2:	81a3      	strhne	r3, [r4, #12]
 800d8d4:	bd10      	pop	{r4, pc}

0800d8d6 <__sclose>:
 800d8d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8da:	f000 b8db 	b.w	800da94 <_close_r>
	...

0800d8e0 <__swbuf_r>:
 800d8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e2:	460e      	mov	r6, r1
 800d8e4:	4614      	mov	r4, r2
 800d8e6:	4605      	mov	r5, r0
 800d8e8:	b118      	cbz	r0, 800d8f2 <__swbuf_r+0x12>
 800d8ea:	6983      	ldr	r3, [r0, #24]
 800d8ec:	b90b      	cbnz	r3, 800d8f2 <__swbuf_r+0x12>
 800d8ee:	f7ff fb51 	bl	800cf94 <__sinit>
 800d8f2:	4b21      	ldr	r3, [pc, #132]	; (800d978 <__swbuf_r+0x98>)
 800d8f4:	429c      	cmp	r4, r3
 800d8f6:	d12b      	bne.n	800d950 <__swbuf_r+0x70>
 800d8f8:	686c      	ldr	r4, [r5, #4]
 800d8fa:	69a3      	ldr	r3, [r4, #24]
 800d8fc:	60a3      	str	r3, [r4, #8]
 800d8fe:	89a3      	ldrh	r3, [r4, #12]
 800d900:	071a      	lsls	r2, r3, #28
 800d902:	d52f      	bpl.n	800d964 <__swbuf_r+0x84>
 800d904:	6923      	ldr	r3, [r4, #16]
 800d906:	b36b      	cbz	r3, 800d964 <__swbuf_r+0x84>
 800d908:	6923      	ldr	r3, [r4, #16]
 800d90a:	6820      	ldr	r0, [r4, #0]
 800d90c:	1ac0      	subs	r0, r0, r3
 800d90e:	6963      	ldr	r3, [r4, #20]
 800d910:	b2f6      	uxtb	r6, r6
 800d912:	4283      	cmp	r3, r0
 800d914:	4637      	mov	r7, r6
 800d916:	dc04      	bgt.n	800d922 <__swbuf_r+0x42>
 800d918:	4621      	mov	r1, r4
 800d91a:	4628      	mov	r0, r5
 800d91c:	f000 f950 	bl	800dbc0 <_fflush_r>
 800d920:	bb30      	cbnz	r0, 800d970 <__swbuf_r+0x90>
 800d922:	68a3      	ldr	r3, [r4, #8]
 800d924:	3b01      	subs	r3, #1
 800d926:	60a3      	str	r3, [r4, #8]
 800d928:	6823      	ldr	r3, [r4, #0]
 800d92a:	1c5a      	adds	r2, r3, #1
 800d92c:	6022      	str	r2, [r4, #0]
 800d92e:	701e      	strb	r6, [r3, #0]
 800d930:	6963      	ldr	r3, [r4, #20]
 800d932:	3001      	adds	r0, #1
 800d934:	4283      	cmp	r3, r0
 800d936:	d004      	beq.n	800d942 <__swbuf_r+0x62>
 800d938:	89a3      	ldrh	r3, [r4, #12]
 800d93a:	07db      	lsls	r3, r3, #31
 800d93c:	d506      	bpl.n	800d94c <__swbuf_r+0x6c>
 800d93e:	2e0a      	cmp	r6, #10
 800d940:	d104      	bne.n	800d94c <__swbuf_r+0x6c>
 800d942:	4621      	mov	r1, r4
 800d944:	4628      	mov	r0, r5
 800d946:	f000 f93b 	bl	800dbc0 <_fflush_r>
 800d94a:	b988      	cbnz	r0, 800d970 <__swbuf_r+0x90>
 800d94c:	4638      	mov	r0, r7
 800d94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d950:	4b0a      	ldr	r3, [pc, #40]	; (800d97c <__swbuf_r+0x9c>)
 800d952:	429c      	cmp	r4, r3
 800d954:	d101      	bne.n	800d95a <__swbuf_r+0x7a>
 800d956:	68ac      	ldr	r4, [r5, #8]
 800d958:	e7cf      	b.n	800d8fa <__swbuf_r+0x1a>
 800d95a:	4b09      	ldr	r3, [pc, #36]	; (800d980 <__swbuf_r+0xa0>)
 800d95c:	429c      	cmp	r4, r3
 800d95e:	bf08      	it	eq
 800d960:	68ec      	ldreq	r4, [r5, #12]
 800d962:	e7ca      	b.n	800d8fa <__swbuf_r+0x1a>
 800d964:	4621      	mov	r1, r4
 800d966:	4628      	mov	r0, r5
 800d968:	f000 f81e 	bl	800d9a8 <__swsetup_r>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d0cb      	beq.n	800d908 <__swbuf_r+0x28>
 800d970:	f04f 37ff 	mov.w	r7, #4294967295
 800d974:	e7ea      	b.n	800d94c <__swbuf_r+0x6c>
 800d976:	bf00      	nop
 800d978:	080109f0 	.word	0x080109f0
 800d97c:	08010a10 	.word	0x08010a10
 800d980:	080109d0 	.word	0x080109d0

0800d984 <_write_r>:
 800d984:	b538      	push	{r3, r4, r5, lr}
 800d986:	4d07      	ldr	r5, [pc, #28]	; (800d9a4 <_write_r+0x20>)
 800d988:	4604      	mov	r4, r0
 800d98a:	4608      	mov	r0, r1
 800d98c:	4611      	mov	r1, r2
 800d98e:	2200      	movs	r2, #0
 800d990:	602a      	str	r2, [r5, #0]
 800d992:	461a      	mov	r2, r3
 800d994:	f7f2 ff5b 	bl	800084e <_write>
 800d998:	1c43      	adds	r3, r0, #1
 800d99a:	d102      	bne.n	800d9a2 <_write_r+0x1e>
 800d99c:	682b      	ldr	r3, [r5, #0]
 800d99e:	b103      	cbz	r3, 800d9a2 <_write_r+0x1e>
 800d9a0:	6023      	str	r3, [r4, #0]
 800d9a2:	bd38      	pop	{r3, r4, r5, pc}
 800d9a4:	20008a6c 	.word	0x20008a6c

0800d9a8 <__swsetup_r>:
 800d9a8:	4b32      	ldr	r3, [pc, #200]	; (800da74 <__swsetup_r+0xcc>)
 800d9aa:	b570      	push	{r4, r5, r6, lr}
 800d9ac:	681d      	ldr	r5, [r3, #0]
 800d9ae:	4606      	mov	r6, r0
 800d9b0:	460c      	mov	r4, r1
 800d9b2:	b125      	cbz	r5, 800d9be <__swsetup_r+0x16>
 800d9b4:	69ab      	ldr	r3, [r5, #24]
 800d9b6:	b913      	cbnz	r3, 800d9be <__swsetup_r+0x16>
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	f7ff faeb 	bl	800cf94 <__sinit>
 800d9be:	4b2e      	ldr	r3, [pc, #184]	; (800da78 <__swsetup_r+0xd0>)
 800d9c0:	429c      	cmp	r4, r3
 800d9c2:	d10f      	bne.n	800d9e4 <__swsetup_r+0x3c>
 800d9c4:	686c      	ldr	r4, [r5, #4]
 800d9c6:	89a3      	ldrh	r3, [r4, #12]
 800d9c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9cc:	0719      	lsls	r1, r3, #28
 800d9ce:	d42c      	bmi.n	800da2a <__swsetup_r+0x82>
 800d9d0:	06dd      	lsls	r5, r3, #27
 800d9d2:	d411      	bmi.n	800d9f8 <__swsetup_r+0x50>
 800d9d4:	2309      	movs	r3, #9
 800d9d6:	6033      	str	r3, [r6, #0]
 800d9d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d9dc:	81a3      	strh	r3, [r4, #12]
 800d9de:	f04f 30ff 	mov.w	r0, #4294967295
 800d9e2:	e03e      	b.n	800da62 <__swsetup_r+0xba>
 800d9e4:	4b25      	ldr	r3, [pc, #148]	; (800da7c <__swsetup_r+0xd4>)
 800d9e6:	429c      	cmp	r4, r3
 800d9e8:	d101      	bne.n	800d9ee <__swsetup_r+0x46>
 800d9ea:	68ac      	ldr	r4, [r5, #8]
 800d9ec:	e7eb      	b.n	800d9c6 <__swsetup_r+0x1e>
 800d9ee:	4b24      	ldr	r3, [pc, #144]	; (800da80 <__swsetup_r+0xd8>)
 800d9f0:	429c      	cmp	r4, r3
 800d9f2:	bf08      	it	eq
 800d9f4:	68ec      	ldreq	r4, [r5, #12]
 800d9f6:	e7e6      	b.n	800d9c6 <__swsetup_r+0x1e>
 800d9f8:	0758      	lsls	r0, r3, #29
 800d9fa:	d512      	bpl.n	800da22 <__swsetup_r+0x7a>
 800d9fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9fe:	b141      	cbz	r1, 800da12 <__swsetup_r+0x6a>
 800da00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da04:	4299      	cmp	r1, r3
 800da06:	d002      	beq.n	800da0e <__swsetup_r+0x66>
 800da08:	4630      	mov	r0, r6
 800da0a:	f7ff fb7d 	bl	800d108 <_free_r>
 800da0e:	2300      	movs	r3, #0
 800da10:	6363      	str	r3, [r4, #52]	; 0x34
 800da12:	89a3      	ldrh	r3, [r4, #12]
 800da14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da18:	81a3      	strh	r3, [r4, #12]
 800da1a:	2300      	movs	r3, #0
 800da1c:	6063      	str	r3, [r4, #4]
 800da1e:	6923      	ldr	r3, [r4, #16]
 800da20:	6023      	str	r3, [r4, #0]
 800da22:	89a3      	ldrh	r3, [r4, #12]
 800da24:	f043 0308 	orr.w	r3, r3, #8
 800da28:	81a3      	strh	r3, [r4, #12]
 800da2a:	6923      	ldr	r3, [r4, #16]
 800da2c:	b94b      	cbnz	r3, 800da42 <__swsetup_r+0x9a>
 800da2e:	89a3      	ldrh	r3, [r4, #12]
 800da30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da38:	d003      	beq.n	800da42 <__swsetup_r+0x9a>
 800da3a:	4621      	mov	r1, r4
 800da3c:	4630      	mov	r0, r6
 800da3e:	f000 f931 	bl	800dca4 <__smakebuf_r>
 800da42:	89a0      	ldrh	r0, [r4, #12]
 800da44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da48:	f010 0301 	ands.w	r3, r0, #1
 800da4c:	d00a      	beq.n	800da64 <__swsetup_r+0xbc>
 800da4e:	2300      	movs	r3, #0
 800da50:	60a3      	str	r3, [r4, #8]
 800da52:	6963      	ldr	r3, [r4, #20]
 800da54:	425b      	negs	r3, r3
 800da56:	61a3      	str	r3, [r4, #24]
 800da58:	6923      	ldr	r3, [r4, #16]
 800da5a:	b943      	cbnz	r3, 800da6e <__swsetup_r+0xc6>
 800da5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da60:	d1ba      	bne.n	800d9d8 <__swsetup_r+0x30>
 800da62:	bd70      	pop	{r4, r5, r6, pc}
 800da64:	0781      	lsls	r1, r0, #30
 800da66:	bf58      	it	pl
 800da68:	6963      	ldrpl	r3, [r4, #20]
 800da6a:	60a3      	str	r3, [r4, #8]
 800da6c:	e7f4      	b.n	800da58 <__swsetup_r+0xb0>
 800da6e:	2000      	movs	r0, #0
 800da70:	e7f7      	b.n	800da62 <__swsetup_r+0xba>
 800da72:	bf00      	nop
 800da74:	20000014 	.word	0x20000014
 800da78:	080109f0 	.word	0x080109f0
 800da7c:	08010a10 	.word	0x08010a10
 800da80:	080109d0 	.word	0x080109d0

0800da84 <abort>:
 800da84:	b508      	push	{r3, lr}
 800da86:	2006      	movs	r0, #6
 800da88:	f000 f992 	bl	800ddb0 <raise>
 800da8c:	2001      	movs	r0, #1
 800da8e:	f7f2 feb7 	bl	8000800 <_exit>
	...

0800da94 <_close_r>:
 800da94:	b538      	push	{r3, r4, r5, lr}
 800da96:	4d06      	ldr	r5, [pc, #24]	; (800dab0 <_close_r+0x1c>)
 800da98:	2300      	movs	r3, #0
 800da9a:	4604      	mov	r4, r0
 800da9c:	4608      	mov	r0, r1
 800da9e:	602b      	str	r3, [r5, #0]
 800daa0:	f7f2 fef1 	bl	8000886 <_close>
 800daa4:	1c43      	adds	r3, r0, #1
 800daa6:	d102      	bne.n	800daae <_close_r+0x1a>
 800daa8:	682b      	ldr	r3, [r5, #0]
 800daaa:	b103      	cbz	r3, 800daae <_close_r+0x1a>
 800daac:	6023      	str	r3, [r4, #0]
 800daae:	bd38      	pop	{r3, r4, r5, pc}
 800dab0:	20008a6c 	.word	0x20008a6c

0800dab4 <__sflush_r>:
 800dab4:	898a      	ldrh	r2, [r1, #12]
 800dab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daba:	4605      	mov	r5, r0
 800dabc:	0710      	lsls	r0, r2, #28
 800dabe:	460c      	mov	r4, r1
 800dac0:	d458      	bmi.n	800db74 <__sflush_r+0xc0>
 800dac2:	684b      	ldr	r3, [r1, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	dc05      	bgt.n	800dad4 <__sflush_r+0x20>
 800dac8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800daca:	2b00      	cmp	r3, #0
 800dacc:	dc02      	bgt.n	800dad4 <__sflush_r+0x20>
 800dace:	2000      	movs	r0, #0
 800dad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dad6:	2e00      	cmp	r6, #0
 800dad8:	d0f9      	beq.n	800dace <__sflush_r+0x1a>
 800dada:	2300      	movs	r3, #0
 800dadc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dae0:	682f      	ldr	r7, [r5, #0]
 800dae2:	602b      	str	r3, [r5, #0]
 800dae4:	d032      	beq.n	800db4c <__sflush_r+0x98>
 800dae6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dae8:	89a3      	ldrh	r3, [r4, #12]
 800daea:	075a      	lsls	r2, r3, #29
 800daec:	d505      	bpl.n	800dafa <__sflush_r+0x46>
 800daee:	6863      	ldr	r3, [r4, #4]
 800daf0:	1ac0      	subs	r0, r0, r3
 800daf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800daf4:	b10b      	cbz	r3, 800dafa <__sflush_r+0x46>
 800daf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800daf8:	1ac0      	subs	r0, r0, r3
 800dafa:	2300      	movs	r3, #0
 800dafc:	4602      	mov	r2, r0
 800dafe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db00:	6a21      	ldr	r1, [r4, #32]
 800db02:	4628      	mov	r0, r5
 800db04:	47b0      	blx	r6
 800db06:	1c43      	adds	r3, r0, #1
 800db08:	89a3      	ldrh	r3, [r4, #12]
 800db0a:	d106      	bne.n	800db1a <__sflush_r+0x66>
 800db0c:	6829      	ldr	r1, [r5, #0]
 800db0e:	291d      	cmp	r1, #29
 800db10:	d82c      	bhi.n	800db6c <__sflush_r+0xb8>
 800db12:	4a2a      	ldr	r2, [pc, #168]	; (800dbbc <__sflush_r+0x108>)
 800db14:	40ca      	lsrs	r2, r1
 800db16:	07d6      	lsls	r6, r2, #31
 800db18:	d528      	bpl.n	800db6c <__sflush_r+0xb8>
 800db1a:	2200      	movs	r2, #0
 800db1c:	6062      	str	r2, [r4, #4]
 800db1e:	04d9      	lsls	r1, r3, #19
 800db20:	6922      	ldr	r2, [r4, #16]
 800db22:	6022      	str	r2, [r4, #0]
 800db24:	d504      	bpl.n	800db30 <__sflush_r+0x7c>
 800db26:	1c42      	adds	r2, r0, #1
 800db28:	d101      	bne.n	800db2e <__sflush_r+0x7a>
 800db2a:	682b      	ldr	r3, [r5, #0]
 800db2c:	b903      	cbnz	r3, 800db30 <__sflush_r+0x7c>
 800db2e:	6560      	str	r0, [r4, #84]	; 0x54
 800db30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db32:	602f      	str	r7, [r5, #0]
 800db34:	2900      	cmp	r1, #0
 800db36:	d0ca      	beq.n	800dace <__sflush_r+0x1a>
 800db38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db3c:	4299      	cmp	r1, r3
 800db3e:	d002      	beq.n	800db46 <__sflush_r+0x92>
 800db40:	4628      	mov	r0, r5
 800db42:	f7ff fae1 	bl	800d108 <_free_r>
 800db46:	2000      	movs	r0, #0
 800db48:	6360      	str	r0, [r4, #52]	; 0x34
 800db4a:	e7c1      	b.n	800dad0 <__sflush_r+0x1c>
 800db4c:	6a21      	ldr	r1, [r4, #32]
 800db4e:	2301      	movs	r3, #1
 800db50:	4628      	mov	r0, r5
 800db52:	47b0      	blx	r6
 800db54:	1c41      	adds	r1, r0, #1
 800db56:	d1c7      	bne.n	800dae8 <__sflush_r+0x34>
 800db58:	682b      	ldr	r3, [r5, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d0c4      	beq.n	800dae8 <__sflush_r+0x34>
 800db5e:	2b1d      	cmp	r3, #29
 800db60:	d001      	beq.n	800db66 <__sflush_r+0xb2>
 800db62:	2b16      	cmp	r3, #22
 800db64:	d101      	bne.n	800db6a <__sflush_r+0xb6>
 800db66:	602f      	str	r7, [r5, #0]
 800db68:	e7b1      	b.n	800dace <__sflush_r+0x1a>
 800db6a:	89a3      	ldrh	r3, [r4, #12]
 800db6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db70:	81a3      	strh	r3, [r4, #12]
 800db72:	e7ad      	b.n	800dad0 <__sflush_r+0x1c>
 800db74:	690f      	ldr	r7, [r1, #16]
 800db76:	2f00      	cmp	r7, #0
 800db78:	d0a9      	beq.n	800dace <__sflush_r+0x1a>
 800db7a:	0793      	lsls	r3, r2, #30
 800db7c:	680e      	ldr	r6, [r1, #0]
 800db7e:	bf08      	it	eq
 800db80:	694b      	ldreq	r3, [r1, #20]
 800db82:	600f      	str	r7, [r1, #0]
 800db84:	bf18      	it	ne
 800db86:	2300      	movne	r3, #0
 800db88:	eba6 0807 	sub.w	r8, r6, r7
 800db8c:	608b      	str	r3, [r1, #8]
 800db8e:	f1b8 0f00 	cmp.w	r8, #0
 800db92:	dd9c      	ble.n	800dace <__sflush_r+0x1a>
 800db94:	6a21      	ldr	r1, [r4, #32]
 800db96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db98:	4643      	mov	r3, r8
 800db9a:	463a      	mov	r2, r7
 800db9c:	4628      	mov	r0, r5
 800db9e:	47b0      	blx	r6
 800dba0:	2800      	cmp	r0, #0
 800dba2:	dc06      	bgt.n	800dbb2 <__sflush_r+0xfe>
 800dba4:	89a3      	ldrh	r3, [r4, #12]
 800dba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbaa:	81a3      	strh	r3, [r4, #12]
 800dbac:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb0:	e78e      	b.n	800dad0 <__sflush_r+0x1c>
 800dbb2:	4407      	add	r7, r0
 800dbb4:	eba8 0800 	sub.w	r8, r8, r0
 800dbb8:	e7e9      	b.n	800db8e <__sflush_r+0xda>
 800dbba:	bf00      	nop
 800dbbc:	20400001 	.word	0x20400001

0800dbc0 <_fflush_r>:
 800dbc0:	b538      	push	{r3, r4, r5, lr}
 800dbc2:	690b      	ldr	r3, [r1, #16]
 800dbc4:	4605      	mov	r5, r0
 800dbc6:	460c      	mov	r4, r1
 800dbc8:	b913      	cbnz	r3, 800dbd0 <_fflush_r+0x10>
 800dbca:	2500      	movs	r5, #0
 800dbcc:	4628      	mov	r0, r5
 800dbce:	bd38      	pop	{r3, r4, r5, pc}
 800dbd0:	b118      	cbz	r0, 800dbda <_fflush_r+0x1a>
 800dbd2:	6983      	ldr	r3, [r0, #24]
 800dbd4:	b90b      	cbnz	r3, 800dbda <_fflush_r+0x1a>
 800dbd6:	f7ff f9dd 	bl	800cf94 <__sinit>
 800dbda:	4b14      	ldr	r3, [pc, #80]	; (800dc2c <_fflush_r+0x6c>)
 800dbdc:	429c      	cmp	r4, r3
 800dbde:	d11b      	bne.n	800dc18 <_fflush_r+0x58>
 800dbe0:	686c      	ldr	r4, [r5, #4]
 800dbe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d0ef      	beq.n	800dbca <_fflush_r+0xa>
 800dbea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dbec:	07d0      	lsls	r0, r2, #31
 800dbee:	d404      	bmi.n	800dbfa <_fflush_r+0x3a>
 800dbf0:	0599      	lsls	r1, r3, #22
 800dbf2:	d402      	bmi.n	800dbfa <_fflush_r+0x3a>
 800dbf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbf6:	f7ff fa7d 	bl	800d0f4 <__retarget_lock_acquire_recursive>
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	4621      	mov	r1, r4
 800dbfe:	f7ff ff59 	bl	800dab4 <__sflush_r>
 800dc02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc04:	07da      	lsls	r2, r3, #31
 800dc06:	4605      	mov	r5, r0
 800dc08:	d4e0      	bmi.n	800dbcc <_fflush_r+0xc>
 800dc0a:	89a3      	ldrh	r3, [r4, #12]
 800dc0c:	059b      	lsls	r3, r3, #22
 800dc0e:	d4dd      	bmi.n	800dbcc <_fflush_r+0xc>
 800dc10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc12:	f7ff fa70 	bl	800d0f6 <__retarget_lock_release_recursive>
 800dc16:	e7d9      	b.n	800dbcc <_fflush_r+0xc>
 800dc18:	4b05      	ldr	r3, [pc, #20]	; (800dc30 <_fflush_r+0x70>)
 800dc1a:	429c      	cmp	r4, r3
 800dc1c:	d101      	bne.n	800dc22 <_fflush_r+0x62>
 800dc1e:	68ac      	ldr	r4, [r5, #8]
 800dc20:	e7df      	b.n	800dbe2 <_fflush_r+0x22>
 800dc22:	4b04      	ldr	r3, [pc, #16]	; (800dc34 <_fflush_r+0x74>)
 800dc24:	429c      	cmp	r4, r3
 800dc26:	bf08      	it	eq
 800dc28:	68ec      	ldreq	r4, [r5, #12]
 800dc2a:	e7da      	b.n	800dbe2 <_fflush_r+0x22>
 800dc2c:	080109f0 	.word	0x080109f0
 800dc30:	08010a10 	.word	0x08010a10
 800dc34:	080109d0 	.word	0x080109d0

0800dc38 <_lseek_r>:
 800dc38:	b538      	push	{r3, r4, r5, lr}
 800dc3a:	4d07      	ldr	r5, [pc, #28]	; (800dc58 <_lseek_r+0x20>)
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	4608      	mov	r0, r1
 800dc40:	4611      	mov	r1, r2
 800dc42:	2200      	movs	r2, #0
 800dc44:	602a      	str	r2, [r5, #0]
 800dc46:	461a      	mov	r2, r3
 800dc48:	f7f2 fe44 	bl	80008d4 <_lseek>
 800dc4c:	1c43      	adds	r3, r0, #1
 800dc4e:	d102      	bne.n	800dc56 <_lseek_r+0x1e>
 800dc50:	682b      	ldr	r3, [r5, #0]
 800dc52:	b103      	cbz	r3, 800dc56 <_lseek_r+0x1e>
 800dc54:	6023      	str	r3, [r4, #0]
 800dc56:	bd38      	pop	{r3, r4, r5, pc}
 800dc58:	20008a6c 	.word	0x20008a6c

0800dc5c <__swhatbuf_r>:
 800dc5c:	b570      	push	{r4, r5, r6, lr}
 800dc5e:	460e      	mov	r6, r1
 800dc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc64:	2900      	cmp	r1, #0
 800dc66:	b096      	sub	sp, #88	; 0x58
 800dc68:	4614      	mov	r4, r2
 800dc6a:	461d      	mov	r5, r3
 800dc6c:	da07      	bge.n	800dc7e <__swhatbuf_r+0x22>
 800dc6e:	2300      	movs	r3, #0
 800dc70:	602b      	str	r3, [r5, #0]
 800dc72:	89b3      	ldrh	r3, [r6, #12]
 800dc74:	061a      	lsls	r2, r3, #24
 800dc76:	d410      	bmi.n	800dc9a <__swhatbuf_r+0x3e>
 800dc78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc7c:	e00e      	b.n	800dc9c <__swhatbuf_r+0x40>
 800dc7e:	466a      	mov	r2, sp
 800dc80:	f000 f8b2 	bl	800dde8 <_fstat_r>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	dbf2      	blt.n	800dc6e <__swhatbuf_r+0x12>
 800dc88:	9a01      	ldr	r2, [sp, #4]
 800dc8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dc8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dc92:	425a      	negs	r2, r3
 800dc94:	415a      	adcs	r2, r3
 800dc96:	602a      	str	r2, [r5, #0]
 800dc98:	e7ee      	b.n	800dc78 <__swhatbuf_r+0x1c>
 800dc9a:	2340      	movs	r3, #64	; 0x40
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	6023      	str	r3, [r4, #0]
 800dca0:	b016      	add	sp, #88	; 0x58
 800dca2:	bd70      	pop	{r4, r5, r6, pc}

0800dca4 <__smakebuf_r>:
 800dca4:	898b      	ldrh	r3, [r1, #12]
 800dca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dca8:	079d      	lsls	r5, r3, #30
 800dcaa:	4606      	mov	r6, r0
 800dcac:	460c      	mov	r4, r1
 800dcae:	d507      	bpl.n	800dcc0 <__smakebuf_r+0x1c>
 800dcb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dcb4:	6023      	str	r3, [r4, #0]
 800dcb6:	6123      	str	r3, [r4, #16]
 800dcb8:	2301      	movs	r3, #1
 800dcba:	6163      	str	r3, [r4, #20]
 800dcbc:	b002      	add	sp, #8
 800dcbe:	bd70      	pop	{r4, r5, r6, pc}
 800dcc0:	ab01      	add	r3, sp, #4
 800dcc2:	466a      	mov	r2, sp
 800dcc4:	f7ff ffca 	bl	800dc5c <__swhatbuf_r>
 800dcc8:	9900      	ldr	r1, [sp, #0]
 800dcca:	4605      	mov	r5, r0
 800dccc:	4630      	mov	r0, r6
 800dcce:	f7ff fa6b 	bl	800d1a8 <_malloc_r>
 800dcd2:	b948      	cbnz	r0, 800dce8 <__smakebuf_r+0x44>
 800dcd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcd8:	059a      	lsls	r2, r3, #22
 800dcda:	d4ef      	bmi.n	800dcbc <__smakebuf_r+0x18>
 800dcdc:	f023 0303 	bic.w	r3, r3, #3
 800dce0:	f043 0302 	orr.w	r3, r3, #2
 800dce4:	81a3      	strh	r3, [r4, #12]
 800dce6:	e7e3      	b.n	800dcb0 <__smakebuf_r+0xc>
 800dce8:	4b0d      	ldr	r3, [pc, #52]	; (800dd20 <__smakebuf_r+0x7c>)
 800dcea:	62b3      	str	r3, [r6, #40]	; 0x28
 800dcec:	89a3      	ldrh	r3, [r4, #12]
 800dcee:	6020      	str	r0, [r4, #0]
 800dcf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcf4:	81a3      	strh	r3, [r4, #12]
 800dcf6:	9b00      	ldr	r3, [sp, #0]
 800dcf8:	6163      	str	r3, [r4, #20]
 800dcfa:	9b01      	ldr	r3, [sp, #4]
 800dcfc:	6120      	str	r0, [r4, #16]
 800dcfe:	b15b      	cbz	r3, 800dd18 <__smakebuf_r+0x74>
 800dd00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd04:	4630      	mov	r0, r6
 800dd06:	f000 f881 	bl	800de0c <_isatty_r>
 800dd0a:	b128      	cbz	r0, 800dd18 <__smakebuf_r+0x74>
 800dd0c:	89a3      	ldrh	r3, [r4, #12]
 800dd0e:	f023 0303 	bic.w	r3, r3, #3
 800dd12:	f043 0301 	orr.w	r3, r3, #1
 800dd16:	81a3      	strh	r3, [r4, #12]
 800dd18:	89a0      	ldrh	r0, [r4, #12]
 800dd1a:	4305      	orrs	r5, r0
 800dd1c:	81a5      	strh	r5, [r4, #12]
 800dd1e:	e7cd      	b.n	800dcbc <__smakebuf_r+0x18>
 800dd20:	0800cf2d 	.word	0x0800cf2d

0800dd24 <__malloc_lock>:
 800dd24:	4801      	ldr	r0, [pc, #4]	; (800dd2c <__malloc_lock+0x8>)
 800dd26:	f7ff b9e5 	b.w	800d0f4 <__retarget_lock_acquire_recursive>
 800dd2a:	bf00      	nop
 800dd2c:	20008a74 	.word	0x20008a74

0800dd30 <__malloc_unlock>:
 800dd30:	4801      	ldr	r0, [pc, #4]	; (800dd38 <__malloc_unlock+0x8>)
 800dd32:	f7ff b9e0 	b.w	800d0f6 <__retarget_lock_release_recursive>
 800dd36:	bf00      	nop
 800dd38:	20008a74 	.word	0x20008a74

0800dd3c <_read_r>:
 800dd3c:	b538      	push	{r3, r4, r5, lr}
 800dd3e:	4d07      	ldr	r5, [pc, #28]	; (800dd5c <_read_r+0x20>)
 800dd40:	4604      	mov	r4, r0
 800dd42:	4608      	mov	r0, r1
 800dd44:	4611      	mov	r1, r2
 800dd46:	2200      	movs	r2, #0
 800dd48:	602a      	str	r2, [r5, #0]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	f7f2 fd62 	bl	8000814 <_read>
 800dd50:	1c43      	adds	r3, r0, #1
 800dd52:	d102      	bne.n	800dd5a <_read_r+0x1e>
 800dd54:	682b      	ldr	r3, [r5, #0]
 800dd56:	b103      	cbz	r3, 800dd5a <_read_r+0x1e>
 800dd58:	6023      	str	r3, [r4, #0]
 800dd5a:	bd38      	pop	{r3, r4, r5, pc}
 800dd5c:	20008a6c 	.word	0x20008a6c

0800dd60 <_raise_r>:
 800dd60:	291f      	cmp	r1, #31
 800dd62:	b538      	push	{r3, r4, r5, lr}
 800dd64:	4604      	mov	r4, r0
 800dd66:	460d      	mov	r5, r1
 800dd68:	d904      	bls.n	800dd74 <_raise_r+0x14>
 800dd6a:	2316      	movs	r3, #22
 800dd6c:	6003      	str	r3, [r0, #0]
 800dd6e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd72:	bd38      	pop	{r3, r4, r5, pc}
 800dd74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dd76:	b112      	cbz	r2, 800dd7e <_raise_r+0x1e>
 800dd78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd7c:	b94b      	cbnz	r3, 800dd92 <_raise_r+0x32>
 800dd7e:	4620      	mov	r0, r4
 800dd80:	f000 f830 	bl	800dde4 <_getpid_r>
 800dd84:	462a      	mov	r2, r5
 800dd86:	4601      	mov	r1, r0
 800dd88:	4620      	mov	r0, r4
 800dd8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd8e:	f000 b817 	b.w	800ddc0 <_kill_r>
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d00a      	beq.n	800ddac <_raise_r+0x4c>
 800dd96:	1c59      	adds	r1, r3, #1
 800dd98:	d103      	bne.n	800dda2 <_raise_r+0x42>
 800dd9a:	2316      	movs	r3, #22
 800dd9c:	6003      	str	r3, [r0, #0]
 800dd9e:	2001      	movs	r0, #1
 800dda0:	e7e7      	b.n	800dd72 <_raise_r+0x12>
 800dda2:	2400      	movs	r4, #0
 800dda4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dda8:	4628      	mov	r0, r5
 800ddaa:	4798      	blx	r3
 800ddac:	2000      	movs	r0, #0
 800ddae:	e7e0      	b.n	800dd72 <_raise_r+0x12>

0800ddb0 <raise>:
 800ddb0:	4b02      	ldr	r3, [pc, #8]	; (800ddbc <raise+0xc>)
 800ddb2:	4601      	mov	r1, r0
 800ddb4:	6818      	ldr	r0, [r3, #0]
 800ddb6:	f7ff bfd3 	b.w	800dd60 <_raise_r>
 800ddba:	bf00      	nop
 800ddbc:	20000014 	.word	0x20000014

0800ddc0 <_kill_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	4d07      	ldr	r5, [pc, #28]	; (800dde0 <_kill_r+0x20>)
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	4608      	mov	r0, r1
 800ddca:	4611      	mov	r1, r2
 800ddcc:	602b      	str	r3, [r5, #0]
 800ddce:	f7f2 fd05 	bl	80007dc <_kill>
 800ddd2:	1c43      	adds	r3, r0, #1
 800ddd4:	d102      	bne.n	800dddc <_kill_r+0x1c>
 800ddd6:	682b      	ldr	r3, [r5, #0]
 800ddd8:	b103      	cbz	r3, 800dddc <_kill_r+0x1c>
 800ddda:	6023      	str	r3, [r4, #0]
 800dddc:	bd38      	pop	{r3, r4, r5, pc}
 800ddde:	bf00      	nop
 800dde0:	20008a6c 	.word	0x20008a6c

0800dde4 <_getpid_r>:
 800dde4:	f7f2 bcf2 	b.w	80007cc <_getpid>

0800dde8 <_fstat_r>:
 800dde8:	b538      	push	{r3, r4, r5, lr}
 800ddea:	4d07      	ldr	r5, [pc, #28]	; (800de08 <_fstat_r+0x20>)
 800ddec:	2300      	movs	r3, #0
 800ddee:	4604      	mov	r4, r0
 800ddf0:	4608      	mov	r0, r1
 800ddf2:	4611      	mov	r1, r2
 800ddf4:	602b      	str	r3, [r5, #0]
 800ddf6:	f7f2 fd52 	bl	800089e <_fstat>
 800ddfa:	1c43      	adds	r3, r0, #1
 800ddfc:	d102      	bne.n	800de04 <_fstat_r+0x1c>
 800ddfe:	682b      	ldr	r3, [r5, #0]
 800de00:	b103      	cbz	r3, 800de04 <_fstat_r+0x1c>
 800de02:	6023      	str	r3, [r4, #0]
 800de04:	bd38      	pop	{r3, r4, r5, pc}
 800de06:	bf00      	nop
 800de08:	20008a6c 	.word	0x20008a6c

0800de0c <_isatty_r>:
 800de0c:	b538      	push	{r3, r4, r5, lr}
 800de0e:	4d06      	ldr	r5, [pc, #24]	; (800de28 <_isatty_r+0x1c>)
 800de10:	2300      	movs	r3, #0
 800de12:	4604      	mov	r4, r0
 800de14:	4608      	mov	r0, r1
 800de16:	602b      	str	r3, [r5, #0]
 800de18:	f7f2 fd51 	bl	80008be <_isatty>
 800de1c:	1c43      	adds	r3, r0, #1
 800de1e:	d102      	bne.n	800de26 <_isatty_r+0x1a>
 800de20:	682b      	ldr	r3, [r5, #0]
 800de22:	b103      	cbz	r3, 800de26 <_isatty_r+0x1a>
 800de24:	6023      	str	r3, [r4, #0]
 800de26:	bd38      	pop	{r3, r4, r5, pc}
 800de28:	20008a6c 	.word	0x20008a6c

0800de2c <_init>:
 800de2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de2e:	bf00      	nop
 800de30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de32:	bc08      	pop	{r3}
 800de34:	469e      	mov	lr, r3
 800de36:	4770      	bx	lr

0800de38 <_fini>:
 800de38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3a:	bf00      	nop
 800de3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de3e:	bc08      	pop	{r3}
 800de40:	469e      	mov	lr, r3
 800de42:	4770      	bx	lr
