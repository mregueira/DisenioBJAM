
EjemploLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005258  08005258  00015258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005290  08005290  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005290  08005290  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005290  08005290  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005290  08005290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000014  080052ac  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080052ac  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010809  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020c0  00000000  00000000  0003084d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  00032910  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  00033840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001db90  00000000  00000000  00034668  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000beb2  00000000  00000000  000521f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0779  00000000  00000000  0005e0aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e823  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a0  00000000  00000000  0010e8a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005240 	.word	0x08005240

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08005240 	.word	0x08005240

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b09c      	sub	sp, #112	; 0x70
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	ed87 0a05 	vstr	s0, [r7, #20]
 8000a1e:	edc7 0a04 	vstr	s1, [r7, #16]
 8000a22:	ed87 1a03 	vstr	s2, [r7, #12]
 8000a26:	edc7 1a02 	vstr	s3, [r7, #8]
 8000a2a:	ed87 2a01 	vstr	s4, [r7, #4]
 8000a2e:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000a32:	4bee      	ldr	r3, [pc, #952]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000a34:	edd3 7a00 	vldr	s15, [r3]
 8000a38:	eeb1 7a67 	vneg.f32	s14, s15
 8000a3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a44:	4bea      	ldr	r3, [pc, #936]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000a46:	edd3 6a00 	vldr	s13, [r3]
 8000a4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a56:	4be7      	ldr	r3, [pc, #924]	; (8000df4 <MadgwickAHRSupdateIMU+0x3e0>)
 8000a58:	edd3 6a00 	vldr	s13, [r3]
 8000a5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a70:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000a74:	4be0      	ldr	r3, [pc, #896]	; (8000df8 <MadgwickAHRSupdateIMU+0x3e4>)
 8000a76:	ed93 7a00 	vldr	s14, [r3]
 8000a7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a82:	4bdb      	ldr	r3, [pc, #876]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000a84:	edd3 6a00 	vldr	s13, [r3]
 8000a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a94:	4bd7      	ldr	r3, [pc, #860]	; (8000df4 <MadgwickAHRSupdateIMU+0x3e0>)
 8000a96:	edd3 6a00 	vldr	s13, [r3]
 8000a9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aa6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aae:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8000ab2:	4bd1      	ldr	r3, [pc, #836]	; (8000df8 <MadgwickAHRSupdateIMU+0x3e4>)
 8000ab4:	ed93 7a00 	vldr	s14, [r3]
 8000ab8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ac0:	4bca      	ldr	r3, [pc, #808]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000ac2:	edd3 6a00 	vldr	s13, [r3]
 8000ac6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ace:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ad2:	4bc8      	ldr	r3, [pc, #800]	; (8000df4 <MadgwickAHRSupdateIMU+0x3e0>)
 8000ad4:	edd3 6a00 	vldr	s13, [r3]
 8000ad8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aec:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8000af0:	4bc1      	ldr	r3, [pc, #772]	; (8000df8 <MadgwickAHRSupdateIMU+0x3e4>)
 8000af2:	ed93 7a00 	vldr	s14, [r3]
 8000af6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000afe:	4bbb      	ldr	r3, [pc, #748]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000b00:	edd3 6a00 	vldr	s13, [r3]
 8000b04:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b10:	4bb7      	ldr	r3, [pc, #732]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000b12:	edd3 6a00 	vldr	s13, [r3]
 8000b16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000b2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3a:	d10e      	bne.n	8000b5a <MadgwickAHRSupdateIMU+0x146>
 8000b3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	d107      	bne.n	8000b5a <MadgwickAHRSupdateIMU+0x146>
 8000b4a:	edd7 7a00 	vldr	s15, [r7]
 8000b4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b56:	f000 81f3 	beq.w	8000f40 <MadgwickAHRSupdateIMU+0x52c>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000b5a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b66:	edd7 6a01 	vldr	s13, [r7, #4]
 8000b6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b76:	edd7 6a00 	vldr	s13, [r7]
 8000b7a:	edd7 7a00 	vldr	s15, [r7]
 8000b7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b86:	eeb0 0a67 	vmov.f32	s0, s15
 8000b8a:	f000 fa75 	bl	8001078 <invSqrt>
 8000b8e:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8000b92:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b96:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b9e:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8000ba2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ba6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bae:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8000bb2:	ed97 7a00 	vldr	s14, [r7]
 8000bb6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bbe:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8000bc2:	4b8d      	ldr	r3, [pc, #564]	; (8000df8 <MadgwickAHRSupdateIMU+0x3e4>)
 8000bc4:	edd3 7a00 	vldr	s15, [r3]
 8000bc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000bcc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8000bd0:	4b86      	ldr	r3, [pc, #536]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000bd2:	edd3 7a00 	vldr	s15, [r3]
 8000bd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000bda:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8000bde:	4b84      	ldr	r3, [pc, #528]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000be0:	edd3 7a00 	vldr	s15, [r3]
 8000be4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000be8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8000bec:	4b81      	ldr	r3, [pc, #516]	; (8000df4 <MadgwickAHRSupdateIMU+0x3e0>)
 8000bee:	edd3 7a00 	vldr	s15, [r3]
 8000bf2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000bf6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 8000bfa:	4b7f      	ldr	r3, [pc, #508]	; (8000df8 <MadgwickAHRSupdateIMU+0x3e4>)
 8000bfc:	edd3 7a00 	vldr	s15, [r3]
 8000c00:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c08:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8000c0c:	4b77      	ldr	r3, [pc, #476]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000c0e:	edd3 7a00 	vldr	s15, [r3]
 8000c12:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c1a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8000c1e:	4b74      	ldr	r3, [pc, #464]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000c20:	edd3 7a00 	vldr	s15, [r3]
 8000c24:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c2c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8000c30:	4b6e      	ldr	r3, [pc, #440]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000c32:	edd3 7a00 	vldr	s15, [r3]
 8000c36:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c3e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8000c42:	4b6b      	ldr	r3, [pc, #428]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000c44:	edd3 7a00 	vldr	s15, [r3]
 8000c48:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c50:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8000c54:	4b68      	ldr	r3, [pc, #416]	; (8000df8 <MadgwickAHRSupdateIMU+0x3e4>)
 8000c56:	ed93 7a00 	vldr	s14, [r3]
 8000c5a:	4b67      	ldr	r3, [pc, #412]	; (8000df8 <MadgwickAHRSupdateIMU+0x3e4>)
 8000c5c:	edd3 7a00 	vldr	s15, [r3]
 8000c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c64:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8000c68:	4b60      	ldr	r3, [pc, #384]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000c6a:	ed93 7a00 	vldr	s14, [r3]
 8000c6e:	4b5f      	ldr	r3, [pc, #380]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000c70:	edd3 7a00 	vldr	s15, [r3]
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8000c7c:	4b5c      	ldr	r3, [pc, #368]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000c7e:	ed93 7a00 	vldr	s14, [r3]
 8000c82:	4b5b      	ldr	r3, [pc, #364]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c8c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8000c90:	4b58      	ldr	r3, [pc, #352]	; (8000df4 <MadgwickAHRSupdateIMU+0x3e0>)
 8000c92:	ed93 7a00 	vldr	s14, [r3]
 8000c96:	4b57      	ldr	r3, [pc, #348]	; (8000df4 <MadgwickAHRSupdateIMU+0x3e0>)
 8000c98:	edd3 7a00 	vldr	s15, [r3]
 8000c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8000ca4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000ca8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000cac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cb0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8000cb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cc0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8000cc4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cd0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8000cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ce0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8000ce4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000ce8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000cec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cf0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8000cf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d00:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d04:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000d08:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d0c:	4b37      	ldr	r3, [pc, #220]	; (8000dec <MadgwickAHRSupdateIMU+0x3d8>)
 8000d0e:	edd3 7a00 	vldr	s15, [r3]
 8000d12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d1a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8000d1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d2a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000d2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d32:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000d36:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d42:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000d46:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d52:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8000d56:	edd7 7a00 	vldr	s15, [r7]
 8000d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d62:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8000d66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d6a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000d6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <MadgwickAHRSupdateIMU+0x3dc>)
 8000d74:	edd3 7a00 	vldr	s15, [r3]
 8000d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d7c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8000d80:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d8c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8000d90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d9c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8000da0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000da8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dac:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000db0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000db4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8000db8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dc4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8000dc8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dd4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8000dd8:	edd7 7a00 	vldr	s15, [r7]
 8000ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de4:	edc7 7a07 	vstr	s15, [r7, #28]
 8000de8:	e008      	b.n	8000dfc <MadgwickAHRSupdateIMU+0x3e8>
 8000dea:	bf00      	nop
 8000dec:	20000030 	.word	0x20000030
 8000df0:	20000034 	.word	0x20000034
 8000df4:	20000038 	.word	0x20000038
 8000df8:	20000004 	.word	0x20000004
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8000dfc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000e00:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000e04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e08:	4b95      	ldr	r3, [pc, #596]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8000e0a:	edd3 7a00 	vldr	s15, [r3]
 8000e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e12:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8000e16:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e26:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000e2a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000e2e:	4b8c      	ldr	r3, [pc, #560]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8000e30:	edd3 7a00 	vldr	s15, [r3]
 8000e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e3c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8000e40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4c:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8000e50:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e5c:	edd7 6a08 	vldr	s13, [r7, #32]
 8000e60:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8000e70:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e7c:	edd7 6a06 	vldr	s13, [r7, #24]
 8000e80:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e90:	f000 f8f2 	bl	8001078 <invSqrt>
 8000e94:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8000e98:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e9c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8000ea8:	ed97 7a08 	vldr	s14, [r7, #32]
 8000eac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb4:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8000eb8:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ebc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec4:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8000ec8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ecc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed4:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8000ed8:	4b62      	ldr	r3, [pc, #392]	; (8001064 <MadgwickAHRSupdateIMU+0x650>)
 8000eda:	ed93 7a00 	vldr	s14, [r3]
 8000ede:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee6:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8000eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eee:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8000ef2:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <MadgwickAHRSupdateIMU+0x650>)
 8000ef4:	ed93 7a00 	vldr	s14, [r3]
 8000ef8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f00:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8000f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f08:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8000f0c:	4b55      	ldr	r3, [pc, #340]	; (8001064 <MadgwickAHRSupdateIMU+0x650>)
 8000f0e:	ed93 7a00 	vldr	s14, [r3]
 8000f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f1a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f22:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 8000f26:	4b4f      	ldr	r3, [pc, #316]	; (8001064 <MadgwickAHRSupdateIMU+0x650>)
 8000f28:	ed93 7a00 	vldr	s14, [r3]
 8000f2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f34:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8000f40:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000f44:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001068 <MadgwickAHRSupdateIMU+0x654>
 8000f48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f4c:	4b47      	ldr	r3, [pc, #284]	; (800106c <MadgwickAHRSupdateIMU+0x658>)
 8000f4e:	edd3 7a00 	vldr	s15, [r3]
 8000f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f56:	4b45      	ldr	r3, [pc, #276]	; (800106c <MadgwickAHRSupdateIMU+0x658>)
 8000f58:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8000f5c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8000f60:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001068 <MadgwickAHRSupdateIMU+0x654>
 8000f64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f68:	4b41      	ldr	r3, [pc, #260]	; (8001070 <MadgwickAHRSupdateIMU+0x65c>)
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f72:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <MadgwickAHRSupdateIMU+0x65c>)
 8000f74:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8000f78:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000f7c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001068 <MadgwickAHRSupdateIMU+0x654>
 8000f80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f84:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <MadgwickAHRSupdateIMU+0x660>)
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f8e:	4b39      	ldr	r3, [pc, #228]	; (8001074 <MadgwickAHRSupdateIMU+0x660>)
 8000f90:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8000f94:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000f98:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001068 <MadgwickAHRSupdateIMU+0x654>
 8000f9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8000fa2:	edd3 7a00 	vldr	s15, [r3]
 8000fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8000fac:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	; (800106c <MadgwickAHRSupdateIMU+0x658>)
 8000fb2:	ed93 7a00 	vldr	s14, [r3]
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MadgwickAHRSupdateIMU+0x658>)
 8000fb8:	edd3 7a00 	vldr	s15, [r3]
 8000fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <MadgwickAHRSupdateIMU+0x65c>)
 8000fc2:	edd3 6a00 	vldr	s13, [r3]
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <MadgwickAHRSupdateIMU+0x65c>)
 8000fc8:	edd3 7a00 	vldr	s15, [r3]
 8000fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fd4:	4b27      	ldr	r3, [pc, #156]	; (8001074 <MadgwickAHRSupdateIMU+0x660>)
 8000fd6:	edd3 6a00 	vldr	s13, [r3]
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <MadgwickAHRSupdateIMU+0x660>)
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8000fea:	edd3 6a00 	vldr	s13, [r3]
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8000ff0:	edd3 7a00 	vldr	s15, [r3]
 8000ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8001000:	f000 f83a 	bl	8001078 <invSqrt>
 8001004:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <MadgwickAHRSupdateIMU+0x658>)
 800100a:	ed93 7a00 	vldr	s14, [r3]
 800100e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <MadgwickAHRSupdateIMU+0x658>)
 8001018:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MadgwickAHRSupdateIMU+0x65c>)
 800101e:	ed93 7a00 	vldr	s14, [r3]
 8001022:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MadgwickAHRSupdateIMU+0x65c>)
 800102c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <MadgwickAHRSupdateIMU+0x660>)
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800103a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <MadgwickAHRSupdateIMU+0x660>)
 8001040:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8001046:	ed93 7a00 	vldr	s14, [r3]
 800104a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	4b03      	ldr	r3, [pc, #12]	; (8001060 <MadgwickAHRSupdateIMU+0x64c>)
 8001054:	edc3 7a00 	vstr	s15, [r3]
}
 8001058:	bf00      	nop
 800105a:	3770      	adds	r7, #112	; 0x70
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000038 	.word	0x20000038
 8001064:	20000000 	.word	0x20000000
 8001068:	3ba3d70a 	.word	0x3ba3d70a
 800106c:	20000004 	.word	0x20000004
 8001070:	20000030 	.word	0x20000030
 8001074:	20000034 	.word	0x20000034

08001078 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800108a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	105a      	asrs	r2, r3, #1
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <invSqrt+0x74>)
 80010a4:	1a9b      	subs	r3, r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80010b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80010b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80010c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80010c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80010d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d4:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	ee07 3a90 	vmov	s15, r3
}
 80010de:	eeb0 0a67 	vmov.f32	s0, s15
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	5f3759df 	.word	0x5f3759df

080010f0 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 80010f8:	224c      	movs	r2, #76	; 0x4c
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <MPU6050_Init+0x1c>)
 80010fe:	f004 f88b 	bl	8005218 <memcpy>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000003c 	.word	0x2000003c

08001110 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af02      	add	r7, sp, #8
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8001120:	23d0      	movs	r3, #208	; 0xd0
 8001122:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	b299      	uxth	r1, r3
 800112c:	f107 020c 	add.w	r2, r7, #12
 8001130:	230a      	movs	r3, #10
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	4809      	ldr	r0, [pc, #36]	; (800115c <I2C_Read+0x4c>)
 8001138:	f001 f978 	bl	800242c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	b299      	uxth	r1, r3
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	b29a      	uxth	r2, r3
 8001144:	2364      	movs	r3, #100	; 0x64
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4613      	mov	r3, r2
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <I2C_Read+0x4c>)
 800114e:	f001 fa61 	bl	8002614 <HAL_I2C_Master_Receive>
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000003c 	.word	0x2000003c

08001160 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af02      	add	r7, sp, #8
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8001178:	23d0      	movs	r3, #208	; 0xd0
 800117a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	b299      	uxth	r1, r3
 8001180:	f107 020c 	add.w	r2, r7, #12
 8001184:	2364      	movs	r3, #100	; 0x64
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2302      	movs	r3, #2
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <I2C_Write8+0x38>)
 800118c:	f001 f94e 	bl	800242c <HAL_I2C_Master_Transmit>
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000003c 	.word	0x2000003c

0800119c <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	206b      	movs	r0, #107	; 0x6b
 80011ac:	f7ff ffd8 	bl	8001160 <I2C_Write8>
	HAL_Delay(100);
 80011b0:	2064      	movs	r0, #100	; 0x64
 80011b2:	f000 fe19 	bl	8001de8 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	791b      	ldrb	r3, [r3, #4]
 80011c4:	019b      	lsls	r3, r3, #6
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011cc:	b25a      	sxtb	r2, r3
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	4619      	mov	r1, r3
 80011dc:	206b      	movs	r0, #107	; 0x6b
 80011de:	f7ff ffbf 	bl	8001160 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 80011e2:	2064      	movs	r0, #100	; 0x64
 80011e4:	f000 fe00 	bl	8001de8 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	78db      	ldrb	r3, [r3, #3]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	4619      	mov	r1, r3
 80011fa:	201a      	movs	r0, #26
 80011fc:	f7ff ffb0 	bl	8001160 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 0318 	and.w	r3, r3, #24
 8001210:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	4619      	mov	r1, r3
 8001216:	201b      	movs	r0, #27
 8001218:	f7ff ffa2 	bl	8001160 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	789b      	ldrb	r3, [r3, #2]
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f003 0318 	and.w	r3, r3, #24
 800122c:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	4619      	mov	r1, r3
 8001232:	201c      	movs	r0, #28
 8001234:	f7ff ff94 	bl	8001160 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8001238:	2004      	movs	r0, #4
 800123a:	f000 f857 	bl	80012ec <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	789b      	ldrb	r3, [r3, #2]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d81a      	bhi.n	800127c <MPU6050_Config+0xe0>
 8001246:	a201      	add	r2, pc, #4	; (adr r2, 800124c <MPU6050_Config+0xb0>)
 8001248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124c:	0800125d 	.word	0x0800125d
 8001250:	08001265 	.word	0x08001265
 8001254:	0800126d 	.word	0x0800126d
 8001258:	08001275 	.word	0x08001275
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MPU6050_Config+0x12c>)
 800125e:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <MPU6050_Config+0x130>)
 8001260:	601a      	str	r2, [r3, #0]
			break;
 8001262:	e00c      	b.n	800127e <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MPU6050_Config+0x12c>)
 8001266:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <MPU6050_Config+0x134>)
 8001268:	601a      	str	r2, [r3, #0]
				break;
 800126a:	e008      	b.n	800127e <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MPU6050_Config+0x12c>)
 800126e:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <MPU6050_Config+0x138>)
 8001270:	601a      	str	r2, [r3, #0]
			break;
 8001272:	e004      	b.n	800127e <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MPU6050_Config+0x12c>)
 8001276:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <MPU6050_Config+0x13c>)
 8001278:	601a      	str	r2, [r3, #0]
			break;
 800127a:	e000      	b.n	800127e <MPU6050_Config+0xe2>
		
		default:
			break;
 800127c:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	2b03      	cmp	r3, #3
 8001284:	d81a      	bhi.n	80012bc <MPU6050_Config+0x120>
 8001286:	a201      	add	r2, pc, #4	; (adr r2, 800128c <MPU6050_Config+0xf0>)
 8001288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128c:	0800129d 	.word	0x0800129d
 8001290:	080012a5 	.word	0x080012a5
 8001294:	080012ad 	.word	0x080012ad
 8001298:	080012b5 	.word	0x080012b5
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MPU6050_Config+0x140>)
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <MPU6050_Config+0x144>)
 80012a0:	601a      	str	r2, [r3, #0]
			break;
 80012a2:	e00c      	b.n	80012be <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MPU6050_Config+0x140>)
 80012a6:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <MPU6050_Config+0x148>)
 80012a8:	601a      	str	r2, [r3, #0]
				break;
 80012aa:	e008      	b.n	80012be <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MPU6050_Config+0x140>)
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <MPU6050_Config+0x14c>)
 80012b0:	601a      	str	r2, [r3, #0]
			break;
 80012b2:	e004      	b.n	80012be <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MPU6050_Config+0x140>)
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <MPU6050_Config+0x130>)
 80012b8:	601a      	str	r2, [r3, #0]
			break;
 80012ba:	e000      	b.n	80012be <MPU6050_Config+0x122>
		
		default:
			break;
 80012bc:	bf00      	nop
	}
	
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000088 	.word	0x20000088
 80012cc:	3d7a0000 	.word	0x3d7a0000
 80012d0:	3dfa0000 	.word	0x3dfa0000
 80012d4:	3e7a0000 	.word	0x3e7a0000
 80012d8:	3efa0000 	.word	0x3efa0000
 80012dc:	2000008c 	.word	0x2000008c
 80012e0:	3bfa0000 	.word	0x3bfa0000
 80012e4:	3c7a0000 	.word	0x3c7a0000
 80012e8:	3cfa0000 	.word	0x3cfa0000

080012ec <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	4619      	mov	r1, r3
 80012fa:	2019      	movs	r0, #25
 80012fc:	f7ff ff30 	bl	8001160 <I2C_Write8>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	3301      	adds	r3, #1
 8001316:	2201      	movs	r2, #1
 8001318:	4619      	mov	r1, r3
 800131a:	203a      	movs	r0, #58	; 0x3a
 800131c:	f7ff fef8 	bl	8001110 <I2C_Read>
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
	}
	*/

	if((i2cBuf[1]&&0x01))
 8001320:	7f7b      	ldrb	r3, [r7, #29]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d04f      	beq.n	80013c6 <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	2206      	movs	r2, #6
 800132c:	4619      	mov	r1, r3
 800132e:	203b      	movs	r0, #59	; 0x3b
 8001330:	f7ff feee 	bl	8001110 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8001334:	7d3b      	ldrb	r3, [r7, #20]
 8001336:	b29b      	uxth	r3, r3
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b29a      	uxth	r2, r3
 800133c:	7d7b      	ldrb	r3, [r7, #21]
 800133e:	b29b      	uxth	r3, r3
 8001340:	4413      	add	r3, r2
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21a      	sxth	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 800134a:	7dbb      	ldrb	r3, [r7, #22]
 800134c:	b29b      	uxth	r3, r3
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b29a      	uxth	r2, r3
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8001360:	7e3b      	ldrb	r3, [r7, #24]
 8001362:	b29b      	uxth	r3, r3
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b29a      	uxth	r2, r3
 8001368:	7e7b      	ldrb	r3, [r7, #25]
 800136a:	b29b      	uxth	r3, r3
 800136c:	4413      	add	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	b21a      	sxth	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	2206      	movs	r2, #6
 800137c:	4619      	mov	r1, r3
 800137e:	2043      	movs	r0, #67	; 0x43
 8001380:	f7ff fec6 	bl	8001110 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8001384:	7b3b      	ldrb	r3, [r7, #12]
 8001386:	b29b      	uxth	r3, r3
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	b29a      	uxth	r2, r3
 800138c:	7b7b      	ldrb	r3, [r7, #13]
 800138e:	b29b      	uxth	r3, r3
 8001390:	4413      	add	r3, r2
 8001392:	b29b      	uxth	r3, r3
 8001394:	b21a      	sxth	r2, r3
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MPU6050_Get_Accel_RawData+0xc8>)
 8001398:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	b29b      	uxth	r3, r3
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MPU6050_Get_Accel_RawData+0xc8>)
 80013ae:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 80013b0:	7c3b      	ldrb	r3, [r7, #16]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	7c7b      	ldrb	r3, [r7, #17]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4413      	add	r3, r2
 80013be:	b29b      	uxth	r3, r3
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <MPU6050_Get_Accel_RawData+0xc8>)
 80013c4:	809a      	strh	r2, [r3, #4]
	}

}
 80013c6:	bf00      	nop
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000009c 	.word	0x2000009c

080013d4 <MPU6050_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU6050_Get_Accel_Scale(ScaledData_Def *scaledDef)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU6050_Get_Accel_RawData(&AccelRData);
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff91 	bl	8001308 <MPU6050_Get_Accel_RawData>
	
	//Accel Scale data 
	scaledDef->x = ((AccelRData.x+0.0f)*accelScalingFactor);
 80013e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800145c <MPU6050_Get_Accel_Scale+0x88>
 80013f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MPU6050_Get_Accel_Scale+0x8c>)
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = ((AccelRData.y+0.0f)*accelScalingFactor);
 800140a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800140e:	ee07 3a90 	vmov	s15, r3
 8001412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001416:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800145c <MPU6050_Get_Accel_Scale+0x88>
 800141a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MPU6050_Get_Accel_Scale+0x8c>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = ((AccelRData.z+0.0f)*accelScalingFactor);
 800142e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800145c <MPU6050_Get_Accel_Scale+0x88>
 800143e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <MPU6050_Get_Accel_Scale+0x8c>)
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	00000000 	.word	0x00000000
 8001460:	20000088 	.word	0x20000088

08001464 <MPU6050_Get_Accel_Cali>:

//11- Get Accel calibrated data
void MPU6050_Get_Accel_Cali(ScaledData_Def *CaliDef)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	ScaledData_Def AccelScaled;
	MPU6050_Get_Accel_Scale(&AccelScaled);
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ffaf 	bl	80013d4 <MPU6050_Get_Accel_Scale>
	
	//Accel Scale data 
	CaliDef->x = (AccelScaled.x) - A_X_Bias; // x-Axis
 8001476:	ed97 7a03 	vldr	s14, [r7, #12]
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MPU6050_Get_Accel_Cali+0x58>)
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	edc3 7a00 	vstr	s15, [r3]
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
 800148a:	ed97 7a04 	vldr	s14, [r7, #16]
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MPU6050_Get_Accel_Cali+0x5c>)
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	edc3 7a01 	vstr	s15, [r3, #4]
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
 800149e:	ed97 7a05 	vldr	s14, [r7, #20]
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MPU6050_Get_Accel_Cali+0x60>)
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000090 	.word	0x20000090
 80014c0:	20000094 	.word	0x20000094
 80014c4:	20000098 	.word	0x20000098

080014c8 <MPU6050_Get_Gyro_RawData>:
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <MPU6050_Get_Gyro_RawData+0x34>)
 80014d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <MPU6050_Get_Gyro_RawData+0x34>)
 80014dc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <MPU6050_Get_Gyro_RawData+0x34>)
 80014e6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	809a      	strh	r2, [r3, #4]
	
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	2000009c 	.word	0x2000009c

08001500 <MPU6050_Get_Gyro_Scale>:

//13- Get Gyro scaled data
void MPU6050_Get_Gyro_Scale(ScaledData_Def *scaledDef)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	RawData_Def myGyroRaw;
	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ffdb 	bl	80014c8 <MPU6050_Get_Gyro_RawData>
	
	//Gyro Scale data 
	scaledDef->x = (myGyroRaw.x)*gyroScalingFactor; // x-Axis
 8001512:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MPU6050_Get_Gyro_Scale+0x70>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = (myGyroRaw.y)*gyroScalingFactor; // y-Axis
 800152e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001532:	ee07 3a90 	vmov	s15, r3
 8001536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MPU6050_Get_Gyro_Scale+0x70>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = (myGyroRaw.z)*gyroScalingFactor; // z-Axis
 800154a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800154e:	ee07 3a90 	vmov	s15, r3
 8001552:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MPU6050_Get_Gyro_Scale+0x70>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000008c 	.word	0x2000008c

08001574 <_Accel_Cali>:

//14- Accel Calibration
void _Accel_Cali(float x_min, float x_max, float y_min, float y_max, float z_min, float z_max)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	ed87 0a05 	vstr	s0, [r7, #20]
 800157e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001582:	ed87 1a03 	vstr	s2, [r7, #12]
 8001586:	edc7 1a02 	vstr	s3, [r7, #8]
 800158a:	ed87 2a01 	vstr	s4, [r7, #4]
 800158e:	edc7 2a00 	vstr	s5, [r7]
	//1* X-Axis calibrate
	A_X_Bias		= (x_max + x_min)/2.0f;
 8001592:	ed97 7a04 	vldr	s14, [r7, #16]
 8001596:	edd7 7a05 	vldr	s15, [r7, #20]
 800159a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800159e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <_Accel_Cali+0x78>)
 80015a8:	edc3 7a00 	vstr	s15, [r3]
	
	//2* Y-Axis calibrate
	A_Y_Bias		= (y_max + y_min)/2.0f;
 80015ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80015b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <_Accel_Cali+0x7c>)
 80015c2:	edc3 7a00 	vstr	s15, [r3]
	
	//3* Z-Axis calibrate
	A_Z_Bias		= (z_max + z_min)/2.0f;
 80015c6:	ed97 7a00 	vldr	s14, [r7]
 80015ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <_Accel_Cali+0x80>)
 80015dc:	edc3 7a00 	vstr	s15, [r3]
}
 80015e0:	bf00      	nop
 80015e2:	371c      	adds	r7, #28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	20000090 	.word	0x20000090
 80015f0:	20000094 	.word	0x20000094
 80015f4:	20000098 	.word	0x20000098

080015f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b08f      	sub	sp, #60	; 0x3c
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fe:	f000 fb8d 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001602:	f000 f8db 	bl	80017bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001606:	f000 f9f3 	bl	80019f0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800160a:	f000 f96d 	bl	80018e8 <MX_TIM1_Init>
  MX_I2C1_Init();
 800160e:	f000 f92d 	bl	800186c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001612:	f000 f9bd 	bl	8001990 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	//1. Initialise the MPU6050 module and I2C
	MPU6050_Init(&hi2c1);
 8001616:	485e      	ldr	r0, [pc, #376]	; (8001790 <main+0x198>)
 8001618:	f7ff fd6a 	bl	80010f0 <MPU6050_Init>
	//2. Configure Accel and Gyro parameters
	myMpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 800161c:	2301      	movs	r3, #1
 800161e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	myMpuConfig.ClockSource = Internal_8MHz;
 8001622:	2300      	movs	r3, #0
 8001624:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 8001628:	2301      	movs	r3, #1
 800162a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 800162e:	2301      	movs	r3, #1
 8001630:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	MPU6050_Config(&myMpuConfig);
 800163a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fdac 	bl	800119c <MPU6050_Config>

	// Estaban corridos el x e y - Calibracion acelerometro
	_Accel_Cali(900.0, 900.0, -1000.0, -1000.0, 0.0, 0.0);
 8001644:	eddf 2a53 	vldr	s5, [pc, #332]	; 8001794 <main+0x19c>
 8001648:	ed9f 2a52 	vldr	s4, [pc, #328]	; 8001794 <main+0x19c>
 800164c:	eddf 1a52 	vldr	s3, [pc, #328]	; 8001798 <main+0x1a0>
 8001650:	ed9f 1a51 	vldr	s2, [pc, #324]	; 8001798 <main+0x1a0>
 8001654:	eddf 0a51 	vldr	s1, [pc, #324]	; 800179c <main+0x1a4>
 8001658:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800179c <main+0x1a4>
 800165c:	f7ff ff8a 	bl	8001574 <_Accel_Cali>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//Scaled data
	MPU6050_Get_Accel_Cali(&myAccelScaled);
 8001660:	484f      	ldr	r0, [pc, #316]	; (80017a0 <main+0x1a8>)
 8001662:	f7ff feff 	bl	8001464 <MPU6050_Get_Accel_Cali>
	MPU6050_Get_Gyro_Scale(&myGyroScaled);
 8001666:	484f      	ldr	r0, [pc, #316]	; (80017a4 <main+0x1ac>)
 8001668:	f7ff ff4a 	bl	8001500 <MPU6050_Get_Gyro_Scale>

	data2send.ax = myAccelScaled.x;
 800166c:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <main+0x1a8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60bb      	str	r3, [r7, #8]
	data2send.ay = myAccelScaled.y;
 8001672:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <main+0x1a8>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	60fb      	str	r3, [r7, #12]
	data2send.az = myAccelScaled.z;
 8001678:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <main+0x1a8>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	613b      	str	r3, [r7, #16]

	data2send.gx = (3.1416)*myGyroScaled.x/180.0;
 800167e:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <main+0x1ac>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff0c 	bl	80004a0 <__aeabi_f2d>
 8001688:	a33f      	add	r3, pc, #252	; (adr r3, 8001788 <main+0x190>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	f7fe ff5f 	bl	8000550 <__aeabi_dmul>
 8001692:	4603      	mov	r3, r0
 8001694:	460c      	mov	r4, r1
 8001696:	4618      	mov	r0, r3
 8001698:	4621      	mov	r1, r4
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <main+0x1b0>)
 80016a0:	f7ff f880 	bl	80007a4 <__aeabi_ddiv>
 80016a4:	4603      	mov	r3, r0
 80016a6:	460c      	mov	r4, r1
 80016a8:	4618      	mov	r0, r3
 80016aa:	4621      	mov	r1, r4
 80016ac:	f7ff f962 	bl	8000974 <__aeabi_d2f>
 80016b0:	4603      	mov	r3, r0
 80016b2:	617b      	str	r3, [r7, #20]
	data2send.gy = (3.1416)*myGyroScaled.y/180.0;
 80016b4:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <main+0x1ac>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe fef1 	bl	80004a0 <__aeabi_f2d>
 80016be:	a332      	add	r3, pc, #200	; (adr r3, 8001788 <main+0x190>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ff44 	bl	8000550 <__aeabi_dmul>
 80016c8:	4603      	mov	r3, r0
 80016ca:	460c      	mov	r4, r1
 80016cc:	4618      	mov	r0, r3
 80016ce:	4621      	mov	r1, r4
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	4b34      	ldr	r3, [pc, #208]	; (80017a8 <main+0x1b0>)
 80016d6:	f7ff f865 	bl	80007a4 <__aeabi_ddiv>
 80016da:	4603      	mov	r3, r0
 80016dc:	460c      	mov	r4, r1
 80016de:	4618      	mov	r0, r3
 80016e0:	4621      	mov	r1, r4
 80016e2:	f7ff f947 	bl	8000974 <__aeabi_d2f>
 80016e6:	4603      	mov	r3, r0
 80016e8:	61bb      	str	r3, [r7, #24]
	data2send.gz = (3.1416)*myGyroScaled.z/180.0;
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <main+0x1ac>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fed6 	bl	80004a0 <__aeabi_f2d>
 80016f4:	a324      	add	r3, pc, #144	; (adr r3, 8001788 <main+0x190>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe ff29 	bl	8000550 <__aeabi_dmul>
 80016fe:	4603      	mov	r3, r0
 8001700:	460c      	mov	r4, r1
 8001702:	4618      	mov	r0, r3
 8001704:	4621      	mov	r1, r4
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <main+0x1b0>)
 800170c:	f7ff f84a 	bl	80007a4 <__aeabi_ddiv>
 8001710:	4603      	mov	r3, r0
 8001712:	460c      	mov	r4, r1
 8001714:	4618      	mov	r0, r3
 8001716:	4621      	mov	r1, r4
 8001718:	f7ff f92c 	bl	8000974 <__aeabi_d2f>
 800171c:	4603      	mov	r3, r0
 800171e:	61fb      	str	r3, [r7, #28]

	MadgwickAHRSupdateIMU(data2send.gx,data2send.gy,data2send.gz,
 8001720:	edd7 7a05 	vldr	s15, [r7, #20]
 8001724:	ed97 7a06 	vldr	s14, [r7, #24]
 8001728:	edd7 6a07 	vldr	s13, [r7, #28]
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <main+0x1a8>)
 800172e:	ed93 6a00 	vldr	s12, [r3]
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <main+0x1a8>)
 8001734:	edd3 5a01 	vldr	s11, [r3, #4]
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <main+0x1a8>)
 800173a:	ed93 5a02 	vldr	s10, [r3, #8]
 800173e:	eef0 2a45 	vmov.f32	s5, s10
 8001742:	eeb0 2a65 	vmov.f32	s4, s11
 8001746:	eef0 1a46 	vmov.f32	s3, s12
 800174a:	eeb0 1a66 	vmov.f32	s2, s13
 800174e:	eef0 0a47 	vmov.f32	s1, s14
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	f7ff f95d 	bl	8000a14 <MadgwickAHRSupdateIMU>
			myAccelScaled.x,myAccelScaled.y,myAccelScaled.z);

	data2send.q0 = q0;
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <main+0x1b4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	623b      	str	r3, [r7, #32]
	data2send.q1 = q1;
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <main+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
	data2send.q2 = q2;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <main+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
	data2send.q3 = q3;
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <main+0x1c0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c

	sendData2PC(&data2send);
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f95f 	bl	8001a38 <sendData2PC>

	HAL_Delay(5);
 800177a:	2005      	movs	r0, #5
 800177c:	f000 fb34 	bl	8001de8 <HAL_Delay>
  {
 8001780:	e76e      	b.n	8001660 <main+0x68>
 8001782:	bf00      	nop
 8001784:	f3af 8000 	nop.w
 8001788:	2e48e8a7 	.word	0x2e48e8a7
 800178c:	400921ff 	.word	0x400921ff
 8001790:	200000a4 	.word	0x200000a4
 8001794:	00000000 	.word	0x00000000
 8001798:	c47a0000 	.word	0xc47a0000
 800179c:	44610000 	.word	0x44610000
 80017a0:	200000f8 	.word	0x200000f8
 80017a4:	200001c4 	.word	0x200001c4
 80017a8:	40668000 	.word	0x40668000
 80017ac:	20000004 	.word	0x20000004
 80017b0:	20000030 	.word	0x20000030
 80017b4:	20000034 	.word	0x20000034
 80017b8:	20000038 	.word	0x20000038

080017bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0a6      	sub	sp, #152	; 0x98
 80017c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017c6:	2228      	movs	r2, #40	; 0x28
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f003 fd2f 	bl	800522e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2258      	movs	r2, #88	; 0x58
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fd21 	bl	800522e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ec:	2302      	movs	r3, #2
 80017ee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f0:	2301      	movs	r3, #1
 80017f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f4:	2310      	movs	r3, #16
 80017f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001800:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001804:	4618      	mov	r0, r3
 8001806:	f001 fa73 	bl	8002cf0 <HAL_RCC_OscConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001810:	f000 f926 	bl	8001a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001814:	230f      	movs	r3, #15
 8001816:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001818:	2300      	movs	r3, #0
 800181a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001828:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f002 f974 	bl	8003b1c <HAL_RCC_ClockConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800183a:	f000 f911 	bl	8001a60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800183e:	f241 0322 	movw	r3, #4130	; 0x1022
 8001842:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800184c:	2300      	movs	r3, #0
 800184e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4618      	mov	r0, r3
 8001854:	f002 fb98 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800185e:	f000 f8ff 	bl	8001a60 <Error_Handler>
  }
}
 8001862:	bf00      	nop
 8001864:	3798      	adds	r7, #152	; 0x98
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <MX_I2C1_Init+0x78>)
 8001874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001878:	f240 220b 	movw	r2, #523	; 0x20b
 800187c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001886:	2201      	movs	r2, #1
 8001888:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MX_I2C1_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <MX_I2C1_Init+0x74>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_I2C1_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018a8:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_I2C1_Init+0x74>)
 80018aa:	f000 fd2f 	bl	800230c <HAL_I2C_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018b4:	f000 f8d4 	bl	8001a60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018b8:	2100      	movs	r1, #0
 80018ba:	4809      	ldr	r0, [pc, #36]	; (80018e0 <MX_I2C1_Init+0x74>)
 80018bc:	f001 f980 	bl	8002bc0 <HAL_I2CEx_ConfigAnalogFilter>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80018c6:	f000 f8cb 	bl	8001a60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018ca:	2100      	movs	r1, #0
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <MX_I2C1_Init+0x74>)
 80018ce:	f001 f9c2 	bl	8002c56 <HAL_I2CEx_ConfigDigitalFilter>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80018d8:	f000 f8c2 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200000a4 	.word	0x200000a4
 80018e4:	40005400 	.word	0x40005400

080018e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <MX_TIM1_Init+0xa0>)
 8001908:	4a20      	ldr	r2, [pc, #128]	; (800198c <MX_TIM1_Init+0xa4>)
 800190a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <MX_TIM1_Init+0xa0>)
 800190e:	2200      	movs	r2, #0
 8001910:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <MX_TIM1_Init+0xa0>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400;
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <MX_TIM1_Init+0xa0>)
 800191a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800191e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <MX_TIM1_Init+0xa0>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <MX_TIM1_Init+0xa0>)
 8001928:	2200      	movs	r2, #0
 800192a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <MX_TIM1_Init+0xa0>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001932:	4815      	ldr	r0, [pc, #84]	; (8001988 <MX_TIM1_Init+0xa0>)
 8001934:	f002 fd46 	bl	80043c4 <HAL_TIM_Base_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800193e:	f000 f88f 	bl	8001a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001946:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	4619      	mov	r1, r3
 800194e:	480e      	ldr	r0, [pc, #56]	; (8001988 <MX_TIM1_Init+0xa0>)
 8001950:	f002 fd63 	bl	800441a <HAL_TIM_ConfigClockSource>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800195a:	f000 f881 	bl	8001a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	4619      	mov	r1, r3
 800196e:	4806      	ldr	r0, [pc, #24]	; (8001988 <MX_TIM1_Init+0xa0>)
 8001970:	f002 ff44 	bl	80047fc <HAL_TIMEx_MasterConfigSynchronization>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800197a:	f000 f871 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000104 	.word	0x20000104
 800198c:	40012c00 	.word	0x40012c00

08001990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 8001996:	4a15      	ldr	r2, [pc, #84]	; (80019ec <MX_USART2_UART_Init+0x5c>)
 8001998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019d4:	f002 ff9e 	bl	8004914 <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019de:	f000 f83f 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000144 	.word	0x20000144
 80019ec:	40004400 	.word	0x40004400

080019f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_GPIO_Init+0x44>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <MX_GPIO_Init+0x44>)
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a00:	6153      	str	r3, [r2, #20]
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_GPIO_Init+0x44>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_GPIO_Init+0x44>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <MX_GPIO_Init+0x44>)
 8001a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a18:	6153      	str	r3, [r2, #20]
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_GPIO_Init+0x44>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]

}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000

08001a38 <sendData2PC>:

/* USER CODE BEGIN 4 */
void sendData2PC(information2send * data){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	data->sync = 0xffffffff;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f04f 32ff 	mov.w	r2, #4294967295
 8001a46:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)data, DATA_SIZE, 10);
 8001a48:	230a      	movs	r3, #10
 8001a4a:	222c      	movs	r2, #44	; 0x2c
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4803      	ldr	r0, [pc, #12]	; (8001a5c <sendData2PC+0x24>)
 8001a50:	f002 ffae 	bl	80049b0 <HAL_UART_Transmit>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000144 	.word	0x20000144

08001a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	4a0e      	ldr	r2, [pc, #56]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6193      	str	r3, [r2, #24]
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	61d3      	str	r3, [r2, #28]
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <HAL_I2C_MspInit+0xb8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d145      	bne.n	8001b66 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <HAL_I2C_MspInit+0xbc>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	4a25      	ldr	r2, [pc, #148]	; (8001b74 <HAL_I2C_MspInit+0xbc>)
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	6153      	str	r3, [r2, #20]
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_I2C_MspInit+0xbc>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_I2C_MspInit+0xbc>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <HAL_I2C_MspInit+0xbc>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6153      	str	r3, [r2, #20]
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_I2C_MspInit+0xbc>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b10:	2312      	movs	r3, #18
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2a:	f000 fa65 	bl	8001ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b32:	2312      	movs	r3, #18
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	480b      	ldr	r0, [pc, #44]	; (8001b78 <HAL_I2C_MspInit+0xc0>)
 8001b4a:	f000 fa55 	bl	8001ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_I2C_MspInit+0xbc>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <HAL_I2C_MspInit+0xbc>)
 8001b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b58:	61d3      	str	r3, [r2, #28]
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_I2C_MspInit+0xbc>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	; 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40005400 	.word	0x40005400
 8001b74:	40021000 	.word	0x40021000
 8001b78:	48000400 	.word	0x48000400

08001b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_TIM_Base_MspInit+0x38>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b98:	6193      	str	r3, [r2, #24]
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	40021000 	.word	0x40021000

08001bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <HAL_UART_MspInit+0x7c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d128      	bne.n	8001c30 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_UART_MspInit+0x80>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4a16      	ldr	r2, [pc, #88]	; (8001c3c <HAL_UART_MspInit+0x80>)
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be8:	61d3      	str	r3, [r2, #28]
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <HAL_UART_MspInit+0x80>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_UART_MspInit+0x80>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	4a10      	ldr	r2, [pc, #64]	; (8001c3c <HAL_UART_MspInit+0x80>)
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	6153      	str	r3, [r2, #20]
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_UART_MspInit+0x80>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c0e:	230c      	movs	r3, #12
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c1e:	2307      	movs	r3, #7
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c2c:	f000 f9e4 	bl	8001ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c30:	bf00      	nop
 8001c32:	3728      	adds	r7, #40	; 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40004400 	.word	0x40004400
 8001c3c:	40021000 	.word	0x40021000

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c94:	f000 f888 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <SystemInit+0x28>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <SystemInit+0x28>)
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SystemInit+0x28>)
 8001cb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cb6:	609a      	str	r2, [r3, #8]
#endif
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ccc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cce:	e003      	b.n	8001cd8 <LoopCopyDataInit>

08001cd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cd6:	3104      	adds	r1, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cd8:	480b      	ldr	r0, [pc, #44]	; (8001d08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cdc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ce0:	d3f6      	bcc.n	8001cd0 <CopyDataInit>
	ldr	r2, =_sbss
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ce4:	e002      	b.n	8001cec <LoopFillZerobss>

08001ce6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ce6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ce8:	f842 3b04 	str.w	r3, [r2], #4

08001cec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <LoopForever+0x16>)
	cmp	r2, r3
 8001cee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cf0:	d3f9      	bcc.n	8001ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cf2:	f7ff ffd3 	bl	8001c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f003 fa6b 	bl	80051d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cfa:	f7ff fc7d 	bl	80015f8 <main>

08001cfe <LoopForever>:

LoopForever:
    b LoopForever
 8001cfe:	e7fe      	b.n	8001cfe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d00:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001d04:	08005298 	.word	0x08005298
	ldr	r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d0c:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8001d10:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001d14:	200001dc 	.word	0x200001dc

08001d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC1_2_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <HAL_Init+0x28>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <HAL_Init+0x28>)
 8001d26:	f043 0310 	orr.w	r3, r3, #16
 8001d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f000 f92f 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f000 f808 	bl	8001d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d38:	f7ff fe9a 	bl	8001a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000

08001d48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_InitTick+0x54>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_InitTick+0x58>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f939 	bl	8001fde <HAL_SYSTICK_Config>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00e      	b.n	8001d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d80a      	bhi.n	8001d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f000 f90f 	bl	8001fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d88:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <HAL_InitTick+0x5c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000008 	.word	0x20000008
 8001da0:	20000010 	.word	0x20000010
 8001da4:	2000000c 	.word	0x2000000c

08001da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_IncTick+0x20>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_IncTick+0x24>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <HAL_IncTick+0x24>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000010 	.word	0x20000010
 8001dcc:	200001d8 	.word	0x200001d8

08001dd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_GetTick+0x14>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	200001d8 	.word	0x200001d8

08001de8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff ffee 	bl	8001dd0 <HAL_GetTick>
 8001df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e00:	d005      	beq.n	8001e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_Delay+0x40>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e0e:	bf00      	nop
 8001e10:	f7ff ffde 	bl	8001dd0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d8f7      	bhi.n	8001e10 <HAL_Delay+0x28>
  {
  }
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000010 	.word	0x20000010

08001e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5e:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	60d3      	str	r3, [r2, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <__NVIC_GetPriorityGrouping+0x18>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	f003 0307 	and.w	r3, r3, #7
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db0a      	blt.n	8001eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	490c      	ldr	r1, [pc, #48]	; (8001edc <__NVIC_SetPriority+0x4c>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb8:	e00a      	b.n	8001ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4908      	ldr	r1, [pc, #32]	; (8001ee0 <__NVIC_SetPriority+0x50>)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3b04      	subs	r3, #4
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	440b      	add	r3, r1
 8001ece:	761a      	strb	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f1c3 0307 	rsb	r3, r3, #7
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	bf28      	it	cs
 8001f02:	2304      	movcs	r3, #4
 8001f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d902      	bls.n	8001f14 <NVIC_EncodePriority+0x30>
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3b03      	subs	r3, #3
 8001f12:	e000      	b.n	8001f16 <NVIC_EncodePriority+0x32>
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43d9      	mvns	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	4313      	orrs	r3, r2
         );
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	; 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f7ff ff8e 	bl	8001e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff47 	bl	8001e2c <__NVIC_SetPriorityGrouping>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff5c 	bl	8001e74 <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff8e 	bl	8001ee4 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5d 	bl	8001e90 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffb0 	bl	8001f4c <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002006:	e160      	b.n	80022ca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8152 	beq.w	80022c4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d00b      	beq.n	8002040 <HAL_GPIO_Init+0x48>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d007      	beq.n	8002040 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002034:	2b11      	cmp	r3, #17
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b12      	cmp	r3, #18
 800203e:	d130      	bne.n	80020a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002076:	2201      	movs	r2, #1
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	f003 0201 	and.w	r2, r3, #1
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0xea>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b12      	cmp	r3, #18
 80020e0:	d123      	bne.n	800212a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	6939      	ldr	r1, [r7, #16]
 8002126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0203 	and.w	r2, r3, #3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80ac 	beq.w	80022c4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216c:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <HAL_GPIO_Init+0x2f0>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	4a5d      	ldr	r2, [pc, #372]	; (80022e8 <HAL_GPIO_Init+0x2f0>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6193      	str	r3, [r2, #24]
 8002178:	4b5b      	ldr	r3, [pc, #364]	; (80022e8 <HAL_GPIO_Init+0x2f0>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002184:	4a59      	ldr	r2, [pc, #356]	; (80022ec <HAL_GPIO_Init+0x2f4>)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	3302      	adds	r3, #2
 800218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ae:	d025      	beq.n	80021fc <HAL_GPIO_Init+0x204>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a4f      	ldr	r2, [pc, #316]	; (80022f0 <HAL_GPIO_Init+0x2f8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d01f      	beq.n	80021f8 <HAL_GPIO_Init+0x200>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a4e      	ldr	r2, [pc, #312]	; (80022f4 <HAL_GPIO_Init+0x2fc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d019      	beq.n	80021f4 <HAL_GPIO_Init+0x1fc>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a4d      	ldr	r2, [pc, #308]	; (80022f8 <HAL_GPIO_Init+0x300>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d013      	beq.n	80021f0 <HAL_GPIO_Init+0x1f8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <HAL_GPIO_Init+0x304>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d00d      	beq.n	80021ec <HAL_GPIO_Init+0x1f4>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a4b      	ldr	r2, [pc, #300]	; (8002300 <HAL_GPIO_Init+0x308>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d007      	beq.n	80021e8 <HAL_GPIO_Init+0x1f0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a4a      	ldr	r2, [pc, #296]	; (8002304 <HAL_GPIO_Init+0x30c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d101      	bne.n	80021e4 <HAL_GPIO_Init+0x1ec>
 80021e0:	2306      	movs	r3, #6
 80021e2:	e00c      	b.n	80021fe <HAL_GPIO_Init+0x206>
 80021e4:	2307      	movs	r3, #7
 80021e6:	e00a      	b.n	80021fe <HAL_GPIO_Init+0x206>
 80021e8:	2305      	movs	r3, #5
 80021ea:	e008      	b.n	80021fe <HAL_GPIO_Init+0x206>
 80021ec:	2304      	movs	r3, #4
 80021ee:	e006      	b.n	80021fe <HAL_GPIO_Init+0x206>
 80021f0:	2303      	movs	r3, #3
 80021f2:	e004      	b.n	80021fe <HAL_GPIO_Init+0x206>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e002      	b.n	80021fe <HAL_GPIO_Init+0x206>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <HAL_GPIO_Init+0x206>
 80021fc:	2300      	movs	r3, #0
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	f002 0203 	and.w	r2, r2, #3
 8002204:	0092      	lsls	r2, r2, #2
 8002206:	4093      	lsls	r3, r2
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800220e:	4937      	ldr	r1, [pc, #220]	; (80022ec <HAL_GPIO_Init+0x2f4>)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800221c:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <HAL_GPIO_Init+0x310>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	43db      	mvns	r3, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002240:	4a31      	ldr	r2, [pc, #196]	; (8002308 <HAL_GPIO_Init+0x310>)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <HAL_GPIO_Init+0x310>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800226a:	4a27      	ldr	r2, [pc, #156]	; (8002308 <HAL_GPIO_Init+0x310>)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_GPIO_Init+0x310>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002294:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_GPIO_Init+0x310>)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800229a:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_GPIO_Init+0x310>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <HAL_GPIO_Init+0x310>)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3301      	adds	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f47f ae97 	bne.w	8002008 <HAL_GPIO_Init+0x10>
  }
}
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010000 	.word	0x40010000
 80022f0:	48000400 	.word	0x48000400
 80022f4:	48000800 	.word	0x48000800
 80022f8:	48000c00 	.word	0x48000c00
 80022fc:	48001000 	.word	0x48001000
 8002300:	48001400 	.word	0x48001400
 8002304:	48001800 	.word	0x48001800
 8002308:	40010400 	.word	0x40010400

0800230c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e081      	b.n	8002422 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff fbc0 	bl	8001ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2224      	movs	r2, #36	; 0x24
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800235c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800236c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	e006      	b.n	8002394 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002392:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d104      	bne.n	80023a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	ea42 0103 	orr.w	r1, r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	021a      	lsls	r2, r3, #8
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69d9      	ldr	r1, [r3, #28]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1a      	ldr	r2, [r3, #32]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	461a      	mov	r2, r3
 8002438:	460b      	mov	r3, r1
 800243a:	817b      	strh	r3, [r7, #10]
 800243c:	4613      	mov	r3, r2
 800243e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b20      	cmp	r3, #32
 800244a:	f040 80da 	bne.w	8002602 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_I2C_Master_Transmit+0x30>
 8002458:	2302      	movs	r3, #2
 800245a:	e0d3      	b.n	8002604 <HAL_I2C_Master_Transmit+0x1d8>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002464:	f7ff fcb4 	bl	8001dd0 <HAL_GetTick>
 8002468:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2319      	movs	r3, #25
 8002470:	2201      	movs	r2, #1
 8002472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f9e6 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0be      	b.n	8002604 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2221      	movs	r2, #33	; 0x21
 800248a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2210      	movs	r2, #16
 8002492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	893a      	ldrh	r2, [r7, #8]
 80024a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2bff      	cmp	r3, #255	; 0xff
 80024b6:	d90e      	bls.n	80024d6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	22ff      	movs	r2, #255	; 0xff
 80024bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	8979      	ldrh	r1, [r7, #10]
 80024c6:	4b51      	ldr	r3, [pc, #324]	; (800260c <HAL_I2C_Master_Transmit+0x1e0>)
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fb48 	bl	8002b64 <I2C_TransferConfig>
 80024d4:	e06c      	b.n	80025b0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	8979      	ldrh	r1, [r7, #10]
 80024e8:	4b48      	ldr	r3, [pc, #288]	; (800260c <HAL_I2C_Master_Transmit+0x1e0>)
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fb37 	bl	8002b64 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80024f6:	e05b      	b.n	80025b0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	6a39      	ldr	r1, [r7, #32]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f9e3 	bl	80028c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e07b      	b.n	8002604 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d034      	beq.n	80025b0 <HAL_I2C_Master_Transmit+0x184>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	d130      	bne.n	80025b0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	2200      	movs	r2, #0
 8002556:	2180      	movs	r1, #128	; 0x80
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f975 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e04d      	b.n	8002604 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	2bff      	cmp	r3, #255	; 0xff
 8002570:	d90e      	bls.n	8002590 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	22ff      	movs	r2, #255	; 0xff
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257c:	b2da      	uxtb	r2, r3
 800257e:	8979      	ldrh	r1, [r7, #10]
 8002580:	2300      	movs	r3, #0
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 faeb 	bl	8002b64 <I2C_TransferConfig>
 800258e:	e00f      	b.n	80025b0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	8979      	ldrh	r1, [r7, #10]
 80025a2:	2300      	movs	r3, #0
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fada 	bl	8002b64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d19e      	bne.n	80024f8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	6a39      	ldr	r1, [r7, #32]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f9c2 	bl	8002948 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e01a      	b.n	8002604 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2220      	movs	r2, #32
 80025d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_I2C_Master_Transmit+0x1e4>)
 80025e2:	400b      	ands	r3, r1
 80025e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	e000      	b.n	8002604 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002602:	2302      	movs	r3, #2
  }
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	80002000 	.word	0x80002000
 8002610:	fe00e800 	.word	0xfe00e800

08002614 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	461a      	mov	r2, r3
 8002620:	460b      	mov	r3, r1
 8002622:	817b      	strh	r3, [r7, #10]
 8002624:	4613      	mov	r3, r2
 8002626:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b20      	cmp	r3, #32
 8002632:	f040 80db 	bne.w	80027ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_I2C_Master_Receive+0x30>
 8002640:	2302      	movs	r3, #2
 8002642:	e0d4      	b.n	80027ee <HAL_I2C_Master_Receive+0x1da>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800264c:	f7ff fbc0 	bl	8001dd0 <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2319      	movs	r3, #25
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f8f2 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0bf      	b.n	80027ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2222      	movs	r2, #34	; 0x22
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2210      	movs	r2, #16
 800267a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	893a      	ldrh	r2, [r7, #8]
 800268e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	2bff      	cmp	r3, #255	; 0xff
 800269e:	d90e      	bls.n	80026be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	22ff      	movs	r2, #255	; 0xff
 80026a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	8979      	ldrh	r1, [r7, #10]
 80026ae:	4b52      	ldr	r3, [pc, #328]	; (80027f8 <HAL_I2C_Master_Receive+0x1e4>)
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fa54 	bl	8002b64 <I2C_TransferConfig>
 80026bc:	e06d      	b.n	800279a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	8979      	ldrh	r1, [r7, #10]
 80026d0:	4b49      	ldr	r3, [pc, #292]	; (80027f8 <HAL_I2C_Master_Receive+0x1e4>)
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 fa43 	bl	8002b64 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80026de:	e05c      	b.n	800279a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	6a39      	ldr	r1, [r7, #32]
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f96b 	bl	80029c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e07c      	b.n	80027ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d034      	beq.n	800279a <HAL_I2C_Master_Receive+0x186>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d130      	bne.n	800279a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	2200      	movs	r2, #0
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f880 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e04d      	b.n	80027ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	2bff      	cmp	r3, #255	; 0xff
 800275a:	d90e      	bls.n	800277a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	22ff      	movs	r2, #255	; 0xff
 8002760:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002766:	b2da      	uxtb	r2, r3
 8002768:	8979      	ldrh	r1, [r7, #10]
 800276a:	2300      	movs	r3, #0
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f9f6 	bl	8002b64 <I2C_TransferConfig>
 8002778:	e00f      	b.n	800279a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002788:	b2da      	uxtb	r2, r3
 800278a:	8979      	ldrh	r1, [r7, #10]
 800278c:	2300      	movs	r3, #0
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f9e5 	bl	8002b64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d19d      	bne.n	80026e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	6a39      	ldr	r1, [r7, #32]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f8cd 	bl	8002948 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e01a      	b.n	80027ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2220      	movs	r2, #32
 80027be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6859      	ldr	r1, [r3, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <HAL_I2C_Master_Receive+0x1e8>)
 80027cc:	400b      	ands	r3, r1
 80027ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	80002400 	.word	0x80002400
 80027fc:	fe00e800 	.word	0xfe00e800

08002800 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b02      	cmp	r3, #2
 8002814:	d103      	bne.n	800281e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b01      	cmp	r3, #1
 800282a:	d007      	beq.n	800283c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699a      	ldr	r2, [r3, #24]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	619a      	str	r2, [r3, #24]
  }
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002858:	e022      	b.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d01e      	beq.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002862:	f7ff fab5 	bl	8001dd0 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d113      	bne.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e00f      	b.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4013      	ands	r3, r2
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d0cd      	beq.n	800285a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028d4:	e02c      	b.n	8002930 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f8dc 	bl	8002a98 <I2C_IsAcknowledgeFailed>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e02a      	b.n	8002940 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d01e      	beq.n	8002930 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f2:	f7ff fa6d 	bl	8001dd0 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d113      	bne.n	8002930 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f043 0220 	orr.w	r2, r3, #32
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e007      	b.n	8002940 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d1cb      	bne.n	80028d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002954:	e028      	b.n	80029a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f89c 	bl	8002a98 <I2C_IsAcknowledgeFailed>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e026      	b.n	80029b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	f7ff fa31 	bl	8001dd0 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d113      	bne.n	80029a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	f043 0220 	orr.w	r2, r3, #32
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e007      	b.n	80029b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d1cf      	bne.n	8002956 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029cc:	e055      	b.n	8002a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f860 	bl	8002a98 <I2C_IsAcknowledgeFailed>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e053      	b.n	8002a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d129      	bne.n	8002a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d105      	bne.n	8002a0a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e03f      	b.n	8002a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002a1e:	400b      	ands	r3, r1
 8002a20:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e022      	b.n	8002a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a44:	f7ff f9c4 	bl	8001dd0 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d302      	bcc.n	8002a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10f      	bne.n	8002a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f043 0220 	orr.w	r2, r3, #32
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e007      	b.n	8002a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d1a2      	bne.n	80029ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	fe00e800 	.word	0xfe00e800

08002a98 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d151      	bne.n	8002b56 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab2:	e022      	b.n	8002afa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d01e      	beq.n	8002afa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abc:	f7ff f988 	bl	8001dd0 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d302      	bcc.n	8002ad2 <I2C_IsAcknowledgeFailed+0x3a>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d113      	bne.n	8002afa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e02e      	b.n	8002b58 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d1d5      	bne.n	8002ab4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2220      	movs	r2, #32
 8002b16:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f7ff fe71 	bl	8002800 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <I2C_IsAcknowledgeFailed+0xc8>)
 8002b2a:	400b      	ands	r3, r1
 8002b2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	f043 0204 	orr.w	r2, r3, #4
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	fe00e800 	.word	0xfe00e800

08002b64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	817b      	strh	r3, [r7, #10]
 8002b72:	4613      	mov	r3, r2
 8002b74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	0d5b      	lsrs	r3, r3, #21
 8002b80:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b84:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <I2C_TransferConfig+0x58>)
 8002b86:	430b      	orrs	r3, r1
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	ea02 0103 	and.w	r1, r2, r3
 8002b8e:	897b      	ldrh	r3, [r7, #10]
 8002b90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b94:	7a7b      	ldrb	r3, [r7, #9]
 8002b96:	041b      	lsls	r3, r3, #16
 8002b98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	03ff63ff 	.word	0x03ff63ff

08002bc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d138      	bne.n	8002c48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e032      	b.n	8002c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2224      	movs	r2, #36	; 0x24
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6819      	ldr	r1, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	e000      	b.n	8002c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c48:	2302      	movs	r3, #2
  }
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d139      	bne.n	8002ce0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e033      	b.n	8002ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2224      	movs	r2, #36	; 0x24
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0201 	bic.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ca8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e000      	b.n	8002ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
  }
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f000 bf01 	b.w	8003b0c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8160 	beq.w	8002fda <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d1a:	4bae      	ldr	r3, [pc, #696]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d00c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d26:	4bab      	ldr	r3, [pc, #684]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d159      	bne.n	8002de6 <HAL_RCC_OscConfig+0xf6>
 8002d32:	4ba8      	ldr	r3, [pc, #672]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3e:	d152      	bne.n	8002de6 <HAL_RCC_OscConfig+0xf6>
 8002d40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d44:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d54:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d58:	fab3 f383 	clz	r3, r3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <HAL_RCC_OscConfig+0x82>
 8002d6c:	4b99      	ldr	r3, [pc, #612]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	e015      	b.n	8002d9e <HAL_RCC_OscConfig+0xae>
 8002d72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d76:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002d86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d8a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d8e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d9a:	4b8e      	ldr	r3, [pc, #568]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002da2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002da6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002daa:	fa92 f2a2 	rbit	r2, r2
 8002dae:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002db2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002db6:	fab2 f282 	clz	r2, r2
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	f042 0220 	orr.w	r2, r2, #32
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	f002 021f 	and.w	r2, r2, #31
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8102 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x2e8>
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f040 80fc 	bne.w	8002fd8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f000 be93 	b.w	8003b0c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df0:	d106      	bne.n	8002e00 <HAL_RCC_OscConfig+0x110>
 8002df2:	4b78      	ldr	r3, [pc, #480]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a77      	ldr	r2, [pc, #476]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e030      	b.n	8002e62 <HAL_RCC_OscConfig+0x172>
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x134>
 8002e0a:	4b72      	ldr	r3, [pc, #456]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a71      	ldr	r2, [pc, #452]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	4b6f      	ldr	r3, [pc, #444]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a6e      	ldr	r2, [pc, #440]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e01e      	b.n	8002e62 <HAL_RCC_OscConfig+0x172>
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e2e:	d10c      	bne.n	8002e4a <HAL_RCC_OscConfig+0x15a>
 8002e30:	4b68      	ldr	r3, [pc, #416]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a67      	ldr	r2, [pc, #412]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b65      	ldr	r3, [pc, #404]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a64      	ldr	r2, [pc, #400]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e00b      	b.n	8002e62 <HAL_RCC_OscConfig+0x172>
 8002e4a:	4b62      	ldr	r3, [pc, #392]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a61      	ldr	r2, [pc, #388]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	4b5f      	ldr	r3, [pc, #380]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a5e      	ldr	r2, [pc, #376]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e60:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e62:	1d3b      	adds	r3, r7, #4
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d059      	beq.n	8002f20 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fe ffb0 	bl	8001dd0 <HAL_GetTick>
 8002e70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e76:	f7fe ffab 	bl	8001dd0 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d902      	bls.n	8002e8c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	f000 be40 	b.w	8003b0c <HAL_RCC_OscConfig+0xe1c>
 8002e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e90:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002ea0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d102      	bne.n	8002ebe <HAL_RCC_OscConfig+0x1ce>
 8002eb8:	4b46      	ldr	r3, [pc, #280]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	e015      	b.n	8002eea <HAL_RCC_OscConfig+0x1fa>
 8002ebe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ec2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ed6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002eda:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ee6:	4b3b      	ldr	r3, [pc, #236]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eee:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002ef2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002ef6:	fa92 f2a2 	rbit	r2, r2
 8002efa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002efe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f02:	fab2 f282 	clz	r2, r2
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	f042 0220 	orr.w	r2, r2, #32
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	f002 021f 	and.w	r2, r2, #31
 8002f12:	2101      	movs	r1, #1
 8002f14:	fa01 f202 	lsl.w	r2, r1, r2
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ab      	beq.n	8002e76 <HAL_RCC_OscConfig+0x186>
 8002f1e:	e05c      	b.n	8002fda <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fe ff56 	bl	8001dd0 <HAL_GetTick>
 8002f24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2a:	f7fe ff51 	bl	8001dd0 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d902      	bls.n	8002f40 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	f000 bde6 	b.w	8003b0c <HAL_RCC_OscConfig+0xe1c>
 8002f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f44:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002f54:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d102      	bne.n	8002f72 <HAL_RCC_OscConfig+0x282>
 8002f6c:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	e015      	b.n	8002f9e <HAL_RCC_OscConfig+0x2ae>
 8002f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f76:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f8a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_RCC_OscConfig+0x2e4>)
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fa2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002fa6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002faa:	fa92 f2a2 	rbit	r2, r2
 8002fae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002fb2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002fb6:	fab2 f282 	clz	r2, r2
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	f042 0220 	orr.w	r2, r2, #32
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	f002 021f 	and.w	r2, r2, #31
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1ab      	bne.n	8002f2a <HAL_RCC_OscConfig+0x23a>
 8002fd2:	e002      	b.n	8002fda <HAL_RCC_OscConfig+0x2ea>
 8002fd4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8170 	beq.w	80032ca <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fea:	4bd0      	ldr	r3, [pc, #832]	; (800332c <HAL_RCC_OscConfig+0x63c>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00c      	beq.n	8003010 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ff6:	4bcd      	ldr	r3, [pc, #820]	; (800332c <HAL_RCC_OscConfig+0x63c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d16d      	bne.n	80030de <HAL_RCC_OscConfig+0x3ee>
 8003002:	4bca      	ldr	r3, [pc, #808]	; (800332c <HAL_RCC_OscConfig+0x63c>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800300a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800300e:	d166      	bne.n	80030de <HAL_RCC_OscConfig+0x3ee>
 8003010:	2302      	movs	r3, #2
 8003012:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003022:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d102      	bne.n	8003040 <HAL_RCC_OscConfig+0x350>
 800303a:	4bbc      	ldr	r3, [pc, #752]	; (800332c <HAL_RCC_OscConfig+0x63c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	e013      	b.n	8003068 <HAL_RCC_OscConfig+0x378>
 8003040:	2302      	movs	r3, #2
 8003042:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003052:	2302      	movs	r3, #2
 8003054:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003058:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003064:	4bb1      	ldr	r3, [pc, #708]	; (800332c <HAL_RCC_OscConfig+0x63c>)
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2202      	movs	r2, #2
 800306a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800306e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003072:	fa92 f2a2 	rbit	r2, r2
 8003076:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800307a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800307e:	fab2 f282 	clz	r2, r2
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	f042 0220 	orr.w	r2, r2, #32
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	f002 021f 	and.w	r2, r2, #31
 800308e:	2101      	movs	r1, #1
 8003090:	fa01 f202 	lsl.w	r2, r1, r2
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <HAL_RCC_OscConfig+0x3ba>
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d002      	beq.n	80030aa <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f000 bd31 	b.w	8003b0c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030aa:	4ba0      	ldr	r3, [pc, #640]	; (800332c <HAL_RCC_OscConfig+0x63c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b2:	1d3b      	adds	r3, r7, #4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	21f8      	movs	r1, #248	; 0xf8
 80030ba:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80030c2:	fa91 f1a1 	rbit	r1, r1
 80030c6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80030ca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80030ce:	fab1 f181 	clz	r1, r1
 80030d2:	b2c9      	uxtb	r1, r1
 80030d4:	408b      	lsls	r3, r1
 80030d6:	4995      	ldr	r1, [pc, #596]	; (800332c <HAL_RCC_OscConfig+0x63c>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030dc:	e0f5      	b.n	80032ca <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8085 	beq.w	80031f4 <HAL_RCC_OscConfig+0x504>
 80030ea:	2301      	movs	r3, #1
 80030ec:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80030fc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800310a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	461a      	mov	r2, r3
 8003112:	2301      	movs	r3, #1
 8003114:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fe fe5b 	bl	8001dd0 <HAL_GetTick>
 800311a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311e:	e00a      	b.n	8003136 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003120:	f7fe fe56 	bl	8001dd0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d902      	bls.n	8003136 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	f000 bceb 	b.w	8003b0c <HAL_RCC_OscConfig+0xe1c>
 8003136:	2302      	movs	r3, #2
 8003138:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003148:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d102      	bne.n	8003166 <HAL_RCC_OscConfig+0x476>
 8003160:	4b72      	ldr	r3, [pc, #456]	; (800332c <HAL_RCC_OscConfig+0x63c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	e013      	b.n	800318e <HAL_RCC_OscConfig+0x49e>
 8003166:	2302      	movs	r3, #2
 8003168:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003178:	2302      	movs	r3, #2
 800317a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800317e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800318a:	4b68      	ldr	r3, [pc, #416]	; (800332c <HAL_RCC_OscConfig+0x63c>)
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	2202      	movs	r2, #2
 8003190:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003194:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003198:	fa92 f2a2 	rbit	r2, r2
 800319c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80031a0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80031a4:	fab2 f282 	clz	r2, r2
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	f042 0220 	orr.w	r2, r2, #32
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	f002 021f 	and.w	r2, r2, #31
 80031b4:	2101      	movs	r1, #1
 80031b6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0af      	beq.n	8003120 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c0:	4b5a      	ldr	r3, [pc, #360]	; (800332c <HAL_RCC_OscConfig+0x63c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c8:	1d3b      	adds	r3, r7, #4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	21f8      	movs	r1, #248	; 0xf8
 80031d0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80031d8:	fa91 f1a1 	rbit	r1, r1
 80031dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80031e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80031e4:	fab1 f181 	clz	r1, r1
 80031e8:	b2c9      	uxtb	r1, r1
 80031ea:	408b      	lsls	r3, r1
 80031ec:	494f      	ldr	r1, [pc, #316]	; (800332c <HAL_RCC_OscConfig+0x63c>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]
 80031f2:	e06a      	b.n	80032ca <HAL_RCC_OscConfig+0x5da>
 80031f4:	2301      	movs	r3, #1
 80031f6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003206:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003214:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	461a      	mov	r2, r3
 800321c:	2300      	movs	r3, #0
 800321e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fe fdd6 	bl	8001dd0 <HAL_GetTick>
 8003224:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322a:	f7fe fdd1 	bl	8001dd0 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d902      	bls.n	8003240 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	f000 bc66 	b.w	8003b0c <HAL_RCC_OscConfig+0xe1c>
 8003240:	2302      	movs	r3, #2
 8003242:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003252:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d102      	bne.n	8003270 <HAL_RCC_OscConfig+0x580>
 800326a:	4b30      	ldr	r3, [pc, #192]	; (800332c <HAL_RCC_OscConfig+0x63c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	e013      	b.n	8003298 <HAL_RCC_OscConfig+0x5a8>
 8003270:	2302      	movs	r3, #2
 8003272:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003282:	2302      	movs	r3, #2
 8003284:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003288:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003294:	4b25      	ldr	r3, [pc, #148]	; (800332c <HAL_RCC_OscConfig+0x63c>)
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2202      	movs	r2, #2
 800329a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800329e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80032a2:	fa92 f2a2 	rbit	r2, r2
 80032a6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80032aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80032ae:	fab2 f282 	clz	r2, r2
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	f042 0220 	orr.w	r2, r2, #32
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	f002 021f 	and.w	r2, r2, #31
 80032be:	2101      	movs	r1, #1
 80032c0:	fa01 f202 	lsl.w	r2, r1, r2
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1af      	bne.n	800322a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80da 	beq.w	800348e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d069      	beq.n	80033b8 <HAL_RCC_OscConfig+0x6c8>
 80032e4:	2301      	movs	r3, #1
 80032e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80032f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_RCC_OscConfig+0x640>)
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	461a      	mov	r2, r3
 800330a:	2301      	movs	r3, #1
 800330c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330e:	f7fe fd5f 	bl	8001dd0 <HAL_GetTick>
 8003312:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003316:	e00d      	b.n	8003334 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003318:	f7fe fd5a 	bl	8001dd0 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d905      	bls.n	8003334 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e3ef      	b.n	8003b0c <HAL_RCC_OscConfig+0xe1c>
 800332c:	40021000 	.word	0x40021000
 8003330:	10908120 	.word	0x10908120
 8003334:	2302      	movs	r3, #2
 8003336:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800333e:	fa93 f2a3 	rbit	r2, r3
 8003342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800334c:	2202      	movs	r2, #2
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	fa93 f2a3 	rbit	r2, r3
 800335a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003364:	2202      	movs	r2, #2
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	fa93 f2a3 	rbit	r2, r3
 8003372:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003376:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003378:	4ba4      	ldr	r3, [pc, #656]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 800337a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800337c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003380:	2102      	movs	r1, #2
 8003382:	6019      	str	r1, [r3, #0]
 8003384:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	fa93 f1a3 	rbit	r1, r3
 800338e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003392:	6019      	str	r1, [r3, #0]
  return result;
 8003394:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	2101      	movs	r1, #1
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0b0      	beq.n	8003318 <HAL_RCC_OscConfig+0x628>
 80033b6:	e06a      	b.n	800348e <HAL_RCC_OscConfig+0x79e>
 80033b8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	fa93 f2a3 	rbit	r2, r3
 80033ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033ce:	601a      	str	r2, [r3, #0]
  return result;
 80033d0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033d4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	4b8c      	ldr	r3, [pc, #560]	; (8003610 <HAL_RCC_OscConfig+0x920>)
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	461a      	mov	r2, r3
 80033e6:	2300      	movs	r3, #0
 80033e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ea:	f7fe fcf1 	bl	8001dd0 <HAL_GetTick>
 80033ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f2:	e009      	b.n	8003408 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033f4:	f7fe fcec 	bl	8001dd0 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e381      	b.n	8003b0c <HAL_RCC_OscConfig+0xe1c>
 8003408:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800340c:	2202      	movs	r2, #2
 800340e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	fa93 f2a3 	rbit	r2, r3
 800341a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003424:	2202      	movs	r2, #2
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	fa93 f2a3 	rbit	r2, r3
 8003432:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800343c:	2202      	movs	r2, #2
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	fa93 f2a3 	rbit	r2, r3
 800344a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800344e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	4b6e      	ldr	r3, [pc, #440]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 8003452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003454:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003458:	2102      	movs	r1, #2
 800345a:	6019      	str	r1, [r3, #0]
 800345c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	fa93 f1a3 	rbit	r1, r3
 8003466:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800346a:	6019      	str	r1, [r3, #0]
  return result;
 800346c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2101      	movs	r1, #1
 8003484:	fa01 f303 	lsl.w	r3, r1, r3
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1b2      	bne.n	80033f4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8157 	beq.w	800374c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349e:	2300      	movs	r3, #0
 80034a0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a4:	4b59      	ldr	r3, [pc, #356]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d112      	bne.n	80034d6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b0:	4b56      	ldr	r3, [pc, #344]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4a55      	ldr	r2, [pc, #340]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 80034b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ba:	61d3      	str	r3, [r2, #28]
 80034bc:	4b53      	ldr	r3, [pc, #332]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034c4:	f107 030c 	add.w	r3, r7, #12
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	f107 030c 	add.w	r3, r7, #12
 80034ce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d6:	4b4f      	ldr	r3, [pc, #316]	; (8003614 <HAL_RCC_OscConfig+0x924>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d11a      	bne.n	8003518 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e2:	4b4c      	ldr	r3, [pc, #304]	; (8003614 <HAL_RCC_OscConfig+0x924>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a4b      	ldr	r2, [pc, #300]	; (8003614 <HAL_RCC_OscConfig+0x924>)
 80034e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ee:	f7fe fc6f 	bl	8001dd0 <HAL_GetTick>
 80034f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f6:	e009      	b.n	800350c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f8:	f7fe fc6a 	bl	8001dd0 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b64      	cmp	r3, #100	; 0x64
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e2ff      	b.n	8003b0c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	4b41      	ldr	r3, [pc, #260]	; (8003614 <HAL_RCC_OscConfig+0x924>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ef      	beq.n	80034f8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003518:	1d3b      	adds	r3, r7, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d106      	bne.n	8003530 <HAL_RCC_OscConfig+0x840>
 8003522:	4b3a      	ldr	r3, [pc, #232]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4a39      	ldr	r2, [pc, #228]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	6213      	str	r3, [r2, #32]
 800352e:	e02f      	b.n	8003590 <HAL_RCC_OscConfig+0x8a0>
 8003530:	1d3b      	adds	r3, r7, #4
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0x864>
 800353a:	4b34      	ldr	r3, [pc, #208]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	4a33      	ldr	r2, [pc, #204]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	6213      	str	r3, [r2, #32]
 8003546:	4b31      	ldr	r3, [pc, #196]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4a30      	ldr	r2, [pc, #192]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 800354c:	f023 0304 	bic.w	r3, r3, #4
 8003550:	6213      	str	r3, [r2, #32]
 8003552:	e01d      	b.n	8003590 <HAL_RCC_OscConfig+0x8a0>
 8003554:	1d3b      	adds	r3, r7, #4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b05      	cmp	r3, #5
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x888>
 800355e:	4b2b      	ldr	r3, [pc, #172]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	4a2a      	ldr	r2, [pc, #168]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 8003564:	f043 0304 	orr.w	r3, r3, #4
 8003568:	6213      	str	r3, [r2, #32]
 800356a:	4b28      	ldr	r3, [pc, #160]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4a27      	ldr	r2, [pc, #156]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6213      	str	r3, [r2, #32]
 8003576:	e00b      	b.n	8003590 <HAL_RCC_OscConfig+0x8a0>
 8003578:	4b24      	ldr	r3, [pc, #144]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	4a23      	ldr	r2, [pc, #140]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	6213      	str	r3, [r2, #32]
 8003584:	4b21      	ldr	r3, [pc, #132]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	4a20      	ldr	r2, [pc, #128]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 800358a:	f023 0304 	bic.w	r3, r3, #4
 800358e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d06a      	beq.n	8003670 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359a:	f7fe fc19 	bl	8001dd0 <HAL_GetTick>
 800359e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7fe fc14 	bl	8001dd0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e2a7      	b.n	8003b0c <HAL_RCC_OscConfig+0xe1c>
 80035bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80035c0:	2202      	movs	r2, #2
 80035c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	fa93 f2a3 	rbit	r2, r3
 80035ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035d8:	2202      	movs	r2, #2
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	fa93 f2a3 	rbit	r2, r3
 80035e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035ea:	601a      	str	r2, [r3, #0]
  return result;
 80035ec:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	fab3 f383 	clz	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d108      	bne.n	8003618 <HAL_RCC_OscConfig+0x928>
 8003606:	4b01      	ldr	r3, [pc, #4]	; (800360c <HAL_RCC_OscConfig+0x91c>)
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	e013      	b.n	8003634 <HAL_RCC_OscConfig+0x944>
 800360c:	40021000 	.word	0x40021000
 8003610:	10908120 	.word	0x10908120
 8003614:	40007000 	.word	0x40007000
 8003618:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800361c:	2202      	movs	r2, #2
 800361e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	fa93 f2a3 	rbit	r2, r3
 800362a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	4bc0      	ldr	r3, [pc, #768]	; (8003934 <HAL_RCC_OscConfig+0xc44>)
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003638:	2102      	movs	r1, #2
 800363a:	6011      	str	r1, [r2, #0]
 800363c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	fa92 f1a2 	rbit	r1, r2
 8003646:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800364a:	6011      	str	r1, [r2, #0]
  return result;
 800364c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	fab2 f282 	clz	r2, r2
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	f002 021f 	and.w	r2, r2, #31
 8003662:	2101      	movs	r1, #1
 8003664:	fa01 f202 	lsl.w	r2, r1, r2
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d09a      	beq.n	80035a4 <HAL_RCC_OscConfig+0x8b4>
 800366e:	e063      	b.n	8003738 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003670:	f7fe fbae 	bl	8001dd0 <HAL_GetTick>
 8003674:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003678:	e00b      	b.n	8003692 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fe fba9 	bl	8001dd0 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	; 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e23c      	b.n	8003b0c <HAL_RCC_OscConfig+0xe1c>
 8003692:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003696:	2202      	movs	r2, #2
 8003698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	fa93 f2a3 	rbit	r2, r3
 80036a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036ae:	2202      	movs	r2, #2
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	fa93 f2a3 	rbit	r2, r3
 80036bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036c0:	601a      	str	r2, [r3, #0]
  return result;
 80036c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c8:	fab3 f383 	clz	r3, r3
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d102      	bne.n	80036e2 <HAL_RCC_OscConfig+0x9f2>
 80036dc:	4b95      	ldr	r3, [pc, #596]	; (8003934 <HAL_RCC_OscConfig+0xc44>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	e00d      	b.n	80036fe <HAL_RCC_OscConfig+0xa0e>
 80036e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036e6:	2202      	movs	r2, #2
 80036e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	fa93 f2a3 	rbit	r2, r3
 80036f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	4b8e      	ldr	r3, [pc, #568]	; (8003934 <HAL_RCC_OscConfig+0xc44>)
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003702:	2102      	movs	r1, #2
 8003704:	6011      	str	r1, [r2, #0]
 8003706:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	fa92 f1a2 	rbit	r1, r2
 8003710:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003714:	6011      	str	r1, [r2, #0]
  return result;
 8003716:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	fab2 f282 	clz	r2, r2
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	f002 021f 	and.w	r2, r2, #31
 800372c:	2101      	movs	r1, #1
 800372e:	fa01 f202 	lsl.w	r2, r1, r2
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1a0      	bne.n	800367a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003738:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800373c:	2b01      	cmp	r3, #1
 800373e:	d105      	bne.n	800374c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003740:	4b7c      	ldr	r3, [pc, #496]	; (8003934 <HAL_RCC_OscConfig+0xc44>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	4a7b      	ldr	r2, [pc, #492]	; (8003934 <HAL_RCC_OscConfig+0xc44>)
 8003746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374c:	1d3b      	adds	r3, r7, #4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 81d9 	beq.w	8003b0a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003758:	4b76      	ldr	r3, [pc, #472]	; (8003934 <HAL_RCC_OscConfig+0xc44>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b08      	cmp	r3, #8
 8003762:	f000 81a6 	beq.w	8003ab2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b02      	cmp	r3, #2
 800376e:	f040 811e 	bne.w	80039ae <HAL_RCC_OscConfig+0xcbe>
 8003772:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003776:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800377a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	fa93 f2a3 	rbit	r2, r3
 8003786:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800378a:	601a      	str	r2, [r3, #0]
  return result;
 800378c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003790:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800379c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	461a      	mov	r2, r3
 80037a4:	2300      	movs	r3, #0
 80037a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fe fb12 	bl	8001dd0 <HAL_GetTick>
 80037ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b0:	e009      	b.n	80037c6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b2:	f7fe fb0d 	bl	8001dd0 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e1a2      	b.n	8003b0c <HAL_RCC_OscConfig+0xe1c>
 80037c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	fa93 f2a3 	rbit	r2, r3
 80037da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037de:	601a      	str	r2, [r3, #0]
  return result;
 80037e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d102      	bne.n	8003800 <HAL_RCC_OscConfig+0xb10>
 80037fa:	4b4e      	ldr	r3, [pc, #312]	; (8003934 <HAL_RCC_OscConfig+0xc44>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	e01b      	b.n	8003838 <HAL_RCC_OscConfig+0xb48>
 8003800:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	fa93 f2a3 	rbit	r2, r3
 8003814:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800381e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	fa93 f2a3 	rbit	r2, r3
 800382e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	4b3f      	ldr	r3, [pc, #252]	; (8003934 <HAL_RCC_OscConfig+0xc44>)
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800383c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003840:	6011      	str	r1, [r2, #0]
 8003842:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	fa92 f1a2 	rbit	r1, r2
 800384c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003850:	6011      	str	r1, [r2, #0]
  return result;
 8003852:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	fab2 f282 	clz	r2, r2
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	f042 0220 	orr.w	r2, r2, #32
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	f002 021f 	and.w	r2, r2, #31
 8003868:	2101      	movs	r1, #1
 800386a:	fa01 f202 	lsl.w	r2, r1, r2
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d19e      	bne.n	80037b2 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003874:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <HAL_RCC_OscConfig+0xc44>)
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	f023 020f 	bic.w	r2, r3, #15
 800387c:	1d3b      	adds	r3, r7, #4
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	492c      	ldr	r1, [pc, #176]	; (8003934 <HAL_RCC_OscConfig+0xc44>)
 8003884:	4313      	orrs	r3, r2
 8003886:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003888:	4b2a      	ldr	r3, [pc, #168]	; (8003934 <HAL_RCC_OscConfig+0xc44>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003890:	1d3b      	adds	r3, r7, #4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6a19      	ldr	r1, [r3, #32]
 8003896:	1d3b      	adds	r3, r7, #4
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	430b      	orrs	r3, r1
 800389e:	4925      	ldr	r1, [pc, #148]	; (8003934 <HAL_RCC_OscConfig+0xc44>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]
 80038a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	fa93 f2a3 	rbit	r2, r3
 80038b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038bc:	601a      	str	r2, [r3, #0]
  return result;
 80038be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038c2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c4:	fab3 f383 	clz	r3, r3
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	461a      	mov	r2, r3
 80038d6:	2301      	movs	r3, #1
 80038d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038da:	f7fe fa79 	bl	8001dd0 <HAL_GetTick>
 80038de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038e2:	e009      	b.n	80038f8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fe fa74 	bl	8001dd0 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e109      	b.n	8003b0c <HAL_RCC_OscConfig+0xe1c>
 80038f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	fa93 f2a3 	rbit	r2, r3
 800390c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003910:	601a      	str	r2, [r3, #0]
  return result;
 8003912:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003916:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003918:	fab3 f383 	clz	r3, r3
 800391c:	b2db      	uxtb	r3, r3
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d105      	bne.n	8003938 <HAL_RCC_OscConfig+0xc48>
 800392c:	4b01      	ldr	r3, [pc, #4]	; (8003934 <HAL_RCC_OscConfig+0xc44>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	e01e      	b.n	8003970 <HAL_RCC_OscConfig+0xc80>
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800393c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	fa93 f2a3 	rbit	r2, r3
 800394c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003956:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	fa93 f2a3 	rbit	r2, r3
 8003966:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	4b6a      	ldr	r3, [pc, #424]	; (8003b18 <HAL_RCC_OscConfig+0xe28>)
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003974:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003978:	6011      	str	r1, [r2, #0]
 800397a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	fa92 f1a2 	rbit	r1, r2
 8003984:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003988:	6011      	str	r1, [r2, #0]
  return result;
 800398a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	fab2 f282 	clz	r2, r2
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	f042 0220 	orr.w	r2, r2, #32
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	f002 021f 	and.w	r2, r2, #31
 80039a0:	2101      	movs	r1, #1
 80039a2:	fa01 f202 	lsl.w	r2, r1, r2
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d09b      	beq.n	80038e4 <HAL_RCC_OscConfig+0xbf4>
 80039ac:	e0ad      	b.n	8003b0a <HAL_RCC_OscConfig+0xe1a>
 80039ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	fa93 f2a3 	rbit	r2, r3
 80039c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039c6:	601a      	str	r2, [r3, #0]
  return result;
 80039c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	fab3 f383 	clz	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	461a      	mov	r2, r3
 80039e0:	2300      	movs	r3, #0
 80039e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fe f9f4 	bl	8001dd0 <HAL_GetTick>
 80039e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ec:	e009      	b.n	8003a02 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ee:	f7fe f9ef 	bl	8001dd0 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e084      	b.n	8003b0c <HAL_RCC_OscConfig+0xe1c>
 8003a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	fa93 f2a3 	rbit	r2, r3
 8003a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a1a:	601a      	str	r2, [r3, #0]
  return result;
 8003a1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d102      	bne.n	8003a3c <HAL_RCC_OscConfig+0xd4c>
 8003a36:	4b38      	ldr	r3, [pc, #224]	; (8003b18 <HAL_RCC_OscConfig+0xe28>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	e01b      	b.n	8003a74 <HAL_RCC_OscConfig+0xd84>
 8003a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	fa93 f2a3 	rbit	r2, r3
 8003a50:	f107 0320 	add.w	r3, r7, #32
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	f107 031c 	add.w	r3, r7, #28
 8003a5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	f107 031c 	add.w	r3, r7, #28
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	fa93 f2a3 	rbit	r2, r3
 8003a6a:	f107 0318 	add.w	r3, r7, #24
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	4b29      	ldr	r3, [pc, #164]	; (8003b18 <HAL_RCC_OscConfig+0xe28>)
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	f107 0214 	add.w	r2, r7, #20
 8003a78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a7c:	6011      	str	r1, [r2, #0]
 8003a7e:	f107 0214 	add.w	r2, r7, #20
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	fa92 f1a2 	rbit	r1, r2
 8003a88:	f107 0210 	add.w	r2, r7, #16
 8003a8c:	6011      	str	r1, [r2, #0]
  return result;
 8003a8e:	f107 0210 	add.w	r2, r7, #16
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	fab2 f282 	clz	r2, r2
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	f042 0220 	orr.w	r2, r2, #32
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	f002 021f 	and.w	r2, r2, #31
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d19e      	bne.n	80039ee <HAL_RCC_OscConfig+0xcfe>
 8003ab0:	e02b      	b.n	8003b0a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab2:	1d3b      	adds	r3, r7, #4
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e025      	b.n	8003b0c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ac0:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <HAL_RCC_OscConfig+0xe28>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003ac8:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <HAL_RCC_OscConfig+0xe28>)
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ad0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ad4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d111      	bne.n	8003b06 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003ae2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ae6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003aea:	1d3b      	adds	r3, r7, #4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d108      	bne.n	8003b06 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003af8:	f003 020f 	and.w	r2, r3, #15
 8003afc:	1d3b      	adds	r3, r7, #4
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000

08003b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b09e      	sub	sp, #120	; 0x78
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e162      	b.n	8003dfa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b34:	4b90      	ldr	r3, [pc, #576]	; (8003d78 <HAL_RCC_ClockConfig+0x25c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d910      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b8d      	ldr	r3, [pc, #564]	; (8003d78 <HAL_RCC_ClockConfig+0x25c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 0207 	bic.w	r2, r3, #7
 8003b4a:	498b      	ldr	r1, [pc, #556]	; (8003d78 <HAL_RCC_ClockConfig+0x25c>)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b89      	ldr	r3, [pc, #548]	; (8003d78 <HAL_RCC_ClockConfig+0x25c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e14a      	b.n	8003dfa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b70:	4b82      	ldr	r3, [pc, #520]	; (8003d7c <HAL_RCC_ClockConfig+0x260>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	497f      	ldr	r1, [pc, #508]	; (8003d7c <HAL_RCC_ClockConfig+0x260>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80dc 	beq.w	8003d48 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d13c      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xf6>
 8003b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b9c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba8:	fab3 f383 	clz	r3, r3
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d102      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xa6>
 8003bbc:	4b6f      	ldr	r3, [pc, #444]	; (8003d7c <HAL_RCC_ClockConfig+0x260>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	e00f      	b.n	8003be2 <HAL_RCC_ClockConfig+0xc6>
 8003bc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bca:	fa93 f3a3 	rbit	r3, r3
 8003bce:	667b      	str	r3, [r7, #100]	; 0x64
 8003bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bd4:	663b      	str	r3, [r7, #96]	; 0x60
 8003bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd8:	fa93 f3a3 	rbit	r3, r3
 8003bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bde:	4b67      	ldr	r3, [pc, #412]	; (8003d7c <HAL_RCC_ClockConfig+0x260>)
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003be6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003be8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bea:	fa92 f2a2 	rbit	r2, r2
 8003bee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003bf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bf2:	fab2 f282 	clz	r2, r2
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	f042 0220 	orr.w	r2, r2, #32
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	f002 021f 	and.w	r2, r2, #31
 8003c02:	2101      	movs	r1, #1
 8003c04:	fa01 f202 	lsl.w	r2, r1, r2
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d17b      	bne.n	8003d06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0f3      	b.n	8003dfa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d13c      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x178>
 8003c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	fab3 f383 	clz	r3, r3
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d102      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x128>
 8003c3e:	4b4f      	ldr	r3, [pc, #316]	; (8003d7c <HAL_RCC_ClockConfig+0x260>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	e00f      	b.n	8003c64 <HAL_RCC_ClockConfig+0x148>
 8003c44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	647b      	str	r3, [r7, #68]	; 0x44
 8003c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c56:	643b      	str	r3, [r7, #64]	; 0x40
 8003c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c60:	4b46      	ldr	r3, [pc, #280]	; (8003d7c <HAL_RCC_ClockConfig+0x260>)
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c68:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c6c:	fa92 f2a2 	rbit	r2, r2
 8003c70:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c74:	fab2 f282 	clz	r2, r2
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	f042 0220 	orr.w	r2, r2, #32
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	f002 021f 	and.w	r2, r2, #31
 8003c84:	2101      	movs	r1, #1
 8003c86:	fa01 f202 	lsl.w	r2, r1, r2
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d13a      	bne.n	8003d06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0b2      	b.n	8003dfa <HAL_RCC_ClockConfig+0x2de>
 8003c94:	2302      	movs	r3, #2
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca2:	fab3 f383 	clz	r3, r3
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d102      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x1a0>
 8003cb6:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <HAL_RCC_ClockConfig+0x260>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	e00d      	b.n	8003cd8 <HAL_RCC_ClockConfig+0x1bc>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	fa93 f3a3 	rbit	r3, r3
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc8:	2302      	movs	r3, #2
 8003cca:	623b      	str	r3, [r7, #32]
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	fa93 f3a3 	rbit	r3, r3
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	4b29      	ldr	r3, [pc, #164]	; (8003d7c <HAL_RCC_ClockConfig+0x260>)
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	2202      	movs	r2, #2
 8003cda:	61ba      	str	r2, [r7, #24]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	fa92 f2a2 	rbit	r2, r2
 8003ce2:	617a      	str	r2, [r7, #20]
  return result;
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	fab2 f282 	clz	r2, r2
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	f042 0220 	orr.w	r2, r2, #32
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	f002 021f 	and.w	r2, r2, #31
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e079      	b.n	8003dfa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d06:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <HAL_RCC_ClockConfig+0x260>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f023 0203 	bic.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	491a      	ldr	r1, [pc, #104]	; (8003d7c <HAL_RCC_ClockConfig+0x260>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d18:	f7fe f85a 	bl	8001dd0 <HAL_GetTick>
 8003d1c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d20:	f7fe f856 	bl	8001dd0 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e061      	b.n	8003dfa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <HAL_RCC_ClockConfig+0x260>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 020c 	and.w	r2, r3, #12
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d1eb      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCC_ClockConfig+0x25c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d214      	bcs.n	8003d80 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_RCC_ClockConfig+0x25c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 0207 	bic.w	r2, r3, #7
 8003d5e:	4906      	ldr	r1, [pc, #24]	; (8003d78 <HAL_RCC_ClockConfig+0x25c>)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d66:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <HAL_RCC_ClockConfig+0x25c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e040      	b.n	8003dfa <HAL_RCC_ClockConfig+0x2de>
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d8c:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <HAL_RCC_ClockConfig+0x2e8>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	491a      	ldr	r1, [pc, #104]	; (8003e04 <HAL_RCC_ClockConfig+0x2e8>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <HAL_RCC_ClockConfig+0x2e8>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4912      	ldr	r1, [pc, #72]	; (8003e04 <HAL_RCC_ClockConfig+0x2e8>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003dbe:	f000 f829 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003dc2:	4601      	mov	r1, r0
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <HAL_RCC_ClockConfig+0x2e8>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dcc:	22f0      	movs	r2, #240	; 0xf0
 8003dce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	fa92 f2a2 	rbit	r2, r2
 8003dd6:	60fa      	str	r2, [r7, #12]
  return result;
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	fab2 f282 	clz	r2, r2
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	40d3      	lsrs	r3, r2
 8003de2:	4a09      	ldr	r2, [pc, #36]	; (8003e08 <HAL_RCC_ClockConfig+0x2ec>)
 8003de4:	5cd3      	ldrb	r3, [r2, r3]
 8003de6:	fa21 f303 	lsr.w	r3, r1, r3
 8003dea:	4a08      	ldr	r2, [pc, #32]	; (8003e0c <HAL_RCC_ClockConfig+0x2f0>)
 8003dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <HAL_RCC_ClockConfig+0x2f4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fd ffa8 	bl	8001d48 <HAL_InitTick>
  
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3778      	adds	r7, #120	; 0x78
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	08005258 	.word	0x08005258
 8003e0c:	20000008 	.word	0x20000008
 8003e10:	2000000c 	.word	0x2000000c

08003e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b08b      	sub	sp, #44	; 0x2c
 8003e18:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	2300      	movs	r3, #0
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e2e:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d002      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0x30>
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d003      	beq.n	8003e4a <HAL_RCC_GetSysClockFreq+0x36>
 8003e42:	e03f      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e44:	4b25      	ldr	r3, [pc, #148]	; (8003edc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e46:	623b      	str	r3, [r7, #32]
      break;
 8003e48:	e03f      	b.n	8003eca <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e50:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e54:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	fa92 f2a2 	rbit	r2, r2
 8003e5c:	607a      	str	r2, [r7, #4]
  return result;
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	fab2 f282 	clz	r2, r2
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	40d3      	lsrs	r3, r2
 8003e68:	4a1d      	ldr	r2, [pc, #116]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e6a:	5cd3      	ldrb	r3, [r2, r3]
 8003e6c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	220f      	movs	r2, #15
 8003e78:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	fa92 f2a2 	rbit	r2, r2
 8003e80:	60fa      	str	r2, [r7, #12]
  return result;
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	fab2 f282 	clz	r2, r2
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	40d3      	lsrs	r3, r2
 8003e8c:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e8e:	5cd3      	ldrb	r3, [r2, r3]
 8003e90:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e9c:	4a0f      	ldr	r2, [pc, #60]	; (8003edc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003eac:	e007      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003eae:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	fb02 f303 	mul.w	r3, r2, r3
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	623b      	str	r3, [r7, #32]
      break;
 8003ec2:	e002      	b.n	8003eca <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ec6:	623b      	str	r3, [r7, #32]
      break;
 8003ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eca:	6a3b      	ldr	r3, [r7, #32]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	372c      	adds	r7, #44	; 0x2c
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	007a1200 	.word	0x007a1200
 8003ee0:	08005270 	.word	0x08005270
 8003ee4:	08005280 	.word	0x08005280

08003ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eec:	4b03      	ldr	r3, [pc, #12]	; (8003efc <HAL_RCC_GetHCLKFreq+0x14>)
 8003eee:	681b      	ldr	r3, [r3, #0]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	20000008 	.word	0x20000008

08003f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f06:	f7ff ffef 	bl	8003ee8 <HAL_RCC_GetHCLKFreq>
 8003f0a:	4601      	mov	r1, r0
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f14:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	fa92 f2a2 	rbit	r2, r2
 8003f20:	603a      	str	r2, [r7, #0]
  return result;
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	fab2 f282 	clz	r2, r2
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	40d3      	lsrs	r3, r2
 8003f2c:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	08005268 	.word	0x08005268

08003f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f4a:	f7ff ffcd 	bl	8003ee8 <HAL_RCC_GetHCLKFreq>
 8003f4e:	4601      	mov	r1, r0
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f58:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	fa92 f2a2 	rbit	r2, r2
 8003f64:	603a      	str	r2, [r7, #0]
  return result;
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	fab2 f282 	clz	r2, r2
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	40d3      	lsrs	r3, r2
 8003f70:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f72:	5cd3      	ldrb	r3, [r2, r3]
 8003f74:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021000 	.word	0x40021000
 8003f84:	08005268 	.word	0x08005268

08003f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b092      	sub	sp, #72	; 0x48
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 80d7 	beq.w	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fac:	4b4e      	ldr	r3, [pc, #312]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10e      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb8:	4b4b      	ldr	r3, [pc, #300]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	4a4a      	ldr	r2, [pc, #296]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	61d3      	str	r3, [r2, #28]
 8003fc4:	4b48      	ldr	r3, [pc, #288]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd6:	4b45      	ldr	r3, [pc, #276]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d118      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fe2:	4b42      	ldr	r3, [pc, #264]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a41      	ldr	r2, [pc, #260]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fee:	f7fd feef 	bl	8001dd0 <HAL_GetTick>
 8003ff2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff4:	e008      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff6:	f7fd feeb 	bl	8001dd0 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b64      	cmp	r3, #100	; 0x64
 8004002:	d901      	bls.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e1d6      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004008:	4b38      	ldr	r3, [pc, #224]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004014:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800401e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8084 	beq.w	800412e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004030:	429a      	cmp	r2, r3
 8004032:	d07c      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004034:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800403e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004042:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004046:	fa93 f3a3 	rbit	r3, r3
 800404a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800404c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800404e:	fab3 f383 	clz	r3, r3
 8004052:	b2db      	uxtb	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	461a      	mov	r2, r3
 800405e:	2301      	movs	r3, #1
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004066:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	fa93 f3a3 	rbit	r3, r3
 800406e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	461a      	mov	r2, r3
 8004082:	2300      	movs	r3, #0
 8004084:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800408c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d04b      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004096:	f7fd fe9b 	bl	8001dd0 <HAL_GetTick>
 800409a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409c:	e00a      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fd fe97 	bl	8001dd0 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e180      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80040b4:	2302      	movs	r3, #2
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	fa93 f3a3 	rbit	r3, r3
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
 80040c0:	2302      	movs	r3, #2
 80040c2:	623b      	str	r3, [r7, #32]
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	61fb      	str	r3, [r7, #28]
  return result;
 80040cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ce:	fab3 f383 	clz	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f043 0302 	orr.w	r3, r3, #2
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d108      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80040e2:	4b01      	ldr	r3, [pc, #4]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	e00d      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40007000 	.word	0x40007000
 80040f0:	10908100 	.word	0x10908100
 80040f4:	2302      	movs	r3, #2
 80040f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	fa93 f3a3 	rbit	r3, r3
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	4ba0      	ldr	r3, [pc, #640]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	2202      	movs	r2, #2
 8004106:	613a      	str	r2, [r7, #16]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	fa92 f2a2 	rbit	r2, r2
 800410e:	60fa      	str	r2, [r7, #12]
  return result;
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	fab2 f282 	clz	r2, r2
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	f002 021f 	and.w	r2, r2, #31
 8004122:	2101      	movs	r1, #1
 8004124:	fa01 f202 	lsl.w	r2, r1, r2
 8004128:	4013      	ands	r3, r2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0b7      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800412e:	4b95      	ldr	r3, [pc, #596]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	4992      	ldr	r1, [pc, #584]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800413c:	4313      	orrs	r3, r2
 800413e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004140:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004144:	2b01      	cmp	r3, #1
 8004146:	d105      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004148:	4b8e      	ldr	r3, [pc, #568]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	4a8d      	ldr	r2, [pc, #564]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800414e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004152:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004160:	4b88      	ldr	r3, [pc, #544]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	f023 0203 	bic.w	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4985      	ldr	r1, [pc, #532]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800417e:	4b81      	ldr	r3, [pc, #516]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	497e      	ldr	r1, [pc, #504]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800418c:	4313      	orrs	r3, r2
 800418e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800419c:	4b79      	ldr	r3, [pc, #484]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	4976      	ldr	r1, [pc, #472]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041ba:	4b72      	ldr	r3, [pc, #456]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	f023 0210 	bic.w	r2, r3, #16
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	496f      	ldr	r1, [pc, #444]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80041d8:	4b6a      	ldr	r3, [pc, #424]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e4:	4967      	ldr	r1, [pc, #412]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041f6:	4b63      	ldr	r3, [pc, #396]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	f023 0220 	bic.w	r2, r3, #32
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4960      	ldr	r1, [pc, #384]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004214:	4b5b      	ldr	r3, [pc, #364]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	4958      	ldr	r1, [pc, #352]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004232:	4b54      	ldr	r3, [pc, #336]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	4951      	ldr	r1, [pc, #324]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004240:	4313      	orrs	r3, r2
 8004242:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004250:	4b4c      	ldr	r3, [pc, #304]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	4949      	ldr	r1, [pc, #292]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800426e:	4b45      	ldr	r3, [pc, #276]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	4942      	ldr	r1, [pc, #264]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800428c:	4b3d      	ldr	r3, [pc, #244]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	493a      	ldr	r1, [pc, #232]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80042aa:	4b36      	ldr	r3, [pc, #216]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	4933      	ldr	r1, [pc, #204]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042c8:	4b2e      	ldr	r3, [pc, #184]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d4:	492b      	ldr	r1, [pc, #172]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80042e6:	4b27      	ldr	r3, [pc, #156]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	4924      	ldr	r1, [pc, #144]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004304:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	491c      	ldr	r1, [pc, #112]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004312:	4313      	orrs	r3, r2
 8004314:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004322:	4b18      	ldr	r3, [pc, #96]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	4915      	ldr	r1, [pc, #84]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004330:	4313      	orrs	r3, r2
 8004332:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004340:	4b10      	ldr	r3, [pc, #64]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	490d      	ldr	r1, [pc, #52]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d008      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800435e:	4b09      	ldr	r3, [pc, #36]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436a:	4906      	ldr	r1, [pc, #24]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800436c:	4313      	orrs	r3, r2
 800436e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00c      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800437c:	4b01      	ldr	r3, [pc, #4]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	e002      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004390:	490b      	ldr	r1, [pc, #44]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004392:	4313      	orrs	r3, r2
 8004394:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ae:	4904      	ldr	r1, [pc, #16]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3748      	adds	r7, #72	; 0x48
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000

080043c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e01d      	b.n	8004412 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fd fbc6 	bl	8001b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3304      	adds	r3, #4
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f000 f8c2 	bl	800458c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_TIM_ConfigClockSource+0x18>
 800442e:	2302      	movs	r3, #2
 8004430:	e0a8      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x16a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004450:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004454:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800445c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b40      	cmp	r3, #64	; 0x40
 800446c:	d067      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x124>
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d80b      	bhi.n	800448a <HAL_TIM_ConfigClockSource+0x70>
 8004472:	2b10      	cmp	r3, #16
 8004474:	d073      	beq.n	800455e <HAL_TIM_ConfigClockSource+0x144>
 8004476:	2b10      	cmp	r3, #16
 8004478:	d802      	bhi.n	8004480 <HAL_TIM_ConfigClockSource+0x66>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d06f      	beq.n	800455e <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800447e:	e078      	b.n	8004572 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004480:	2b20      	cmp	r3, #32
 8004482:	d06c      	beq.n	800455e <HAL_TIM_ConfigClockSource+0x144>
 8004484:	2b30      	cmp	r3, #48	; 0x30
 8004486:	d06a      	beq.n	800455e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004488:	e073      	b.n	8004572 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800448a:	2b70      	cmp	r3, #112	; 0x70
 800448c:	d00d      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x90>
 800448e:	2b70      	cmp	r3, #112	; 0x70
 8004490:	d804      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x82>
 8004492:	2b50      	cmp	r3, #80	; 0x50
 8004494:	d033      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0xe4>
 8004496:	2b60      	cmp	r3, #96	; 0x60
 8004498:	d041      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x104>
      break;
 800449a:	e06a      	b.n	8004572 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800449c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a0:	d066      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x156>
 80044a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a6:	d017      	beq.n	80044d8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80044a8:	e063      	b.n	8004572 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6899      	ldr	r1, [r3, #8]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f000 f97f 	bl	80047bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	609a      	str	r2, [r3, #8]
      break;
 80044d6:	e04c      	b.n	8004572 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	6899      	ldr	r1, [r3, #8]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f000 f968 	bl	80047bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044fa:	609a      	str	r2, [r3, #8]
      break;
 80044fc:	e039      	b.n	8004572 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6859      	ldr	r1, [r3, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	461a      	mov	r2, r3
 800450c:	f000 f8dc 	bl	80046c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2150      	movs	r1, #80	; 0x50
 8004516:	4618      	mov	r0, r3
 8004518:	f000 f935 	bl	8004786 <TIM_ITRx_SetConfig>
      break;
 800451c:	e029      	b.n	8004572 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6859      	ldr	r1, [r3, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	461a      	mov	r2, r3
 800452c:	f000 f8fb 	bl	8004726 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2160      	movs	r1, #96	; 0x60
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f925 	bl	8004786 <TIM_ITRx_SetConfig>
      break;
 800453c:	e019      	b.n	8004572 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6859      	ldr	r1, [r3, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	461a      	mov	r2, r3
 800454c:	f000 f8bc 	bl	80046c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2140      	movs	r1, #64	; 0x40
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f915 	bl	8004786 <TIM_ITRx_SetConfig>
      break;
 800455c:	e009      	b.n	8004572 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f000 f90c 	bl	8004786 <TIM_ITRx_SetConfig>
      break;
 800456e:	e000      	b.n	8004572 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004570:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a42      	ldr	r2, [pc, #264]	; (80046a8 <TIM_Base_SetConfig+0x11c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d013      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045aa:	d00f      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a3f      	ldr	r2, [pc, #252]	; (80046ac <TIM_Base_SetConfig+0x120>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00b      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3e      	ldr	r2, [pc, #248]	; (80046b0 <TIM_Base_SetConfig+0x124>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d007      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3d      	ldr	r2, [pc, #244]	; (80046b4 <TIM_Base_SetConfig+0x128>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d003      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a3c      	ldr	r2, [pc, #240]	; (80046b8 <TIM_Base_SetConfig+0x12c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d108      	bne.n	80045de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a31      	ldr	r2, [pc, #196]	; (80046a8 <TIM_Base_SetConfig+0x11c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01f      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ec:	d01b      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2e      	ldr	r2, [pc, #184]	; (80046ac <TIM_Base_SetConfig+0x120>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d017      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2d      	ldr	r2, [pc, #180]	; (80046b0 <TIM_Base_SetConfig+0x124>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a2c      	ldr	r2, [pc, #176]	; (80046b4 <TIM_Base_SetConfig+0x128>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00f      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a2c      	ldr	r2, [pc, #176]	; (80046bc <TIM_Base_SetConfig+0x130>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00b      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a2b      	ldr	r2, [pc, #172]	; (80046c0 <TIM_Base_SetConfig+0x134>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d007      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a2a      	ldr	r2, [pc, #168]	; (80046c4 <TIM_Base_SetConfig+0x138>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a25      	ldr	r2, [pc, #148]	; (80046b8 <TIM_Base_SetConfig+0x12c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d108      	bne.n	8004638 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <TIM_Base_SetConfig+0x11c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d013      	beq.n	800468c <TIM_Base_SetConfig+0x100>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <TIM_Base_SetConfig+0x128>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00f      	beq.n	800468c <TIM_Base_SetConfig+0x100>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a13      	ldr	r2, [pc, #76]	; (80046bc <TIM_Base_SetConfig+0x130>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00b      	beq.n	800468c <TIM_Base_SetConfig+0x100>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a12      	ldr	r2, [pc, #72]	; (80046c0 <TIM_Base_SetConfig+0x134>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <TIM_Base_SetConfig+0x100>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a11      	ldr	r2, [pc, #68]	; (80046c4 <TIM_Base_SetConfig+0x138>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_Base_SetConfig+0x100>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a0c      	ldr	r2, [pc, #48]	; (80046b8 <TIM_Base_SetConfig+0x12c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d103      	bne.n	8004694 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	615a      	str	r2, [r3, #20]
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40012c00 	.word	0x40012c00
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40000800 	.word	0x40000800
 80046b4:	40013400 	.word	0x40013400
 80046b8:	40015000 	.word	0x40015000
 80046bc:	40014000 	.word	0x40014000
 80046c0:	40014400 	.word	0x40014400
 80046c4:	40014800 	.word	0x40014800

080046c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f023 0201 	bic.w	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f023 030a 	bic.w	r3, r3, #10
 8004704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004726:	b480      	push	{r7}
 8004728:	b087      	sub	sp, #28
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f023 0210 	bic.w	r2, r3, #16
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	031b      	lsls	r3, r3, #12
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004762:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	621a      	str	r2, [r3, #32]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004786:	b480      	push	{r7}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f043 0307 	orr.w	r3, r3, #7
 80047a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	609a      	str	r2, [r3, #8]
}
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	021a      	lsls	r2, r3, #8
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	431a      	orrs	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	609a      	str	r2, [r3, #8]
}
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004810:	2302      	movs	r3, #2
 8004812:	e06d      	b.n	80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a30      	ldr	r2, [pc, #192]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2f      	ldr	r2, [pc, #188]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a2d      	ldr	r2, [pc, #180]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d108      	bne.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004858:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a1e      	ldr	r2, [pc, #120]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d01d      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004890:	d018      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d013      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1a      	ldr	r2, [pc, #104]	; (800490c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00e      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a15      	ldr	r2, [pc, #84]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d009      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a16      	ldr	r2, [pc, #88]	; (8004910 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d004      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a11      	ldr	r2, [pc, #68]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d10c      	bne.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40013400 	.word	0x40013400
 8004904:	40015000 	.word	0x40015000
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40014000 	.word	0x40014000

08004914 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e040      	b.n	80049a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fd f940 	bl	8001bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2224      	movs	r2, #36	; 0x24
 8004940:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8c0 	bl	8004ad8 <UART_SetConfig>
 8004958:	4603      	mov	r3, r0
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e022      	b.n	80049a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 face 	bl	8004f0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800497e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800498e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fb55 	bl	8005050 <UART_CheckIdleState>
 80049a6:	4603      	mov	r3, r0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	f040 8081 	bne.w	8004acc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_UART_Transmit+0x26>
 80049d0:	88fb      	ldrh	r3, [r7, #6]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e079      	b.n	8004ace <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_UART_Transmit+0x38>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e072      	b.n	8004ace <HAL_UART_Transmit+0x11e>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2221      	movs	r2, #33	; 0x21
 80049fa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80049fc:	f7fd f9e8 	bl	8001dd0 <HAL_GetTick>
 8004a00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	88fa      	ldrh	r2, [r7, #6]
 8004a06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	88fa      	ldrh	r2, [r7, #6]
 8004a0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1a:	d108      	bne.n	8004a2e <HAL_UART_Transmit+0x7e>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d104      	bne.n	8004a2e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	61bb      	str	r3, [r7, #24]
 8004a2c:	e003      	b.n	8004a36 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a36:	e02d      	b.n	8004a94 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2180      	movs	r1, #128	; 0x80
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fb49 	bl	80050da <UART_WaitOnFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e03d      	b.n	8004ace <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10b      	bne.n	8004a70 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	881a      	ldrh	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a64:	b292      	uxth	r2, r2
 8004a66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	3302      	adds	r3, #2
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e008      	b.n	8004a82 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	781a      	ldrb	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	b292      	uxth	r2, r2
 8004a7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1cb      	bne.n	8004a38 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2140      	movs	r1, #64	; 0x40
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 fb15 	bl	80050da <UART_WaitOnFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e009      	b.n	8004ace <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2220      	movs	r2, #32
 8004abe:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e000      	b.n	8004ace <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004acc:	2302      	movs	r3, #2
  }
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4bac      	ldr	r3, [pc, #688]	; (8004db8 <UART_SetConfig+0x2e0>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	6939      	ldr	r1, [r7, #16]
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a9a      	ldr	r2, [pc, #616]	; (8004dbc <UART_SetConfig+0x2e4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d121      	bne.n	8004b9c <UART_SetConfig+0xc4>
 8004b58:	4b99      	ldr	r3, [pc, #612]	; (8004dc0 <UART_SetConfig+0x2e8>)
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d817      	bhi.n	8004b94 <UART_SetConfig+0xbc>
 8004b64:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <UART_SetConfig+0x94>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004b7d 	.word	0x08004b7d
 8004b70:	08004b89 	.word	0x08004b89
 8004b74:	08004b8f 	.word	0x08004b8f
 8004b78:	08004b83 	.word	0x08004b83
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e0b2      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004b82:	2302      	movs	r3, #2
 8004b84:	77fb      	strb	r3, [r7, #31]
 8004b86:	e0af      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e0ac      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004b8e:	2308      	movs	r3, #8
 8004b90:	77fb      	strb	r3, [r7, #31]
 8004b92:	e0a9      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004b94:	2310      	movs	r3, #16
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	bf00      	nop
 8004b9a:	e0a5      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a88      	ldr	r2, [pc, #544]	; (8004dc4 <UART_SetConfig+0x2ec>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d123      	bne.n	8004bee <UART_SetConfig+0x116>
 8004ba6:	4b86      	ldr	r3, [pc, #536]	; (8004dc0 <UART_SetConfig+0x2e8>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb2:	d012      	beq.n	8004bda <UART_SetConfig+0x102>
 8004bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb8:	d802      	bhi.n	8004bc0 <UART_SetConfig+0xe8>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <UART_SetConfig+0xf6>
 8004bbe:	e012      	b.n	8004be6 <UART_SetConfig+0x10e>
 8004bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bc4:	d00c      	beq.n	8004be0 <UART_SetConfig+0x108>
 8004bc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bca:	d003      	beq.n	8004bd4 <UART_SetConfig+0xfc>
 8004bcc:	e00b      	b.n	8004be6 <UART_SetConfig+0x10e>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	77fb      	strb	r3, [r7, #31]
 8004bd2:	e089      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e086      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004bda:	2304      	movs	r3, #4
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e083      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004be0:	2308      	movs	r3, #8
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e080      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004be6:	2310      	movs	r3, #16
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	bf00      	nop
 8004bec:	e07c      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a75      	ldr	r2, [pc, #468]	; (8004dc8 <UART_SetConfig+0x2f0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d123      	bne.n	8004c40 <UART_SetConfig+0x168>
 8004bf8:	4b71      	ldr	r3, [pc, #452]	; (8004dc0 <UART_SetConfig+0x2e8>)
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c04:	d012      	beq.n	8004c2c <UART_SetConfig+0x154>
 8004c06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c0a:	d802      	bhi.n	8004c12 <UART_SetConfig+0x13a>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <UART_SetConfig+0x148>
 8004c10:	e012      	b.n	8004c38 <UART_SetConfig+0x160>
 8004c12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c16:	d00c      	beq.n	8004c32 <UART_SetConfig+0x15a>
 8004c18:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c1c:	d003      	beq.n	8004c26 <UART_SetConfig+0x14e>
 8004c1e:	e00b      	b.n	8004c38 <UART_SetConfig+0x160>
 8004c20:	2300      	movs	r3, #0
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e060      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c26:	2302      	movs	r3, #2
 8004c28:	77fb      	strb	r3, [r7, #31]
 8004c2a:	e05d      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	e05a      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c32:	2308      	movs	r3, #8
 8004c34:	77fb      	strb	r3, [r7, #31]
 8004c36:	e057      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	77fb      	strb	r3, [r7, #31]
 8004c3c:	bf00      	nop
 8004c3e:	e053      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a61      	ldr	r2, [pc, #388]	; (8004dcc <UART_SetConfig+0x2f4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d123      	bne.n	8004c92 <UART_SetConfig+0x1ba>
 8004c4a:	4b5d      	ldr	r3, [pc, #372]	; (8004dc0 <UART_SetConfig+0x2e8>)
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c56:	d012      	beq.n	8004c7e <UART_SetConfig+0x1a6>
 8004c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c5c:	d802      	bhi.n	8004c64 <UART_SetConfig+0x18c>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d007      	beq.n	8004c72 <UART_SetConfig+0x19a>
 8004c62:	e012      	b.n	8004c8a <UART_SetConfig+0x1b2>
 8004c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c68:	d00c      	beq.n	8004c84 <UART_SetConfig+0x1ac>
 8004c6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c6e:	d003      	beq.n	8004c78 <UART_SetConfig+0x1a0>
 8004c70:	e00b      	b.n	8004c8a <UART_SetConfig+0x1b2>
 8004c72:	2300      	movs	r3, #0
 8004c74:	77fb      	strb	r3, [r7, #31]
 8004c76:	e037      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	e034      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c7e:	2304      	movs	r3, #4
 8004c80:	77fb      	strb	r3, [r7, #31]
 8004c82:	e031      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c84:	2308      	movs	r3, #8
 8004c86:	77fb      	strb	r3, [r7, #31]
 8004c88:	e02e      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c8a:	2310      	movs	r3, #16
 8004c8c:	77fb      	strb	r3, [r7, #31]
 8004c8e:	bf00      	nop
 8004c90:	e02a      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a4e      	ldr	r2, [pc, #312]	; (8004dd0 <UART_SetConfig+0x2f8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d123      	bne.n	8004ce4 <UART_SetConfig+0x20c>
 8004c9c:	4b48      	ldr	r3, [pc, #288]	; (8004dc0 <UART_SetConfig+0x2e8>)
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca8:	d012      	beq.n	8004cd0 <UART_SetConfig+0x1f8>
 8004caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cae:	d802      	bhi.n	8004cb6 <UART_SetConfig+0x1de>
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <UART_SetConfig+0x1ec>
 8004cb4:	e012      	b.n	8004cdc <UART_SetConfig+0x204>
 8004cb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cba:	d00c      	beq.n	8004cd6 <UART_SetConfig+0x1fe>
 8004cbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cc0:	d003      	beq.n	8004cca <UART_SetConfig+0x1f2>
 8004cc2:	e00b      	b.n	8004cdc <UART_SetConfig+0x204>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e00e      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e00b      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e008      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	77fb      	strb	r3, [r7, #31]
 8004cda:	e005      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	bf00      	nop
 8004ce2:	e001      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf0:	f040 8090 	bne.w	8004e14 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004cf4:	7ffb      	ldrb	r3, [r7, #31]
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d86c      	bhi.n	8004dd4 <UART_SetConfig+0x2fc>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <UART_SetConfig+0x228>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d45 	.word	0x08004d45
 8004d08:	08004d65 	.word	0x08004d65
 8004d0c:	08004dd5 	.word	0x08004dd5
 8004d10:	08004d81 	.word	0x08004d81
 8004d14:	08004dd5 	.word	0x08004dd5
 8004d18:	08004dd5 	.word	0x08004dd5
 8004d1c:	08004dd5 	.word	0x08004dd5
 8004d20:	08004da1 	.word	0x08004da1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d24:	f7ff f8ec 	bl	8003f00 <HAL_RCC_GetPCLK1Freq>
 8004d28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	005a      	lsls	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	441a      	add	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	61bb      	str	r3, [r7, #24]
        break;
 8004d42:	e04a      	b.n	8004dda <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d44:	f7ff f8fe 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8004d48:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	005a      	lsls	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	085b      	lsrs	r3, r3, #1
 8004d54:	441a      	add	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	61bb      	str	r3, [r7, #24]
        break;
 8004d62:	e03a      	b.n	8004dda <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004d6e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6852      	ldr	r2, [r2, #4]
 8004d76:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	61bb      	str	r3, [r7, #24]
        break;
 8004d7e:	e02c      	b.n	8004dda <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d80:	f7ff f848 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8004d84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	005a      	lsls	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	441a      	add	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	61bb      	str	r3, [r7, #24]
        break;
 8004d9e:	e01c      	b.n	8004dda <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	61bb      	str	r3, [r7, #24]
        break;
 8004db6:	e010      	b.n	8004dda <UART_SetConfig+0x302>
 8004db8:	efff69f3 	.word	0xefff69f3
 8004dbc:	40013800 	.word	0x40013800
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40004400 	.word	0x40004400
 8004dc8:	40004800 	.word	0x40004800
 8004dcc:	40004c00 	.word	0x40004c00
 8004dd0:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	75fb      	strb	r3, [r7, #23]
        break;
 8004dd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b0f      	cmp	r3, #15
 8004dde:	d916      	bls.n	8004e0e <UART_SetConfig+0x336>
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de6:	d212      	bcs.n	8004e0e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f023 030f 	bic.w	r3, r3, #15
 8004df0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	085b      	lsrs	r3, r3, #1
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	897b      	ldrh	r3, [r7, #10]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	897a      	ldrh	r2, [r7, #10]
 8004e0a:	60da      	str	r2, [r3, #12]
 8004e0c:	e072      	b.n	8004ef4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	75fb      	strb	r3, [r7, #23]
 8004e12:	e06f      	b.n	8004ef4 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004e14:	7ffb      	ldrb	r3, [r7, #31]
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d85b      	bhi.n	8004ed2 <UART_SetConfig+0x3fa>
 8004e1a:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <UART_SetConfig+0x348>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004e45 	.word	0x08004e45
 8004e24:	08004e63 	.word	0x08004e63
 8004e28:	08004e81 	.word	0x08004e81
 8004e2c:	08004ed3 	.word	0x08004ed3
 8004e30:	08004e9d 	.word	0x08004e9d
 8004e34:	08004ed3 	.word	0x08004ed3
 8004e38:	08004ed3 	.word	0x08004ed3
 8004e3c:	08004ed3 	.word	0x08004ed3
 8004e40:	08004ebb 	.word	0x08004ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e44:	f7ff f85c 	bl	8003f00 <HAL_RCC_GetPCLK1Freq>
 8004e48:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	085a      	lsrs	r2, r3, #1
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	441a      	add	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	61bb      	str	r3, [r7, #24]
        break;
 8004e60:	e03a      	b.n	8004ed8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e62:	f7ff f86f 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8004e66:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	085a      	lsrs	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	441a      	add	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	61bb      	str	r3, [r7, #24]
        break;
 8004e7e:	e02b      	b.n	8004ed8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004e8a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6852      	ldr	r2, [r2, #4]
 8004e92:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	61bb      	str	r3, [r7, #24]
        break;
 8004e9a:	e01d      	b.n	8004ed8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e9c:	f7fe ffba 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8004ea0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	085a      	lsrs	r2, r3, #1
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	441a      	add	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	61bb      	str	r3, [r7, #24]
        break;
 8004eb8:	e00e      	b.n	8004ed8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	61bb      	str	r3, [r7, #24]
        break;
 8004ed0:	e002      	b.n	8004ed8 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	75fb      	strb	r3, [r7, #23]
        break;
 8004ed6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b0f      	cmp	r3, #15
 8004edc:	d908      	bls.n	8004ef0 <UART_SetConfig+0x418>
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee4:	d204      	bcs.n	8004ef0 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	60da      	str	r2, [r3, #12]
 8004eee:	e001      	b.n	8004ef4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3720      	adds	r7, #32
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop

08004f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01a      	beq.n	8005022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800500a:	d10a      	bne.n	8005022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	605a      	str	r2, [r3, #4]
  }
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af02      	add	r7, sp, #8
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800505e:	f7fc feb7 	bl	8001dd0 <HAL_GetTick>
 8005062:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b08      	cmp	r3, #8
 8005070:	d10e      	bne.n	8005090 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005072:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f82a 	bl	80050da <UART_WaitOnFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e020      	b.n	80050d2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d10e      	bne.n	80050bc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800509e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f814 	bl	80050da <UART_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e00a      	b.n	80050d2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	603b      	str	r3, [r7, #0]
 80050e6:	4613      	mov	r3, r2
 80050e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ea:	e05d      	b.n	80051a8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f2:	d059      	beq.n	80051a8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f4:	f7fc fe6c 	bl	8001dd0 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	429a      	cmp	r2, r3
 8005102:	d302      	bcc.n	800510a <UART_WaitOnFlagUntilTimeout+0x30>
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d11b      	bne.n	8005142 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005118:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2220      	movs	r2, #32
 800512e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e042      	b.n	80051c8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d02b      	beq.n	80051a8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800515a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515e:	d123      	bne.n	80051a8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005168:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005178:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e00f      	b.n	80051c8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69da      	ldr	r2, [r3, #28]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4013      	ands	r3, r2
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	bf0c      	ite	eq
 80051b8:	2301      	moveq	r3, #1
 80051ba:	2300      	movne	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d092      	beq.n	80050ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <__libc_init_array>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	4e0d      	ldr	r6, [pc, #52]	; (8005208 <__libc_init_array+0x38>)
 80051d4:	4c0d      	ldr	r4, [pc, #52]	; (800520c <__libc_init_array+0x3c>)
 80051d6:	1ba4      	subs	r4, r4, r6
 80051d8:	10a4      	asrs	r4, r4, #2
 80051da:	2500      	movs	r5, #0
 80051dc:	42a5      	cmp	r5, r4
 80051de:	d109      	bne.n	80051f4 <__libc_init_array+0x24>
 80051e0:	4e0b      	ldr	r6, [pc, #44]	; (8005210 <__libc_init_array+0x40>)
 80051e2:	4c0c      	ldr	r4, [pc, #48]	; (8005214 <__libc_init_array+0x44>)
 80051e4:	f000 f82c 	bl	8005240 <_init>
 80051e8:	1ba4      	subs	r4, r4, r6
 80051ea:	10a4      	asrs	r4, r4, #2
 80051ec:	2500      	movs	r5, #0
 80051ee:	42a5      	cmp	r5, r4
 80051f0:	d105      	bne.n	80051fe <__libc_init_array+0x2e>
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051f8:	4798      	blx	r3
 80051fa:	3501      	adds	r5, #1
 80051fc:	e7ee      	b.n	80051dc <__libc_init_array+0xc>
 80051fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005202:	4798      	blx	r3
 8005204:	3501      	adds	r5, #1
 8005206:	e7f2      	b.n	80051ee <__libc_init_array+0x1e>
 8005208:	08005290 	.word	0x08005290
 800520c:	08005290 	.word	0x08005290
 8005210:	08005290 	.word	0x08005290
 8005214:	08005294 	.word	0x08005294

08005218 <memcpy>:
 8005218:	b510      	push	{r4, lr}
 800521a:	1e43      	subs	r3, r0, #1
 800521c:	440a      	add	r2, r1
 800521e:	4291      	cmp	r1, r2
 8005220:	d100      	bne.n	8005224 <memcpy+0xc>
 8005222:	bd10      	pop	{r4, pc}
 8005224:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005228:	f803 4f01 	strb.w	r4, [r3, #1]!
 800522c:	e7f7      	b.n	800521e <memcpy+0x6>

0800522e <memset>:
 800522e:	4402      	add	r2, r0
 8005230:	4603      	mov	r3, r0
 8005232:	4293      	cmp	r3, r2
 8005234:	d100      	bne.n	8005238 <memset+0xa>
 8005236:	4770      	bx	lr
 8005238:	f803 1b01 	strb.w	r1, [r3], #1
 800523c:	e7f9      	b.n	8005232 <memset+0x4>
	...

08005240 <_init>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	bf00      	nop
 8005244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005246:	bc08      	pop	{r3}
 8005248:	469e      	mov	lr, r3
 800524a:	4770      	bx	lr

0800524c <_fini>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	bf00      	nop
 8005250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005252:	bc08      	pop	{r3}
 8005254:	469e      	mov	lr, r3
 8005256:	4770      	bx	lr
