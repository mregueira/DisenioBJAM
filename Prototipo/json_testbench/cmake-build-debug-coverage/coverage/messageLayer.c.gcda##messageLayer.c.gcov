        -:    0:Source:C:/Github_Repos/DisenioBJAM/Prototipo/json_testbench/Comeca/Messages/Send/Src/messageLayer.c
        -:    0:Graph:C:\Github_Repos\DisenioBJAM\Prototipo\json_testbench\cmake-build-debug-coverage\CMakeFiles\json_testbench.dir\Comeca\Messages\Send\Src\messageLayer.c.gcno
        -:    0:Data:C:\Github_Repos\DisenioBJAM\Prototipo\json_testbench\cmake-build-debug-coverage\CMakeFiles\json_testbench.dir\Comeca\Messages\Send\Src\messageLayer.c.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by joa-m on 11/1/2021.
        -:    3://
        -:    4:#include "../Inc/messageLayer.h"
        -:    5:
function sendCaliperMeasure called 2 returned 100% blocks executed 100%
        2:    6:message_t sendCaliperMeasure(char * str2send, digimatic_measure_t measure, caliper_number caliperNumber){
        2:    6-block  0
        2:    7:    int len = -1;
        2:    8:    if(measure.unit){
        2:    8-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:    9:        len = sprintf(str2send,
        1:    9-block  0
        1:   10:        		"{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoCalibre\", \"data\": {\"caliperNumber\": %d, \"measure\": %.5f, \"unit\": \"inches\"}}",caliperNumber, measure.number);
        -:   11:    } else {
        1:   12:        len = sprintf(str2send,
        1:   12-block  0
        1:   13:        		"{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoCalibre\", \"data\": {\"caliperNumber\": %d, \"measure\": %.5f, \"unit\": \"mm\"}}",caliperNumber, measure.number);
        -:   14:    }
        -:   15:    message_t msg2send;
        2:   16:    msg2send.msg = str2send;
        2:   17:    msg2send.len = len;
        2:   18:    return msg2send;
        2:   18-block  0
        -:   19:}
        -:   20:
function sendCaliperWarning called 1 returned 100% blocks executed 100%
        1:   21:message_t sendCaliperWarning(char * str2send, caliper_number caliperNumber){
        1:   21-block  0
        1:   22:    int len = sprintf(str2send,
        -:   23:    		"{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoCalibre\", \"data\": {\"caliperNumber\": %d, \"warning\": \"retryCaliperMeasure\"}}",caliperNumber);
        -:   24:
        -:   25:    message_t msg2send;
        1:   26:    msg2send.msg = str2send;
        1:   27:    msg2send.len = len;
        1:   28:    return msg2send;
        1:   28-block  0
        -:   29:}
        -:   30:
function sendIncrementPieceCount called 1 returned 100% blocks executed 100%
        1:   31:message_t sendIncrementPieceCount(char * str2send){
        1:   31-block  0
        1:   32:    int len = sprintf(str2send,
        -:   33:    		"{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"contarPieza\"}");
        -:   34:
        -:   35:    message_t msg2send;
        1:   36:    msg2send.msg = str2send;
        1:   37:    msg2send.len = len;
        1:   38:    return msg2send;
        1:   38-block  0
        -:   39:}
        -:   40:
function sendAnalogInMessage called 2 returned 100% blocks executed 100%
        2:   41:message_t sendAnalogInMessage(char * str2send, int inputNum, float receivedData, bool isValid){
        2:   41-block  0
        2:   42:    int len = -1;
        2:   43:    if(isValid){ // si es valido
        2:   43-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   44:        len = sprintf(str2send,
        1:   44-block  0
        -:   45:        		"{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoEntradaAnalogica\", \"data\": {\"inputNumber\": %d, \"measure\": %.5f}}",inputNum, receivedData);
        -:   46:
        -:   47:    }else{
        1:   48:        len = sprintf(str2send,
        1:   48-block  0
        -:   49:        		"{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoEntradaAnalogica\", \"data\": {\"inputNumber\": %d, \"warning\": \"retryAnalogIn\"}}", inputNum);
        -:   50:    }
        -:   51:    message_t msg2send;
        2:   52:    msg2send.msg = str2send;
        2:   53:    msg2send.len = len;
        2:   54:    return msg2send;
        2:   54-block  0
        -:   55:}
