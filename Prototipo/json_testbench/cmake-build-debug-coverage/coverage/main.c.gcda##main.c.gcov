        -:    0:Source:C:/Github_Repos/DisenioBJAM/Prototipo/json_testbench/main.c
        -:    0:Graph:C:\Github_Repos\DisenioBJAM\Prototipo\json_testbench\cmake-build-debug-coverage\CMakeFiles\json_testbench.dir\main.c.gcno
        -:    0:Data:C:\Github_Repos\DisenioBJAM\Prototipo\json_testbench\cmake-build-debug-coverage\CMakeFiles\json_testbench.dir\main.c.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include "Comeca/EthernetEvent/Inc/ethernet.h"
        -:    3:#include <assert.h>
        -:    4:#include <string.h>
        -:    5:#include "Comeca/Managers/Inc/caliperManager.h"
        -:    6:#include "Comeca/Managers/Inc/pieceCountManager.h"
        -:    7:#include "stdlib.h"
        -:    8:#include "Comeca/DigimaticProtocol/Inc/digimatic.h"
        -:    9:
function json_to_msg called 3 returned 100% blocks executed 100%
        3:   10:message_t json_to_msg(char * filename){
        3:   10-block  0
        3:   11:    FILE *f = fopen(filename, "rb");
        3:   11-block  0
call    0 returned 3
        3:   12:    fseek(f, 0, SEEK_END);
call    0 returned 3
        3:   13:    long fsize = ftell(f);
call    0 returned 3
        3:   14:    fseek(f, 0, SEEK_SET);  /* same as rewind(f); */
call    0 returned 3
        -:   15:
        3:   16:    char *string = malloc(fsize + 1);
        3:   17:    fread(string, 1, fsize, f);
call    0 returned 3
        3:   18:    fclose(f);
call    0 returned 3
        -:   19:
        3:   20:    string[fsize] = 0;
        -:   21:    message_t msg;
        3:   22:    msg.msg = string;
        3:   23:    msg.len = fsize;
        3:   24:    return msg;
        -:   25:}
        -:   26:
        -:   27:
function main called 1 returned 100% blocks executed 75%
        1:   28:int main() {
        1:   28-block  0
        -:   29:
        -:   30:    // Managers Testing
        -:   31:    //  -  Caliper Manager
        1:   32:    setValidCaliperMeasure(true);
        1:   32-block  0
call    0 returned 1
        -:   33:
        1:   34:    setDigimaticMeasure(1.23452, false);
call    0 returned 1
        1:   35:    caliperManager(3);
call    0 returned 1
        1:   36:    assert(strcmp(getTestBench(),
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   36-block  0
call    3 never executed
        -:   37:    "{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoCalibre\", \"data\": {\"caliperNumber\": 3, \"measure\": 1.23452, \"unit\": \"mm\"}}") == 0);
        -:   38:
        1:   39:    setDigimaticMeasure(-10.54355, true);
        1:   39-block  0
call    0 returned 1
        1:   40:    caliperManager(3);
call    0 returned 1
        1:   41:    assert(strcmp(getTestBench(), "{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoCalibre\", \"data\": {\"caliperNumber\": 3, \"measure\": -10.54355, \"unit\": \"inches\"}}") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   41-block  0
call    3 never executed
        -:   42:
        1:   43:    setValidCaliperMeasure(false);
        1:   43-block  0
call    0 returned 1
        -:   44:
        1:   45:    caliperManager(3);
call    0 returned 1
        1:   46:    assert(strcmp(getTestBench(), "{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoCalibre\", \"data\": {\"caliperNumber\": 3, \"warning\": \"retryCaliperMeasure\"}}") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   46-block  0
call    3 never executed
        -:   47:
        -:   48:    //  -  Piece Count Manager
        1:   49:    pieceCountManager();
        1:   49-block  0
call    0 returned 1
        1:   50:    assert(strcmp(getTestBench(), "{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"contarPieza\"}") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   50-block  0
call    3 never executed
        -:   51:
        -:   52:    //  - Analog In Manager
        1:   53:    char * filename = "C:\\Github_Repos\\DisenioBJAM\\Prototipo\\json_testbench\\jsons\\received\\analogIn.json";
        1:   54:    message_t msg = json_to_msg(filename);
        1:   54-block  0
call    0 returned 1
        1:   55:    setAdcMeasure(1000);
call    0 returned 1
        1:   56:    ETHonMessageReceived(msg); // calls analogInManager(msg);
call    0 returned 1
        1:   57:    assert(strcmp(getTestBench(), "{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoEntradaAnalogica\", \"data\": {\"inputNumber\": 2, \"measure\": 5.37109}}") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   57-block  0
call    3 never executed
        -:   58:
        1:   59:    setAdcMeasure(200);
        1:   59-block  0
call    0 returned 1
        1:   60:    ETHonMessageReceived(msg); // calls analogInManager(msg);
call    0 returned 1
        1:   61:    assert(strcmp(getTestBench(), "{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoEntradaAnalogica\", \"data\": {\"inputNumber\": 2, \"warning\": \"retryAnalogIn\"}}") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   61-block  0
call    3 never executed
        -:   62:
        1:   63:    setAdcMeasure(10000);
        1:   63-block  0
call    0 returned 1
        1:   64:    ETHonMessageReceived(msg); // calls analogInManager(msg);
call    0 returned 1
        1:   65:    assert(strcmp(getTestBench(), "{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoEntradaAnalogica\", \"data\": {\"inputNumber\": 2, \"warning\": \"retryAnalogIn\"}}") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   65-block  0
call    3 never executed
        -:   66:
        -:   67:
        -:   68:    //  - Digital Out Manager
        -:   69:
        1:   70:    filename = "C:\\Github_Repos\\DisenioBJAM\\Prototipo\\json_testbench\\jsons\\received\\digitalOut1.json";
        -:   71:
        1:   72:    msg = json_to_msg(filename);
        1:   72-block  0
call    0 returned 1
        1:   73:    ETHonMessageReceived(msg); // calls digitalOutManager(msg);
call    0 returned 1
        1:   74:    assert(strcmp(getTestBench(), "ON->2") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   74-block  0
call    3 never executed
        -:   75:
        1:   76:    filename = "C:\\Github_Repos\\DisenioBJAM\\Prototipo\\json_testbench\\jsons\\received\\digitalOut2.json";
        1:   77:    msg = json_to_msg(filename);
        1:   77-block  0
call    0 returned 1
        1:   78:    ETHonMessageReceived(msg); // calls digitalOutManager(msg);
call    0 returned 1
        1:   79:    assert(strcmp(getTestBench(), "OFF->1") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   79-block  0
call    3 never executed
        -:   80:
        -:   81:    // -  Digimatic testing
        -:   82:
        1:   83:    uint8_t digFrames[13] = {
        -:   84://  "ALL F"
        -:   85:            15,
        -:   86:            15,
        -:   87:            15,
        -:   88:            15,
        -:   89:// sign +
        -:   90:            0,
        -:   91:// digits
        -:   92:            1,
        -:   93:            2,
        -:   94:            0,
        -:   95:            0,
        -:   96:            0,
        -:   97:            0,
        -:   98:// decimal point
        -:   99:            2,
        -:  100:            0
        -:  101:    };
        -:  102:
        -:  103:// valid positive
        1:  104:    assert(validCaliperMeasure(digFrames));
        1:  104-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  104-block  1
call    3 never executed
        1:  105:    digimatic_measure_t measure = digimaticMeasure(digFrames);
        1:  105-block  0
call    0 returned 1
        1:  106:    printf("%f", measure.number);
call    0 returned 1
        1:  107:    assert(measure.number == 1200.000000);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:  107-block  0
call    2 never executed
        1:  108:    assert(measure.unit == 0);
        1:  108-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:  108-block  1
call    2 never executed
        -:  109:
        -:  110:// valid negative and inches
        1:  111:    digFrames[4] = 8;
        1:  112:    digFrames[12] = 1;
        1:  113:    assert(validCaliperMeasure(digFrames));
        1:  113-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  113-block  1
call    3 never executed
        1:  114:    measure = digimaticMeasure(digFrames);
        1:  114-block  0
call    0 returned 1
        1:  115:    printf("%f", measure.number);
call    0 returned 1
        1:  116:    assert(measure.number == -1200.000000);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:  116-block  0
call    2 never executed
        1:  117:    assert(measure.unit == 1);
        1:  117-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:  117-block  1
call    2 never executed
        -:  118:
        -:  119:// invalid -> the first frame is not 15 (1111)
        1:  120:    digFrames[0] = 0;
        1:  121:    assert(!validCaliperMeasure(digFrames));
        1:  121-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  121-block  1
call    3 never executed
        1:  122:    digFrames[0] = 15;
        -:  123:// invalid -> sign is not 0 or 8
        1:  124:    digFrames[4] = 1;
        1:  125:    assert(!validCaliperMeasure(digFrames));
        1:  125-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  125-block  1
call    3 never executed
        1:  126:    digFrames[4] = 0;
        -:  127://    invalid -> digit greater than 9
        1:  128:    digFrames[5] = 11;
        1:  129:    assert(!validCaliperMeasure(digFrames));
        1:  129-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  129-block  1
call    3 never executed
        1:  130:    digFrames[5] = 0;
        -:  131://    invalid -> decimal point greater than 6
        1:  132:    digFrames[11] = 6;
        1:  133:    assert(!validCaliperMeasure(digFrames));
        1:  133-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  133-block  1
call    3 never executed
        1:  134:    digFrames[11] = 2;
        -:  135://    invalid -> unit not 0 or 1
        1:  136:    digFrames[12] = 6;
        1:  137:    assert(!validCaliperMeasure(digFrames));
        1:  137-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  137-block  1
call    3 never executed
        1:  137-block  2
        -:  138:
        -:  139:
        -:  140:
        -:  141:}
