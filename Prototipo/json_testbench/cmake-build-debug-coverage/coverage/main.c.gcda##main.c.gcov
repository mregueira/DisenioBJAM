        -:    0:Source:C:/Github_Repos/DisenioBJAM/Prototipo/json_testbench/main.c
        -:    0:Graph:C:\Github_Repos\DisenioBJAM\Prototipo\json_testbench\cmake-build-debug-coverage\CMakeFiles\json_testbench.dir\main.c.gcno
        -:    0:Data:C:\Github_Repos\DisenioBJAM\Prototipo\json_testbench\cmake-build-debug-coverage\CMakeFiles\json_testbench.dir\main.c.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include "Comeca/EthernetEvent/Inc/ethernet.h"
        -:    3:#include <assert.h>
        -:    4:#include <string.h>
        -:    5:#include "Comeca/Managers/Inc/caliperManager.h"
        -:    6:#include "Comeca/Managers/Inc/pieceCountManager.h"
        -:    7:#include "stdlib.h"
        -:    8:
function json_to_msg called 3 returned 100% blocks executed 100%
        3:    9:message_t json_to_msg(char * filename){
        3:    9-block  0
        3:   10:    FILE *f = fopen(filename, "rb");
        3:   10-block  0
call    0 returned 3
        3:   11:    fseek(f, 0, SEEK_END);
call    0 returned 3
        3:   12:    long fsize = ftell(f);
call    0 returned 3
        3:   13:    fseek(f, 0, SEEK_SET);  /* same as rewind(f); */
call    0 returned 3
        -:   14:
        3:   15:    char *string = malloc(fsize + 1);
        3:   16:    fread(string, 1, fsize, f);
call    0 returned 3
        3:   17:    fclose(f);
call    0 returned 3
        -:   18:
        3:   19:    string[fsize] = 0;
        -:   20:    message_t msg;
        3:   21:    msg.msg = string;
        3:   22:    msg.len = fsize;
        3:   23:    return msg;
        -:   24:}
        -:   25:
        -:   26:
function main called 1 returned 100% blocks executed 81%
        1:   27:int main() {
        1:   27-block  0
        -:   28:
        -:   29:    // Managers Testing
        -:   30:    //  -  Caliper Manager
        1:   31:    setValidCaliperMeasure(true);
        1:   31-block  0
call    0 returned 1
        -:   32:
        1:   33:    setDigimaticMeasure(1.23452, false);
call    0 returned 1
        1:   34:    caliperManager(3);
call    0 returned 1
        1:   35:    assert(strcmp(getTestBench(), "{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoCalibre\", \"data\": {\"caliperNumber\": 3, \"measure\": 1.23452, \"unit\": \"mm\"}}") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   35-block  0
call    3 never executed
        -:   36:
        1:   37:    setDigimaticMeasure(-10.54355, true);
        1:   37-block  0
call    0 returned 1
        1:   38:    caliperManager(3);
call    0 returned 1
        1:   39:    assert(strcmp(getTestBench(), "{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoCalibre\", \"data\": {\"caliperNumber\": 3, \"measure\": -10.54355, \"unit\": \"inches\"}}") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   39-block  0
call    3 never executed
        -:   40:
        1:   41:    setValidCaliperMeasure(false);
        1:   41-block  0
call    0 returned 1
        -:   42:
        1:   43:    caliperManager(3);
call    0 returned 1
        1:   44:    assert(strcmp(getTestBench(), "{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoCalibre\", \"data\": {\"caliperNumber\": 3, \"warning\": \"retryCaliperMeasure\"}}") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   44-block  0
call    3 never executed
        -:   45:
        -:   46:    //  -  Piece Count Manager
        1:   47:    pieceCountManager();
        1:   47-block  0
call    0 returned 1
        1:   48:    assert(strcmp(getTestBench(), "{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"contarPieza\"}") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   48-block  0
call    3 never executed
        -:   49:
        -:   50:    //  - Analog In Manager
        1:   51:    char * filename = "C:\\Github_Repos\\DisenioBJAM\\Prototipo\\json_testbench\\jsons\\received\\analogIn.json";
        1:   52:    message_t msg = json_to_msg(filename);
        1:   52-block  0
call    0 returned 1
        1:   53:    setAdcMeasure(1000);
call    0 returned 1
        1:   54:    ETHonMessageReceived(msg); // calls analogInManager(msg);
call    0 returned 1
        1:   55:    assert(strcmp(getTestBench(), "{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoEntradaAnalogica\", \"data\": {\"inputNumber\": 2, \"measure\": 5.37109}}") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   55-block  0
call    3 never executed
        -:   56:
        1:   57:    setAdcMeasure(200);
        1:   57-block  0
call    0 returned 1
        1:   58:    ETHonMessageReceived(msg); // calls analogInManager(msg);
call    0 returned 1
        1:   59:    assert(strcmp(getTestBench(), "{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoEntradaAnalogica\", \"data\": {\"inputNumber\": 2, \"warning\": \"retryAnalogIn\"}}") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   59-block  0
call    3 never executed
        -:   60:
        1:   61:    setAdcMeasure(10000);
        1:   61-block  0
call    0 returned 1
        1:   62:    ETHonMessageReceived(msg); // calls analogInManager(msg);
call    0 returned 1
        1:   63:    assert(strcmp(getTestBench(), "{\"version\": \"0.0\", \"sequence\": 0, \"command\": \"request\",  \"action\": \"guardarDatoEntradaAnalogica\", \"data\": {\"inputNumber\": 2, \"warning\": \"retryAnalogIn\"}}") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   63-block  0
call    3 never executed
        -:   64:
        -:   65:
        -:   66:    //  - Digital Out Manager
        -:   67:
        1:   68:    filename = "C:\\Github_Repos\\DisenioBJAM\\Prototipo\\json_testbench\\jsons\\received\\digitalOut1.json";
        -:   69:
        1:   70:    msg = json_to_msg(filename);
        1:   70-block  0
call    0 returned 1
        1:   71:    ETHonMessageReceived(msg); // calls digitalOutManager(msg);
call    0 returned 1
        1:   72:    assert(strcmp(getTestBench(), "ON->2") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   72-block  0
call    3 never executed
        -:   73:
        1:   74:    filename = "C:\\Github_Repos\\DisenioBJAM\\Prototipo\\json_testbench\\jsons\\received\\digitalOut2.json";
        1:   75:    msg = json_to_msg(filename);
        1:   75-block  0
call    0 returned 1
        1:   76:    ETHonMessageReceived(msg); // calls digitalOutManager(msg);
call    0 returned 1
        1:   77:    assert(strcmp(getTestBench(), "OFF->1") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   77-block  0
call    3 never executed
        1:   77-block  1
        -:   78:}
